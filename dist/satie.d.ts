// Generated by dts-bundle v0.2.0

declare module 'satie' {
    export import MusicXML = require("__satie/satie/__/musicxml-interfaces");
    import C = require("__satie/stores/contracts");
    export function init(options: ISatieOptions): void;
    export interface ISatieOptions {
        bravuraURL?: string;
        useGoogleFonts?: boolean;
    }
    export var MusicXMLView: React.ComponentClass<ISatieProps>;
    export interface ISatieProps {
        musicXML: C.MusicXML.ScoreTimewise;
        width: number;
        height: number;
    }
}

// Generated by dts-bundle v0.2.0

declare module '__satie/satie/__/musicxml-interfaces' {
    export interface AccOrText {
        acc?: AccidentalText;
        text?: DisplayText;
    }
    export interface TextArray extends Array<AccOrText> {
    }
    export interface EncodingDate extends CalendarDate {
    }
    export function parseXML(musicxmlBuffer: string): ScoreTimewise;
    export function getString(ch: Node, required: boolean): string;
    export function getNumber(ch: Node, required: boolean): number;
    export function xmlToTextArray(node: Node): TextArray;
    export function toCamelCase(input: string): string;
    export function xmlToEncodingDate(node: Node): CalendarDate;
    export function xmlToMeasure(node: Node): Measure;
    export function xmlToYesNo(p: Node, required?: boolean): boolean;
    export function xmlToNoteheadText(p: Node): NoteheadText;
    export function xmlToPartNameDisplay(p: Node): PartNameDisplay;
    export function xmlToPartAbbreviationDisplay(p: Node): PartAbbreviationDisplay;
    export function xmlToLyric(node: Node): Lyric;
    export interface Mode extends String {
    }
    export function xmlToMode(node: Node): Mode;
    export interface OtherAppearance extends String {
    }
    export function xmlToOtherAppearance(node: Node): OtherAppearance;
    export interface TuningStep extends String {
    }
    export function xmlToTuningStep(node: Node): TuningStep;
    export interface OtherDynamics extends String {
    }
    export function xmlToOtherDynamics(node: Node): OtherDynamics;
    export interface Voice extends String {
    }
    export function xmlToVoice(node: Node): Voice;
    export interface NormalType extends String {
    }
    export function xmlToNormalType(node: Node): NormalType;
    export interface Software extends String {
    }
    export function xmlToSoftware(node: Node): Software;
    export interface EncodingDescription extends String {
    }
    export function xmlToEncodingDescription(node: Node): EncodingDescription;
    export interface KeyStep extends String {
    }
    export function xmlToKeyStep(node: Node): KeyStep;
    export interface KeyAlter extends String {
    }
    export function xmlToKeyAlter(node: Node): KeyAlter;
    export interface KeyAccidental extends String {
    }
    export function xmlToKeyAccidental(node: Node): KeyAccidental;
    export interface Beats extends String {
    }
    export function xmlToBeats(node: Node): Beats;
    export interface BeatType extends String {
    }
    export function xmlToBeatType(node: Node): BeatType;
    export interface TimeRelation extends String {
    }
    export function xmlToTimeRelation(node: Node): TimeRelation;
    export interface SenzaMisura extends String {
    }
    export function xmlToSenzaMisura(node: Node): SenzaMisura;
    export interface Instruments extends String {
    }
    export function xmlToInstruments(node: Node): Instruments;
    export interface Sign extends String {
    }
    export function xmlToSign(node: Node): Sign;
    export interface ClefOctaveChange extends String {
    }
    export function xmlToClefOctaveChange(node: Node): ClefOctaveChange;
    export interface StaffType extends String {
    }
    export function xmlToStaffType(node: Node): StaffType;
    export interface Capo extends String {
    }
    export function xmlToCapo(node: Node): Capo;
    export interface Diatonic extends String {
    }
    export function xmlToDiatonic(node: Node): Diatonic;
    export interface Chromatic extends String {
    }
    export function xmlToChromatic(node: Node): Chromatic;
    export interface OctaveChange extends String {
    }
    export function xmlToOctaveChange(node: Node): OctaveChange;
    export interface SlashType extends String {
    }
    export function xmlToSlashType(node: Node): SlashType;
    export interface DisplayStep extends String {
    }
    export function xmlToDisplayStep(node: Node): DisplayStep;
    export interface DisplayOctave extends String {
    }
    export function xmlToDisplayOctave(node: Node): DisplayOctave;
    export interface BendAlter extends String {
    }
    export function xmlToBendAlter(node: Node): BendAlter;
    export interface HoleType extends String {
    }
    export function xmlToHoleType(node: Node): HoleType;
    export interface HoleShape extends String {
    }
    export function xmlToHoleShape(node: Node): HoleShape;
    export interface ArrowDirection extends String {
    }
    export function xmlToArrowDirection(node: Node): ArrowDirection;
    export interface ArrowStyle extends String {
    }
    export function xmlToArrowStyle(node: Node): ArrowStyle;
    export interface CircularArrow extends String {
    }
    export function xmlToCircularArrow(node: Node): CircularArrow;
    export interface BeatUnit extends String {
    }
    export function xmlToBeatUnit(node: Node): BeatUnit;
    export interface MetronomeRelation extends String {
    }
    export function xmlToMetronomeRelation(node: Node): MetronomeRelation;
    export interface MetronomeType extends String {
    }
    export function xmlToMetronomeType(node: Node): MetronomeType;
    export interface PedalStep extends String {
    }
    export function xmlToPedalStep(node: Node): PedalStep;
    export interface PedalAlter extends String {
    }
    export function xmlToPedalAlter(node: Node): PedalAlter;
    export interface AccordionMiddle extends String {
    }
    export function xmlToAccordionMiddle(node: Node): AccordionMiddle;
    export interface Glass extends String {
    }
    export function xmlToGlass(node: Node): Glass;
    export interface Metal extends String {
    }
    export function xmlToMetal(node: Node): Metal;
    export interface Wood extends String {
    }
    export function xmlToWood(node: Node): Wood;
    export interface Pitched extends String {
    }
    export function xmlToPitched(node: Node): Pitched;
    export interface Membrane extends String {
    }
    export function xmlToMembrane(node: Node): Membrane;
    export interface Effect extends String {
    }
    export function xmlToEffect(node: Node): Effect;
    export interface StickType extends String {
    }
    export function xmlToStickType(node: Node): StickType;
    export interface StickMaterial extends String {
    }
    export function xmlToStickMaterial(node: Node): StickMaterial;
    export interface StickLocation extends String {
    }
    export function xmlToStickLocation(node: Node): StickLocation;
    export interface OtherPercussion extends String {
    }
    export function xmlToOtherPercussion(node: Node): OtherPercussion;
    export interface FrameStrings extends String {
    }
    export function xmlToFrameStrings(node: Node): FrameStrings;
    export interface FrameFrets extends String {
    }
    export function xmlToFrameFrets(node: Node): FrameFrets;
    export interface WorkNumber extends String {
    }
    export function xmlToWorkNumber(node: Node): WorkNumber;
    export interface WorkTitle extends String {
    }
    export function xmlToWorkTitle(node: Node): WorkTitle;
    export interface MovementNumber extends String {
    }
    export function xmlToMovementNumber(node: Node): MovementNumber;
    export interface MovementTitle extends String {
    }
    export function xmlToMovementTitle(node: Node): MovementTitle;
    export interface CreditType extends String {
    }
    export function xmlToCreditType(node: Node): CreditType;
    export interface Group extends String {
    }
    export function xmlToGroup(node: Node): Group;
    export interface InstrumentName extends String {
    }
    export function xmlToInstrumentName(node: Node): InstrumentName;
    export interface InstrumentAbbreviation extends String {
    }
    export function xmlToInstrumentAbbreviation(node: Node): InstrumentAbbreviation;
    export interface InstrumentSound extends String {
    }
    export function xmlToInstrumentSound(node: Node): InstrumentSound;
    export interface Ensemble extends String {
    }
    export function xmlToEnsemble(node: Node): Ensemble;
    export interface VirtualLibrary extends String {
    }
    export function xmlToVirtualLibrary(node: Node): VirtualLibrary;
    export interface VirtualName extends String {
    }
    export function xmlToVirtualName(node: Node): VirtualName;
    export interface CalendarDate {
        month: number;
        day: number;
        year: number;
    }
    export interface CalendarDateComplete {
        month: number;
        day: number;
        year: number;
    }
    export interface Tenths extends String {
    }
    export function xmlToTenths(node: Node): Tenths;
    export interface LayoutTenths extends String {
    }
    export function xmlToLayoutTenths(node: Node): LayoutTenths;
    export enum StartStop {
        Start = 0,
        Stop = 1,
    }
    export function getStartStop(node: Node, fallbackVal?: StartStop): StartStop;
    export enum StartStopContinue {
        Start = 0,
        Stop = 1,
        Continue = 2,
    }
    export function getStartStopContinue(node: Node, fallbackVal?: StartStopContinue): StartStopContinue;
    export enum StartStopSingle {
        Single = 3,
        Start = 0,
        Stop = 1,
    }
    export function getStartStopSingle(node: Node, fallbackVal?: StartStopSingle): StartStopSingle;
    export interface YesNoNumber {
        yesNo: boolean;
        isYesNo: boolean;
        num: number;
    }
    export interface YesNoNumberComplete {
        yesNo: boolean;
        isYesNo: boolean;
        num: number;
    }
    export enum SymbolSize {
        Unspecified = 0,
        Full = 1,
        Cue = 2,
        Large = 3,
    }
    export function getSymbolSize(node: Node, fallbackVal?: SymbolSize): SymbolSize;
    export enum AboveBelow {
        Above = 1,
        Below = 2,
        Unspecified = 0,
    }
    export function getAboveBelow(node: Node, fallbackVal?: AboveBelow): AboveBelow;
    export enum OverUnder {
        Over = 1,
        Under = 2,
        Unspecified = 0,
    }
    export function getOverUnder(node: Node, fallbackVal?: OverUnder): OverUnder;
    export enum UpDown {
        Down = 1,
        Up = 0,
    }
    export function getUpDown(node: Node, fallbackVal?: UpDown): UpDown;
    export enum TopBottom {
        Top = 0,
        Bottom = 1,
    }
    export function getTopBottom(node: Node, fallbackVal?: TopBottom): TopBottom;
    export enum LeftRight {
        Right = 1,
        Left = 0,
    }
    export function getLeftRight(node: Node, fallbackVal?: LeftRight): LeftRight;
    export function verifyNumberOfLines(m: number): void;
    export function xmlToNumberOfLines(node: Node): number;
    export function verifyRotation(m: number): void;
    export function xmlToRotation(node: Node): number;
    export enum EnclosureShape {
        Circle = 3,
        Bracket = 4,
        Triangle = 5,
        Diamond = 6,
        None = 7,
        Square = 1,
        Oval = 2,
        Rectangle = 0,
    }
    export function getEnclosureShape(node: Node, fallbackVal?: EnclosureShape): EnclosureShape;
    export enum NormalItalic {
        Italic = 1,
        Normal = 0,
    }
    export function getNormalItalic(node: Node, fallbackVal?: NormalItalic): NormalItalic;
    export enum NormalBold {
        Bold = 2,
        Normal = 0,
    }
    export function getNormalBold(node: Node, fallbackVal?: NormalBold): NormalBold;
    export function verifyNumberLevel(m: number): void;
    export function xmlToNumberLevel(node: Node): number;
    export function verifyBeamLevel(m: number): void;
    export function xmlToBeamLevel(node: Node): number;
    export interface Position {
        defaultX?: number;
        relativeY?: number;
        defaultY?: number;
        relativeX?: number;
    }
    export interface PositionComplete {
        defaultX: number;
        relativeY: number;
        defaultY: number;
        relativeX: number;
    }
    export function xmlToPosition(node: Node): Position;
    export interface Placement {
        placement?: AboveBelow;
    }
    export interface PlacementComplete {
        placement: AboveBelow;
    }
    export function xmlToPlacement(node: Node): Placement;
    export interface Orientation {
        orientation?: OverUnder;
    }
    export interface OrientationComplete {
        orientation: OverUnder;
    }
    export function xmlToOrientation(node: Node): Orientation;
    export interface DirectiveEntity {
        directiveEntity?: boolean;
    }
    export interface DirectiveEntityComplete {
        directiveEntity: boolean;
    }
    export function xmlToDirectiveEntity(node: Node): DirectiveEntity;
    export interface Bezier {
        bezierX2?: number;
        bezierOffset?: number;
        bezierOffset2?: number;
        bezierX?: number;
        bezierY?: number;
        bezierY2?: number;
    }
    export interface BezierComplete {
        bezierX2: number;
        bezierOffset: number;
        bezierOffset2: number;
        bezierX: number;
        bezierY: number;
        bezierY2: number;
    }
    export function xmlToBezier(node: Node): Bezier;
    export interface Font {
        fontFamily?: string;
        fontWeight?: NormalBold;
        fontStyle?: NormalItalic;
        fontSize?: string;
    }
    export interface FontComplete {
        fontFamily: string;
        fontWeight: NormalBold;
        fontStyle: NormalItalic;
        fontSize: string;
    }
    export function xmlToFont(node: Node): Font;
    export enum LeftCenterRight {
        Right = 1,
        Center = 2,
        Left = 0,
    }
    export function getLeftCenterRight(node: Node, fallbackVal?: LeftCenterRight): LeftCenterRight;
    export enum TopMiddleBottomBaseline {
        Top = 0,
        Middle = 1,
        Baseline = 3,
        Bottom = 2,
    }
    export function getTopMiddleBottomBaseline(node: Node, fallbackVal?: TopMiddleBottomBaseline): TopMiddleBottomBaseline;
    export enum DirectionMode {
        Lro = 2,
        Rlo = 3,
        Ltr = 0,
        Rtl = 1,
    }
    export function getDirectionMode(node: Node, fallbackVal?: DirectionMode): DirectionMode;
    export enum StraightCurved {
        Curved = 1,
        Straight = 0,
    }
    export function getStraightCurved(node: Node, fallbackVal?: StraightCurved): StraightCurved;
    export enum SolidDashedDottedWavy {
        Dashed = 1,
        Wavy = 3,
        Dotted = 2,
        Solid = 0,
    }
    export function getSolidDashedDottedWavy(node: Node, fallbackVal?: SolidDashedDottedWavy): SolidDashedDottedWavy;
    export enum NormalAngledSquare {
        Angled = 1,
        Square = 2,
        Normal = 0,
    }
    export function getNormalAngledSquare(node: Node, fallbackVal?: NormalAngledSquare): NormalAngledSquare;
    export enum UprightInverted {
        Upright = 0,
        Inverted = 1,
    }
    export function getUprightInverted(node: Node, fallbackVal?: UprightInverted): UprightInverted;
    export enum UpperMainBelow {
        Main = 1,
        Below = 2,
        Upper = 0,
    }
    export function getUpperMainBelow(node: Node, fallbackVal?: UpperMainBelow): UpperMainBelow;
    export enum WholeHalfUnison {
        Unison = 2,
        Whole = 0,
        Half = 1,
    }
    export function getWholeHalfUnison(node: Node, fallbackVal?: WholeHalfUnison): WholeHalfUnison;
    export enum WholeHalfNone {
        None = 3,
        Whole = 0,
        Half = 1,
    }
    export function getWholeHalfNone(node: Node, fallbackVal?: WholeHalfNone): WholeHalfNone;
    export interface Color {
        color?: string;
    }
    export interface ColorComplete {
        color: string;
    }
    export function xmlToColor(node: Node): Color;
    export interface TextDecoration {
        underline?: number;
        overline?: number;
        lineThrough?: number;
    }
    export interface TextDecorationComplete {
        underline: number;
        overline: number;
        lineThrough: number;
    }
    export function xmlToTextDecoration(node: Node): TextDecoration;
    export interface Justify {
        justify?: LeftCenterRight;
    }
    export interface JustifyComplete {
        justify: LeftCenterRight;
    }
    export function xmlToJustify(node: Node): Justify;
    export interface Halign {
        halign?: LeftCenterRight;
    }
    export interface HalignComplete {
        halign: LeftCenterRight;
    }
    export function xmlToHalign(node: Node): Halign;
    export interface Valign {
        valign?: TopMiddleBottomBaseline;
    }
    export interface ValignComplete {
        valign: TopMiddleBottomBaseline;
    }
    export function xmlToValign(node: Node): Valign;
    export interface ValignImage {
        valignImage?: TopMiddleBottomBaseline;
    }
    export interface ValignImageComplete {
        valignImage: TopMiddleBottomBaseline;
    }
    export function xmlToValignImage(node: Node): ValignImage;
    export interface LetterSpacing {
        letterSpacing?: string;
    }
    export interface LetterSpacingComplete {
        letterSpacing: string;
    }
    export function xmlToLetterSpacing(node: Node): LetterSpacing;
    export interface LineHeight {
        lineHeight?: string;
    }
    export interface LineHeightComplete {
        lineHeight: string;
    }
    export function xmlToLineHeight(node: Node): LineHeight;
    export interface TextDirection {
        dir?: DirectionMode;
    }
    export interface TextDirectionComplete {
        dir: DirectionMode;
    }
    export function xmlToTextDirection(node: Node): TextDirection;
    export interface TextRotation {
        rotation?: number;
    }
    export interface TextRotationComplete {
        rotation: number;
    }
    export function xmlToTextRotation(node: Node): TextRotation;
    export interface Enclosure {
        enclosure?: EnclosureShape;
    }
    export interface EnclosureComplete {
        enclosure: EnclosureShape;
    }
    export function xmlToEnclosure(node: Node): Enclosure;
    export interface PrintStyle extends Position, Font, Color {
    }
    export interface PrintStyleComplete extends PositionComplete, FontComplete, ColorComplete {
    }
    export function xmlToPrintStyle(node: Node): PrintStyle;
    export interface PrintStyleAlign extends PrintStyle, Halign, Valign {
    }
    export interface PrintStyleAlignComplete extends PrintStyleComplete, HalignComplete, ValignComplete {
    }
    export function xmlToPrintStyleAlign(node: Node): PrintStyleAlign;
    export interface LineShape {
        lineShape?: StraightCurved;
    }
    export interface LineShapeComplete {
        lineShape: StraightCurved;
    }
    export function xmlToLineShape(node: Node): LineShape;
    export interface LineType {
        lineType?: SolidDashedDottedWavy;
    }
    export interface LineTypeComplete {
        lineType: SolidDashedDottedWavy;
    }
    export interface DashedFormatting {
        dashLength?: number;
        spaceLength?: number;
    }
    export interface DashedFormattingComplete {
        dashLength: number;
        spaceLength: number;
    }
    export function xmlToDashedFormatting(node: Node): DashedFormatting;
    export interface PrintObject {
        printObject?: boolean;
    }
    export interface PrintObjectComplete {
        printObject: boolean;
    }
    export function xmlToPrintObject(node: Node): PrintObject;
    export interface PrintSpacing {
        printSpacing?: boolean;
    }
    export interface PrintSpacingComplete {
        printSpacing: boolean;
    }
    export function xmlToPrintSpacing(node: Node): PrintSpacing;
    export interface Printout extends PrintObject, PrintSpacing {
        printDot?: boolean;
        printLyric?: boolean;
    }
    export interface PrintoutComplete extends PrintObjectComplete, PrintSpacingComplete {
        printDot: boolean;
        printLyric: boolean;
    }
    export interface TextFormatting extends Justify, PrintStyleAlign, TextDecoration, TextRotation, LetterSpacing, LineHeight, TextDirection, Enclosure {
    }
    export interface TextFormattingComplete extends JustifyComplete, PrintStyleAlignComplete, TextDecorationComplete, TextRotationComplete, LetterSpacingComplete, LineHeightComplete, TextDirectionComplete, EnclosureComplete {
    }
    export function xmlToTextFormatting(node: Node): TextFormatting;
    export interface LevelDisplay {
        bracket?: boolean;
        size?: SymbolSize;
        parentheses?: boolean;
    }
    export interface LevelDisplayComplete {
        bracket: boolean;
        size: SymbolSize;
        parentheses: boolean;
    }
    export function xmlToLevelDisplay(node: Node): LevelDisplay;
    export interface TrillSound {
        startNote?: UpperMainBelow;
        accelerate?: boolean;
        beats?: number;
        lastBeat?: number;
        trillStep?: WholeHalfUnison;
        twoNoteTurn?: WholeHalfNone;
        secondBeat?: number;
    }
    export interface TrillSoundComplete {
        startNote: UpperMainBelow;
        accelerate: boolean;
        beats: number;
        lastBeat: number;
        trillStep: WholeHalfUnison;
        twoNoteTurn: WholeHalfNone;
        secondBeat: number;
    }
    export function xmlToTrillSound(node: Node): TrillSound;
    export interface BendSound {
        accelerate?: boolean;
        beats?: number;
        lastBeat?: number;
        secondBeat?: number;
    }
    export interface BendSoundComplete {
        accelerate: boolean;
        beats: number;
        lastBeat: number;
        secondBeat: number;
    }
    export function xmlToBendSound(node: Node): BendSound;
    export interface TimeOnly {
        timeOnly?: string;
    }
    export interface TimeOnlyComplete {
        timeOnly: string;
    }
    export function xmlToTimeOnly(node: Node): TimeOnly;
    export interface DocumentAttributes {
        version_: string;
    }
    export interface DocumentAttributesComplete {
        version_: string;
    }
    export function xmlToDocumentAttributes(node: Node): DocumentAttributes;
    export interface Editorial {
        footnote?: Footnote;
        level?: Level;
    }
    export interface EditorialComplete {
        footnote: Footnote;
        level: Level;
    }
    export function xmlToEditorial(node: Node): Editorial;
    export interface EditorialVoice {
        voice?: number;
        footnote?: Footnote;
        level?: Level;
    }
    export interface EditorialVoiceComplete {
        voice: number;
        footnote: Footnote;
        level: Level;
    }
    export function xmlToEditorialVoice(node: Node): EditorialVoice;
    export interface Footnote extends TextFormatting {
        text: string;
    }
    export interface FootnoteComplete extends TextFormattingComplete {
        text: string;
    }
    export function xmlToFootnote(node: Node): Footnote;
    export interface Level extends LevelDisplay {
        text: string;
        reference?: boolean;
    }
    export interface LevelComplete extends LevelDisplayComplete {
        text: string;
        reference: boolean;
    }
    export function xmlToLevel(node: Node): Level;
    export interface Fermata extends PrintStyle {
        shape: NormalAngledSquare;
        type?: UprightInverted;
    }
    export interface FermataComplete extends PrintStyleComplete {
        shape: NormalAngledSquare;
        type: UprightInverted;
    }
    export function xmlToFermata(node: Node): Fermata;
    export interface WavyLine extends Position, Placement, Color, TrillSound {
        number_?: number;
        type: StartStopContinue;
    }
    export interface WavyLineComplete extends PositionComplete, PlacementComplete, ColorComplete, TrillSoundComplete {
        number_: number;
        type: StartStopContinue;
    }
    export function xmlToWavyLine(node: Node): WavyLine;
    export interface Staff extends String {
    }
    export function xmlToStaff(node: Node): Staff;
    export interface Segno extends PrintStyleAlign {
    }
    export interface SegnoComplete extends PrintStyleAlignComplete {
    }
    export function xmlToSegno(node: Node): Segno;
    export interface Coda extends PrintStyleAlign {
    }
    export interface CodaComplete extends PrintStyleAlignComplete {
    }
    export function xmlToCoda(node: Node): Coda;
    export interface ActualNotes {
        count: number;
    }
    export interface ActualNotesComplete {
        count: number;
    }
    export function xmlToActualNotes(node: Node): ActualNotes;
    export interface NormalNotes {
        count: number;
    }
    export interface NormalNotesComplete {
        count: number;
    }
    export function xmlToNormalNotes(node: Node): NormalNotes;
    export interface NormalDot {
    }
    export interface NormalDotComplete {
    }
    export function xmlToNormalDot(node: Node): NormalDot;
    export interface Dynamics extends PrintStyleAlign, Placement, TextDecoration, Enclosure {
        fp: boolean;
        pp: boolean;
        ppp: boolean;
        fff: boolean;
        sf: boolean;
        rf: boolean;
        mp: boolean;
        sfpp: boolean;
        f: boolean;
        ffffff: boolean;
        sfz: boolean;
        ff: boolean;
        pppppp: boolean;
        rfz: boolean;
        otherDynamics?: string;
        fz: boolean;
        ppppp: boolean;
        mf: boolean;
        pppp: boolean;
        fffff: boolean;
        sffz: boolean;
        sfp: boolean;
        p: boolean;
        ffff: boolean;
    }
    export interface DynamicsComplete extends PrintStyleAlignComplete, PlacementComplete, TextDecorationComplete, EnclosureComplete {
        fp: boolean;
        pp: boolean;
        ppp: boolean;
        fff: boolean;
        sf: boolean;
        rf: boolean;
        mp: boolean;
        sfpp: boolean;
        f: boolean;
        ffffff: boolean;
        sfz: boolean;
        ff: boolean;
        pppppp: boolean;
        rfz: boolean;
        otherDynamics: string;
        fz: boolean;
        ppppp: boolean;
        mf: boolean;
        pppp: boolean;
        fffff: boolean;
        sffz: boolean;
        sfp: boolean;
        p: boolean;
        ffff: boolean;
    }
    export function xmlToDynamics(node: Node): Dynamics;
    export interface Fingering extends PrintStyle, Placement {
        substitution?: boolean;
        finger: number;
        alternate?: boolean;
    }
    export interface FingeringComplete extends PrintStyleComplete, PlacementComplete {
        substitution: boolean;
        finger: number;
        alternate: boolean;
    }
    export function xmlToFingering(node: Node): Fingering;
    export interface Fret extends Font, Color {
        fret: number;
    }
    export interface FretComplete extends FontComplete, ColorComplete {
        fret: number;
    }
    export function xmlToFret(node: Node): Fret;
    export interface String extends PrintStyle, Placement {
        stringNum: number;
    }
    export interface StringComplete extends PrintStyleComplete, PlacementComplete {
        stringNum: number;
    }
    export function xmlToString(node: Node): String;
    export interface TuningAlter {
        step: string;
    }
    export interface TuningAlterComplete {
        step: string;
    }
    export function xmlToTuningAlter(node: Node): TuningAlter;
    export interface TuningOctave {
        step: string;
    }
    export interface TuningOctaveComplete {
        step: string;
    }
    export function xmlToTuningOctave(node: Node): TuningOctave;
    export interface DisplayText extends TextFormatting {
        text: string;
    }
    export interface DisplayTextComplete extends TextFormattingComplete {
        text: string;
    }
    export function xmlToDisplayText(node: Node): DisplayText;
    export interface AccidentalText extends TextFormatting {
        text: string;
    }
    export interface AccidentalTextComplete extends TextFormattingComplete {
        text: string;
    }
    export function xmlToAccidentalText(node: Node): AccidentalText;
    export interface PartNameDisplay extends PrintObject {
        name: TextArray;
    }
    export interface PartNameDisplayComplete extends PrintObjectComplete {
        name: TextArray;
    }
    export interface PartAbbreviationDisplay extends PrintObject {
        name: TextArray;
    }
    export interface PartAbbreviationDisplayComplete extends PrintObjectComplete {
        name: TextArray;
    }
    export interface MidiDevice {
        port?: number;
        deviceName: string;
        id?: number;
    }
    export interface MidiDeviceComplete {
        port: number;
        deviceName: string;
        id: number;
    }
    export function xmlToMidiDevice(node: Node): MidiDevice;
    export function verifyMidiChannel(m: number): void;
    export function xmlToMidiChannel(node: Node): number;
    export function verifyMidiBank(m: number): void;
    export function xmlToMidiBank(node: Node): number;
    export function verifyMidiProgram(m: number): void;
    export function xmlToMidiProgram(node: Node): number;
    export function verifyMidiUnpitched(m: number): void;
    export function xmlToMidiUnpitched(node: Node): number;
    export function verifyVolume(m: number): void;
    export function xmlToVolume(node: Node): number;
    export function verifyPan(m: number): void;
    export function xmlToPan(node: Node): number;
    export function verifyElevation(m: number): void;
    export function xmlToElevation(node: Node): number;
    export interface MidiInstrument {
        midiUnpitched?: number;
        volume?: number;
        pan?: number;
        elevation?: number;
        midiBank?: number;
        midiProgram?: number;
        id: string;
        midiChannel?: number;
        midiName?: string;
    }
    export interface MidiInstrumentComplete {
        midiUnpitched: number;
        volume: number;
        pan: number;
        elevation: number;
        midiBank: number;
        midiProgram: number;
        id: string;
        midiChannel: number;
        midiName: string;
    }
    export function xmlToMidiInstrument(node: Node): MidiInstrument;
    export interface Play {
        ipa?: string;
        mute?: string;
        otherPlay?: string;
        semiPitched?: string;
    }
    export interface PlayComplete {
        ipa: string;
        mute: string;
        otherPlay: string;
        semiPitched: string;
    }
    export function xmlToPlay(node: Node): Play;
    export interface Millimeters extends String {
    }
    export function xmlToMillimeters(node: Node): Millimeters;
    export interface Scaling {
        tenths?: number;
        millimeters?: number;
    }
    export interface ScalingComplete {
        tenths: number;
        millimeters: number;
    }
    export function xmlToScaling(node: Node): Scaling;
    export interface LeftMargin extends String {
    }
    export function xmlToLeftMargin(node: Node): LeftMargin;
    export interface RightMargin extends String {
    }
    export function xmlToRightMargin(node: Node): RightMargin;
    export interface TopMargin extends String {
    }
    export function xmlToTopMargin(node: Node): TopMargin;
    export interface BottomMargin extends String {
    }
    export function xmlToBottomMargin(node: Node): BottomMargin;
    export interface PageHeight extends String {
    }
    export function xmlToPageHeight(node: Node): PageHeight;
    export interface PageWidth extends String {
    }
    export function xmlToPageWidth(node: Node): PageWidth;
    export enum OddEvenBoth {
        Both = 2,
        Even = 1,
        Odd = 0,
    }
    export function getOddEvenBoth(node: Node, fallbackVal?: OddEvenBoth): OddEvenBoth;
    export interface PageMargins {
        topMargin: number;
        leftMargin: number;
        bottomMargin: number;
        type?: OddEvenBoth;
        rightMargin: number;
    }
    export interface PageMarginsComplete {
        topMargin: number;
        leftMargin: number;
        bottomMargin: number;
        type: OddEvenBoth;
        rightMargin: number;
    }
    export function xmlToPageMargins(node: Node): PageMargins;
    export interface PageLayout {
        pageHeight?: number;
        pageWidth?: number;
        pageMargins?: PageMargins[];
    }
    export interface PageLayoutComplete {
        pageHeight: number;
        pageWidth: number;
        pageMargins: PageMargins[];
    }
    export function xmlToPageLayout(node: Node): PageLayout;
    export interface SystemDistance extends String {
    }
    export function xmlToSystemDistance(node: Node): SystemDistance;
    export interface TopSystemDistance extends String {
    }
    export function xmlToTopSystemDistance(node: Node): TopSystemDistance;
    export interface SystemLayout {
        systemDividers?: SystemDividers;
        systemMargins?: SystemMargins;
        systemDistance?: number;
        topSystemDistance?: number;
    }
    export interface SystemLayoutComplete {
        systemDividers: SystemDividers;
        systemMargins: SystemMargins;
        systemDistance: number;
        topSystemDistance: number;
    }
    export function xmlToSystemLayout(node: Node): SystemLayout;
    export interface SystemMargins {
        leftMargin: number;
        rightMargin: number;
    }
    export interface SystemMarginsComplete {
        leftMargin: number;
        rightMargin: number;
    }
    export function xmlToSystemMargins(node: Node): SystemMargins;
    export interface SystemDividers {
        rightDivider: RightDivider;
        leftDivider: LeftDivider;
    }
    export interface SystemDividersComplete {
        rightDivider: RightDivider;
        leftDivider: LeftDivider;
    }
    export function xmlToSystemDividers(node: Node): SystemDividers;
    export interface LeftDivider extends PrintObject, PrintStyleAlign {
    }
    export interface LeftDividerComplete extends PrintObjectComplete, PrintStyleAlignComplete {
    }
    export function xmlToLeftDivider(node: Node): LeftDivider;
    export interface RightDivider extends PrintObject, PrintStyleAlign {
    }
    export interface RightDividerComplete extends PrintObjectComplete, PrintStyleAlignComplete {
    }
    export function xmlToRightDivider(node: Node): RightDivider;
    export interface StaffDistance extends String {
    }
    export function xmlToStaffDistance(node: Node): StaffDistance;
    export interface StaffLayout {
        staffDistance?: number;
        num: number;
    }
    export interface StaffLayoutComplete {
        staffDistance: number;
        num: number;
    }
    export function xmlToStaffLayout(node: Node): StaffLayout;
    export interface MeasureDistance extends String {
    }
    export function xmlToMeasureDistance(node: Node): MeasureDistance;
    export interface MeasureLayout {
        measureDistance?: number;
    }
    export interface MeasureLayoutComplete {
        measureDistance: number;
    }
    export function xmlToMeasureLayout(node: Node): MeasureLayout;
    export interface LineWidth {
        tenths: number;
        type: string;
    }
    export interface LineWidthComplete {
        tenths: number;
        type: string;
    }
    export function xmlToLineWidth(node: Node): LineWidth;
    export enum CueGraceLarge {
        Grace = 1,
        Cue = 0,
        Large = 2,
    }
    export function getCueGraceLarge(node: Node, fallbackVal?: CueGraceLarge): CueGraceLarge;
    export interface NoteSize {
        size: number;
        type: CueGraceLarge;
    }
    export interface NoteSizeComplete {
        size: number;
        type: CueGraceLarge;
    }
    export function xmlToNoteSize(node: Node): NoteSize;
    export interface Distance {
        tenths: number;
        type: string;
    }
    export interface DistanceComplete {
        tenths: number;
        type: string;
    }
    export function xmlToDistance(node: Node): Distance;
    export interface Appearance {
        lineWidths?: {
            [x: string]: LineWidth;
        };
        distances?: {
            [x: string]: Distance;
        };
        otherAppearances?: string[];
        noteSizes?: {
            [x: string]: NoteSize;
        };
    }
    export interface AppearanceComplete {
        lineWidths: {
            [x: string]: LineWidth;
        };
        distances: {
            [x: string]: Distance;
        };
        otherAppearances: string[];
        noteSizes: {
            [x: string]: NoteSize;
        };
    }
    export function xmlToAppearance(node: Node): Appearance;
    export interface Creator {
        creator: string;
        type: string;
    }
    export interface CreatorComplete {
        creator: string;
        type: string;
    }
    export function xmlToCreator(node: Node): Creator;
    export interface Rights {
        type: string;
        rights: string;
    }
    export interface RightsComplete {
        type: string;
        rights: string;
    }
    export function xmlToRights(node: Node): Rights;
    export interface Encoder {
        encoder: string;
        type: string;
    }
    export interface EncoderComplete {
        encoder: string;
        type: string;
    }
    export function xmlToEncoder(node: Node): Encoder;
    export interface Source {
        source: string;
    }
    export interface SourceComplete {
        source: string;
    }
    export function xmlToSource(node: Node): Source;
    export interface Relation {
        type: string;
        data: string;
    }
    export interface RelationComplete {
        type: string;
        data: string;
    }
    export function xmlToRelation(node: Node): Relation;
    export interface MiscellaneousField {
        data: string;
        name: string;
    }
    export interface MiscellaneousFieldComplete {
        data: string;
        name: string;
    }
    export function xmlToMiscellaneousField(node: Node): MiscellaneousField;
    export interface Miscellaneous {
        miscellaneousFields?: MiscellaneousField[];
    }
    export interface MiscellaneousComplete {
        miscellaneousFields: MiscellaneousField[];
    }
    export function xmlToMiscellaneous(node: Node): Miscellaneous;
    export interface Identification {
        miscellaneous: Miscellaneous;
        creators?: Creator[];
        relations?: Relation[];
        rights?: Rights[];
        encoding: Encoding;
        source: Source;
    }
    export interface IdentificationComplete {
        miscellaneous: Miscellaneous;
        creators: Creator[];
        relations: Relation[];
        rights: Rights[];
        encoding: Encoding;
        source: Source;
    }
    export function xmlToIdentification(node: Node): Identification;
    export interface Supports {
        element: string;
        attribute?: string;
        value: string;
        type: string;
    }
    export interface SupportsComplete {
        element: string;
        attribute: string;
        value: string;
        type: string;
    }
    export function xmlToSupports(node: Node): Supports;
    export interface Encoding {
        encodingDescriptions?: string[];
        encodingDate?: EncodingDate;
        supports?: {
            [x: string]: Supports;
        };
        encoders?: Encoder[];
        softwares?: string[];
    }
    export interface EncodingComplete {
        encodingDescriptions: string[];
        encodingDate: EncodingDate;
        supports: {
            [x: string]: Supports;
        };
        encoders: Encoder[];
        softwares: string[];
    }
    export function xmlToEncoding(node: Node): Encoding;
    export enum SeparatorType {
        None = 0,
        Horizontal = 1,
        Diagonal = 2,
        Vertical = 3,
        Adjacent = 4,
    }
    export function getSeparatorType(node: Node, fallbackVal?: SeparatorType): SeparatorType;
    export interface TimeSeparator {
        separator?: SeparatorType;
    }
    export interface TimeSeparatorComplete {
        separator: SeparatorType;
    }
    export function xmlToTimeSeparator(node: Node): TimeSeparator;
    export enum TimeSymbolType {
        DottedNote = 4,
        Cut = 1,
        SingleNumber = 2,
        Note = 3,
        Common = 0,
        Normal = 5,
    }
    export function getTimeSymbolType(node: Node, fallbackVal?: TimeSymbolType): TimeSymbolType;
    export interface TimeSymbol {
        symbol?: TimeSymbolType;
    }
    export interface TimeSymbolComplete {
        symbol: TimeSymbolType;
    }
    export function xmlToTimeSymbol(node: Node): TimeSymbol;
    export enum CancelLocation {
        Right = 1,
        BeforeBarline = 2,
        Left = 0,
    }
    export function getCancelLocation(node: Node, fallbackVal?: CancelLocation): CancelLocation;
    export interface Cancel {
        fifths: number;
        location?: CancelLocation;
    }
    export interface CancelComplete {
        fifths: number;
        location: CancelLocation;
    }
    export function xmlToCancel(node: Node): Cancel;
    export interface Fifths extends String {
    }
    export function xmlToFifths(node: Node): Fifths;
    export interface KeyOctave {
        octave: number;
        number_: number;
        cancel?: boolean;
    }
    export interface KeyOctaveComplete {
        octave: number;
        number_: number;
        cancel: boolean;
    }
    export function xmlToKeyOctave(node: Node): KeyOctave;
    export interface Divisions extends String {
    }
    export function xmlToDivisions(node: Node): Divisions;
    export interface Key extends PrintStyle, PrintObject {
        cancel?: Cancel;
        keySteps: string[];
        keyOctaves?: KeyOctave[];
        number_?: number;
        fifths: number;
        keyAlters: string[];
        keyAccidentals: string[];
        mode?: string;
    }
    export interface KeyComplete extends PrintStyleComplete, PrintObjectComplete {
        cancel: Cancel;
        keySteps: string[];
        keyOctaves: KeyOctave[];
        number_: number;
        fifths: number;
        keyAlters: string[];
        keyAccidentals: string[];
        mode: string;
    }
    export function xmlToKey(node: Node): Key;
    export interface Time extends TimeSymbol, TimeSeparator, PrintStyleAlign, PrintObject {
        interchangeables?: Interchangeable[];
        beats: string[];
        beatTypes: number[];
        senzaMisura: boolean;
    }
    export interface TimeComplete extends TimeSymbolComplete, TimeSeparatorComplete, PrintStyleAlignComplete, PrintObjectComplete {
        interchangeables: Interchangeable[];
        beats: string[];
        beatTypes: number[];
        senzaMisura: boolean;
    }
    export function xmlToTime(node: Node): Time;
    export interface Interchangeable extends TimeSymbol, TimeSeparator {
        beats: string[];
        beatTypes: number[];
        timeRelation?: string;
    }
    export interface InterchangeableComplete extends TimeSymbolComplete, TimeSeparatorComplete {
        beats: string[];
        beatTypes: number[];
        timeRelation: string;
    }
    export function xmlToInterchangeable(node: Node): Interchangeable;
    export interface Staves extends String {
    }
    export function xmlToStaves(node: Node): Staves;
    export enum PartSymbolType {
        None = 0,
        Line = 2,
        Bracket = 3,
        Square = 4,
        Brace = 1,
    }
    export function getPartSymbolType(node: Node, fallbackVal?: PartSymbolType): PartSymbolType;
    export interface PartSymbol extends Position, Color {
        topStaff?: number;
        type: PartSymbolType;
        bottomStaff?: number;
    }
    export interface PartSymbolComplete extends PositionComplete, ColorComplete {
        topStaff: number;
        type: PartSymbolType;
        bottomStaff: number;
    }
    export function xmlToPartSymbol(node: Node): PartSymbol;
    export interface Line extends String {
    }
    export function xmlToLine(node: Node): Line;
    export interface Clef extends PrintStyle, PrintObject {
        clefOctaveChange: string;
        sign: string;
        number_?: number;
        size?: SymbolSize;
        line: number;
        afterBarline?: boolean;
        additional?: boolean;
    }
    export interface ClefComplete extends PrintStyleComplete, PrintObjectComplete {
        clefOctaveChange: string;
        sign: string;
        number_: number;
        size: SymbolSize;
        line: number;
        afterBarline: boolean;
        additional: boolean;
    }
    export function xmlToClef(node: Node): Clef;
    export interface StaffLines extends String {
    }
    export function xmlToStaffLines(node: Node): StaffLines;
    export interface StaffTuning {
        tuningAlter?: TuningAlter;
        line: string;
        tuningStep: string;
        tuningOctave: TuningOctave;
    }
    export interface StaffTuningComplete {
        tuningAlter: TuningAlter;
        line: string;
        tuningStep: string;
        tuningOctave: TuningOctave;
    }
    export function xmlToStaffTuning(node: Node): StaffTuning;
    export interface StaffSize extends String {
    }
    export function xmlToStaffSize(node: Node): StaffSize;
    export enum ShowFretsType {
        Letters = 1,
        Numbers = 0,
    }
    export function getShowFretsType(node: Node, fallbackVal?: ShowFretsType): ShowFretsType;
    export interface StaffDetails extends PrintObject, PrintSpacing {
        staffLines?: number;
        staffTunings?: StaffTuning[];
        staffSize?: number;
        capo?: string;
        number_?: number;
        showFets?: ShowFretsType;
        staffType?: string;
    }
    export interface StaffDetailsComplete extends PrintObjectComplete, PrintSpacingComplete {
        staffLines: number;
        staffTunings: StaffTuning[];
        staffSize: number;
        capo: string;
        number_: number;
        showFets: ShowFretsType;
        staffType: string;
    }
    export function xmlToStaffDetails(node: Node): StaffDetails;
    export interface Double {
    }
    export interface DoubleComplete {
    }
    export function xmlToDouble(node: Node): Double;
    export interface Transpose {
        number_?: number;
        diatonic?: string;
        octaveChange?: string;
        double_?: Double;
        chromatic: string;
    }
    export interface TransposeComplete {
        number_: number;
        diatonic: string;
        octaveChange: string;
        double_: Double;
        chromatic: string;
    }
    export function xmlToTranspose(node: Node): Transpose;
    export interface Directive extends PrintStyle {
        data: string;
    }
    export interface DirectiveComplete extends PrintStyleComplete {
        data: string;
    }
    export function xmlToDirective(node: Node): Directive;
    export interface SlashDot {
    }
    export interface SlashDotComplete {
    }
    export function xmlToSlashDot(node: Node): SlashDot;
    export interface MultipleRest {
        useSymbols?: boolean;
        count: number;
    }
    export interface MultipleRestComplete {
        useSymbols: boolean;
        count: number;
    }
    export function xmlToMultipleRest(node: Node): MultipleRest;
    export interface MeasureRepeat {
        slashed?: number;
        data?: string;
        type: StartStop;
    }
    export interface MeasureRepeatComplete {
        slashed: number;
        data: string;
        type: StartStop;
    }
    export function xmlToMeasureRepeat(node: Node): MeasureRepeat;
    export interface BeatRepeat {
        slashType?: string;
        useDots?: boolean;
        slashDots?: SlashDot[];
        slases?: number;
        type: StartStop;
    }
    export interface BeatRepeatComplete {
        slashType: string;
        useDots: boolean;
        slashDots: SlashDot[];
        slases: number;
        type: StartStop;
    }
    export function xmlToBeatRepeat(node: Node): BeatRepeat;
    export interface Slash {
        slashType?: string;
        useDots?: boolean;
        useStems?: boolean;
        slashDots?: SlashDot[];
        type: StartStop;
    }
    export interface SlashComplete {
        slashType: string;
        useDots: boolean;
        useStems: boolean;
        slashDots: SlashDot[];
        type: StartStop;
    }
    export function xmlToSlash(node: Node): Slash;
    export interface MeasureStyle extends Font, Color {
        measureRepeat?: MeasureRepeat;
        beatRepeat?: BeatRepeat;
        multipleRest?: MultipleRest;
        slash?: Slash;
        number_?: number;
    }
    export interface MeasureStyleComplete extends FontComplete, ColorComplete {
        measureRepeat: MeasureRepeat;
        beatRepeat: BeatRepeat;
        multipleRest: MultipleRest;
        slash: Slash;
        number_: number;
    }
    export function xmlToMeasureStyle(node: Node): MeasureStyle;
    export interface Attributes extends Editorial {
        divisions?: number;
        partSymbol?: PartSymbol;
        clefs?: Clef[];
        measureStyle?: MeasureStyle;
        time?: Time;
        staffDetails?: StaffDetails;
        transpose?: Transpose;
        staves?: number;
        instruments?: string;
        keySignature?: Key;
        directive?: Directive;
    }
    export interface AttributesComplete extends EditorialComplete {
        divisions: number;
        partSymbol: PartSymbol;
        clefs: Clef[];
        measureStyle: MeasureStyle;
        time: Time;
        staffDetails: StaffDetails;
        transpose: Transpose;
        staves: number;
        instruments: string;
        keySignature: Key;
        directive: Directive;
    }
    export function xmlToAttributes(node: Node): Attributes;
    export interface Cue {
    }
    export interface CueComplete {
    }
    export function xmlToCue(node: Node): Cue;
    export interface Grace {
        makeTime?: string;
        stealTimePrevious?: string;
        slash?: boolean;
        stealTimeFollowing?: string;
    }
    export interface GraceComplete {
        makeTime: string;
        stealTimePrevious: string;
        slash: boolean;
        stealTimeFollowing: string;
    }
    export function xmlToGrace(node: Node): Grace;
    export interface Chord {
    }
    export interface ChordComplete {
    }
    export function xmlToChord(node: Node): Chord;
    export interface Unpitched {
        displayStep?: string;
        displayOctave?: string;
    }
    export interface UnpitchedComplete {
        displayStep: string;
        displayOctave: string;
    }
    export function xmlToUnpitched(node: Node): Unpitched;
    export interface Alter extends String {
    }
    export function xmlToAlter(node: Node): Alter;
    export interface Octave extends String {
    }
    export function xmlToOctave(node: Node): Octave;
    export interface Pitch {
        alter?: number;
        step?: string;
        octave: number;
    }
    export interface PitchComplete {
        alter: number;
        step: string;
        octave: number;
    }
    export function xmlToPitch(node: Node): Pitch;
    export interface FullNote {
        unpitched?: Unpitched;
        chord?: Chord;
        pitch?: Pitch;
        rest?: Rest;
    }
    export interface FullNoteComplete {
        unpitched: Unpitched;
        chord: Chord;
        pitch: Pitch;
        rest: Rest;
    }
    export function xmlToFullNote(node: Node): FullNote;
    export interface Rest {
        measure?: boolean;
        displayStep?: string;
        displayOctave?: string;
    }
    export interface RestComplete {
        measure: boolean;
        displayStep: string;
        displayOctave: string;
    }
    export function xmlToRest(node: Node): Rest;
    export interface Duration extends String {
    }
    export function xmlToDuration(node: Node): Duration;
    export interface Tie extends TimeOnly {
        type?: StartStop;
    }
    export interface TieComplete extends TimeOnlyComplete {
        type: StartStop;
    }
    export function xmlToTie(node: Node): Tie;
    export interface Instrument {
        id: string;
    }
    export interface InstrumentComplete {
        id: string;
    }
    export function xmlToInstrument(node: Node): Instrument;
    export interface Note extends EditorialVoice, PrintStyle, Printout, TimeOnly, FullNote {
        noteheadText?: NoteheadText;
        timeModification?: TimeModification;
        accidental?: Accidental;
        instrument?: Instrument;
        attack?: number;
        endDynamics?: number;
        lyrics?: Lyric[];
        dots?: Dot[];
        notations?: Notations[];
        stem?: Stem;
        noteType?: Type;
        pizzicato?: boolean;
        cue?: Cue;
        duration?: number;
        ties?: Tie[];
        dynamics?: number;
        play?: Play;
        staff?: number;
        grace?: Grace;
        notehead?: Notehead;
        release?: number;
        beams?: Beam[];
    }
    export interface NoteComplete extends EditorialVoiceComplete, PrintStyleComplete, PrintoutComplete, TimeOnlyComplete, FullNoteComplete {
        noteheadText: NoteheadText;
        timeModification: TimeModification;
        accidental: Accidental;
        instrument: Instrument;
        attack: number;
        endDynamics: number;
        lyrics: Lyric[];
        dots: Dot[];
        notations: Notations[];
        stem: Stem;
        noteType: Type;
        pizzicato: boolean;
        cue: Cue;
        duration: number;
        ties: Tie[];
        dynamics: number;
        play: Play;
        staff: number;
        grace: Grace;
        notehead: Notehead;
        release: number;
        beams: Beam[];
    }
    export function xmlToNote(node: Node): Note;
    export enum Count {
        Quarter = 4,
        Breve = 9990,
        Long = 9991,
        _1024th = 1024,
        _32nd = 32,
        _16th = 16,
        Eighth = 8,
        Maxima = 9992,
        _512th = 512,
        _64th = 64,
        _256th = 256,
        _128th = 128,
        Half = 2,
        Whole = 1,
    }
    export function getCount(node: Node, fallbackVal?: Count): Count;
    export interface Type {
        duration: Count;
        size?: SymbolSize;
    }
    export interface TypeComplete {
        duration: Count;
        size: SymbolSize;
    }
    export function xmlToType(node: Node): Type;
    export interface Dot extends PrintStyle, Placement {
    }
    export interface DotComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToDot(node: Node): Dot;
    export enum MxmlAccidental {
        NaturalFlat = 7,
        SharpUp = 13,
        ThreeQuartersFlat = 10,
        ThreeQuartersSharp = 11,
        QuarterFlat = 8,
        Flat = 2,
        TripleSharp = 18,
        Flat1 = 27,
        Flat2 = 28,
        Flat3 = 29,
        Flat4 = 291,
        TripleFlat = 19,
        Flat5 = 30,
        Sharp = 0,
        QuarterSharp = 9,
        SlashFlat = 21,
        FlatDown = 16,
        NaturalDown = 14,
        SlashQuarterSharp = 19,
        SharpSharp = 4,
        Sharp1 = 23,
        FlatUp = 17,
        Sharp2 = 24,
        Sharp3 = 25,
        DoubleSharp = 3,
        Sharp4 = 251,
        Sharp5 = 26,
        Sori = 31,
        DoubleSlashFlat = 22,
        SharpDown = 12,
        Koron = 32,
        NaturalUp = 15,
        SlashSharp = 20,
        NaturalSharp = 6,
        FlatFlat = 5,
        Natural = 1,
        DoubleFlat = 33,
    }
    export function getMxmlAccidental(node: Node, fallbackVal?: MxmlAccidental): MxmlAccidental;
    export interface Accidental extends LevelDisplay, PrintStyle {
        cautionary?: boolean;
        accidental: MxmlAccidental;
        editorial?: boolean;
    }
    export interface AccidentalComplete extends LevelDisplayComplete, PrintStyleComplete {
        cautionary: boolean;
        accidental: MxmlAccidental;
        editorial: boolean;
    }
    export function xmlToAccidental(node: Node): Accidental;
    export interface TimeModification {
        actualNotes: ActualNotes;
        normalType?: string;
        normalNotes: NormalNotes;
        normalDots?: NormalDot[];
    }
    export interface TimeModificationComplete {
        actualNotes: ActualNotes;
        normalType: string;
        normalNotes: NormalNotes;
        normalDots: NormalDot[];
    }
    export function xmlToTimeModification(node: Node): TimeModification;
    export enum StemType {
        None = 2,
        Double = 3,
        Down = 0,
        Up = 1,
    }
    export function getStemType(node: Node, fallbackVal?: StemType): StemType;
    export interface Stem extends Position, Color {
        type: StemType;
    }
    export interface StemComplete extends PositionComplete, ColorComplete {
        type: StemType;
    }
    export function xmlToStem(node: Node): Stem;
    export enum NoteheadType {
        InvertedTriangle = 7,
        CircleDot = 14,
        ArrowUp = 9,
        Do = 18,
        Mi = 20,
        Cross = 4,
        Slash = 0,
        Fa = 21,
        Triangle = 1,
        FaUp = 22,
        So = 23,
        LeftTriangle = 15,
        BackSlashed = 11,
        None = 17,
        La = 24,
        Slashed = 10,
        Normal = 12,
        Cluster = 13,
        Ti = 25,
        Re = 19,
        Nrectangle = 16,
        Square = 3,
        ArrowDown = 8,
        X = 5,
        Diamond = 2,
        CircleX = 6,
    }
    export function getNoteheadType(node: Node, fallbackVal?: NoteheadType): NoteheadType;
    export interface Notehead extends Font, Color {
        type: NoteheadType;
        filled?: boolean;
        parentheses?: boolean;
    }
    export interface NoteheadComplete extends FontComplete, ColorComplete {
        type: NoteheadType;
        filled: boolean;
        parentheses: boolean;
    }
    export function xmlToNotehead(node: Node): Notehead;
    export interface NoteheadText {
        text: TextArray;
    }
    export interface NoteheadTextComplete {
        text: TextArray;
    }
    export enum BeamType {
        BackwardHook = 4,
        Begin = 0,
        ForwardHook = 3,
        Continue = 1,
        End = 2,
    }
    export function getBeamType(node: Node, fallbackVal?: BeamType): BeamType;
    export enum AccelRitNone {
        Accel = 0,
        None = 2,
        Rit = 1,
    }
    export function getAccelRitNone(node: Node, fallbackVal?: AccelRitNone): AccelRitNone;
    export interface Beam {
        repeater?: boolean;
        number_: number;
        type: BeamType;
        fan?: AccelRitNone;
    }
    export interface BeamComplete {
        repeater: boolean;
        number_: number;
        type: BeamType;
        fan: AccelRitNone;
    }
    export function xmlToBeam(node: Node): Beam;
    export interface Notations extends Editorial, PrintObject {
        slurs?: Slur[];
        articulations?: Articulations[];
        slides?: Slide[];
        technicals?: Technical[];
        tieds?: Tied[];
        tuplets?: Tuplet[];
        glissandos?: Glissando[];
        dynamics?: Dynamics[];
        fermatas?: Fermata[];
        accidentalMarks?: AccidentalMark[];
        ornaments?: Ornaments[];
        arpeggiates?: Arpeggiate[];
        nonArpeggiates?: NonArpeggiate[];
        otherNotations?: OtherNotation[];
    }
    export interface NotationsComplete extends EditorialComplete, PrintObjectComplete {
        slurs: Slur[];
        articulations: Articulations[];
        slides: Slide[];
        technicals: Technical[];
        tieds: Tied[];
        tuplets: Tuplet[];
        glissandos: Glissando[];
        dynamics: Dynamics[];
        fermatas: Fermata[];
        accidentalMarks: AccidentalMark[];
        ornaments: Ornaments[];
        arpeggiates: Arpeggiate[];
        nonArpeggiates: NonArpeggiate[];
        otherNotations: OtherNotation[];
    }
    export function xmlToNotations(node: Node): Notations;
    export interface Tied extends LineType, DashedFormatting, Position, Placement, Orientation, Bezier, Color {
        number_?: number;
        type: StartStopContinue;
    }
    export interface TiedComplete extends LineTypeComplete, DashedFormattingComplete, PositionComplete, PlacementComplete, OrientationComplete, BezierComplete, ColorComplete {
        number_: number;
        type: StartStopContinue;
    }
    export function xmlToTied(node: Node): Tied;
    export interface Slur extends LineType, DashedFormatting, Position, Placement, Orientation, Bezier, Color {
        number_?: number;
        type: StartStopContinue;
    }
    export interface SlurComplete extends LineTypeComplete, DashedFormattingComplete, PositionComplete, PlacementComplete, OrientationComplete, BezierComplete, ColorComplete {
        number_: number;
        type: StartStopContinue;
    }
    export function xmlToSlur(node: Node): Slur;
    export enum ActualBothNone {
        None = 2,
        Both = 1,
        Actual = 0,
    }
    export function getActualBothNone(node: Node, fallbackVal?: ActualBothNone): ActualBothNone;
    export interface Tuplet extends LineShape, Position, Placement {
        bracket?: boolean;
        number_: number;
        showNumber?: ActualBothNone;
        tupletNormal?: TupletNormal;
        type: StartStop;
        showType?: ActualBothNone;
        tupletActual?: TupletActual;
    }
    export interface TupletComplete extends LineShapeComplete, PositionComplete, PlacementComplete {
        bracket: boolean;
        number_: number;
        showNumber: ActualBothNone;
        tupletNormal: TupletNormal;
        type: StartStop;
        showType: ActualBothNone;
        tupletActual: TupletActual;
    }
    export function xmlToTuplet(node: Node): Tuplet;
    export interface TupletActual {
        tupletNumber?: TupletNumber;
        tupletDots?: TupletDot[];
        tupletType?: TupletType;
    }
    export interface TupletActualComplete {
        tupletNumber: TupletNumber;
        tupletDots: TupletDot[];
        tupletType: TupletType;
    }
    export function xmlToTupletActual(node: Node): TupletActual;
    export interface TupletNormal {
        tupletNumber?: TupletNumber;
        tupletDots?: TupletDot[];
        tupletType?: TupletType;
    }
    export interface TupletNormalComplete {
        tupletNumber: TupletNumber;
        tupletDots: TupletDot[];
        tupletType: TupletType;
    }
    export function xmlToTupletNormal(node: Node): TupletNormal;
    export interface TupletNumber extends Font, Color {
        text: string;
    }
    export interface TupletNumberComplete extends FontComplete, ColorComplete {
        text: string;
    }
    export function xmlToTupletNumber(node: Node): TupletNumber;
    export interface TupletType extends Font, Color {
        text: string;
    }
    export interface TupletTypeComplete extends FontComplete, ColorComplete {
        text: string;
    }
    export function xmlToTupletType(node: Node): TupletType;
    export interface TupletDot extends Font, Color {
    }
    export interface TupletDotComplete extends FontComplete, ColorComplete {
    }
    export function xmlToTupletDot(node: Node): TupletDot;
    export interface Glissando extends LineType, DashedFormatting, PrintStyle {
        text?: string;
        type: StartStop;
        normal?: number;
    }
    export interface GlissandoComplete extends LineTypeComplete, DashedFormattingComplete, PrintStyleComplete {
        text: string;
        type: StartStop;
        normal: number;
    }
    export function xmlToGlissando(node: Node): Glissando;
    export interface Slide extends LineType, DashedFormatting, PrintStyle, BendSound {
        text?: string;
        type: StartStop;
        normal?: number;
    }
    export interface SlideComplete extends LineTypeComplete, DashedFormattingComplete, PrintStyleComplete, BendSoundComplete {
        text: string;
        type: StartStop;
        normal: number;
    }
    export function xmlToSlide(node: Node): Slide;
    export interface OtherNotation extends PrintObject, PrintStyle, Placement {
        type: StartStopSingle;
        data?: string;
    }
    export interface OtherNotationComplete extends PrintObjectComplete, PrintStyleComplete, PlacementComplete {
        type: StartStopSingle;
        data: string;
    }
    export function xmlToOtherNotation(node: Node): OtherNotation;
    export interface OtherDirection extends PrintObject, PrintStyleAlign {
        data: string;
    }
    export interface OtherDirectionComplete extends PrintObjectComplete, PrintStyleAlignComplete {
        data: string;
    }
    export function xmlToOtherDirection(node: Node): OtherDirection;
    export interface Ornaments extends PrintStyle, Placement, TrillSound {
        delayedInvertedTurn?: DelayedInvertedTurn;
        shake?: Shake;
        turn?: Turn;
        invertedTurn?: InvertedTurn;
        otherOrnament?: OtherOrnament;
        delayedTurn?: DelayedTurn;
        verticalTurn?: VerticalTurn;
        wavyLine?: WavyLine;
        tremolo?: Tremolo;
        accidentalMarks?: AccidentalMark[];
        trillMark?: TrillMark;
        mordent?: Mordent;
        invertedMordent?: InvertedMordent;
        schleifer?: Schleifer;
    }
    export interface OrnamentsComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
        delayedInvertedTurn: DelayedInvertedTurn;
        shake: Shake;
        turn: Turn;
        invertedTurn: InvertedTurn;
        otherOrnament: OtherOrnament;
        delayedTurn: DelayedTurn;
        verticalTurn: VerticalTurn;
        wavyLine: WavyLine;
        tremolo: Tremolo;
        accidentalMarks: AccidentalMark[];
        trillMark: TrillMark;
        mordent: Mordent;
        invertedMordent: InvertedMordent;
        schleifer: Schleifer;
    }
    export function xmlToOrnaments(node: Node): Ornaments;
    export interface TrillMark extends PrintStyle, Placement, TrillSound {
    }
    export interface TrillMarkComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
    }
    export function xmlToTrillMark(node: Node): TrillMark;
    export interface Turn extends PrintStyle, Placement, TrillSound {
        slash?: boolean;
    }
    export interface TurnComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
        slash: boolean;
    }
    export function xmlToTurn(node: Node): Turn;
    export interface DelayedTurn extends PrintStyle, Placement, TrillSound {
        slash?: boolean;
    }
    export interface DelayedTurnComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
        slash: boolean;
    }
    export function xmlToDelayedTurn(node: Node): DelayedTurn;
    export interface InvertedTurn extends PrintStyle, Placement, TrillSound {
        slash?: boolean;
    }
    export interface InvertedTurnComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
        slash: boolean;
    }
    export function xmlToInvertedTurn(node: Node): InvertedTurn;
    export interface DelayedInvertedTurn extends PrintStyle, Placement, TrillSound {
        slash?: boolean;
    }
    export interface DelayedInvertedTurnComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
        slash: boolean;
    }
    export function xmlToDelayedInvertedTurn(node: Node): DelayedInvertedTurn;
    export interface VerticalTurn extends PrintStyle, Placement, TrillSound {
    }
    export interface VerticalTurnComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
    }
    export function xmlToVerticalTurn(node: Node): VerticalTurn;
    export interface Shake extends PrintStyle, Placement, TrillSound {
    }
    export interface ShakeComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
    }
    export function xmlToShake(node: Node): Shake;
    export interface Mordent extends PrintStyle, Placement, TrillSound {
        long_?: boolean;
        approach?: AboveBelow;
        departure?: AboveBelow;
    }
    export interface MordentComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
        long_: boolean;
        approach: AboveBelow;
        departure: AboveBelow;
    }
    export function xmlToMordent(node: Node): Mordent;
    export interface InvertedMordent extends PrintStyle, Placement, TrillSound {
        long_?: boolean;
        approach?: AboveBelow;
        departure?: AboveBelow;
    }
    export interface InvertedMordentComplete extends PrintStyleComplete, PlacementComplete, TrillSoundComplete {
        long_: boolean;
        approach: AboveBelow;
        departure: AboveBelow;
    }
    export function xmlToInvertedMordent(node: Node): InvertedMordent;
    export interface Schleifer extends PrintStyle, Placement {
    }
    export interface SchleiferComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToSchleifer(node: Node): Schleifer;
    export interface Tremolo extends PrintStyle, Placement {
        data?: string;
        type: StartStopSingle;
    }
    export interface TremoloComplete extends PrintStyleComplete, PlacementComplete {
        data: string;
        type: StartStopSingle;
    }
    export function xmlToTremolo(node: Node): Tremolo;
    export interface OtherOrnament extends PrintStyle, Placement {
        type: StartStopSingle;
        data?: string;
    }
    export interface OtherOrnamentComplete extends PrintStyleComplete, PlacementComplete {
        type: StartStopSingle;
        data: string;
    }
    export function xmlToOtherOrnament(node: Node): OtherOrnament;
    export interface AccidentalMark extends PrintStyle, Placement {
        mark: string;
    }
    export interface AccidentalMarkComplete extends PrintStyleComplete, PlacementComplete {
        mark: string;
    }
    export function xmlToAccidentalMark(node: Node): AccidentalMark;
    export interface Technical {
        tripleTongue?: TripleTongue;
        toe?: Toe;
        hole?: Hole;
        hammerOn?: HammerOn;
        upBow?: UpBow;
        downBow?: DownBow;
        fret?: Fret;
        tap?: Tap;
        pullOff?: PullOff;
        handbell?: Handbell;
        bend?: Bend;
        thumbPosition?: ThumbPosition;
        stopped?: Stopped;
        pluck?: Pluck;
        doubleTongue?: DoubleTongue;
        string_?: String;
        openString?: OpenString;
        fingernails?: Fingernails;
        arrow?: Arrow;
        harmonic?: Harmonic;
        heel?: Heel;
        otherTechnical?: OtherTechnical;
        snapPizzicato?: SnapPizzicato;
        fingering?: Fingering;
    }
    export interface TechnicalComplete {
        tripleTongue: TripleTongue;
        toe: Toe;
        hole: Hole;
        hammerOn: HammerOn;
        upBow: UpBow;
        downBow: DownBow;
        fret: Fret;
        tap: Tap;
        pullOff: PullOff;
        handbell: Handbell;
        bend: Bend;
        thumbPosition: ThumbPosition;
        stopped: Stopped;
        pluck: Pluck;
        doubleTongue: DoubleTongue;
        string_: String;
        openString: OpenString;
        fingernails: Fingernails;
        arrow: Arrow;
        harmonic: Harmonic;
        heel: Heel;
        otherTechnical: OtherTechnical;
        snapPizzicato: SnapPizzicato;
        fingering: Fingering;
    }
    export function xmlToTechnical(node: Node): Technical;
    export interface UpBow extends PrintStyle, Placement {
    }
    export interface UpBowComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToUpBow(node: Node): UpBow;
    export interface DownBow extends PrintStyle, Placement {
    }
    export interface DownBowComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToDownBow(node: Node): DownBow;
    export interface Harmonic extends PrintObject, PrintStyle, Placement {
        artificial: boolean;
        touchingPitch: boolean;
        soundingPitch: boolean;
        natural: boolean;
        basePitch: boolean;
    }
    export interface HarmonicComplete extends PrintObjectComplete, PrintStyleComplete, PlacementComplete {
        artificial: boolean;
        touchingPitch: boolean;
        soundingPitch: boolean;
        natural: boolean;
        basePitch: boolean;
    }
    export function xmlToHarmonic(node: Node): Harmonic;
    export interface OpenString extends PrintStyle, Placement {
    }
    export interface OpenStringComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToOpenString(node: Node): OpenString;
    export interface ThumbPosition extends PrintStyle, Placement {
    }
    export interface ThumbPositionComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToThumbPosition(node: Node): ThumbPosition;
    export interface Pluck extends PrintStyle, Placement {
        data: string;
    }
    export interface PluckComplete extends PrintStyleComplete, PlacementComplete {
        data: string;
    }
    export function xmlToPluck(node: Node): Pluck;
    export interface DoubleTongue extends PrintStyle, Placement {
    }
    export interface DoubleTongueComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToDoubleTongue(node: Node): DoubleTongue;
    export interface TripleTongue extends PrintStyle, Placement {
    }
    export interface TripleTongueComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToTripleTongue(node: Node): TripleTongue;
    export interface Stopped extends PrintStyle, Placement {
    }
    export interface StoppedComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToStopped(node: Node): Stopped;
    export interface SnapPizzicato extends PrintStyle, Placement {
    }
    export interface SnapPizzicatoComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToSnapPizzicato(node: Node): SnapPizzicato;
    export interface HammerOn extends PrintStyle, Placement {
        number_?: number;
        type: StartStop;
        data?: string;
    }
    export interface HammerOnComplete extends PrintStyleComplete, PlacementComplete {
        number_: number;
        type: StartStop;
        data: string;
    }
    export function xmlToHammerOn(node: Node): HammerOn;
    export interface PullOff extends PrintStyle, Placement {
        number_?: number;
        type: StartStop;
        data?: string;
    }
    export interface PullOffComplete extends PrintStyleComplete, PlacementComplete {
        number_: number;
        type: StartStop;
        data: string;
    }
    export function xmlToPullOff(node: Node): PullOff;
    export interface Bend extends PrintStyle, BendSound {
        bendAlter: string;
        withBar?: WithBar;
        preBend: boolean;
        release: boolean;
    }
    export interface BendComplete extends PrintStyleComplete, BendSoundComplete {
        bendAlter: string;
        withBar: WithBar;
        preBend: boolean;
        release: boolean;
    }
    export function xmlToBend(node: Node): Bend;
    export interface WithBar extends PrintStyle, Placement {
        data: string;
    }
    export interface WithBarComplete extends PrintStyleComplete, PlacementComplete {
        data: string;
    }
    export function xmlToWithBar(node: Node): WithBar;
    export interface Tap extends PrintStyle, Placement {
        data: string;
    }
    export interface TapComplete extends PrintStyleComplete, PlacementComplete {
        data: string;
    }
    export function xmlToTap(node: Node): Tap;
    export interface Heel extends PrintStyle, Placement {
        substitution?: boolean;
    }
    export interface HeelComplete extends PrintStyleComplete, PlacementComplete {
        substitution: boolean;
    }
    export function xmlToHeel(node: Node): Heel;
    export interface Toe extends PrintStyle, Placement {
        substitution?: boolean;
    }
    export interface ToeComplete extends PrintStyleComplete, PlacementComplete {
        substitution: boolean;
    }
    export function xmlToToe(node: Node): Toe;
    export interface Fingernails extends PrintStyle, Placement {
    }
    export interface FingernailsComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToFingernails(node: Node): Fingernails;
    export interface Hole extends PrintStyle, Placement {
        holeClosed: HoleClosed;
        holeShape: string;
        holeType?: string;
    }
    export interface HoleComplete extends PrintStyleComplete, PlacementComplete {
        holeClosed: HoleClosed;
        holeShape: string;
        holeType: string;
    }
    export function xmlToHole(node: Node): Hole;
    export enum HoleLocation {
        Right = 0,
        Top = 3,
        Bottom = 1,
        Left = 2,
    }
    export function getHoleLocation(node: Node, fallbackVal?: HoleLocation): HoleLocation;
    export enum HoleClosedType {
        No = 1,
        Yes = 0,
        Half = 2,
    }
    export function getHoleClosedType(node: Node, fallbackVal?: HoleClosedType): HoleClosedType;
    export interface HoleClosed {
        location?: HoleLocation;
        data: HoleClosedType;
    }
    export interface HoleClosedComplete {
        location: HoleLocation;
        data: HoleClosedType;
    }
    export function xmlToHoleClosed(node: Node): HoleClosed;
    export interface Arrow extends PrintStyle, Placement {
        arrowStyle?: string;
        arrowDirection?: string;
        circularArrow?: string;
    }
    export interface ArrowComplete extends PrintStyleComplete, PlacementComplete {
        arrowStyle: string;
        arrowDirection: string;
        circularArrow: string;
    }
    export function xmlToArrow(node: Node): Arrow;
    export interface Handbell extends PrintStyle, Placement {
        data: string;
    }
    export interface HandbellComplete extends PrintStyleComplete, PlacementComplete {
        data: string;
    }
    export function xmlToHandbell(node: Node): Handbell;
    export interface OtherTechnical extends PrintStyle, Placement {
        data: string;
    }
    export interface OtherTechnicalComplete extends PrintStyleComplete, PlacementComplete {
        data: string;
    }
    export function xmlToOtherTechnical(node: Node): OtherTechnical;
    export interface Articulations {
        accent?: Accent;
        doit?: Doit;
        breathMark?: BreathMark;
        otherArticulations?: OtherArticulation[];
        detachedLegato?: DetachedLegato;
        staccatissimo?: Staccatissimo;
        plop?: Plop;
        unstress?: Unstress;
        strongAccent?: StrongAccent;
        staccato?: Staccato;
        spiccato?: Spiccato;
        scoop?: Scoop;
        falloff?: Falloff;
        caesura?: Caesura;
        stress?: Stress;
        tenuto?: Tenuto;
    }
    export interface ArticulationsComplete {
        accent: Accent;
        doit: Doit;
        breathMark: BreathMark;
        otherArticulations: OtherArticulation[];
        detachedLegato: DetachedLegato;
        staccatissimo: Staccatissimo;
        plop: Plop;
        unstress: Unstress;
        strongAccent: StrongAccent;
        staccato: Staccato;
        spiccato: Spiccato;
        scoop: Scoop;
        falloff: Falloff;
        caesura: Caesura;
        stress: Stress;
        tenuto: Tenuto;
    }
    export function xmlToArticulations(node: Node): Articulations;
    export interface Accent extends PrintStyle, Placement {
    }
    export interface AccentComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToAccent(node: Node): Accent;
    export interface StrongAccent extends PrintStyle, Placement {
        type?: UpDown;
    }
    export interface StrongAccentComplete extends PrintStyleComplete, PlacementComplete {
        type: UpDown;
    }
    export function xmlToStrongAccent(node: Node): StrongAccent;
    export interface Staccato extends PrintStyle, Placement {
    }
    export interface StaccatoComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToStaccato(node: Node): Staccato;
    export interface Tenuto extends PrintStyle, Placement {
    }
    export interface TenutoComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToTenuto(node: Node): Tenuto;
    export interface DetachedLegato extends PrintStyle, Placement {
    }
    export interface DetachedLegatoComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToDetachedLegato(node: Node): DetachedLegato;
    export interface Staccatissimo extends PrintStyle, Placement {
    }
    export interface StaccatissimoComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToStaccatissimo(node: Node): Staccatissimo;
    export interface Spiccato extends PrintStyle, Placement {
    }
    export interface SpiccatoComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToSpiccato(node: Node): Spiccato;
    export interface Scoop extends LineShape, LineType, DashedFormatting, PrintStyle, Placement {
    }
    export interface ScoopComplete extends LineShapeComplete, LineTypeComplete, DashedFormattingComplete, PrintStyleComplete, PlacementComplete {
    }
    export function xmlToScoop(node: Node): Scoop;
    export interface Plop extends LineShape, LineType, DashedFormatting, PrintStyle, Placement {
    }
    export interface PlopComplete extends LineShapeComplete, LineTypeComplete, DashedFormattingComplete, PrintStyleComplete, PlacementComplete {
    }
    export function xmlToPlop(node: Node): Plop;
    export interface Doit extends LineShape, LineType, DashedFormatting, PrintStyle, Placement {
    }
    export interface DoitComplete extends LineShapeComplete, LineTypeComplete, DashedFormattingComplete, PrintStyleComplete, PlacementComplete {
    }
    export function xmlToDoit(node: Node): Doit;
    export interface Falloff extends LineShape, LineType, DashedFormatting, PrintStyle, Placement {
    }
    export interface FalloffComplete extends LineShapeComplete, LineTypeComplete, DashedFormattingComplete, PrintStyleComplete, PlacementComplete {
    }
    export function xmlToFalloff(node: Node): Falloff;
    export enum BreathMarkType {
        Empty = 2,
        Comma = 0,
        Tick = 1,
    }
    export function getBreathMarkType(node: Node, fallbackVal?: BreathMarkType): BreathMarkType;
    export interface BreathMark extends LineShape, LineType, DashedFormatting, PrintStyle, Placement {
        type: BreathMarkType;
    }
    export interface BreathMarkComplete extends LineShapeComplete, LineTypeComplete, DashedFormattingComplete, PrintStyleComplete, PlacementComplete {
        type: BreathMarkType;
    }
    export function xmlToBreathMark(node: Node): BreathMark;
    export interface Caesura extends PrintStyle, Placement {
    }
    export interface CaesuraComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToCaesura(node: Node): Caesura;
    export interface Stress extends PrintStyle, Placement {
    }
    export interface StressComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToStress(node: Node): Stress;
    export interface Unstress extends PrintStyle, Placement {
    }
    export interface UnstressComplete extends PrintStyleComplete, PlacementComplete {
    }
    export function xmlToUnstress(node: Node): Unstress;
    export interface OtherArticulation extends PrintStyle, Placement {
        data: string;
    }
    export interface OtherArticulationComplete extends PrintStyleComplete, PlacementComplete {
        data: string;
    }
    export function xmlToOtherArticulation(node: Node): OtherArticulation;
    export interface Arpeggiate extends Position, Placement, Color {
        number_?: number;
        direction?: UpDown;
    }
    export interface ArpeggiateComplete extends PositionComplete, PlacementComplete, ColorComplete {
        number_: number;
        direction: UpDown;
    }
    export function xmlToArpeggiate(node: Node): Arpeggiate;
    export interface NonArpeggiate extends Position, Placement, Color {
        number_?: number;
        type: TopBottom;
    }
    export interface NonArpeggiateComplete extends PositionComplete, PlacementComplete, ColorComplete {
        number_: number;
        type: TopBottom;
    }
    export function xmlToNonArpeggiate(node: Node): NonArpeggiate;
    export interface Laughing {
    }
    export interface LaughingComplete {
    }
    export function xmlToLaughing(node: Node): Laughing;
    export interface Humming {
    }
    export interface HummingComplete {
    }
    export function xmlToHumming(node: Node): Humming;
    export interface EndLine {
    }
    export interface EndLineComplete {
    }
    export function xmlToEndLine(node: Node): EndLine;
    export interface EndParagraph {
    }
    export interface EndParagraphComplete {
    }
    export function xmlToEndParagraph(node: Node): EndParagraph;
    export interface LyricParts {
    }
    export interface LyricPartsComplete {
    }
    export function xmlToLyricParts(node: Node): any[];
    export interface Lyric extends Justify, Position, Placement, Color, PrintObject, Editorial {
        lyricParts: any[];
        number_?: number;
        name?: string;
    }
    export interface LyricComplete extends JustifyComplete, PositionComplete, PlacementComplete, ColorComplete, PrintObjectComplete, EditorialComplete {
        lyricParts: any[];
        number_: number;
        name: string;
    }
    export interface Text extends Font, Color, TextDecoration, TextRotation, LetterSpacing, TextDirection {
        data: string;
    }
    export interface TextComplete extends FontComplete, ColorComplete, TextDecorationComplete, TextRotationComplete, LetterSpacingComplete, TextDirectionComplete {
        data: string;
    }
    export function xmlToText(node: Node): Text;
    export enum SyllabicType {
        Single = 0,
        Begin = 1,
        Middle = 3,
        End = 2,
    }
    export function getSyllabicType(node: Node, fallbackVal?: SyllabicType): SyllabicType;
    export interface Syllabic extends Font, Color {
        data: SyllabicType;
    }
    export interface SyllabicComplete extends FontComplete, ColorComplete {
        data: SyllabicType;
    }
    export function xmlToSyllabic(node: Node): Syllabic;
    export interface Elision extends Font, Color {
        data: string;
    }
    export interface ElisionComplete extends FontComplete, ColorComplete {
        data: string;
    }
    export function xmlToElision(node: Node): Elision;
    export interface Extend extends PrintStyle {
        type?: StartStopContinue;
    }
    export interface ExtendComplete extends PrintStyleComplete {
        type: StartStopContinue;
    }
    export function xmlToExtend(node: Node): Extend;
    export interface FiguredBass extends Editorial, PrintStyle, Printout {
        figures: Figure[];
        duration?: number;
        parentheses?: boolean;
    }
    export interface FiguredBassComplete extends EditorialComplete, PrintStyleComplete, PrintoutComplete {
        figures: Figure[];
        duration: number;
        parentheses: boolean;
    }
    export function xmlToFiguredBass(node: Node): FiguredBass;
    export interface Figure extends PrintStyle {
        prefix?: Prefix;
        figureNumber?: FigureNumber;
        extend?: Extend;
        suffix?: Suffix;
    }
    export interface FigureComplete extends PrintStyleComplete {
        prefix: Prefix;
        figureNumber: FigureNumber;
        extend: Extend;
        suffix: Suffix;
    }
    export function xmlToFigure(node: Node): Figure;
    export interface Prefix extends PrintStyle {
        data: string;
    }
    export interface PrefixComplete extends PrintStyleComplete {
        data: string;
    }
    export function xmlToPrefix(node: Node): Prefix;
    export interface FigureNumber extends PrintStyle {
        data: string;
    }
    export interface FigureNumberComplete extends PrintStyleComplete {
        data: string;
    }
    export function xmlToFigureNumber(node: Node): FigureNumber;
    export interface Suffix extends PrintStyle {
        data: string;
    }
    export interface SuffixComplete extends PrintStyleComplete {
        data: string;
    }
    export function xmlToSuffix(node: Node): Suffix;
    export interface Backup extends Editorial {
        duration: number;
    }
    export interface BackupComplete extends EditorialComplete {
        duration: number;
    }
    export function xmlToBackup(node: Node): Backup;
    export interface Forward extends EditorialVoice {
        duration: number;
        staff?: number;
    }
    export interface ForwardComplete extends EditorialVoiceComplete {
        duration: number;
        staff: number;
    }
    export function xmlToForward(node: Node): Forward;
    export enum BarlineLocation {
        Right = 1,
        Middle = 2,
        Left = 0,
    }
    export function getBarlineLocation(node: Node, fallbackVal?: BarlineLocation): BarlineLocation;
    export interface Barline extends Editorial {
        segno?: Segno;
        coda?: Coda;
        location?: BarlineLocation;
        codaAttrib: string;
        wavyLine?: WavyLine;
        fermatas?: Fermata[];
        segnoAttrib: string;
        divisions: string;
        barStyle?: BarStyle;
        ending?: Ending;
        repeat?: Repeat;
    }
    export interface BarlineComplete extends EditorialComplete {
        segno: Segno;
        coda: Coda;
        location: BarlineLocation;
        codaAttrib: string;
        wavyLine: WavyLine;
        fermatas: Fermata[];
        segnoAttrib: string;
        divisions: string;
        barStyle: BarStyle;
        ending: Ending;
        repeat: Repeat;
    }
    export function xmlToBarline(node: Node): Barline;
    export enum BarStyleType {
        Regular = 0,
        LightHeavy = 5,
        HeavyLight = 6,
        Short = 9,
        None = 10,
        Dashed = 2,
        HeavyHeavy = 7,
        Tick = 8,
        Dotted = 1,
        Heavy = 3,
        LightLight = 4,
    }
    export function getBarStyleType(node: Node, fallbackVal?: BarStyleType): BarStyleType;
    export interface BarStyle extends Color {
        data: BarStyleType;
    }
    export interface BarStyleComplete extends ColorComplete {
        data: BarStyleType;
    }
    export function xmlToBarStyle(node: Node): BarStyle;
    export enum StartStopDiscontinue {
        Discontinue = 2,
        Start = 0,
        Stop = 1,
    }
    export function getStartStopDiscontinue(node: Node, fallbackVal?: StartStopDiscontinue): StartStopDiscontinue;
    export interface Ending extends PrintObject, PrintStyle {
        endLength: number;
        textX: number;
        number_: number;
        textY: number;
        type: StartStopDiscontinue;
        ending?: string;
    }
    export interface EndingComplete extends PrintObjectComplete, PrintStyleComplete {
        endLength: number;
        textX: number;
        number_: number;
        textY: number;
        type: StartStopDiscontinue;
        ending: string;
    }
    export function xmlToEnding(node: Node): Ending;
    export enum WingedType {
        None = 0,
        Curved = 2,
        DoubleCurved = 4,
        Straight = 1,
        DoubleStraight = 3,
    }
    export function getWingedType(node: Node, fallbackVal?: WingedType): WingedType;
    export enum DirectionTypeBg {
        Forward = 1,
        Backward = 0,
    }
    export function getDirectionTypeBg(node: Node, fallbackVal?: DirectionTypeBg): DirectionTypeBg;
    export interface Repeat {
        times: string;
        winged: WingedType;
        direction: DirectionTypeBg;
    }
    export interface RepeatComplete {
        times: string;
        winged: WingedType;
        direction: DirectionTypeBg;
    }
    export function xmlToRepeat(node: Node): Repeat;
    export enum TipDirection {
        Right = 3,
        Northwest = 4,
        Southwest = 7,
        Down = 1,
        Northeast = 5,
        Southeast = 6,
        Up = 0,
        Left = 2,
    }
    export function getTipDirection(node: Node, fallbackVal?: TipDirection): TipDirection;
    export interface Direction extends EditorialVoice, Placement, Directive {
        directionTypes: DirectionType[];
        staff?: number;
        offset?: Offset;
        sound?: Sound;
    }
    export interface DirectionComplete extends EditorialVoiceComplete, PlacementComplete, DirectiveComplete {
        directionTypes: DirectionType[];
        staff: number;
        offset: Offset;
        sound: Sound;
    }
    export function xmlToDirection(node: Node): Direction;
    export interface DirectionType {
        percussions: Percussion[];
        rehearsals: Rehearsal[];
        pedal: Pedal;
        principalVoice: PrincipalVoice;
        accordionRegistration: AccordionRegistration;
        eyeglasses: Eyeglasses;
        image: Image;
        harpPedals: HarpPedals;
        metronome: Metronome;
        otherDirection: OtherDirection;
        segnos: Segno[];
        scordatura: Scordatura;
        stringMute: StringMute;
        wedge?: Wedge;
        dashes?: Dashes;
        damp: Damp;
        bracket: Bracket;
        dynamics?: Dynamics;
        octaveShift: OctaveShift;
        words: Words[];
        dampAll: DampAll;
        codas: Coda[];
    }
    export interface DirectionTypeComplete {
        percussions: Percussion[];
        rehearsals: Rehearsal[];
        pedal: Pedal;
        principalVoice: PrincipalVoice;
        accordionRegistration: AccordionRegistration;
        eyeglasses: Eyeglasses;
        image: Image;
        harpPedals: HarpPedals;
        metronome: Metronome;
        otherDirection: OtherDirection;
        segnos: Segno[];
        scordatura: Scordatura;
        stringMute: StringMute;
        wedge: Wedge;
        dashes: Dashes;
        damp: Damp;
        bracket: Bracket;
        dynamics: Dynamics;
        octaveShift: OctaveShift;
        words: Words[];
        dampAll: DampAll;
        codas: Coda[];
    }
    export function xmlToDirectionType(node: Node): DirectionType;
    export interface Rehearsal extends TextFormatting {
        data: string;
    }
    export interface RehearsalComplete extends TextFormattingComplete {
        data: string;
    }
    export function xmlToRehearsal(node: Node): Rehearsal;
    export interface Words extends TextFormatting {
        data: string;
    }
    export interface WordsComplete extends TextFormattingComplete {
        data: string;
    }
    export function xmlToWords(node: Node): Words;
    export enum WedgeType {
        Diminuendo = 1,
        Crescendo = 0,
        Stop = 2,
        Continue = 3,
    }
    export function getWedgeType(node: Node, fallbackVal?: WedgeType): WedgeType;
    export interface Wedge extends LineType, DashedFormatting, Position, Color {
        number_: number;
        neinte: boolean;
        type: WedgeType;
        spread: number;
    }
    export interface WedgeComplete extends LineTypeComplete, DashedFormattingComplete, PositionComplete, ColorComplete {
        number_: number;
        neinte: boolean;
        type: WedgeType;
        spread: number;
    }
    export function xmlToWedge(node: Node): Wedge;
    export interface Dashes extends DashedFormatting, Position, Color {
        number_: number;
        type: StartStopContinue;
    }
    export interface DashesComplete extends DashedFormattingComplete, PositionComplete, ColorComplete {
        number_: number;
        type: StartStopContinue;
    }
    export function xmlToDashes(node: Node): Dashes;
    export enum LineEndType {
        None = 4,
        Both = 2,
        Arrow = 3,
        Down = 1,
        Up = 0,
    }
    export function getLineEndType(node: Node, fallbackVal?: LineEndType): LineEndType;
    export interface Bracket extends LineType, DashedFormatting, Position, Color {
        endLength: number;
        number_: number;
        type: StartStopContinue;
        lineEnd: LineEndType;
    }
    export interface BracketComplete extends LineTypeComplete, DashedFormattingComplete, PositionComplete, ColorComplete {
        endLength: number;
        number_: number;
        type: StartStopContinue;
        lineEnd: LineEndType;
    }
    export function xmlToBracket(node: Node): Bracket;
    export enum PedalType {
        Change = 3,
        Start = 0,
        Stop = 1,
        Continue = 2,
    }
    export function getPedalType(node: Node, fallbackVal?: PedalType): PedalType;
    export interface Pedal extends PrintStyleAlign {
        line: boolean;
        sign: boolean;
        type: PedalType;
    }
    export interface PedalComplete extends PrintStyleAlignComplete {
        line: boolean;
        sign: boolean;
        type: PedalType;
    }
    export function xmlToPedal(node: Node): Pedal;
    export interface Metronome extends PrintStyleAlign, Justify {
        metronomeNotes: MetronomeNote[];
        perMinute: PerMinute;
        parentheses: boolean;
        beatUnit: string;
        beatUnitDots: BeatUnitDot[];
        metronomeRelation: string;
    }
    export interface MetronomeComplete extends PrintStyleAlignComplete, JustifyComplete {
        metronomeNotes: MetronomeNote[];
        perMinute: PerMinute;
        parentheses: boolean;
        beatUnit: string;
        beatUnitDots: BeatUnitDot[];
        metronomeRelation: string;
    }
    export function xmlToMetronome(node: Node): Metronome;
    export interface BeatUnitDot {
    }
    export interface BeatUnitDotComplete {
    }
    export function xmlToBeatUnitDot(node: Node): BeatUnitDot;
    export interface PerMinute extends Font {
        data: string;
    }
    export interface PerMinuteComplete extends FontComplete {
        data: string;
    }
    export function xmlToPerMinute(node: Node): PerMinute;
    export interface MetronomeNote {
        metronomeDots: MetronomeDot[];
        metronomeBeams: MetronomeBeam[];
        metronomeType: string;
        metronomeTuplet: MetronomeTuplet;
    }
    export interface MetronomeNoteComplete {
        metronomeDots: MetronomeDot[];
        metronomeBeams: MetronomeBeam[];
        metronomeType: string;
        metronomeTuplet: MetronomeTuplet;
    }
    export function xmlToMetronomeNote(node: Node): MetronomeNote;
    export interface MetronomeDot {
    }
    export interface MetronomeDotComplete {
    }
    export function xmlToMetronomeDot(node: Node): MetronomeDot;
    export interface MetronomeBeam {
        number_: number;
        data: string;
    }
    export interface MetronomeBeamComplete {
        number_: number;
        data: string;
    }
    export function xmlToMetronomeBeam(node: Node): MetronomeBeam;
    export interface MetronomeTuplet {
        actualNotes: ActualNotes;
        bracket: boolean;
        showNumber: ActualBothNone;
        normalType: string;
        type: StartStop;
        normalNotes: NormalNotes;
        normalDots: NormalDot[];
    }
    export interface MetronomeTupletComplete {
        actualNotes: ActualNotes;
        bracket: boolean;
        showNumber: ActualBothNone;
        normalType: string;
        type: StartStop;
        normalNotes: NormalNotes;
        normalDots: NormalDot[];
    }
    export function xmlToMetronomeTuplet(node: Node): MetronomeTuplet;
    export enum OctaveShiftType {
        Down = 2,
        Stop = 3,
        Up = 1,
        Continue = 4,
    }
    export function getOctaveShiftType(node: Node, fallbackVal?: OctaveShiftType): OctaveShiftType;
    export interface OctaveShift extends DashedFormatting, PrintStyle {
        number_: number;
        size: number;
        type: OctaveShiftType;
    }
    export interface OctaveShiftComplete extends DashedFormattingComplete, PrintStyleComplete {
        number_: number;
        size: number;
        type: OctaveShiftType;
    }
    export function xmlToOctaveShift(node: Node): OctaveShift;
    export interface HarpPedals extends PrintStyleAlign {
        pedalTunings: PedalTuning[];
    }
    export interface HarpPedalsComplete extends PrintStyleAlignComplete {
        pedalTunings: PedalTuning[];
    }
    export function xmlToHarpPedals(node: Node): HarpPedals;
    export interface PedalTuning {
        pedalStep: string;
        pedalAlter: string;
    }
    export interface PedalTuningComplete {
        pedalStep: string;
        pedalAlter: string;
    }
    export function xmlToPedalTuning(node: Node): PedalTuning;
    export interface Damp extends PrintStyleAlign {
    }
    export interface DampComplete extends PrintStyleAlignComplete {
    }
    export function xmlToDamp(node: Node): Damp;
    export interface DampAll extends PrintStyleAlign {
    }
    export interface DampAllComplete extends PrintStyleAlignComplete {
    }
    export function xmlToDampAll(node: Node): DampAll;
    export interface Eyeglasses extends PrintStyleAlign {
    }
    export interface EyeglassesComplete extends PrintStyleAlignComplete {
    }
    export function xmlToEyeglasses(node: Node): Eyeglasses;
    export interface StringMute extends PrintStyleAlign {
        type: string;
    }
    export interface StringMuteComplete extends PrintStyleAlignComplete {
        type: string;
    }
    export function xmlToStringMute(node: Node): StringMute;
    export interface Scordatura {
        accords: Accord[];
    }
    export interface ScordaturaComplete {
        accords: Accord[];
    }
    export function xmlToScordatura(node: Node): Scordatura;
    export interface Accord {
        tuningAlter: TuningAlter;
        string_: string;
        tuningStep: string;
        tuningOctave: TuningOctave;
    }
    export interface AccordComplete {
        tuningAlter: TuningAlter;
        string_: string;
        tuningStep: string;
        tuningOctave: TuningOctave;
    }
    export function xmlToAccord(node: Node): Accord;
    export interface Image extends Position, Halign, ValignImage {
        type: string;
        source: string;
    }
    export interface ImageComplete extends PositionComplete, HalignComplete, ValignImageComplete {
        type: string;
        source: string;
    }
    export function xmlToImage(node: Node): Image;
    export enum VoiceSymbol {
        None = 4,
        Hauptstimme = 1,
        Nebenstimme = 2,
        Plain = 3,
    }
    export function getVoiceSymbol(node: Node, fallbackVal?: VoiceSymbol): VoiceSymbol;
    export interface PrincipalVoice extends PrintStyleAlign {
        symbol: VoiceSymbol;
        data?: string;
        type: StartStop;
    }
    export interface PrincipalVoiceComplete extends PrintStyleAlignComplete {
        symbol: VoiceSymbol;
        data: string;
        type: StartStop;
    }
    export function xmlToPrincipalVoice(node: Node): PrincipalVoice;
    export interface AccordionRegistration extends PrintStyleAlign {
        accordionMiddle: string;
        accordionHigh: boolean;
        accordionLow: boolean;
    }
    export interface AccordionRegistrationComplete extends PrintStyleAlignComplete {
        accordionMiddle: string;
        accordionHigh: boolean;
        accordionLow: boolean;
    }
    export function xmlToAccordionRegistration(node: Node): AccordionRegistration;
    export interface Percussion extends PrintStyleAlign, Enclosure {
        stickLocation: string;
        otherPercussion: string;
        wood: string;
        effect: string;
        glass: string;
        timpani: Timpani;
        stick: Stick;
        metal: string;
        pitched: string;
        membrane: string;
        beater: Beater;
    }
    export interface PercussionComplete extends PrintStyleAlignComplete, EnclosureComplete {
        stickLocation: string;
        otherPercussion: string;
        wood: string;
        effect: string;
        glass: string;
        timpani: Timpani;
        stick: Stick;
        metal: string;
        pitched: string;
        membrane: string;
        beater: Beater;
    }
    export function xmlToPercussion(node: Node): Percussion;
    export interface Timpani {
    }
    export interface TimpaniComplete {
    }
    export function xmlToTimpani(node: Node): Timpani;
    export interface Beater {
        data: string;
        tip: TipDirection;
    }
    export interface BeaterComplete {
        data: string;
        tip: TipDirection;
    }
    export function xmlToBeater(node: Node): Beater;
    export interface Stick {
        stickMaterial: string;
        stickType: string;
        tip: TipDirection;
    }
    export interface StickComplete {
        stickMaterial: string;
        stickType: string;
        tip: TipDirection;
    }
    export function xmlToStick(node: Node): Stick;
    export interface Offset {
        data: string;
        sound: boolean;
    }
    export interface OffsetComplete {
        data: string;
        sound: boolean;
    }
    export function xmlToOffset(node: Node): Offset;
    export interface HarmonyChord {
        root: Root;
        function_: Function;
        kind: Kind;
        degree: Degree;
        inversion: Inversion;
        bass: Bass;
    }
    export interface HarmonyChordComplete {
        root: Root;
        function_: Function;
        kind: Kind;
        degree: Degree;
        inversion: Inversion;
        bass: Bass;
    }
    export function xmlToHarmonyChord(node: Node): HarmonyChord;
    export enum ExplicitImpliedAlternate {
        Explicit = 1,
        Implied = 2,
        Alternate = 3,
    }
    export function getExplicitImpliedAlternate(node: Node, fallbackVal?: ExplicitImpliedAlternate): ExplicitImpliedAlternate;
    export interface Harmony extends HarmonyChord, Editorial, PrintObject, PrintStyle, Placement {
        frame: Frame;
        printFrame: boolean;
        staff: number;
        harmonyType: ExplicitImpliedAlternate;
        offset: Offset;
    }
    export interface HarmonyComplete extends HarmonyChordComplete, EditorialComplete, PrintObjectComplete, PrintStyleComplete, PlacementComplete {
        frame: Frame;
        printFrame: boolean;
        staff: number;
        harmonyType: ExplicitImpliedAlternate;
        offset: Offset;
    }
    export function xmlToHarmony(node: Node): Harmony;
    export interface Root {
        rootStep: RootStep;
        rootAlter: RootAlter;
    }
    export interface RootComplete {
        rootStep: RootStep;
        rootAlter: RootAlter;
    }
    export function xmlToRoot(node: Node): Root;
    export interface RootStep extends PrintStyle {
        text: string;
        data: string;
    }
    export interface RootStepComplete extends PrintStyleComplete {
        text: string;
        data: string;
    }
    export function xmlToRootStep(node: Node): RootStep;
    export interface RootAlter extends PrintObject, PrintStyle {
        location: LeftRight;
        data: string;
    }
    export interface RootAlterComplete extends PrintObjectComplete, PrintStyleComplete {
        location: LeftRight;
        data: string;
    }
    export function xmlToRootAlter(node: Node): RootAlter;
    export interface Function extends PrintStyle {
        data: string;
    }
    export interface FunctionComplete extends PrintStyleComplete {
        data: string;
    }
    export function xmlToFunction(node: Node): Function;
    export interface Kind extends PrintStyle, Halign, Valign {
        parenthesesDegrees: boolean;
        useSymbols: boolean;
        text: string;
        data: string;
        stackDegrees: boolean;
        bracketDegrees: boolean;
    }
    export interface KindComplete extends PrintStyleComplete, HalignComplete, ValignComplete {
        parenthesesDegrees: boolean;
        useSymbols: boolean;
        text: string;
        data: string;
        stackDegrees: boolean;
        bracketDegrees: boolean;
    }
    export function xmlToKind(node: Node): Kind;
    export interface Inversion extends PrintStyle {
        data: string;
    }
    export interface InversionComplete extends PrintStyleComplete {
        data: string;
    }
    export function xmlToInversion(node: Node): Inversion;
    export interface Bass {
        bassStep: BassStep;
        bassAlter: BassAlter;
    }
    export interface BassComplete {
        bassStep: BassStep;
        bassAlter: BassAlter;
    }
    export function xmlToBass(node: Node): Bass;
    export interface BassStep extends PrintStyle {
        text: string;
        data: string;
    }
    export interface BassStepComplete extends PrintStyleComplete {
        text: string;
        data: string;
    }
    export function xmlToBassStep(node: Node): BassStep;
    export interface BassAlter extends PrintObject, PrintStyle {
        location: LeftRight;
        data: string;
    }
    export interface BassAlterComplete extends PrintObjectComplete, PrintStyleComplete {
        location: LeftRight;
        data: string;
    }
    export function xmlToBassAlter(node: Node): BassAlter;
    export interface Degree extends PrintObject {
        degreeAlter: DegreeAlter;
        degreeValue: DegreeValue;
        degreeType: DegreeType;
    }
    export interface DegreeComplete extends PrintObjectComplete {
        degreeAlter: DegreeAlter;
        degreeValue: DegreeValue;
        degreeType: DegreeType;
    }
    export function xmlToDegree(node: Node): Degree;
    export enum ChordType {
        Augmented = 3,
        Diminished = 4,
        Major = 1,
        Minor = 2,
        HalfDiminished = 5,
    }
    export function getChordType(node: Node, fallbackVal?: ChordType): ChordType;
    export interface DegreeValue extends PrintStyle {
        symbol: ChordType;
        text: string;
        data: string;
    }
    export interface DegreeValueComplete extends PrintStyleComplete {
        symbol: ChordType;
        text: string;
        data: string;
    }
    export function xmlToDegreeValue(node: Node): DegreeValue;
    export interface DegreeAlter extends PrintStyle {
        plusMinus: boolean;
        data: string;
    }
    export interface DegreeAlterComplete extends PrintStyleComplete {
        plusMinus: boolean;
        data: string;
    }
    export function xmlToDegreeAlter(node: Node): DegreeAlter;
    export interface DegreeType extends PrintStyle {
        text: string;
        data: string;
    }
    export interface DegreeTypeComplete extends PrintStyleComplete {
        text: string;
        data: string;
    }
    export function xmlToDegreeType(node: Node): DegreeType;
    export interface Frame extends Position, Color, Halign, ValignImage {
        frameStrings: string;
        frameNotes: FrameNote[];
        unplayed: string;
        frameFrets: string;
        firstFret: FirstFret;
        width: number;
        height: number;
    }
    export interface FrameComplete extends PositionComplete, ColorComplete, HalignComplete, ValignImageComplete {
        frameStrings: string;
        frameNotes: FrameNote[];
        unplayed: string;
        frameFrets: string;
        firstFret: FirstFret;
        width: number;
        height: number;
    }
    export function xmlToFrame(node: Node): Frame;
    export interface FirstFret {
        text: string;
        location: LeftRight;
        data: string;
    }
    export interface FirstFretComplete {
        text: string;
        location: LeftRight;
        data: string;
    }
    export function xmlToFirstFret(node: Node): FirstFret;
    export interface FrameNote {
        barre: Barre;
        string_: String;
        fingering: Fingering;
        fret: Fret;
    }
    export interface FrameNoteComplete {
        barre: Barre;
        string_: String;
        fingering: Fingering;
        fret: Fret;
    }
    export function xmlToFrameNote(node: Node): FrameNote;
    export interface Barre extends Color {
        type: StartStop;
    }
    export interface BarreComplete extends ColorComplete {
        type: StartStop;
    }
    export function xmlToBarre(node: Node): Barre;
    export interface Grouping {
        features: Feature[];
        number_: number;
        groupingType: StartStopSingle;
        memberOf: string;
    }
    export interface GroupingComplete {
        features: Feature[];
        number_: number;
        groupingType: StartStopSingle;
        memberOf: string;
    }
    export function xmlToGrouping(node: Node): Grouping;
    export interface Feature {
        data: string;
        type: string;
    }
    export interface FeatureComplete {
        data: string;
        type: string;
    }
    export function xmlToFeature(node: Node): Feature;
    export interface Print {
        measureNumbering: MeasureNumbering;
        partNameDisplay: PartNameDisplay;
        newSystem: boolean;
        newPage: boolean;
        blankPage: string;
        measureLayout: MeasureLayout;
        partAbbreviationDisplay: PartAbbreviationDisplay;
        pageLayout: PageLayout;
        systemLayout: SystemLayout;
        staffSpacing: number;
        staffLayouts: StaffLayout[];
        pageNumber: string;
    }
    export interface PrintComplete {
        measureNumbering: MeasureNumbering;
        partNameDisplay: PartNameDisplay;
        newSystem: boolean;
        newPage: boolean;
        blankPage: string;
        measureLayout: MeasureLayout;
        partAbbreviationDisplay: PartAbbreviationDisplay;
        pageLayout: PageLayout;
        systemLayout: SystemLayout;
        staffSpacing: number;
        staffLayouts: StaffLayout[];
        pageNumber: string;
    }
    export function xmlToPrint(node: Node): Print;
    export interface MeasureNumbering extends PrintStyleAlign {
        data: string;
    }
    export interface MeasureNumberingComplete extends PrintStyleAlignComplete {
        data: string;
    }
    export function xmlToMeasureNumbering(node: Node): MeasureNumbering;
    export interface Sound extends TimeOnly {
        softPedal: boolean;
        midiInstrument: MidiInstrument;
        pan: string;
        tocoda: string;
        decapo: boolean;
        divisions: string;
        pizzicato: boolean;
        coda: string;
        segno: string;
        elevation: string;
        fine: string;
        damperPedal: boolean;
        dynamics: string;
        plays: Play[];
        offset: Offset;
        sostenutoPedal: boolean;
        dalsegno: string;
        midiDevice: MidiDevice;
        tempo: string;
        forwardRepeat: boolean;
    }
    export interface SoundComplete extends TimeOnlyComplete {
        softPedal: boolean;
        midiInstrument: MidiInstrument;
        pan: string;
        tocoda: string;
        decapo: boolean;
        divisions: string;
        pizzicato: boolean;
        coda: string;
        segno: string;
        elevation: string;
        fine: string;
        damperPedal: boolean;
        dynamics: string;
        plays: Play[];
        offset: Offset;
        sostenutoPedal: boolean;
        dalsegno: string;
        midiDevice: MidiDevice;
        tempo: string;
        forwardRepeat: boolean;
    }
    export function xmlToSound(node: Node): Sound;
    export interface Work {
        workNumber: string;
        workTitle: string;
        opus: Opus;
    }
    export interface WorkComplete {
        workNumber: string;
        workTitle: string;
        opus: Opus;
    }
    export function xmlToWork(node: Node): Work;
    export interface Opus {
    }
    export interface OpusComplete {
    }
    export function xmlToOpus(node: Node): Opus;
    export interface Defaults {
        wordFont: WordFont;
        lyricLanguages: LyricLanguage[];
        lyricFonts: LyricFont[];
        pageLayout: PageLayout;
        systemLayout: SystemLayout;
        appearance: Appearance;
        scaling: Scaling;
        staffLayouts: StaffLayout[];
        musicFont: MusicFont;
    }
    export interface DefaultsComplete {
        wordFont: WordFont;
        lyricLanguages: LyricLanguage[];
        lyricFonts: LyricFont[];
        pageLayout: PageLayout;
        systemLayout: SystemLayout;
        appearance: Appearance;
        scaling: Scaling;
        staffLayouts: StaffLayout[];
        musicFont: MusicFont;
    }
    export function xmlToDefaults(node: Node): Defaults;
    export interface MusicFont extends Font {
    }
    export interface MusicFontComplete extends FontComplete {
    }
    export function xmlToMusicFont(node: Node): MusicFont;
    export interface WordFont extends Font {
    }
    export interface WordFontComplete extends FontComplete {
    }
    export function xmlToWordFont(node: Node): WordFont;
    export interface LyricFont extends Font {
        number_: number;
        name: string;
    }
    export interface LyricFontComplete extends FontComplete {
        number_: number;
        name: string;
    }
    export function xmlToLyricFont(node: Node): LyricFont;
    export interface LyricLanguage {
        number_: number;
        name: string;
    }
    export interface LyricLanguageComplete {
        number_: number;
        name: string;
    }
    export function xmlToLyricLanguage(node: Node): LyricLanguage;
    export interface Credit {
        creditTypes: string[];
        creditWords: CreditWords[];
        creditImage: CreditImage;
        page: number;
    }
    export interface CreditComplete {
        creditTypes: string[];
        creditWords: CreditWords[];
        creditImage: CreditImage;
        page: number;
    }
    export function xmlToCredit(node: Node): Credit;
    export interface CreditWords extends TextFormatting {
        words: string;
    }
    export interface CreditWordsComplete extends TextFormattingComplete {
        words: string;
    }
    export function xmlToCreditWords(node: Node): CreditWords;
    export interface CreditImage extends Position, Halign, ValignImage {
        type: string;
        source: string;
    }
    export interface CreditImageComplete extends PositionComplete, HalignComplete, ValignImageComplete {
        type: string;
        source: string;
    }
    export function xmlToCreditImage(node: Node): CreditImage;
    export interface PartList {
        scoreParts: ScorePart[];
        partGroups: PartGroup[];
    }
    export interface PartListComplete {
        scoreParts: ScorePart[];
        partGroups: PartGroup[];
    }
    export function xmlToPartList(node: Node): PartList;
    export interface ScorePart {
        identification: Identification;
        partNameDisplay: PartNameDisplay;
        scoreInstruments: ScoreInstrument[];
        midiDevices: MidiDevice[];
        partName: PartName;
        partAbbreviationDisplay: PartAbbreviationDisplay;
        partAbbreviation: PartAbbreviation;
        groups: string[];
        midiInstruments: MidiInstrument[];
        id: string;
    }
    export interface ScorePartComplete {
        identification: Identification;
        partNameDisplay: PartNameDisplay;
        scoreInstruments: ScoreInstrument[];
        midiDevices: MidiDevice[];
        partName: PartName;
        partAbbreviationDisplay: PartAbbreviationDisplay;
        partAbbreviation: PartAbbreviation;
        groups: string[];
        midiInstruments: MidiInstrument[];
        id: string;
    }
    export function xmlToScorePart(node: Node): ScorePart;
    export interface PartName extends PrintStyle, PrintObject, Justify {
        partName: string;
    }
    export interface PartNameComplete extends PrintStyleComplete, PrintObjectComplete, JustifyComplete {
        partName: string;
    }
    export function xmlToPartName(node: Node): PartName;
    export interface PartAbbreviation extends PrintStyle, PrintObject, Justify {
        abbreviation: string;
    }
    export interface PartAbbreviationComplete extends PrintStyleComplete, PrintObjectComplete, JustifyComplete {
        abbreviation: string;
    }
    export function xmlToPartAbbreviation(node: Node): PartAbbreviation;
    export interface PartGroup extends Editorial {
        groupNameDisplay: GroupNameDisplay;
        groupSymbol: GroupSymbol;
        groupName: GroupName;
        groupAbbreviationDisplay: GroupAbbreviationDisplay;
        groupBarline: GroupBarline;
        number_: number;
        groupAbbreviation: GroupAbbreviation;
        type: StartStop;
        groupTime: GroupTime;
    }
    export interface PartGroupComplete extends EditorialComplete {
        groupNameDisplay: GroupNameDisplay;
        groupSymbol: GroupSymbol;
        groupName: GroupName;
        groupAbbreviationDisplay: GroupAbbreviationDisplay;
        groupBarline: GroupBarline;
        number_: number;
        groupAbbreviation: GroupAbbreviation;
        type: StartStop;
        groupTime: GroupTime;
    }
    export function xmlToPartGroup(node: Node): PartGroup;
    export interface GroupName extends PrintStyle, Justify {
        name: string;
    }
    export interface GroupNameComplete extends PrintStyleComplete, JustifyComplete {
        name: string;
    }
    export function xmlToGroupName(node: Node): GroupName;
    export interface GroupNameDisplay extends PrintObject {
        displayTexts: DisplayText[];
        accidentalTexts: AccidentalText[];
    }
    export interface GroupNameDisplayComplete extends PrintObjectComplete {
        displayTexts: DisplayText[];
        accidentalTexts: AccidentalText[];
    }
    export function xmlToGroupNameDisplay(node: Node): GroupNameDisplay;
    export interface GroupAbbreviation extends PrintStyle, Justify {
        text: string;
    }
    export interface GroupAbbreviationComplete extends PrintStyleComplete, JustifyComplete {
        text: string;
    }
    export function xmlToGroupAbbreviation(node: Node): GroupAbbreviation;
    export interface GroupAbbreviationDisplay extends PrintObject {
        displayTexts: DisplayText[];
        accidentalTexts: AccidentalText[];
    }
    export interface GroupAbbreviationDisplayComplete extends PrintObjectComplete {
        displayTexts: DisplayText[];
        accidentalTexts: AccidentalText[];
    }
    export function xmlToGroupAbbreviationDisplay(node: Node): GroupAbbreviationDisplay;
    export interface GroupSymbol extends Position, Color {
        data: PartSymbolType;
    }
    export interface GroupSymbolComplete extends PositionComplete, ColorComplete {
        data: PartSymbolType;
    }
    export function xmlToGroupSymbol(node: Node): GroupSymbol;
    export interface GroupBarline extends Color {
        data: string;
    }
    export interface GroupBarlineComplete extends ColorComplete {
        data: string;
    }
    export function xmlToGroupBarline(node: Node): GroupBarline;
    export interface GroupTime {
    }
    export interface GroupTimeComplete {
    }
    export function xmlToGroupTime(node: Node): GroupTime;
    export interface ScoreInstrument {
        instrumentName: string;
        instrumentSound: string;
        ensemble: string;
        virtualInstrument: VirtualInstrument;
        instrumentAbbreviation: string;
        solo: Solo;
        id: string;
    }
    export interface ScoreInstrumentComplete {
        instrumentName: string;
        instrumentSound: string;
        ensemble: string;
        virtualInstrument: VirtualInstrument;
        instrumentAbbreviation: string;
        solo: Solo;
        id: string;
    }
    export function xmlToScoreInstrument(node: Node): ScoreInstrument;
    export interface Solo {
    }
    export interface SoloComplete {
    }
    export function xmlToSolo(node: Node): Solo;
    export interface VirtualInstrument {
        virtualLibrary: string;
        virtualName: string;
    }
    export interface VirtualInstrumentComplete {
        virtualLibrary: string;
        virtualName: string;
    }
    export function xmlToVirtualInstrument(node: Node): VirtualInstrument;
    export interface ScoreHeader {
        movementTitle: string;
        identification: Identification;
        defaults: Defaults;
        work: Work;
        credits: Credit[];
        partList: PartList;
        movementNumber: string;
    }
    export interface ScoreHeaderComplete {
        movementTitle: string;
        identification: Identification;
        defaults: Defaults;
        work: Work;
        credits: Credit[];
        partList: PartList;
        movementNumber: string;
    }
    export function xmlToScoreHeader(node: Node): ScoreHeader;
    export interface ScoreTimewise extends DocumentAttributes, ScoreHeader {
        measures: Measure[];
    }
    export interface ScoreTimewiseComplete extends DocumentAttributesComplete, ScoreHeaderComplete {
        measures: Measure[];
    }
    export function xmlToScoreTimewise(node: Node): ScoreTimewise;
    export interface Part {
    }
    export interface PartComplete {
    }
    export function xmlToPart(node: Node): any[];
    export interface Measure {
        number_: string;
        implicit: boolean;
        width: number;
        parts: {
            [x: string]: any[];
        };
        nonControlling: boolean;
    }
    export interface MeasureComplete {
        number_: string;
        implicit: boolean;
        width: number;
        parts: {
            [x: string]: any[];
        };
        nonControlling: boolean;
    }
}

declare module '__satie/stores/contracts' {
    export import MusicXML = require("__satie/satie/__/musicxml-interfaces");
    import Annotator = require("__satie/stores/annotator");
    import Model = require("__satie/stores/model");
    export import SMuFL = require("__satie/util/SMuFL");
    export import renderUtil = require("__satie/util/renderUtil");
    export import strHash = require("__satie/util/hash");
    export interface IApi {
        "PUT /webapp/bpm"?(action: IFluxAction<number>): void;
        "POST /webapp/midiOut"?(action: IFluxAction<any>): void;
        "PUT /webapp/visualCursor/togglePlay"?(action: IFluxAction<void>): void;
        "PUT /webapp/song/dirty"?(action: IFluxAction<void>): void;
        "DELETE /webapp/song/dirty"?(action: IFluxAction<void>): void;
        "PUT /webapp/song/forceUpdate"?(action: IFluxAction<void>): void;
        "PUT /webapp/song/lineDirty"?(action: IFluxAction<string>): void;
        "DELETE /webapp/song/lineDirty"?(action: IFluxAction<number>): void;
        "PUT /webapp/song/src"?(action: IFluxAction<string>): void;
    }
    export interface IAccidentals {
        [key: string]: number;
    }
    export interface IAnnotationResult {
        cursor: IVisualCursor;
        operations: number;
        resetY: boolean;
        skip: boolean;
        success: boolean;
    }
    export interface IAnnotationOpts {
        cursor?: IVisualCursor;
        cursorBar?: number;
        cursorBeat?: number;
        cursorStave?: number;
        pointerData?: IPointerData;
    }
    export enum BeamCount {
        Variable = -1,
        One = 1,
        Two = 2,
        Three = 3,
        Four = 4,
        Five = 5,
        Six = 6,
        Seven = 7,
        Eight = 8,
        Nine = 9,
    }
    export enum Clef {
        Treble = 0,
        Bass = 1,
        Alto = 2,
        Tenor = 3,
        Piano = 4,
        Choral = 5,
        TrebleDrums = 6,
    }
    export interface IDispatcher {
        register: (callback: (payload: any) => boolean) => void;
        unregister: (callback: (payload: any) => boolean) => void;
        GET: (url: string, p?: any, onSuccess?: (response: any) => void, onError?: (response: any) => void) => Promise<void>;
        DELETE: (url: string, p?: any, onSuccess?: (response: any) => void, onError?: (response: any) => void) => Promise<void>;
        PATCH: (url: string, p?: any, onSuccess?: (response: any) => void, onError?: (response: any) => void) => Promise<void>;
        PUT: (url: string, p?: any, onSuccess?: (response: any) => void, onError?: (response: any) => void) => Promise<void>;
        POST: (url: string, p?: any, onSuccess?: (response: any) => void, onError?: (response: any) => void) => Promise<void>;
        _events: string;
    }
    export class DispatcherRedirect {
        constructor(verb: string, newUrl: string);
        newUrl: string;
        verb: string;
        postData: any;
    }
    export interface IDuration {
        count: number;
        dots: number;
        displayDots?: number;
        displayTuplet?: MusicXML.TimeModification;
        hasFlagOrBeam?: boolean;
        temporary?: boolean;
        tuplet: MusicXML.TimeModification;
    }
    export interface IDurationSpec {
        count: number;
        dots?: number;
        tuplet?: MusicXML.TimeModification;
    }
    export interface IError {
        type: string;
        redirectTo: string;
    }
    export interface IFluxAction<PostData> {
        description: string;
        resource?: string;
        query: string;
        postData: PostData;
        nested?: boolean;
    }
    export class InvalidMXMLException {
        constructor(reason: string, bar: number, beat: number, part: string);
        toString(): string;
        part: string;
        reason: string;
        bar: number;
        beat: number;
    }
    export class ScoreHeader implements MusicXML.ScoreHeader {
        credits: MusicXML.Credit[];
        identification: MusicXML.Identification;
        defaults: MusicXML.Defaults;
        work: MusicXML.Work;
        movementTitle: string;
        movementNumber: string;
        partList: MusicXML.PartList;
        constructor(spec: MusicXML.ScoreHeader);
        composer: string;
        title: string;
    }
    export function generateUUID(): string;
    export class Print implements MusicXML.Print {
        measureNumbering: MusicXML.MeasureNumbering;
        partNameDisplay: MusicXML.PartNameDisplay;
        newSystem: boolean;
        newPage: boolean;
        blankPage: string;
        measureLayout: MusicXML.MeasureLayout;
        partAbbreviationDisplay: MusicXML.PartAbbreviationDisplay;
        pageLayout: MusicXML.PageLayout;
        systemLayout: MusicXML.SystemLayout;
        staffSpacing: number;
        staffLayouts: MusicXML.StaffLayout[];
        pageNumber: string;
        constructor(print: MusicXML.Print);
        pageMarginsFor(page: number): MusicXML.PageMargins;
    }
    export function getPrint(header: ScoreHeader): Print;
    export interface IInstrument {
        name: string;
        shortName: string;
        soundfont: string;
        clef: Clef;
        program: number;
        lilypond: string;
    }
    export class InvalidDurationError {
    }
    export enum IterationStatus {
        ExitEarly = 5,
        Success = 10,
        RetryCurrent = 20,
        RetryCurrentNoOptimizations = 30,
        RetryBeam = 40,
        LineRemoved = 50,
        RetryLine = 60,
        LineCreated = 70,
        RetryPreviousLine = 80,
        RetryFromEntry = 90,
    }
    export interface ILocation {
        bar: number;
        division: number;
        endMarker?: boolean;
    }
    export class Location implements ILocation {
        bar: number;
        division: number;
        endMarker: boolean;
        eq(b: ILocation): boolean;
        lt(b: ILocation): boolean;
        le(b: ILocation): boolean;
        ge(b: ILocation): boolean;
        gt(b: ILocation): boolean;
        constructor(opts: ILocation);
    }
    export var log2: number;
    export var MAX_NUM: number;
    export interface INotation {
        glyph: string;
        noDirection: boolean;
        key?: string;
        x: number;
        y: number;
        scale: number;
        style?: any;
    }
    export var noteNames: string[];
    export class MetreContext {
        attributes: MusicXML.Attributes;
        endMarker: boolean;
        ts: ISimpleTimeSignature;
        bar: number;
        division: number;
        constructor(other?: MetreContext);
    }
    export interface IMidiEvent {
        type: MidiEventType;
        note: number;
        channel: number;
        velocity: number;
    }
    export enum MidiEventType {
        NoteOn = 0,
        NoteOff = 1,
    }
    export interface IMouse {
        x: number;
        y: number;
        selectionInfo?: string;
        page: number;
    }
    export interface IPart {
        id: string;
        containsVoice: {
            [x: number]: boolean;
        };
        staveCount: number;
    }
    export interface IVoice {
        body?: Model[];
        instrument?: IInstrument;
    }
    export interface IPitch extends MusicXML.Pitch {
        displayAlter?: number;
        isRest?: boolean;
        line?: number;
        temporary?: boolean;
    }
    export interface IPitchDuration extends IDuration {
        chord?: IPitch[];
        isRest?: boolean;
        tieds?: MusicXML.Tied[];
        accToDelete?: number;
        isWholebar?: boolean;
    }
    export interface IPlaybackStore {
        addChangeListener: (callback: Function) => void;
        addLoadingListener: (callback: Function) => void;
        removeChangeListener: (callback: Function) => void;
        removeLoadingListener: (callback: Function) => void;
        ensureLoaded: (soundfont: string, avoidEvent?: boolean) => boolean;
        destructor: () => void;
        bpm: number;
        playing: boolean;
        ready: boolean;
    }
    export enum PreviewMode {
        ExcludePreviews = 0,
        IncludePreviews = 1,
    }
    export interface IPointerAction {
        mouseData: IPointerData;
        fn: (obj: Model, ctx: Annotator.Context) => IterationStatus;
    }
    export interface IPointerData {
        partIdx: number;
        obj: Model;
        idx: number;
        visualIdx?: number;
        musicLine?: number;
        line?: number;
        ctxData?: IVisualCursor;
    }
    export enum RectifyXPolicy {
        Invalid = 0,
        Max = 1,
        Min = 2,
    }
    export interface IScoreStore {
        destructor: () => void;
        addListener: (event: number, listener: Function) => void;
        removeListener: (event: number, listener: Function) => void;
        dirty: boolean;
        finalCtx: Annotator.Context;
        getLineDirty: (idx: number, h: number) => void;
        midiOutHint: (out: number[]) => void;
        header: ScoreHeader;
        parts: IPart[];
        voices: IVoice[];
        src: string;
        visualCursor: IVisualCursor;
        dangerouslyMarkRenderDone: () => void;
        dangerouslyMarkRendererDirty: () => void;
        dangerouslyMarkRendererLineClean: (action: IFluxAction<string>) => void;
        dangerouslyMarkRendererLineDirty: (line: number) => void;
        dangerouslySetVisualCursor: (visualCursor: IVisualCursor) => void;
        dangerouslyTakeSnapshot: (ctx: Annotator.Context) => void;
        ensureSoundfontLoaded: (soundfont: string, avoidEvent?: boolean) => void;
    }
    export enum EventType {
        Change = 0,
        Annotate = 1,
        History = 2,
        ClearHistory = 3,
        MidiOut = 4,
        MidiIn = 5,
    }
    export enum Type {
        Print = 50,
        START_OF_ATTRIBUTES = 100,
        EndMarker = 110,
        NewPage = 120,
        NewLine = 130,
        Begin = 140,
        Attributes = 145,
        Clef = 150,
        KeySignature = 160,
        TimeSignature = 170,
        END_OF_ATTRIBUTES = 199,
        Barline = 300,
        START_OF_MODIFIERS = 400,
        Direction = 410,
        Slur = 425,
        BeamGroup = 450,
        Wedge = 475,
        END_OF_MODIFIERS = 499,
        Duration = 600,
        Placeholder = 999,
        Unknown = 1111,
    }
    export interface ISimpleTimeSignature {
        beats: number;
        beatType: number;
        commonRepresentation?: boolean;
    }
    export interface IUser {
        userId: string;
        _id: string;
        identity: {
            id: string;
            displayName: string;
        };
        whitelisted: boolean;
    }
    export interface IVisualCursor extends ILocation {
        annotatedObj?: Model;
        annotatedLine?: number;
        annotatedPage?: number;
        annotatedStave?: number;
    }
    export module NoteUtil {
        function makeDuration(spec: IDurationSpec): IDuration;
        function pitchToMidiNumber(p: IPitch): any;
        var noteToVal: {
            [x: string]: number;
        };
        var valToNote: any;
        function midiNumberToPitch(n: number, ctx: Annotator.Context): IPitch;
        function positiveMod(base: number, mod: number): number;
        function getAccidentals(key: MusicXML.Key): IAccidentals;
        var flatCircle: string;
        var sharpCircle: string;
        var keyCircle: string[];
        var circleOffsetByMode: {
            [x: string]: number;
        };
        function isPitch(k: IPitch, name: string, acc?: number): boolean;
    }
    export var InvalidAccidental: number;
    export interface ISynthCallback {
        tmpRef: string;
        forExport: boolean;
        cb: string;
    }
    export module JSONx {
        function clone<T>(obj: T): T;
        function hash<T>(obj: T): number;
    }
    export function deepAssign<T>(a: T, b: T): T;
    export function tsToSimpleTS(ts: MusicXML.Time): ISimpleTimeSignature;
    export var defaultClefLines: {
        [x: string]: number;
    };
}

declare module '__satie/stores/annotator' {
    import BarlineModel = require("__satie/stores/barline");
    import C = require("__satie/stores/contracts");
    import Model = require("__satie/stores/model");
    export class Context implements C.MetreContext {
        constructor(voices: C.IVoice[], layout: ILayoutOpts, editor: C.IScoreStore, assertionPolicy: AssertionPolicy);
        annotate(from: C.ILocation, cursor: C.IVisualCursor, disableRecording: boolean, dispatcher: C.IDispatcher): C.IAnnotationResult;
        abort(exception: any): void;
        captureLine(): ILineSnapshot;
        captureSnapshot(): IPartialSnapshot;
        curr: Model;
        staveSpacing: number;
        page: number;
        next(condition?: (model: Model) => boolean, skip?: number, allowModifiers?: boolean): Model;
        nextIdx(cond?: (model: Model, idx?: number) => boolean, skip?: number, allowModifiers?: boolean): number;
        intersects(type: C.Type, idx?: number, after?: boolean, before?: boolean): Model[];
        beamFollows(idx?: number): {
            inBeam: boolean;
            tuplet: C.MusicXML.TimeModification;
        }[];
        removeFollowingBeam(idx?: number, past?: boolean): C.IterationStatus;
        prev(condition?: (m: Model) => boolean, offset?: number): Model;
        eraseCurrent(splicePolicy?: SplicePolicy): C.IterationStatus;
        eraseFuture(idx: number): C.IterationStatus;
        erasePast(idx: number): C.IterationStatus;
        insertFuture(obj: Model, index?: number): C.IterationStatus;
        insertPast(obj: Model, index?: number, merge?: boolean): C.IterationStatus;
        insertPastVertical(objs: Model[], index?: number): C.IterationStatus;
        splice(start: number, count: number, replaceWith?: Model[], splicePolicy?: SplicePolicy): void;
        removeAdjacentBeams(note?: C.IDuration): C.IterationStatus;
        removeRemainingBeamsInBar(): C.IterationStatus;
        static insertPlaceholders(voices: C.IVoice[]): void;
        findVertical(where?: (obj: Model) => boolean, idx?: number): Model[];
        midiOutHint(out: number[]): void;
        nextActualType: number;
        _barAfter(index: number): Model;
        ts: C.ISimpleTimeSignature;
        markEntireSongDirty(): void;
        body: Model[];
        invisibleForBars: number;
        idx: number;
        voice: C.IVoice;
        voiceIdx: number;
        part: C.IPart;
        idxInPart: number;
        startOfBeamDivision: number;
        __globalDivision__: number;
        bar: number;
        division: number;
        endMarker: boolean;
        accidentalsByStaff: C.IAccidentals[];
        barlineX: number[];
        line: number;
        loc: C.ILocation;
        pageLines: number[];
        pageStarts: number[];
        smallest: number;
        minBottomPaddings: number[];
        minTopPaddings: number[];
        x: number;
        y: number;
        barKeys: string[];
        fontSize: number;
        maxX: number;
        maxY: number;
        score: C.IScoreStore;
        disableRecordings: boolean;
        _recordings: {
            [x: string]: BarlineModel;
        };
        record(model: BarlineModel): void;
        toJSON(): {};
        calcFontSize(): number;
        isBeam: boolean;
        nullEntry: boolean;
        _voices: C.IVoice[];
        _layout: ILayoutOpts;
        print: C.Print;
        _attributes: {
            [x: string]: C.MusicXML.Attributes;
        };
        attributes: C.MusicXML.Attributes;
        lines: ILineSnapshot[];
    }
    export enum SplicePolicy {
        MatchedOnly = 1,
        Additive = 2,
        Masked = 3,
        ShortenOtherVoices = 4,
        Subtractive = 5,
    }
    export enum AssertionPolicy {
        Strict = 0,
        NoAssertions = 1,
    }
    export interface ILayoutOpts {
        header: C.ScoreHeader;
        snapshot?: ICompleteSnapshot;
    }
    export interface ILineSnapshot {
        accidentalsByStaff: C.IAccidentals[];
        _attributes: {
            [x: string]: C.MusicXML.Attributes;
        };
        bar: number;
        barKeys: string[];
        barlineX: number[];
        division: number;
        invisibleForBars: number;
        line: number;
        pageLines: number[];
        pageStarts: number[];
        voiceIdx: number;
        x: number;
        y: number;
    }
    export interface IPartialSnapshot {
        fontSize: number;
        maxX: number;
        maxY: number;
        _attributes: {
            [x: string]: C.MusicXML.Attributes;
        };
        prevLine: ILineSnapshot;
        partialLine: ILineSnapshot;
    }
    export interface ICompleteSnapshot extends IPartialSnapshot {
        lines: ILineSnapshot[];
    }
    export function recordMetreData(parts: C.IPart[], voices: C.IVoice[]): void;
    export function initVoice(voices: C.IVoice[], voiceIdx: number): C.IterationStatus;
}

declare module '__satie/stores/model' {
    import Annotator = require("__satie/stores/annotator");
    import C = require("__satie/stores/contracts");
    class Model {
        key: string;
        idx: number;
        x: number;
        y: number;
        w: number;
        soundOnly: boolean;
        spacing: number;
        ctxData: C.MetreContext;
        isModifier: boolean;
        staff: number;
        inBeam: boolean;
        placeholder: boolean;
        selected: boolean;
        annotated: boolean;
        proposed: boolean;
        engraved: boolean;
        endMarker: boolean;
        beam: C.IPitchDuration[];
        note: C.IPitchDuration;
        isNote: boolean;
        isRest: boolean;
        visible: boolean;
        xPolicy: C.RectifyXPolicy;
        type: C.Type;
        fields: string[];
        mxmlJsonOnlyFields: string[];
        extraWidth: number;
        isAttribute: boolean;
        revision: string;
        priority: C.Type;
        calcDivisions(ctx: C.MetreContext): number;
        constructor(spec: any, annotated: boolean, engraved?: boolean);
        modelDidLoad(body: Model[], idx: number): void;
        annotate(ctx: Annotator.Context): C.IterationStatus;
        annotateImpl(ctx: Annotator.Context): C.IterationStatus;
        recordMetreDataImpl(mctx: C.MetreContext): void;
        render(options?: any): React.ReactElement<any>;
        toJSON(): {};
        assign<T>(obj: T): void;
        protected _getFlag(f: number): boolean;
        protected _setFlag(f: number, v: boolean): void;
        static _sessionId: string;
        static _lastKey: number;
        static setView: (View: (opts: {
            key: number;
            spec: Model;
        }) => any) => void;
        static removeAnnotations: (voices: C.IVoice[]) => void;
        static fromJSON(json: Object, existingObjects?: {
            [x: string]: Model;
        }): Model;
        static fromJSON(json: string, existingObjects?: {
            [x: string]: Model;
        }): Model;
        static newKey(): string;
    }
    module Model {
        var constructorsByType: {
            [x: number]: (spec: any) => Model;
        };
        class SubAttributeModel extends Model {
            annotate(ctx: Annotator.Context): C.IterationStatus;
            retryStatus: C.IterationStatus;
        }
    }
    export = Model;
}

declare module '__satie/util/SMuFL' {
    export import bravuraMetadata = require("__satie/util/bravura_metadata");
    export var glyphClasses: any;
    export var glyphNames: any;
    export var bravuraBBoxes: {
        [x: string]: any[];
    };
    export function getGlyphCode(name: string): string;
    export var distances: {
        beam: number;
    };
}

declare module '__satie/util/renderUtil' {
    export var rastalToHeight: number[];
    export var pageSizes: {
        name: string;
        lilypondName: string;
        width: number;
        height: number;
        unit: string;
    }[];
    export function defaultPageSize(): {
        name: string;
        lilypondName: string;
        width: number;
        height: number;
        unit: string;
    };
    export var defaultIndent: number;
    export var defaultMargins: {
        top: number;
        right: number;
        bottom: number;
        left: number;
    };
    export var defaultStaveHeight: number;
    export var lilypondSizes: {
        "choral": {
            width: number;
            height: number;
            unit: string;
        };
        "marching": {
            width: number;
            height: number;
            unit: string;
        };
        "a10": {
            width: number;
            height: number;
            unit: string;
        };
        "a9": {
            width: number;
            height: number;
            unit: string;
        };
        "a8": {
            width: number;
            height: number;
            unit: string;
        };
        "a7": {
            width: number;
            height: number;
            unit: string;
        };
        "a6": {
            width: number;
            height: number;
            unit: string;
        };
        "a5": {
            width: number;
            height: number;
            unit: string;
        };
        "a4": {
            width: number;
            height: number;
            unit: string;
        };
        "a3": {
            width: number;
            height: number;
            unit: string;
        };
        "a2": {
            width: number;
            height: number;
            unit: string;
        };
        "a1": {
            width: number;
            height: number;
            unit: string;
        };
        "a0": {
            width: number;
            height: number;
            unit: string;
        };
        "b10": {
            width: number;
            height: number;
            unit: string;
        };
        "b9": {
            width: number;
            height: number;
            unit: string;
        };
        "b8": {
            width: number;
            height: number;
            unit: string;
        };
        "b7": {
            width: number;
            height: number;
            unit: string;
        };
        "b6": {
            width: number;
            height: number;
            unit: string;
        };
        "b5": {
            width: number;
            height: number;
            unit: string;
        };
        "b4": {
            width: number;
            height: number;
            unit: string;
        };
        "b3": {
            width: number;
            height: number;
            unit: string;
        };
        "b2": {
            width: number;
            height: number;
            unit: string;
        };
        "b1": {
            width: number;
            height: number;
            unit: string;
        };
        "b0": {
            width: number;
            height: number;
            unit: string;
        };
        "4a0": {
            width: number;
            height: number;
            unit: string;
        };
        "2a0": {
            width: number;
            height: number;
            unit: string;
        };
        "c10": {
            width: number;
            height: number;
            unit: string;
        };
        "c9": {
            width: number;
            height: number;
            unit: string;
        };
        "c8": {
            width: number;
            height: number;
            unit: string;
        };
        "c7": {
            width: number;
            height: number;
            unit: string;
        };
        "c6": {
            width: number;
            height: number;
            unit: string;
        };
        "c5": {
            width: number;
            height: number;
            unit: string;
        };
        "c4": {
            width: number;
            height: number;
            unit: string;
        };
        "c3": {
            width: number;
            height: number;
            unit: string;
        };
        "c2": {
            width: number;
            height: number;
            unit: string;
        };
        "c1": {
            width: number;
            height: number;
            unit: string;
        };
        "c0": {
            width: number;
            height: number;
            unit: string;
        };
        "junior-legal": {
            width: number;
            height: number;
            unit: string;
        };
        "legal": {
            width: number;
            height: number;
            unit: string;
        };
        "ledger": {
            width: number;
            height: number;
            unit: string;
        };
        "letter": {
            width: number;
            height: number;
            unit: string;
        };
        "tabloid": {
            width: number;
            height: number;
            unit: string;
        };
        "11x17": {
            width: number;
            height: number;
            unit: string;
        };
        "17x11": {
            width: number;
            height: number;
            unit: string;
        };
        "government-letter": {
            width: number;
            height: number;
            unit: string;
        };
        "government-legal": {
            width: number;
            height: number;
            unit: string;
        };
        "philippine-legal": {
            width: number;
            height: number;
            unit: string;
        };
        "ansi a": {
            width: number;
            height: number;
            unit: string;
        };
        "ansi b": {
            width: number;
            height: number;
            unit: string;
        };
        "ansi c": {
            width: number;
            height: number;
            unit: string;
        };
        "ansi d": {
            width: number;
            height: number;
            unit: string;
        };
        "ansi e": {
            width: number;
            height: number;
            unit: string;
        };
        "engineering f": {
            width: number;
            height: number;
            unit: string;
        };
        "arch a": {
            width: number;
            height: number;
            unit: string;
        };
        "arch b": {
            width: number;
            height: number;
            unit: string;
        };
        "arch c": {
            width: number;
            height: number;
            unit: string;
        };
        "arch d": {
            width: number;
            height: number;
            unit: string;
        };
        "arch e": {
            width: number;
            height: number;
            unit: string;
        };
        "arch e1": {
            width: number;
            height: number;
            unit: string;
        };
        "statement": {
            width: number;
            height: number;
            unit: string;
        };
        "half letter": {
            width: number;
            height: number;
            unit: string;
        };
        "quarto": {
            width: number;
            height: number;
            unit: string;
        };
        "octavo": {
            width: number;
            height: number;
            unit: string;
        };
        "executive": {
            width: number;
            height: number;
            unit: string;
        };
        "monarch": {
            width: number;
            height: number;
            unit: string;
        };
        "foolscap": {
            width: number;
            height: number;
            unit: string;
        };
        "folio": {
            width: number;
            height: number;
            unit: string;
        };
        "super-b": {
            width: number;
            height: number;
            unit: string;
        };
        "post": {
            width: number;
            height: number;
            unit: string;
        };
        "crown": {
            width: number;
            height: number;
            unit: string;
        };
        "large post": {
            width: number;
            height: number;
            unit: string;
        };
        "demy": {
            width: number;
            height: number;
            unit: string;
        };
        "medium": {
            width: number;
            height: number;
            unit: string;
        };
        "broadsheet": {
            width: number;
            height: number;
            unit: string;
        };
        "royal": {
            width: number;
            height: number;
            unit: string;
        };
        "elephant": {
            width: number;
            height: number;
            unit: string;
        };
        "double demy": {
            width: number;
            height: number;
            unit: string;
        };
        "quad demy": {
            width: number;
            height: number;
            unit: string;
        };
        "atlas": {
            width: number;
            height: number;
            unit: string;
        };
        "imperial": {
            width: number;
            height: number;
            unit: string;
        };
        "antiquarian": {
            width: number;
            height: number;
            unit: string;
        };
        "pa0": {
            width: number;
            height: number;
            unit: string;
        };
        "pa1": {
            width: number;
            height: number;
            unit: string;
        };
        "pa2": {
            width: number;
            height: number;
            unit: string;
        };
        "pa3": {
            width: number;
            height: number;
            unit: string;
        };
        "pa4": {
            width: number;
            height: number;
            unit: string;
        };
        "pa5": {
            width: number;
            height: number;
            unit: string;
        };
        "pa6": {
            width: number;
            height: number;
            unit: string;
        };
        "pa7": {
            width: number;
            height: number;
            unit: string;
        };
        "pa8": {
            width: number;
            height: number;
            unit: string;
        };
        "pa9": {
            width: number;
            height: number;
            unit: string;
        };
        "pa10": {
            width: number;
            height: number;
            unit: string;
        };
        "f4": {
            width: number;
            height: number;
            unit: string;
        };
        "a8landscape": {
            width: number;
            height: number;
            unit: string;
        };
    };
    export function mmToTenths(scaling40: number, mm: number): number;
    export function cssSizeToTenths(scaling40: number, css: string): number;
    export function tenthsToMM(scaling40: number, tenths: number): number;
    export var ptPerMM: number;
    export var mmPerIn: number;
    export function sigmoid(t: number): number;
    export var V_PADDING: number;
    export function getHeaderHeight(header: any): number;
    export var staveSeperation: number;
    export var useGL: boolean;
}

declare module '__satie/util/hash' {
    function hash(str: string): number;
    export = hash;
}

declare module '__satie/stores/barline' {
    import Model = require("__satie/stores/model");
    import Annotator = require("__satie/stores/annotator");
    import C = require("__satie/stores/contracts");
    class BarlineModel extends Model implements C.MusicXML.BarlineComplete {
        type: C.Type;
        xPolicy: C.RectifyXPolicy;
        fields: string[];
        annotatedAccidentalSpacing: number;
        height: number;
        newlineNext: boolean;
        selected: boolean;
        temporary: boolean;
        yOffset: number;
        segno: C.MusicXML.Segno;
        coda: C.MusicXML.Coda;
        location: C.MusicXML.BarlineLocation;
        codaAttrib: string;
        wavyLine: C.MusicXML.WavyLine;
        fermatas: C.MusicXML.Fermata[];
        segnoAttrib: string;
        divisions: string;
        barStyle: C.MusicXML.BarStyle;
        ending: C.MusicXML.Ending;
        repeat: C.MusicXML.Repeat;
        footnote: C.MusicXML.Footnote;
        level: C.MusicXML.Level;
        constructor(spec: {
            barStyle: {
                data: C.MusicXML.BarStyleType;
            };
        }, annotated: boolean, engraved: boolean);
        recordMetreDataImpl(mctx: C.MetreContext): void;
        annotateImpl(ctx: Annotator.Context): C.IterationStatus;
        static createBarline: (ctx: Annotator.Context, type?: C.MusicXML.BarStyleType, engraved?: boolean) => C.IterationStatus;
    }
    export = BarlineModel;
}

declare module '__satie/util/bravura_metadata' {
    var Bravura: {
        "fontName": string;
        "fontVersion": number;
        "engravingDefaults": {
            "arrowShaftThickness": number;
            "barlineSeparation": number;
            "beamSpacing": number;
            "beamThickness": number;
            "bracketThickness": number;
            "dashedBarlineDashLength": number;
            "dashedBarlineGapLength": number;
            "dashedBarlineThickness": number;
            "hairpinThickness": number;
            "legerLineExtension": number;
            "legerLineThickness": number;
            "lyricLineThickness": number;
            "octaveLineThickness": number;
            "pedalLineThickness": number;
            "repeatBarlineDotSeparation": number;
            "repeatEndingLineThickness": number;
            "slurEndpointThickness": number;
            "slurMidpointThickness": number;
            "staffLineThickness": number;
            "stemThickness": number;
            "subBracketThickness": number;
            "textEnclosureThickness": number;
            "thickBarlineThickness": number;
            "thinBarlineThickness": number;
            "tieEndpointThickness": number;
            "tieMidpointThickness": number;
            "tupletBracketThickness": number;
        };
        "glyphBBoxes": {}[][];
        "glyphsWithAlternates": {
            "4stringTabClef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "6stringTabClef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "accdnPush": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "accidentalDoubleFlat": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "accidentalFlat": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "accidentalNatural": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "accidentalSharp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "accidentalTripleFlat": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articAccentAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articAccentBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articAccentStaccatoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articAccentStaccatoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articMarcatoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articMarcatoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articMarcatoStaccatoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articMarcatoStaccatoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatissimoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatissimoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatissimoStrokeAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatissimoStrokeBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatissimoWedgeAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatissimoWedgeBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articStaccatoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articTenutoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articTenutoAccentAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articTenutoAccentBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articTenutoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articTenutoStaccatoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "articTenutoStaccatoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "brace": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "cClef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "caesura": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "chantCclef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "chantFclef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "coda": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "doubleTongueAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "doubleTongueBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "dynamicForte": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "dynamicMezzo": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "dynamicNiente": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "dynamicPiano": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "dynamicRinforzando": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "dynamicSforzando": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "dynamicZ": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "fClef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag1024thDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag1024thUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag128thDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag128thUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag16thDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag16thUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag256thDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag256thUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag32ndDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag32ndUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag512thDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag512thUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag64thDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag64thUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag8thDown": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "flag8thUp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "gClef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "gClef8vb": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "harpMetalRod": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "harpTuningKey": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "keyboardPedalPed": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "keyboardPedalSost": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "luteFingeringRHThird": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "luteFrench10thCourse": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "luteFrench7thCourse": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "luteFrench8thCourse": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "luteFrench9thCourse": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "luteFrenchFretC": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "medRenFlatSoftB": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "mensuralCclef": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "mensuralProportion4": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "noteDoubleWhole": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "noteheadBlack": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "noteheadDoubleWhole": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "noteheadHalf": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "noteheadWhole": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictBassDrum": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictBongos": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictCastanets": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictConga": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictCowBell": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictFlexatone": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictGlsp": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictGuiro": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictLithophone": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictLotusFlute": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictMar": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictMaraca": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictMusicalSaw": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictSleighBell": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictTambourine": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictTimbales": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictTimpani": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictTomTom": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictTomTomChinese": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictTubaphone": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictVib": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictVibMotorOff": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictXyl": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictXylBass": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pictXylTenor": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pluckedSnapPizzicatoAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "pluckedSnapPizzicatoBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "repeatRightLeft": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "segno": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "stringsChangeBowDirection": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig0": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig1": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig2": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig3": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig4": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig5": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig6": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig7": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig8": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "timeSig9": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "tripleTongueAbove": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "tripleTongueBelow": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
            "unpitchedPercussionClef1": {
                "alternates": {
                    "codepoint": string;
                    "name": string;
                }[];
            };
        };
        "glyphsWithAnchors": {
            "flag1024thDown": {
                "stemDownSW": number[];
            };
            "flag1024thUp": {
                "stemUpNW": number[];
            };
            "flag1024thUpShort": {
                "stemUpNW": number[];
            };
            "flag128thDown": {
                "stemDownSW": number[];
            };
            "flag128thDownStraight": {
                "stemDownSW": number[];
            };
            "flag128thUp": {
                "stemUpNW": number[];
            };
            "flag128thUpShort": {
                "stemUpNW": number[];
            };
            "flag128thUpStraight": {
                "stemUpNW": number[];
            };
            "flag16thDown": {
                "stemDownSW": number[];
            };
            "flag16thUp": {
                "stemUpNW": number[];
            };
            "flag256thDown": {
                "stemDownSW": number[];
            };
            "flag256thDownStraight": {
                "stemDownSW": number[];
            };
            "flag256thUp": {
                "stemUpNW": number[];
            };
            "flag256thUpShort": {
                "stemUpNW": number[];
            };
            "flag256thUpStraight": {
                "stemUpNW": number[];
            };
            "flag32ndDown": {
                "stemDownSW": number[];
            };
            "flag32ndDownStraight": {
                "stemDownSW": number[];
            };
            "flag32ndUp": {
                "stemUpNW": number[];
            };
            "flag32ndUpShort": {
                "stemUpNW": number[];
            };
            "flag32ndUpStraight": {
                "stemUpNW": number[];
            };
            "flag512thDown": {
                "stemDownSW": number[];
            };
            "flag512thDownStraight": {
                "stemDownSW": number[];
            };
            "flag512thUp": {
                "stemUpNW": number[];
            };
            "flag512thUpShort": {
                "stemUpNW": number[];
            };
            "flag512thUpStraight": {
                "stemUpNW": number[];
            };
            "flag64thDown": {
                "stemDownSW": number[];
            };
            "flag64thDownStraight": {
                "stemDownSW": number[];
            };
            "flag64thUp": {
                "stemUpNW": number[];
            };
            "flag64thUpShort": {
                "stemUpNW": number[];
            };
            "flag64thUpStraight": {
                "stemUpNW": number[];
            };
            "flag8thDown": {
                "stemDownSW": number[];
            };
            "flag8thUp": {
                "stemUpNW": number[];
            };
            "gClefLigatedNumberAbove": {
                "numeralBottom": number[];
            };
            "gClefLigatedNumberBelow": {
                "numeralBottom": number[];
            };
            "noteABlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteAFlatBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteAFlatHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteAHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteASharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteASharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteBBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteBFlatBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteBFlatHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteBHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteBSharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteBSharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteCBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteCFlatBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteCFlatHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteCHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteCSharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteCSharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDFlatBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDFlatHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDSharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDSharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDoBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteDoHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteEBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteEFlatBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteEFlatHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteEHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteESharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteESharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteEmptyBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteEmptyHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFFlatBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFFlatHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFSharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFSharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFaBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteFaHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteGBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteGFlatBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteGFlatHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteGHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteGSharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteGSharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteHBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteHHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteHSharpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteHSharpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteLaBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteLaHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteMiBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteMiHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteReBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteReHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeDiamondBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeDiamondWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeMoonBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeMoonWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeRoundBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeRoundWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeSquareBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeSquareWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleLeftBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleLeftWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleRightBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleRightWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleRoundBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleRoundWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleUpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteShapeTriangleUpWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteSiBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteSiHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteSoBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteSoHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteTiBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteTiHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadCircleSlash": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadCircleX": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadCircleXHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadCircledBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadCircledHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterHalf2nd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterHalf3rd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterHalfBottom": {
                "stemDownNW": number[];
            };
            "noteheadClusterHalfTop": {
                "stemUpSE": number[];
            };
            "noteheadClusterQuarter2nd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterQuarter3rd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterQuarterBottom": {
                "stemDownNW": number[];
            };
            "noteheadClusterQuarterTop": {
                "stemUpSE": number[];
            };
            "noteheadClusterRoundBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterRoundWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterSquareBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadClusterSquareWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondBlackOld": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondBlackWide": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondClusterBlack2nd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondClusterBlack3rd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondClusterBlackBottom": {
                "stemDownNW": number[];
            };
            "noteheadDiamondClusterBlackTop": {
                "stemUpSE": number[];
            };
            "noteheadDiamondClusterWhite2nd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondClusterWhite3rd": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondClusterWhiteBottom": {
                "stemDownNW": number[];
            };
            "noteheadDiamondClusterWhiteTop": {
                "stemUpSE": number[];
            };
            "noteheadDiamondHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondHalfFilled": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondHalfOld": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondHalfWide": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondOpen": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadDiamondWhiteWide": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadHalfWithX": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadHeavyX": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadHeavyXHat": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadLargeArrowDownBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadLargeArrowDownHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadLargeArrowUpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadLargeArrowUpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadMoonBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadMoonWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadPlusBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadPlusHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundBlackLarge": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundBlackSlashed": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundBlackSlashedLarge": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundWhite": {
                "stemDownNW": number[];
                "stemup": number[];
            };
            "noteheadRoundWhiteLarge": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundWhiteSlashed": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundWhiteSlashedLarge": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundWhiteWithDot": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadRoundWhiteWithDotLarge": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashDiamondWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashHorizontalEnds": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashHorizontalEndsMuted": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashVerticalEnds": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashVerticalEndsMuted": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashVerticalEndsSmall": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashWhiteHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashWhiteMuted": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashX": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashedBlack1": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashedBlack2": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashedHalf1": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSlashedHalf2": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSquareBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSquareBlackLarge": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSquareBlackWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadSquareWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleDownBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleDownHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleDownWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleLeftBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleLeftWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleRightBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleRightWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleRoundDownBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleRoundDownWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleUpBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleUpHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleUpRightBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleUpRightWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadTriangleUpWhite": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadVoidWithX": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadXBlack": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadXHalf": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
            "noteheadXOrnate": {
                "stemDownNW": number[];
                "stemUpSE": number[];
            };
        };
        "ligatures": {
            "accidentalDoubleFlatParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "accidentalDoubleSharpParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "accidentalFlatParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "accidentalNaturalParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "accidentalSharpParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "fClef5Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef0Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef10Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef11Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef12Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef13Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef14Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef15Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef16Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef17Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef2Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef2Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef3Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef3Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef4Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef4Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef5Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef5Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef6Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef6Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef7Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef7Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef8Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef8Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef9Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClef9Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat10Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat11Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat13Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat14Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat15Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat16Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat1Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat2Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat2Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat3Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat3Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat4Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat5Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat6Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat6Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat7Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat7Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat8Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat9Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefFlat9Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNat2Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural10Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural13Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural17Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural2Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural3Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural3Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural6Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural6Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural7Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural9Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefNatural9Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefSharp12Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefSharp1Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefSharp4Above": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "gClefSharp5Below": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralFusaBlackStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralFusaBlackStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralFusaBlackVoidStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralFusaBlackVoidStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralFusaVoidStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralFusaVoidStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackStemDownLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackStemDownRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackStemUpLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackStemUpRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackVoidStemDownLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackVoidStemDownRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackVoidStemUpLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaBlackVoidStemUpRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaVoidStemDownLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaVoidStemDownRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaVoidStemUpLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralLongaVoidStemUpRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackStemDownLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackStemDownRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackStemUpLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackStemUpRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackVoidStemDownLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackVoidStemDownRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackVoidStemUpLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaBlackVoidStemUpRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaVoidStemDownLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaVoidStemDownRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaVoidStemUpLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMaximaVoidStemUpRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemDownExtendedFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemDownFlagLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemDownFlagRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemDownFlaredFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemUpExtendedFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemUpFlagLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemUpFlagRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackStemUpFlaredFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemDownExtendedFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemDownFlagLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemDownFlagRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemDownFlaredFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemUpExtendedFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemUpFlagLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemUpFlagRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaBlackVoidStemUpFlaredFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemDownExtendedFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemDownFlagLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemDownFlagRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemDownFlaredFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemUpExtendedFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemUpFlagLeft": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemUpFlagRight": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralMinimaVoidStemUpFlaredFlag": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralSemiminimaBlackStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralSemiminimaBlackStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralSemiminimaBlackVoidStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralSemiminimaBlackVoidStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralSemiminimaVoidStemDown": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "mensuralSemiminimaVoidStemUp": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "noteheadBlackParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "noteheadDoubleWholeParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "noteheadHalfParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "noteheadWholeParens": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTrillFlatAbove": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTrillNaturalAbove": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTrillSharpAbove": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnFlatAbove": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnFlatAboveSharpBelow": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnFlatBelow": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnNaturalAbove": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnNaturalBelow": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnSharpAbove": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnSharpAboveFlatBelow": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "ornamentTurnSharpBelow": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig0Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig0Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig1Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig1Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig2Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig2Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig3Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig3Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig4Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig4Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig5Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig5Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig6Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig6Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig7Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig7Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig8Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig8Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig9Denominator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
            "timeSig9Numerator": {
                "codepoint": string;
                "componentGlyphs": string[];
            };
        };
        "sets": {
            "ss01": {
                "glyphs": {
                    "codepoint": string;
                    "name": string;
                }[];
                "type": string;
            };
            "ss02": {
                "glyphs": {
                    "codepoint": string;
                    "name": string;
                }[];
                "type": string;
            };
            "ss03": {
                "glyphs": {
                    "codepoint": string;
                    "name": string;
                }[];
                "type": string;
            };
        };
    };
    export = Bravura;
}

