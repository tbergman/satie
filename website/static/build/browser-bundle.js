(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./.partialBuild/main.js":[function(require,module,exports){
var Page = require("./page");
var React = require("react");
(function main() {
    "use strict";
    React.render(React.createElement(Page.Component, null), document.body);
}());

},{"./page":"/Users/joshua/miniproj/satie/website/.partialBuild/page.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/.partialBuild/about.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Bootstrap = require("react-bootstrap");
var React = require("react");
var TypedReact = require("typed-react");
var About = (function (_super) {
    __extends(About, _super);
    function About() {
        _super.apply(this, arguments);
    }
    About.prototype.render = function () {
        return React.createElement("div", { className: "pageContent" }, React.createElement("h3", null, "Satie renders and plays ", React.createElement("a", { href: "http://musicxml.com" }, "MusicXML"), " in realtime."), React.createElement(Bootstrap.Well, null, React.createElement("div", null, React.createElement("a", { href: "javascript:void(0)" }, "Embed your own song »")), React.createElement("div", null, React.createElement("a", { href: "javascript:void(0)" }, "Edit in realtime »"))), 
            "Satie is a music engraver written in TypeScript that runs in modern browsers and on Node.js." + ' ' +
            "You can use it to embed sheet music in a webpage or application, or" + ' ' +
            "on a server to convert MusicXML to images (SVG) and audio (MP3)." + ' ' +
            "Satie is an open-source component of ", React.createElement("a", { href: "https://ripieno.io" }, "Ripieno.io"), "," + ' ' +
            "an online collaborative scorewritter."

            , React.createElement("h3", null, "Status"), 
            "Satie is currently in alpha, so not all or even most of MusicXML is supported."

            , React.createElement("h3", null, "Browser Support"), 
            "Satie targets SVG and either Web Audio or Flash. This means that" + ' ' +
            "Satie supports all major browsers natively, with the exception of Internet Explorer 8 and earlier." + ' ' +
            "Playback is available in browsers except for the stock Android browser and" + ' ' +
            "Internet Explorer 8 and earlier."
            , React.createElement("br", null), React.createElement("br", null), 
            "If you need to support stock Android, old versions of Internet Explorer, and/or browsers without" + ' ' +
            "JavaScript, use Satie's free iframe API service, which provides static image and" + ' ' +
            "audio fallbacks."
            , React.createElement("br", null), React.createElement("h3", null, "License"), 
            "Satie is licensed under the GNU Affero General Public License v3." + ' ' +
            "Applications, including web applications and ASPs, that incorporate or extend Satie" + ' ' +
            "must be licensed under a compatible license."
            , React.createElement("h3", null, React.createElement("a", { href: "javascript:void(0)" }, "Continue »")), React.createElement("br", null), React.createElement("br", null), React.createElement("br", null), React.createElement("br", null));
    };
    return About;
})(TypedReact.Component);
var About;
(function (About) {
    About.Component = TypedReact.createClass(About);
})(About || (About = {}));
module.exports = About;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js","react-bootstrap":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/main.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/.partialBuild/ajax.js":[function(require,module,exports){
var _ = require("lodash");
var postJSON = function (verb, url, json, onload) {
    if (typeof XMLHttpRequest === "undefined") {
        return;
    }
    var request = new XMLHttpRequest();
    request.open(verb, url);
    if (json) {
        request.setRequestHeader("Content-Type", "application/json");
    }
    request.onload = function () {
        onload(JSON.parse(request.responseText), request);
    };
    request.onerror = function () {
        onload(null, { status: undefined });
    };
    request.send(JSON.stringify(json));
};
var getJSON = function (url, onload) {
    if (typeof XMLHttpRequest === "undefined") {
        return;
    }
    var request = new XMLHttpRequest();
    request.open("GET", url);
    request.onload = function () {
        onload(JSON.parse(request.responseText), request);
    };
    request.send();
};
var getText = function (url, onload) {
    if (typeof XMLHttpRequest === "undefined") {
        return;
    }
    var request = new XMLHttpRequest();
    request.open("GET", url);
    request.onload = function () {
        onload(request.responseText, request);
    };
    request.send();
};
var methods = {
    postJSON: _.partial(postJSON, "POST"),
    putJSON: _.partial(postJSON, "PUT"),
    deleteJSON: _.partial(postJSON, "PUT"),
    getJSON: getJSON,
    getText: getText
};
module.exports = methods;

},{"lodash":"/Users/joshua/miniproj/satie/website/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/.partialBuild/header.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Bootstrap = require("react-bootstrap");
var React = require("react");
var TypedReact = require("typed-react");
var Header = (function (_super) {
    __extends(Header, _super);
    function Header() {
        _super.apply(this, arguments);
    }
    Header.prototype.render = function () {
        var brand = React.createElement("span", { style: { fontFamily: "Alegreya SC", fontSize: "14px", fontWeight: 900 } }, 
            "Satie Engraver"
            , React.createElement("span", { className: "ripieno-backlink-alt", role: "button", style: { fontFamily: "Alegreya SC", fontWeight: 400, marginLeft: 5 }, eventKey: 1 }, React.createElement("a", { href: "https://ripieno.io" }, 
                    "from Ripieno.io »"
                )));
        return React.createElement(Bootstrap.Navbar, { componentClass: "header", brand: brand, toggleNavKey: 0, role: "banner", staticTop: true }, React.createElement(Bootstrap.Nav, { className: "partialnav", role: "nav", onSelect: this.props.onSelect, style: { fontFamily: "Alegreya SC, Alegreya" }, eventKey: 0 }, React.createElement(Bootstrap.NavItem, { eventKey: "about", active: this.props.selectedKey === "about" }, 
                    "About"
                ), React.createElement(Bootstrap.NavItem, { eventKey: "start", active: this.props.selectedKey === "start" }, 
                    "Getting Started"
                ), React.createElement(Bootstrap.NavItem, { eventKey: "playground", active: this.props.selectedKey === "playground" }, 
                    "Playground"
                ), React.createElement(Bootstrap.NavItem, { eventKey: "spec", active: this.props.selectedKey === "spec" }, 
                    "Specification"
                )), React.createElement("ul", { className: "ripieno-backlink navbar-right", role: "button", style: { fontFamily: "Alegreya SC, Alegreya", marginTop: 15.5, float: "left" }, eventKey: 1 }, React.createElement("a", { href: "https://ripieno.io" }, 
                    "A Ripieno.io Project »"
                )));
    };
    return Header;
})(TypedReact.Component);
var Header;
(function (Header) {
    Header.Component = TypedReact.createClass(Header);
})(Header || (Header = {}));
module.exports = Header;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js","react-bootstrap":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/main.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/.partialBuild/page.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var About = require("./about");
var Header = require("./header");
var Start = require("./start");
var Spec = require("./spec");
var Playground = require("./playground");
var React = require("react");
var TypedReact = require("typed-react");
var Page = (function (_super) {
    __extends(Page, _super);
    function Page() {
        _super.apply(this, arguments);
    }
    Page.prototype.render = function () {
        return React.createElement("div", { className: "main" }, React.createElement(Header.Component, { key: "header", selectedKey: this.state.pageKey, onSelect: this.handlePageSelect }), this.state.pageKey === "about" && React.createElement(About.Component, { key: "about" }), this.state.pageKey === "start" && React.createElement(Start.Component, { key: "start" }), this.state.pageKey === "playground" && React.createElement(Playground.Component, { key: "playground" }), this.state.pageKey === "spec" && React.createElement(Spec.Component, { key: "spec" }), React.createElement("div", { style: { width: "100%", textAlign: "center" } }, "\u00a9", React.createElement("a", { href: "https://nettek.ca" }, " Josh Netterfield "), " 2015." + ' ' +
                "Some rights reserved.", React.createElement("br", null), 

                "Contribute on ", React.createElement("a", { href: "https://github.com/ripieno/ripieno-musicxml" }, " Github"), "."
                , React.createElement("div", { style: { height: 10 } })));
    };
    Page.prototype.getInitialState = function () {
        return {
            pageKey: "playground"
        };
    };
    Page.prototype.handlePageSelect = function (key) {
        this.setState({
            pageKey: key
        });
    };
    return Page;
})(TypedReact.Component);
var Page;
(function (Page) {
    Page.Component = TypedReact.createClass(Page);
})(Page || (Page = {}));
module.exports = Page;

},{"./about":"/Users/joshua/miniproj/satie/website/.partialBuild/about.js","./header":"/Users/joshua/miniproj/satie/website/.partialBuild/header.js","./playground":"/Users/joshua/miniproj/satie/website/.partialBuild/playground.js","./spec":"/Users/joshua/miniproj/satie/website/.partialBuild/spec.js","./start":"/Users/joshua/miniproj/satie/website/.partialBuild/start.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/.partialBuild/playground.js":[function(require,module,exports){
(function (global){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ajax = require("./ajax");
var Bootstrap = require("react-bootstrap");
var Satie = require("satie");
var React = require("react");
var TypedReact = require("typed-react");
var Playground = (function (_super) {
    __extends(Playground, _super);
    function Playground() {
        _super.apply(this, arguments);
    }
    Playground.prototype.render = function () {
        return React.createElement("div", { className: "pageContent" }, React.createElement(Bootstrap.Panel, { header: this.renderHeader(), footer: this.renderEditor() }, this.state.score && React.createElement(Satie.MusicXMLView, { musicXML: this.state.score, width: this.state.width, height: 300 }), this.state.error), React.createElement("h3", null, React.createElement("a", { href: "javascript:void(0)" }, "MusicXML Specification »")), React.createElement("br", null), React.createElement("br", null));
    };
    Playground.prototype.getInitialState = function () {
        return {
            test: "01a",
            width: 1
        };
    };
    Playground.prototype.handleSelectChanged = function () {
        this.setState({
            test: this.refs["select"].getDOMNode().value
        });
    };
    Playground.prototype.componentDidMount = function () {
        this.fetchSong();
        this._updateWidth();
        window.addEventListener("resize", this._updateWidth, false);
    };
    Playground.prototype.componentWillUnmount = function () {
        window.removeEventListener("resize", this._updateWidth, false);
    };
    Playground.prototype._updateWidth = function () {
        var node = this.getDOMNode();
        this.setState({
            width: node.clientWidth - 30
        });
    };
    Playground.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.state.test !== prevState.test) {
            this.fetchSong();
        }
    };
    Playground.prototype.fetchSong = function () {
        var _this = this;
        this.setState({ testSRC: "Loading..." });
        ajax.getText("/tests/" + this.state.test + ".xml", function (str) {
            _this.syncJSON(str);
        });
    };
    Playground.prototype.renderHeader = function () {
        return React.createElement("div", null, React.createElement("span", { style: { fontFamily: "Alegreya" } }, 
            "Modify the code and see changes in realtime."
            ), React.createElement("select", { ref: "select", value: this.state.test, style: { float: "right" }, onChange: this.handleSelectChanged }, React.createElement("option", { value: "01a" }, "Lily 01a: Pitches/Pitches"), React.createElement("option", { value: "01b" }, "Lily 01b: Pitches/Intervals"), React.createElement("option", { value: "01c" }, "Lily 01c: Pitches/NoVoice"), React.createElement("option", { value: "01d" }, "Lily 01d: Pitches/Microtones"), React.createElement("option", { value: "01e" }, "Lily 01e: Pitches/ParenAcc"), React.createElement("option", { value: "01f" }, "Lily 01f: Pitches/ParenMicroAcc"), React.createElement("option", { value: "02a" }, "Lily 02a: Rests/Durations"), React.createElement("option", { value: "02b" }, "Lily 02b: Rests/PitchedRests"), React.createElement("option", { value: "02c" }, "Lily 02c: Rests/MultiMeasure"), React.createElement("option", { value: "02d" }, "Lily 02d: Rests/MultiMeasureTS"), React.createElement("option", { value: "02e" }, "Lily 02e: Rests/NoType"), React.createElement("option", { value: "03a" }, "Lily 03a: Rhythm/Durations"), React.createElement("option", { value: "03b" }, "Lily 03b: Rhythm/Backup"), React.createElement("option", { value: "03c" }, "Lily 03c: Rhythm/DivisionChange"), React.createElement("option", { value: "03d" }, "Lily 03d: Rhythm/Factors"), React.createElement("option", { value: "11a" }, "Lily 11a: TimeSignatures"), React.createElement("option", { value: "11b" }, "Lily 11b: TS/NoTime"), React.createElement("option", { value: "11c" }, "Lily 11c: TS/CompoundTime"), React.createElement("option", { value: "11d" }, "Lily 11d: TS/CompoundMulti"), React.createElement("option", { value: "11e" }, "Lily 11e: TS/CompoundMixed"), React.createElement("option", { value: "11f" }, "Lily 11f: TS/SymbolMeaning"), React.createElement("option", { value: "11g" }, "Lily 11g: TS/SenzaMisura"), React.createElement("option", { value: "12a" }, "Lily 12a: Clefs"), React.createElement("option", { value: "12b" }, "Lily 12b: Clefs/NoKeyOrClef"), React.createElement("option", { value: "13a" }, "Lily 13a: KeySignatures"), React.createElement("option", { value: "13b" }, "Lily 13b: KS/ChurchModes"), React.createElement("option", { value: "13c" }, "Lily 13c: KS/NonTraditional"), React.createElement("option", { value: "13d" }, "Lily 13d: KS/Microtones"), React.createElement("option", { value: "14a" }, "Lily 14a: StaffDetails/LineChanges"), React.createElement("option", { value: "21a" }, "Lily 21a: Chords/Basic"), React.createElement("option", { value: "21b" }, "Lily 21b: Chords/TwoNotes"), React.createElement("option", { value: "21b" }, "Lily 21c: Chords/ThreeNotesDuration"), React.createElement("option", { value: "21d" }, "Lily 21d: Chords/Schubert"), React.createElement("option", { value: "21e" }, "Lily 21e: Chords/PickupMeasures"), React.createElement("option", { value: "21f" }, "Lily 21f: Chords/ElementInBetween"), React.createElement("option", { value: "22a" }, "Lily 22a: Noteheads"), React.createElement("option", { value: "22b" }, "Lily 22b: Staff/Notestyles"), React.createElement("option", { value: "22c" }, "Lily 22c: Noteheads/Chords"), React.createElement("option", { value: "22d" }, "Lily 22d: Noteheads/Parenthesized"), React.createElement("option", { value: "23a" }, "Lily 23a: Tuplets"), React.createElement("option", { value: "23b" }, "Lily 23b: Tuplets/Styles"), React.createElement("option", { value: "23c" }, "Lily 23c: Tuplets/NonStandard"), React.createElement("option", { value: "23d" }, "Lily 23d: Tuplets/Nested"), React.createElement("option", { value: "23e" }, "Lily 23e: Tuplets/Tremelo"), React.createElement("option", { value: "23f" }, "Lily 23f: Tuplets/DurationNoBracket"), React.createElement("option", { value: "24a" }, "Lily 24a: GraceNotes"), React.createElement("option", { value: "24b" }, "Lily 24b: ChordAsGraceNote"), React.createElement("option", { value: "24c" }, "Lily 24c: GraceNote/MeasureEnd"), React.createElement("option", { value: "24d" }, "Lily 24d: AfterGrace"), React.createElement("option", { value: "24e" }, "Lily 24e: GraceNote/StaffChange"), React.createElement("option", { value: "24f" }, "Lily 24f: GraceNote/Slur"), React.createElement("option", { value: "31a" }, "Lily 31a: Directions"), React.createElement("option", { value: "31c" }, "Lily 31c: MetronomeMarks"), React.createElement("option", { value: "32a" }, "Lily 32a: Notations"), React.createElement("option", { value: "32b" }, "Lily 32b: Articulations/Texts"), React.createElement("option", { value: "32c" }, "Lily 32c: MultipleNotationChildren"), React.createElement("option", { value: "32d" }, "Lily 32d: Arpeggio"), React.createElement("option", { value: "33a" }, "Lily 33a: Spanners"), React.createElement("option", { value: "33b" }, "Lily 33b: Spanners/Tie"), React.createElement("option", { value: "33c" }, "Lily 33c: Spanners/Slurs"), React.createElement("option", { value: "33d" }, "Lily 33d: Spanners/OctaveShifts"), React.createElement("option", { value: "33e" }, "Lily 33e: Spanners/OS/InvalidSize"), React.createElement("option", { value: "33f" }, "Lily 33f: Trill/EndingOnGraceNote"), React.createElement("option", { value: "33g" }, "Lily 33g: Slur/ChordedNotes"), React.createElement("option", { value: "33h" }, "Lily 33h: Spanners/Glissando"), React.createElement("option", { value: "33i" }, "Lily 33i: Ties/NotEnded"), React.createElement("option", { value: "4ia" }, "Lily 41a: MultiParts/PartOrder"), React.createElement("option", { value: "41b" }, "Lily 41b: MultiParts/MoreThan10"), React.createElement("option", { value: "41c" }, "Lily 41c: StaffGroups"), React.createElement("option", { value: "41d" }, "Lily 41d: StaffGroups/Nested"), React.createElement("option", { value: "41e" }, "Lily 41e: StaffGroups/NamesNewline"), React.createElement("option", { value: "41f" }, "Lily 41f: StaffGroups/Overlapping"), React.createElement("option", { value: "41g" }, "Lily 41g: StaffGroups/PartNoId"), React.createElement("option", { value: "41h" }, "Lily 41h: StaffGroups/TooManyParts"), React.createElement("option", { value: "41i" }, "Lily 41i: StaffGroups/Override"), React.createElement("option", { value: "42a" }, "Lily 42a: MultiVoice/2Voices/Lyrics"), React.createElement("option", { value: "42b" }, "Lily 42b: MultiVoice/MidMesaureClef"), React.createElement("option", { value: "43a" }, "Lily 43a: PianoStaff"), React.createElement("option", { value: "43b" }, "Lily 43b: MultiStaff/DifferentKeys"), React.createElement("option", { value: "43c" }, "Lily 43c: MultiStaff/KeysAfterBackup"), React.createElement("option", { value: "43d" }, "Lily 43d: MultiStaff/StaffChange"), React.createElement("option", { value: "43e" }, "Lily 43e: MultiStaff/ClefDynamics"), React.createElement("option", { value: "45a" }, "Lily 45a: SimpleRepeat"), React.createElement("option", { value: "45b" }, "Lily 45b: Repeats/WithAlternatives"), React.createElement("option", { value: "45c" }, "Lily 45c: Repeats/MultipleTimes"), React.createElement("option", { value: "45d" }, "Lily 45d: Repeats/NestedAlts"), React.createElement("option", { value: "45e" }, "Lily 45e: Repeats/NestedAlts2"), React.createElement("option", { value: "45f" }, "Lily 45f: Repeats/InvalidEndings"), React.createElement("option", { value: "45g" }, "Lily 45g: Repeats/NotEnded"), React.createElement("option", { value: "46a" }, "Lily 46a: Barlines"), React.createElement("option", { value: "46b" }, "Lily 46b: MidmeasureBarlines"), React.createElement("option", { value: "46c" }, "Lily 46b: MidmeasureClef"), React.createElement("option", { value: "46d" }, "Lily 46d: Pickup/ImplicitMeasures"), React.createElement("option", { value: "46e" }, "Lily 46e: Pickup/LateSecondVoice"), React.createElement("option", { value: "46f" }, "Lily 46f: IncompleteMeasures"), React.createElement("option", { value: "46a" }, "Lily 46g: Chordnames/FiguredBass"), React.createElement("option", { value: "51b" }, "Lily 51b: Header/Quotes"), React.createElement("option", { value: "51c" }, "Lily 51c: MultipleRights"), React.createElement("option", { value: "51d" }, "Lily 51d: EmptyTitle"), React.createElement("option", { value: "52a" }, "Lily 52a: PageLayout"), React.createElement("option", { value: "52b" }, "Lily 52b: Breaks"), React.createElement("option", { value: "61a" }, "Lily 61a: Lyrics"), React.createElement("option", { value: "61b" }, "Lily 61b: MultipleLyrics"), React.createElement("option", { value: "61c" }, "Lily 61c: Lyrics/Pianostaff"), React.createElement("option", { value: "61d" }, "Lily 61d: Lyrics/Melisma"), React.createElement("option", { value: "61e" }, "Lily 61e: Lyrics/Chord"), React.createElement("option", { value: "61f" }, "Lily 61f: Lyrics/GraceNotes"), React.createElement("option", { value: "61g" }, "Lily 61g: Lyrics/NameNumber"), React.createElement("option", { value: "61h" }, "Lily 61h: Lyrics/BeamsMelismata"), React.createElement("option", { value: "61i" }, "Lily 61i: Lyrics/Chords"), React.createElement("option", { value: "61j" }, "Lily 61j: Lyrics/Elisions"), React.createElement("option", { value: "61k" }, "Lily 61k: Lyrics/SpannersExtenders"), React.createElement("option", { value: "71a" }, "Lily 71a: Chordnames"), React.createElement("option", { value: "71c" }, "Lily 71c: ChordFrets"), React.createElement("option", { value: "71d" }, "Lily 71d: ChordFrets/Multistaff"), React.createElement("option", { value: "71e" }, "Lily 71e: TabStaves"), React.createElement("option", { value: "71f" }, "Lily 71f: AllChordTypes"), React.createElement("option", { value: "71g" }, "Lily 71g: MultipleChordNames"), React.createElement("option", { value: "72a" }, "Lily 72a: TransposingInst"), React.createElement("option", { value: "72b" }, "Lily 72b: TransposingInst/Full"), React.createElement("option", { value: "72c" }, "Lily 72c: TransposingInst/Change"), React.createElement("option", { value: "73a" }, "Lily 73a: Percussion"), React.createElement("option", { value: "74a" }, "Lily 74a: FiguredBass"), React.createElement("option", { value: "75a" }, "Lily 75a: AccordionRegistrations"), React.createElement("option", { value: "90a" }, "Lily 90a: CompressedMusicXML"), React.createElement("option", { value: "99a" }, "Lily 99a: Sibelius5/IgnoreBeaming"), React.createElement("option", { value: "99b" }, "Lily 99b: Sibelius5/BeamsMelismata")));
    };
    Playground.prototype.renderEditor = function () {
        return React.createElement("div", null, React.createElement("textarea", { style: { width: "49%", height: 400 }, value: this.state.testSRC, onChange: this.handleChange }), React.createElement("textarea", { style: { width: "49%", height: 400 }, readOnly: true, value: JSON.stringify(this.state.score, null, 2) }));
    };
    Playground.prototype.handleChange = function (ev) {
        var str = ev.currentTarget.value;
        this.syncJSON(str);
    };
    Playground.prototype.syncJSON = function (str) {
        var error;
        var score;
        try {
            score = Satie.MusicXML.parseXML(str);
            global.score = score;
        }
        catch (err) {
            error = err.toString;
        }
        this.setState({
            testSRC: str,
            error: error,
            score: score
        });
    };
    return Playground;
})(TypedReact.Component);
var Playground;
(function (Playground) {
    Playground.Component = TypedReact.createClass(Playground);
})(Playground || (Playground = {}));
module.exports = Playground;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./ajax":"/Users/joshua/miniproj/satie/website/.partialBuild/ajax.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js","react-bootstrap":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/main.js","satie":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/satie.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/.partialBuild/spec.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Bootstrap = require("react-bootstrap");
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var ajax = require("./ajax");
var saveEverything;
var MultilineInfoBlob = (function (_super) {
    __extends(MultilineInfoBlob, _super);
    function MultilineInfoBlob() {
        _super.apply(this, arguments);
    }
    MultilineInfoBlob.prototype.render = function () {
        if (!this.state.editMode) {
            return React.createElement("div", { ref: "ro" }, (this.props.spec[this.props.prop] || this.props.placeholder || "").replace(" ", "\u00a0").split("\n").map(function (a, i) { return React.createElement("div", { key: i }, a, React.createElement("br", null)); }), React.createElement("a", { style: { color: "#ddd" }, href: "javascript:void(0)", onClick: this.handleEditClicked }, "edit"), React.createElement("a", { style: { color: "#ddd" }, href: "javascript:void(0)", onClick: this.handleEditJSONClicked }, "(json)"));
        }
        else if (this.state.editMode === "comment") {
            return React.createElement("div", null, React.createElement("textarea", { style: { width: "100%", height: this.state.height }, value: this.props.spec[this.props.prop], onChange: this.handleChange }), React.createElement("a", { href: "javascript:void(0)", onClick: this.save }, "save"));
        }
        else if (this.state.editMode === "json") {
            return React.createElement("div", null, React.createElement("textarea", { style: { width: "100%", height: this.state.height }, value: this.state.jsonStr, onChange: this.handleChange }), React.createElement("a", { href: "javascript:void(0)", onClick: this.save }, "save"));
        }
    };
    MultilineInfoBlob.prototype.getInitialState = function () {
        return {
            editing: null
        };
    };
    MultilineInfoBlob.prototype.handleEditClicked = function () {
        this.setState({
            height: this.refs["ro"].getDOMNode().clientHeight - 30,
            editMode: "comment"
        });
    };
    MultilineInfoBlob.prototype.handleEditJSONClicked = function () {
        this.setState({
            height: this.refs["ro"].getDOMNode().clientHeight - 30,
            editMode: "json",
            jsonStr: JSON.stringify(this.props.spec, null, 2),
        });
    };
    MultilineInfoBlob.prototype.handleChange = function (e) {
        var str = e.currentTarget.value;
        if (this.state.editMode === "json") {
            this.setState({
                jsonStr: str
            });
        }
        else {
            this.props.spec[this.props.prop] = str;
            this.forceUpdate();
        }
    };
    MultilineInfoBlob.prototype.save = function () {
        if (this.state.editMode === "json") {
            _.extend(this.props.spec, JSON.parse(this.state.jsonStr));
        }
        this.setState({ editMode: null });
        saveEverything();
    };
    return MultilineInfoBlob;
})(TypedReact.Component);
var MultilineInfoBlob;
(function (MultilineInfoBlob) {
    MultilineInfoBlob.Component = TypedReact.createClass(MultilineInfoBlob);
})(MultilineInfoBlob || (MultilineInfoBlob = {}));
function deblob(str) {
    "use strict";
    str = str.slice(1, str.length - 1);
    return str;
}
var InterfaceBlob = (function (_super) {
    __extends(InterfaceBlob, _super);
    function InterfaceBlob() {
        _super.apply(this, arguments);
    }
    InterfaceBlob.prototype.render = function () {
        var _this = this;
        var typesByName = this.props.typesByName;
        return React.createElement("div", null, _.map(this.props.ifce.interface, function (v, k) { return React.createElement(Bootstrap.Accordion, { key: k, activeKey: _this.state.activePropKey, onSelect: _this.handlePropSelect }, k === "_extends" ? v.map(function (a, i) { return React.createElement(Bootstrap.Panel, { key: i, eventKey: a, bsStyle: "primary", header: "Extends " + a }, React.createElement("div", null, React.createElement(MultilineInfoBlob.Component, { spec: typesByName[a], prop: "//", placeholder: "NO DOCUMENTATION\n\n" })), _this.state.activePropKey === a && React.createElement(Blob.Component, { typesByName: typesByName, ifce: typesByName[a] })); }) : React.createElement(Bootstrap.Panel, { eventKey: k, bsStyle: k.indexOf("<") === 0 ? "success" : "danger", header: React.createElement("span", null, !isNaN(v.idx) ? "Property " + v.idx + ". " : "", k + " ", React.createElement("i", { style: { float: "right" }, className: v.array ? "fa-list-ol fa" : (v.required ? "fa-check-square-o fa" : "fa-square-o fa") }), v.type && React.createElement(Bootstrap.Label, { bsStyle: "danger", style: { float: "right" } }, v.type), v === "__flag__" && React.createElement(Bootstrap.Label, { bsStyle: "success", style: { float: "right" } }, "Flag"), v.child && React.createElement(Bootstrap.Label, { bsStyle: "warning", style: { float: "right" } }, "CDATA"), v.std === undefined ? "" : " = " + v.std) }, k.indexOf("<") !== 0 && React.createElement(MultilineInfoBlob.Component, { spec: v, prop: "//", placeholder: "NO DOCUMENTATION\n\n" }), k.indexOf("<") === 0 && v !== "__flag__" && !v.type && React.createElement(MultilineInfoBlob.Component, { spec: typesByName[deblob(k)], prop: "//", placeholder: "NO DOCUMENTATION\n\n" }), _this.state.activePropKey === k && k.indexOf("<") === 0 && v !== "__flag__" && !v.type && React.createElement(Blob.Component, { ifce: typesByName[deblob(k)], typesByName: typesByName }), _this.state.activePropKey === k && k.indexOf("<") !== 0 && v !== "__flag__" && v.type !== "string" && typesByName[v.type] && React.createElement(Blob.Component, { ifce: typesByName[v.type], typesByName: typesByName }))); }));
    };
    InterfaceBlob.prototype.handlePropSelect = function (key) {
        this.setState({
            activePropKey: key
        });
    };
    InterfaceBlob.prototype.getInitialState = function () {
        return {
            activePropKey: ""
        };
    };
    return InterfaceBlob;
})(TypedReact.Component);
var InterfaceBlob;
(function (InterfaceBlob) {
    "use strict";
    InterfaceBlob.Component = TypedReact.createClass(InterfaceBlob);
})(InterfaceBlob || (InterfaceBlob = {}));
var Blob = (function (_super) {
    __extends(Blob, _super);
    function Blob() {
        _super.apply(this, arguments);
    }
    Blob.prototype.render = function () {
        var s = this.props.ifce;
        var typesByName = this.props.typesByName;
        return React.createElement("span", null, s.interface && typeof s.interface === "string" && React.createElement(Bootstrap.Label, { bsStyle: "danger" }, "Is a ", s.interface, "."), s.interface && s.interface instanceof Object && React.createElement(InterfaceBlob.Component, { ifce: s, typesByName: typesByName }), s.enum && _.map(s.enum, function (v, k) { return React.createElement("div", { key: k }, React.createElement(Bootstrap.Label, { bsStyle: "success" }, k, " = ", v), React.createElement("br", null), React.createElement("br", null)); }), s.range && React.createElement("div", null, React.createElement(Bootstrap.Label, { bsStyle: "success" }, "Range ∈ [", s.range.fromIncl, ", ", s.range.toIncl, "]"), React.createElement("br", null)));
    };
    return Blob;
})(TypedReact.Component);
var Blob;
(function (Blob) {
    "use strict";
    Blob.Component = TypedReact.createClass(Blob);
})(Blob || (Blob = {}));
function toCamelCase(input) {
    "use strict";
    return input.toLowerCase().replace(/-(.)/g, function (match, group1) {
        return group1.toUpperCase();
    });
}
function getHeader(s) {
    "use strict";
    var title;
    var jsName;
    if (s.element) {
        jsName = toCamelCase(s.element);
        jsName = jsName[0].toUpperCase() + jsName.slice(1);
        title = "<" + s.element + ">";
    }
    else {
        title = "{" + s.entity + "}";
        jsName = toCamelCase(s.entity);
    }
    var fr = { float: "right" };
    var labels;
    if (s["enum"]) {
        labels = React.createElement(Bootstrap.Label, { style: fr, bsStyle: "danger" }, "Enum");
    }
    else if (s.interface) {
        labels = React.createElement(Bootstrap.Label, { style: fr, bsStyle: "primary" }, "Interface");
    }
    else if (s.range) {
        labels = React.createElement(Bootstrap.Label, { style: fr, bsStyle: "success" }, "Range");
    }
    else if (s.manualType) {
        labels = React.createElement(Bootstrap.Label, { style: fr, bsStyle: "warning" }, "Manual Type");
    }
    else {
        labels = React.createElement(Bootstrap.Label, { style: fr, bsStyle: "warning" }, "Unknown");
    }
    return React.createElement("h3", null, title, React.createElement("small", { style: { fontSize: 14 } }, " = " + jsName), labels);
    return React.createElement("span", null, "Unknown");
}
var Spec = (function (_super) {
    __extends(Spec, _super);
    function Spec() {
        _super.apply(this, arguments);
    }
    Spec.prototype.render = function () {
        if (!this.state.spec) {
            return React.createElement("div", { className: "pageContent" }, 
                "Loading..."
            );
        }
        var spec = this.state.spec;
        var typesByName = _.indexBy(spec.types, function (a) { return a.entity || a.element; });
        var s = typesByName["score-timewise"];
        return React.createElement("div", { className: "pageContent minipad" }, 
            "I developed this page as an easy-to-navigate reference for MusicXML. It's mostly the" + ' ' +
            "same as ", React.createElement("a", { href: "http://www.musicxml.com/for-developers/" }, "the official reference"), " but" + ' ' +
            "contains some Ripieno-specific comments, links to relevant tests, some default values as" + ' ' +
            "used by Ripieno MusicXML, and (most importantly) contains everything on a single page." + ' ' +
            "In addition, comments about attributes have been moved from their parent elements to" + ' ' +
            "the attributes themselves.", React.createElement("br", null), React.createElement("br", null), React.createElement("span", { style: { fontFamily: "Alegreya SC, Alegreya", fontWeight: 900 } }, "Basic knowledge of MusicXML is assumed. "), 
            "This document describes timewise MusicXML." + ' ' +
            "If you aren't sure what that means, or need a general overview of MusicXML, take a look" + ' ' +
            "at the fantastic ", React.createElement("a", { href: "http://www.musicxml.com/tutorial/" }, "official MusicXML tutorial"), "."
            , React.createElement("br", null), React.createElement("br", null), 
            "Click on headers to expand them. Good luck!", React.createElement("br", null), React.createElement("br", null), React.createElement(Bootstrap.Panel, { key: "copyright", eventKey: "copyright", header: "Copyright" }, React.createElement(MultilineInfoBlob.Component, { spec: spec, prop: "copyright" })), React.createElement(Bootstrap.Panel, { key: "score-timewise", eventKey: "score-timewise", header: getHeader(s) }, React.createElement(MultilineInfoBlob.Component, { spec: s, prop: "//", placeholder: "NO DOCUMENTATION\n\n" }), React.createElement(Blob.Component, { ifce: s, typesByName: typesByName })));
    };
    Spec.prototype.componentDidMount = function () {
        var _this = this;
        ajax.getJSON("/spec", function (response, request) {
            _this.setState({
                spec: response
            });
        });
        saveEverything = function () {
            console.log(_this.state.spec);
            ajax.postJSON("/spec", _this.state.spec, function (response, request) {
                console.log("OK");
            });
        };
    };
    Spec.prototype.getInitialState = function () {
        return {};
    };
    return Spec;
})(TypedReact.Component);
var Spec;
(function (Spec) {
    Spec.Component = TypedReact.createClass(Spec);
})(Spec || (Spec = {}));
module.exports = Spec;

},{"./ajax":"/Users/joshua/miniproj/satie/website/.partialBuild/ajax.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js","react-bootstrap":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/main.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/.partialBuild/start.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Bootstrap = require("react-bootstrap");
var React = require("react");
var TypedReact = require("typed-react");
var About = (function (_super) {
    __extends(About, _super);
    function About() {
        _super.apply(this, arguments);
    }
    About.prototype.render = function () {
        return React.createElement("div", { className: "pageContent" }, 
            "There are two ways to use Satie."
            , React.createElement("h3", null, "Easy option: iframe API"), 
            "You can use Ripieno's embed service to easily share your MusicXML songs. Just set the desired" + ' ' +
            "parameters, and copy-paste the resulting HTML to your webpage. By using this service, you give" + ' ' +
            "Ripieno the right to host and modify the song. If you can't do that, see the React Component option." + ' ' +
            "You should use this option if you need fallbacks for older browsers (see \"About\").", React.createElement("br", null), React.createElement("br", null), React.createElement("div", { style: { padding: 20, backgroundColor: "#eef", borderBottom: "1px solid black" } }, React.createElement("form", { className: "form-horizontal" }, React.createElement(Bootstrap.Input, { type: "text", label: "URL of song", labelClassName: "col-xs-2", wrapperClassName: "col-xs-10", value: this.state.uri, onChange: this.handleURIChange }), React.createElement(Bootstrap.Input, { type: "checkbox", label: "Indexable", wrapperClassName: "col-xs-offset-2 col-xs-10", help: "If this is set, the song will be added to Ripieno's search and directory. Set this to help people find your sheet music.", checked: this.state.indexable, onChange: this.handleIndexableCheck }), React.createElement(Bootstrap.Input, { type: "checkbox", label: "Downloadable, Printable, and Copyable", wrapperClassName: "col-xs-offset-2 col-xs-10", help: "If this set, people will be able to download, print, and create copies of this song.", checked: this.state.copyable, onChange: this.handleCopyCheck }))), React.createElement("div", { style: { padding: 20, backgroundColor: "#eee" } }, React.createElement("div", { style: { textAlign: "center", width: "100%" } }, 
                    "Change the above values to see a preview here."
                ), React.createElement("br", null), React.createElement("br", null), 
                "Copy and paste this code:"
            , React.createElement(Bootstrap.Well, { style: { fontFamily: "monospace" } }, "<iframe", React.createElement("br", null), "\u00a0\u00a0\u00a0\u00a0width=\"600\"", React.createElement("br", null), "\u00a0\u00a0\u00a0\u00a0height=\"1280\"", React.createElement("br", null), "\u00a0\u00a0\u00a0\u00a0src=\"https://ripieno.io/api/v0/musicXML/embed?src=" + encodeURIComponent(this.state.uri) + "&indexable=" + (this.state.indexable ? "true" : "false") + "&copyable=" + (this.state.copyable ? "true" : "false") + "\"", React.createElement("br", null), "\u00a0\u00a0\u00a0\u00a0frameborder=\"0\">", React.createElement("br", null), "</iframe>")), React.createElement("h3", null, "Harder option: React Component"), React.createElement("div", { style: { padding: 20, fontFamily: "monospace", backgroundColor: "#eee" } }, 
            "npm install -g satie"
            ), React.createElement("h3", null, React.createElement("a", { href: "javascript:void(0)" }, "Continue »")), React.createElement("br", null), React.createElement("br", null), React.createElement("br", null), React.createElement("br", null));
    };
    About.prototype.handleURIChange = function (ev) {
        this.setState({
            uri: ev.currentTarget.value
        });
    };
    About.prototype.handleIndexableCheck = function () {
        this.setState({
            indexable: !this.state.indexable
        });
    };
    About.prototype.handleCopyCheck = function () {
        this.setState({
            copyable: !this.state.copyable
        });
    };
    About.prototype.getInitialState = function () {
        return {
            uri: "http://url.to/music.xml",
            indexable: true,
            copyable: true
        };
    };
    return About;
})(TypedReact.Component);
var About;
(function (About) {
    About.Component = TypedReact.createClass(About);
})(About || (About = {}));
module.exports = About;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js","react-bootstrap":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/main.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js":[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/util/util.js"}],"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/events/events.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canMutationObserver = typeof window !== 'undefined'
    && window.MutationObserver;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    var queue = [];

    if (canMutationObserver) {
        var hiddenDiv = document.createElement("div");
        var observer = new MutationObserver(function () {
            var queueList = queue.slice();
            queue.length = 0;
            queueList.forEach(function (fn) {
                fn();
            });
        });

        observer.observe(hiddenDiv, { attributes: true });

        return function nextTick(fn) {
            if (!queue.length) {
                hiddenDiv.setAttribute('yes', 'no');
            }
            queue.push(fn);
        };
    }

    if (canPost) {
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/util/support/isBufferBrowser.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js","inherits":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/lodash/dist/lodash.js":[function(require,module,exports){
(function (global){
/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Accordion.js":[function(require,module,exports){
var React = require('react');
var PanelGroup = require('./PanelGroup');

var Accordion = React.createClass({displayName: 'Accordion',
  render: function () {
    return (
      React.createElement(PanelGroup, React.__spread({},  this.props, {accordion: true}), 
        this.props.children
      )
    );
  }
});

module.exports = Accordion;
},{"./PanelGroup":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/PanelGroup.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Affix.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var AffixMixin = require('./AffixMixin');
var domUtils = require('./utils/domUtils');

var Affix = React.createClass({displayName: 'Affix',
  statics: {
    domUtils: domUtils
  },

  mixins: [AffixMixin],

  render: function () {
    var holderStyle = {top: this.state.affixPositionTop};
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, this.state.affixClass), style: holderStyle}), 
        this.props.children
      )
    );
  }
});

module.exports = Affix;
},{"./AffixMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/AffixMixin.js","./utils/domUtils":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/domUtils.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/AffixMixin.js":[function(require,module,exports){
/* global window, document */

var React = require('react');
var domUtils = require('./utils/domUtils');
var EventListener = require('./utils/EventListener');

var AffixMixin = {
  propTypes: {
    offset: React.PropTypes.number,
    offsetTop: React.PropTypes.number,
    offsetBottom: React.PropTypes.number
  },

  getInitialState: function () {
    return {
      affixClass: 'affix-top'
    };
  },

  getPinnedOffset: function (DOMNode) {
    if (this.pinnedOffset) {
      return this.pinnedOffset;
    }

    DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, '');
    DOMNode.className += DOMNode.className.length ? ' affix' : 'affix';

    this.pinnedOffset = domUtils.getOffset(DOMNode).top - window.pageYOffset;

    return this.pinnedOffset;
  },

  checkPosition: function () {
    var DOMNode, scrollHeight, scrollTop, position, offsetTop, offsetBottom,
        affix, affixType, affixPositionTop;

    // TODO: or not visible
    if (!this.isMounted()) {
      return;
    }

    DOMNode = this.getDOMNode();
    scrollHeight = document.documentElement.offsetHeight;
    scrollTop = window.pageYOffset;
    position = domUtils.getOffset(DOMNode);
    offsetTop;
    offsetBottom;

    if (this.affixed === 'top') {
      position.top += scrollTop;
    }

    offsetTop = this.props.offsetTop != null ?
      this.props.offsetTop : this.props.offset;
    offsetBottom = this.props.offsetBottom != null ?
      this.props.offsetBottom : this.props.offset;

    if (offsetTop == null && offsetBottom == null) {
      return;
    }
    if (offsetTop == null) {
      offsetTop = 0;
    }
    if (offsetBottom == null) {
      offsetBottom = 0;
    }

    if (this.unpin != null && (scrollTop + this.unpin <= position.top)) {
      affix = false;
    } else if (offsetBottom != null && (position.top + DOMNode.offsetHeight >= scrollHeight - offsetBottom)) {
      affix = 'bottom';
    } else if (offsetTop != null && (scrollTop <= offsetTop)) {
      affix = 'top';
    } else {
      affix = false;
    }

    if (this.affixed === affix) {
      return;
    }

    if (this.unpin != null) {
      DOMNode.style.top = '';
    }

    affixType = 'affix' + (affix ? '-' + affix : '');

    this.affixed = affix;
    this.unpin = affix === 'bottom' ?
      this.getPinnedOffset(DOMNode) : null;

    if (affix === 'bottom') {
      DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, 'affix-bottom');
      affixPositionTop = scrollHeight - offsetBottom - DOMNode.offsetHeight - domUtils.getOffset(DOMNode).top;
    }

    this.setState({
      affixClass: affixType,
      affixPositionTop: affixPositionTop
    });
  },

  checkPositionWithEventLoop: function () {
    setTimeout(this.checkPosition, 0);
  },

  componentDidMount: function () {
    this._onWindowScrollListener =
      EventListener.listen(window, 'scroll', this.checkPosition);
    this._onDocumentClickListener =
      EventListener.listen(document, 'click', this.checkPositionWithEventLoop);
  },

  componentWillUnmount: function () {
    if (this._onWindowScrollListener) {
      this._onWindowScrollListener.remove();
    }

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }
  },

  componentDidUpdate: function (prevProps, prevState) {
    if (prevState.affixClass === this.state.affixClass) {
      this.checkPositionWithEventLoop();
    }
  }
};

module.exports = AffixMixin;
},{"./utils/EventListener":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/EventListener.js","./utils/domUtils":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/domUtils.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Alert.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');


var Alert = React.createClass({displayName: 'Alert',
  mixins: [BootstrapMixin],

  propTypes: {
    onDismiss: React.PropTypes.func,
    dismissAfter: React.PropTypes.number
  },

  getDefaultProps: function () {
    return {
      bsClass: 'alert',
      bsStyle: 'info'
    };
  },

  renderDismissButton: function () {
    return (
      React.createElement("button", {
        type: "button", 
        className: "close", 
        onClick: this.props.onDismiss, 
        'aria-hidden': "true"}, 
        "×"
      )
    );
  },

  render: function () {
    var classes = this.getBsClassSet();
    var isDismissable = !!this.props.onDismiss;

    classes['alert-dismissable'] = isDismissable;

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        isDismissable ? this.renderDismissButton() : null, 
        this.props.children
      )
    );
  },

  componentDidMount: function() {
    if (this.props.dismissAfter && this.props.onDismiss) {
      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
    }
  },

  componentWillUnmount: function() {
    clearTimeout(this.dismissTimer);
  }
});

module.exports = Alert;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Badge.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var ValidComponentChildren = require('./utils/ValidComponentChildren');
var classSet = require('./utils/classSet');

var Badge = React.createClass({displayName: 'Badge',
  propTypes: {
    pullRight: React.PropTypes.bool
  },

  render: function () {
    var classes = {
      'pull-right': this.props.pullRight,
      'badge': (ValidComponentChildren.hasValidComponent(this.props.children)
        || (typeof this.props.children === 'string'))
    };
    return (
      React.createElement("span", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Badge;

},{"./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js":[function(require,module,exports){
var React = require('react');
var constants = require('./constants');

var BootstrapMixin = {
  propTypes: {
    bsClass: React.PropTypes.oneOf(Object.keys(constants.CLASSES)),
    bsStyle: React.PropTypes.oneOf(Object.keys(constants.STYLES)),
    bsSize: React.PropTypes.oneOf(Object.keys(constants.SIZES))
  },

  getBsClassSet: function () {
    var classes = {};

    var bsClass = this.props.bsClass && constants.CLASSES[this.props.bsClass];
    if (bsClass) {
      classes[bsClass] = true;

      var prefix = bsClass + '-';

      var bsSize = this.props.bsSize && constants.SIZES[this.props.bsSize];
      if (bsSize) {
        classes[prefix + bsSize] = true;
      }

      var bsStyle = this.props.bsStyle && constants.STYLES[this.props.bsStyle];
      if (this.props.bsStyle) {
        classes[prefix + bsStyle] = true;
      }
    }

    return classes;
  }
};

module.exports = BootstrapMixin;
},{"./constants":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/constants.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Button.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var Button = React.createClass({displayName: 'Button',
  mixins: [BootstrapMixin],

  propTypes: {
    active:   React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    block:    React.PropTypes.bool,
    navItem:    React.PropTypes.bool,
    navDropdown: React.PropTypes.bool,
    componentClass: React.PropTypes.node
  },

  getDefaultProps: function () {
    return {
      bsClass: 'button',
      bsStyle: 'default',
      type: 'button'
    };
  },

  render: function () {
    var classes = this.props.navDropdown ? {} : this.getBsClassSet();
    var renderFuncName;

    classes['active'] = this.props.active;
    classes['btn-block'] = this.props.block;

    if (this.props.navItem) {
      return this.renderNavItem(classes);
    }

    renderFuncName = this.props.href || this.props.navDropdown ?
      'renderAnchor' : 'renderButton';

    return this[renderFuncName](classes);
  },

  renderAnchor: function (classes) {

    var Component = this.props.componentClass || 'a';
    var href = this.props.href || '#';
    classes['disabled'] = this.props.disabled;

    return (
      React.createElement(Component, React.__spread({}, 
        this.props, 
        {href: href, 
        className: joinClasses(this.props.className, classSet(classes)), 
        role: "button"}), 
        this.props.children
      )
    );
  },

  renderButton: function (classes) {
    var Component = this.props.componentClass || 'button';

    return (
      React.createElement(Component, React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  },

  renderNavItem: function (classes) {
    var liClasses = {
      active: this.props.active
    };

    return (
      React.createElement("li", {className: classSet(liClasses)}, 
        this.renderAnchor(classes)
      )
    );
  }
});

module.exports = Button;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ButtonGroup.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var Button = require('./Button');

var ButtonGroup = React.createClass({displayName: 'ButtonGroup',
  mixins: [BootstrapMixin],

  propTypes: {
    vertical:  React.PropTypes.bool,
    justified: React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      bsClass: 'button-group'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();
    classes['btn-group'] = !this.props.vertical;
    classes['btn-group-vertical'] = this.props.vertical;
    classes['btn-group-justified'] = this.props.justified;

    return (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = ButtonGroup;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Button":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Button.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ButtonToolbar.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var Button = require('./Button');

var ButtonToolbar = React.createClass({displayName: 'ButtonToolbar',
  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'button-toolbar'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    return (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {role: "toolbar", 
        className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = ButtonToolbar;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Button":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Button.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Carousel.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');
var BootstrapMixin = require('./BootstrapMixin');
var ValidComponentChildren = require('./utils/ValidComponentChildren');

var Carousel = React.createClass({displayName: 'Carousel',
  mixins: [BootstrapMixin],

  propTypes: {
    slide: React.PropTypes.bool,
    indicators: React.PropTypes.bool,
    controls: React.PropTypes.bool,
    pauseOnHover: React.PropTypes.bool,
    wrap: React.PropTypes.bool,
    onSelect: React.PropTypes.func,
    onSlideEnd: React.PropTypes.func,
    activeIndex: React.PropTypes.number,
    defaultActiveIndex: React.PropTypes.number,
    direction: React.PropTypes.oneOf(['prev', 'next'])
  },

  getDefaultProps: function () {
    return {
      slide: true,
      interval: 5000,
      pauseOnHover: true,
      wrap: true,
      indicators: true,
      controls: true
    };
  },

  getInitialState: function () {
    return {
      activeIndex: this.props.defaultActiveIndex == null ?
        0 : this.props.defaultActiveIndex,
      previousActiveIndex: null,
      direction: null
    };
  },

  getDirection: function (prevIndex, index) {
    if (prevIndex === index) {
      return null;
    }

    return prevIndex > index ?
      'prev' : 'next';
  },

  componentWillReceiveProps: function (nextProps) {
    var activeIndex = this.getActiveIndex();

    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
      clearTimeout(this.timeout);
      this.setState({
        previousActiveIndex: activeIndex,
        direction: nextProps.direction != null ?
          nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
      });
    }
  },

  componentDidMount: function () {
    this.waitForNext();
  },

  componentWillUnmount: function() {
    clearTimeout(this.timeout);
  },

  next: function (e) {
    if (e) {
      e.preventDefault();
    }

    var index = this.getActiveIndex() + 1;
    var count = ValidComponentChildren.numberOf(this.props.children);

    if (index > count - 1) {
      if (!this.props.wrap) {
        return;
      }
      index = 0;
    }

    this.handleSelect(index, 'next');
  },

  prev: function (e) {
    if (e) {
      e.preventDefault();
    }

    var index = this.getActiveIndex() - 1;

    if (index < 0) {
      if (!this.props.wrap) {
        return;
      }
      index = ValidComponentChildren.numberOf(this.props.children) - 1;
    }

    this.handleSelect(index, 'prev');
  },

  pause: function () {
    this.isPaused = true;
    clearTimeout(this.timeout);
  },

  play: function () {
    this.isPaused = false;
    this.waitForNext();
  },

  waitForNext: function () {
    if (!this.isPaused && this.props.slide && this.props.interval &&
        this.props.activeIndex == null) {
      this.timeout = setTimeout(this.next, this.props.interval);
    }
  },

  handleMouseOver: function () {
    if (this.props.pauseOnHover) {
      this.pause();
    }
  },

  handleMouseOut: function () {
    if (this.isPaused) {
      this.play();
    }
  },

  render: function () {
    var classes = {
      carousel: true,
      slide: this.props.slide
    };

    return (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes)), 
        onMouseOver: this.handleMouseOver, 
        onMouseOut: this.handleMouseOut}), 
        this.props.indicators ? this.renderIndicators() : null, 
        React.createElement("div", {className: "carousel-inner", ref: "inner"}, 
          ValidComponentChildren.map(this.props.children, this.renderItem)
        ), 
        this.props.controls ? this.renderControls() : null
      )
    );
  },

  renderPrev: function () {
    return (
      React.createElement("a", {className: "left carousel-control", href: "#prev", key: 0, onClick: this.prev}, 
        React.createElement("span", {className: "glyphicon glyphicon-chevron-left"})
      )
    );
  },

  renderNext: function () {
    return (
      React.createElement("a", {className: "right carousel-control", href: "#next", key: 1, onClick: this.next}, 
        React.createElement("span", {className: "glyphicon glyphicon-chevron-right"})
      )
    );
  },

  renderControls: function () {
    if (this.props.wrap) {
      var activeIndex = this.getActiveIndex();
      var count = ValidComponentChildren.numberOf(this.props.children);

      return [
        (activeIndex !== 0) ? this.renderPrev() : null,
        (activeIndex !== count - 1) ? this.renderNext() : null
      ];
    }

    return [
      this.renderPrev(),
      this.renderNext()
    ];
  },

  renderIndicator: function (child, index) {
    var className = (index === this.getActiveIndex()) ?
      'active' : null;

    return (
      React.createElement("li", {
        key: index, 
        className: className, 
        onClick: this.handleSelect.bind(this, index, null)})
    );
  },

  renderIndicators: function () {
    var indicators = [];
    ValidComponentChildren
      .forEach(this.props.children, function(child, index) {
        indicators.push(
          this.renderIndicator(child, index),

          // Force whitespace between indicator elements, bootstrap
          // requires this for correct spacing of elements.
          ' '
        );
      }, this);

    return (
      React.createElement("ol", {className: "carousel-indicators"}, 
        indicators
      )
    );
  },

  getActiveIndex: function () {
    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
  },

  handleItemAnimateOutEnd: function () {
    this.setState({
      previousActiveIndex: null,
      direction: null
    }, function() {
      this.waitForNext();

      if (this.props.onSlideEnd) {
        this.props.onSlideEnd();
      }
    });
  },

  renderItem: function (child, index) {
    var activeIndex = this.getActiveIndex();
    var isActive = (index === activeIndex);
    var isPreviousActive = this.state.previousActiveIndex != null &&
            this.state.previousActiveIndex === index && this.props.slide;

    return cloneWithProps(
        child,
        {
          active: isActive,
          ref: child.ref,
          key: child.key ? child.key : index,
          index: index,
          animateOut: isPreviousActive,
          animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
          direction: this.state.direction,
          onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd: null
        }
      );
  },

  handleSelect: function (index, direction) {
    clearTimeout(this.timeout);

    var previousActiveIndex = this.getActiveIndex();
    direction = direction || this.getDirection(previousActiveIndex, index);

    if (this.props.onSelect) {
      this.props.onSelect(index, direction);
    }

    if (this.props.activeIndex == null && index !== previousActiveIndex) {
      if (this.state.previousActiveIndex != null) {
        // If currently animating don't activate the new index.
        // TODO: look into queuing this canceled call and
        // animating after the current animation has ended.
        return;
      }

      this.setState({
        activeIndex: index,
        previousActiveIndex: previousActiveIndex,
        direction: direction
      });
    }
  }
});

module.exports = Carousel;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/CarouselItem.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var TransitionEvents = require('./utils/TransitionEvents');

var CarouselItem = React.createClass({displayName: 'CarouselItem',
  propTypes: {
    direction: React.PropTypes.oneOf(['prev', 'next']),
    onAnimateOutEnd: React.PropTypes.func,
    active: React.PropTypes.bool,
    caption: React.PropTypes.node
  },

  getInitialState: function () {
    return {
      direction: null
    };
  },

  getDefaultProps: function () {
    return {
      animation: true
    };
  },

  handleAnimateOutEnd: function () {
    if (this.props.onAnimateOutEnd && this.isMounted()) {
      this.props.onAnimateOutEnd(this.props.index);
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (this.props.active !== nextProps.active) {
      this.setState({
        direction: null
      });
    }
  },

  componentDidUpdate: function (prevProps) {
    if (!this.props.active && prevProps.active) {
      TransitionEvents.addEndEventListener(
        this.getDOMNode(),
        this.handleAnimateOutEnd
      );
    }

    if (this.props.active !== prevProps.active) {
      setTimeout(this.startAnimation, 20);
    }
  },

  startAnimation: function () {
    if (!this.isMounted()) {
      return;
    }

    this.setState({
      direction: this.props.direction === 'prev' ?
        'right' : 'left'
    });
  },

  render: function () {
    var classes = {
      item: true,
      active: (this.props.active && !this.props.animateIn) || this.props.animateOut,
      next: this.props.active && this.props.animateIn && this.props.direction === 'next',
      prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
    };

    if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
      classes[this.state.direction] = true;
    }

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children, 
        this.props.caption ? this.renderCaption() : null
      )
    );
  },

  renderCaption: function () {
    return (
      React.createElement("div", {className: "carousel-caption"}, 
        this.props.caption
      )
    );
  }
});

module.exports = CarouselItem;
},{"./utils/TransitionEvents":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/TransitionEvents.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Col.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var constants = require('./constants');


var Col = React.createClass({displayName: 'Col',
  propTypes: {
    xs: React.PropTypes.number,
    sm: React.PropTypes.number,
    md: React.PropTypes.number,
    lg: React.PropTypes.number,
    xsOffset: React.PropTypes.number,
    smOffset: React.PropTypes.number,
    mdOffset: React.PropTypes.number,
    lgOffset: React.PropTypes.number,
    xsPush: React.PropTypes.number,
    smPush: React.PropTypes.number,
    mdPush: React.PropTypes.number,
    lgPush: React.PropTypes.number,
    xsPull: React.PropTypes.number,
    smPull: React.PropTypes.number,
    mdPull: React.PropTypes.number,
    lgPull: React.PropTypes.number,
    componentClass: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      componentClass: 'div'
    };
  },

  render: function () {
    var ComponentClass = this.props.componentClass;
    var classes = {};

    Object.keys(constants.SIZES).forEach(function (key) {
      var size = constants.SIZES[key];
      var prop = size;
      var classPart = size + '-';

      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }

      prop = size + 'Offset';
      classPart = size + '-offset-';
      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }

      prop = size + 'Push';
      classPart = size + '-push-';
      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }

      prop = size + 'Pull';
      classPart = size + '-pull-';
      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }
    }, this);

    return (
      React.createElement(ComponentClass, React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Col;
},{"./constants":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/constants.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/CollapsableMixin.js":[function(require,module,exports){
var React = require('react');
var TransitionEvents = require('./utils/TransitionEvents');

var CollapsableMixin = {

  propTypes: {
    collapsable: React.PropTypes.bool,
    defaultExpanded: React.PropTypes.bool,
    expanded: React.PropTypes.bool
  },

  getInitialState: function () {
    return {
      expanded: this.props.defaultExpanded != null ? this.props.defaultExpanded : null,
      collapsing: false
    };
  },

  handleTransitionEnd: function () {
    this._collapseEnd = true;
    this.setState({
      collapsing: false
    });
  },

  componentWillReceiveProps: function (newProps) {
    if (this.props.collapsable && newProps.expanded !== this.props.expanded) {
      this._collapseEnd = false;
      this.setState({
        collapsing: true
      });
    }
  },

  _addEndTransitionListener: function () {
    var node = this.getCollapsableDOMNode();

    if (node) {
      TransitionEvents.addEndEventListener(
        node,
        this.handleTransitionEnd
      );
    }
  },

  _removeEndTransitionListener: function () {
    var node = this.getCollapsableDOMNode();

    if (node) {
      TransitionEvents.removeEndEventListener(
        node,
        this.handleTransitionEnd
      );
    }
  },

  componentDidMount: function () {
    this._afterRender();
  },

  componentWillUnmount: function () {
    this._removeEndTransitionListener();
  },

  componentWillUpdate: function (nextProps) {
    var dimension = (typeof this.getCollapsableDimension === 'function') ?
      this.getCollapsableDimension() : 'height';
    var node = this.getCollapsableDOMNode();

    this._removeEndTransitionListener();
  },

  componentDidUpdate: function (prevProps, prevState) {
    this._afterRender();
  },

  _afterRender: function () {
    if (!this.props.collapsable) {
      return;
    }

    this._addEndTransitionListener();
    setTimeout(this._updateDimensionAfterRender, 0);
  },

  _updateDimensionAfterRender: function () {
    var node = this.getCollapsableDOMNode();
    if (node) {
        var dimension = (typeof this.getCollapsableDimension === 'function') ?
            this.getCollapsableDimension() : 'height';
        node.style[dimension] = this.isExpanded() ?
            this.getCollapsableDimensionValue() + 'px' : '0px';
    }
  },

  isExpanded: function () {
    return (this.props.expanded != null) ?
      this.props.expanded : this.state.expanded;
  },

  getCollapsableClassSet: function (className) {
    var classes = {};

    if (typeof className === 'string') {
      className.split(' ').forEach(function (className) {
        if (className) {
          classes[className] = true;
        }
      });
    }

    classes.collapsing = this.state.collapsing;
    classes.collapse = !this.state.collapsing;
    classes['in'] = this.isExpanded() && !this.state.collapsing;

    return classes;
  }
};

module.exports = CollapsableMixin;

},{"./utils/TransitionEvents":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/TransitionEvents.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownButton.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');
var BootstrapMixin = require('./BootstrapMixin');
var DropdownStateMixin = require('./DropdownStateMixin');
var Button = require('./Button');
var ButtonGroup = require('./ButtonGroup');
var DropdownMenu = require('./DropdownMenu');
var ValidComponentChildren = require('./utils/ValidComponentChildren');


var DropdownButton = React.createClass({displayName: 'DropdownButton',
  mixins: [BootstrapMixin, DropdownStateMixin],

  propTypes: {
    pullRight: React.PropTypes.bool,
    dropup:    React.PropTypes.bool,
    title:     React.PropTypes.node,
    href:      React.PropTypes.string,
    onClick:   React.PropTypes.func,
    onSelect:  React.PropTypes.func,
    navItem:   React.PropTypes.bool
  },

  render: function () {
    var className = 'dropdown-toggle';

    var renderMethod = this.props.navItem ?
      'renderNavItem' : 'renderButtonGroup';

    return this[renderMethod]([
      React.createElement(Button, React.__spread({}, 
        this.props, 
        {ref: "dropdownButton", 
        className: joinClasses(this.props.className, className), 
        onClick: this.handleDropdownClick, 
        key: 0, 
        navDropdown: this.props.navItem, 
        navItem: null, 
        title: null, 
        pullRight: null, 
        dropup: null}), 
        this.props.title, ' ', 
        React.createElement("span", {className: "caret"})
      ),
      React.createElement(DropdownMenu, {
        ref: "menu", 
        'aria-labelledby': this.props.id, 
        pullRight: this.props.pullRight, 
        key: 1}, 
        ValidComponentChildren.map(this.props.children, this.renderMenuItem)
      )
    ]);
  },

  renderButtonGroup: function (children) {
    var groupClasses = {
        'open': this.state.open,
        'dropup': this.props.dropup
      };

    return (
      React.createElement(ButtonGroup, {
        bsSize: this.props.bsSize, 
        className: classSet(groupClasses)}, 
        children
      )
    );
  },

  renderNavItem: function (children) {
    var classes = {
        'dropdown': true,
        'open': this.state.open,
        'dropup': this.props.dropup
      };

    return (
      React.createElement("li", {className: classSet(classes)}, 
        children
      )
    );
  },

  renderMenuItem: function (child, index) {
    // Only handle the option selection if an onSelect prop has been set on the
    // component or it's child, this allows a user not to pass an onSelect
    // handler and have the browser preform the default action.
    var handleOptionSelect = this.props.onSelect || child.props.onSelect ?
      this.handleOptionSelect : null;

    return cloneWithProps(
      child,
      {
        // Capture onSelect events
        onSelect: createChainedFunction(child.props.onSelect, handleOptionSelect),

        // Force special props to be transferred
        key: child.key ? child.key : index,
        ref: child.ref
      }
    );
  },

  handleDropdownClick: function (e) {
    e.preventDefault();

    this.setDropdownState(!this.state.open);
  },

  handleOptionSelect: function (key) {
    if (this.props.onSelect) {
      this.props.onSelect(key);
    }

    this.setDropdownState(false);
  }
});

module.exports = DropdownButton;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Button":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Button.js","./ButtonGroup":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ButtonGroup.js","./DropdownMenu":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownMenu.js","./DropdownStateMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownStateMixin.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownMenu.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');
var ValidComponentChildren = require('./utils/ValidComponentChildren');

var DropdownMenu = React.createClass({displayName: 'DropdownMenu',
  propTypes: {
    pullRight: React.PropTypes.bool,
    onSelect: React.PropTypes.func
  },

  render: function () {
    var classes = {
        'dropdown-menu': true,
        'dropdown-menu-right': this.props.pullRight
      };

    return (
        React.createElement("ul", React.__spread({}, 
          this.props, 
          {className: joinClasses(this.props.className, classSet(classes)), 
          role: "menu"}), 
          ValidComponentChildren.map(this.props.children, this.renderMenuItem)
        )
      );
  },

  renderMenuItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        // Capture onSelect events
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),

        // Force special props to be transferred
        key: child.key ? child.key : index,
        ref: child.ref
      }
    );
  }
});

module.exports = DropdownMenu;
},{"./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownStateMixin.js":[function(require,module,exports){
var React = require('react');
var EventListener = require('./utils/EventListener');

/**
 * Checks whether a node is within
 * a root nodes tree
 *
 * @param {DOMElement} node
 * @param {DOMElement} root
 * @returns {boolean}
 */
function isNodeInRoot(node, root) {
  while (node) {
    if (node === root) {
      return true;
    }
    node = node.parentNode;
  }

  return false;
}

var DropdownStateMixin = {
  getInitialState: function () {
    return {
      open: false
    };
  },

  setDropdownState: function (newState, onStateChangeComplete) {
    if (newState) {
      this.bindRootCloseHandlers();
    } else {
      this.unbindRootCloseHandlers();
    }

    this.setState({
      open: newState
    }, onStateChangeComplete);
  },

  handleDocumentKeyUp: function (e) {
    if (e.keyCode === 27) {
      this.setDropdownState(false);
    }
  },

  handleDocumentClick: function (e) {
    // If the click originated from within this component
    // don't do anything.
    if (isNodeInRoot(e.target, this.getDOMNode())) {
      return;
    }

    this.setDropdownState(false);
  },

  bindRootCloseHandlers: function () {
    this._onDocumentClickListener =
      EventListener.listen(document, 'click', this.handleDocumentClick);
    this._onDocumentKeyupListener =
      EventListener.listen(document, 'keyup', this.handleDocumentKeyUp);
  },

  unbindRootCloseHandlers: function () {
    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    if (this._onDocumentKeyupListener) {
      this._onDocumentKeyupListener.remove();
    }
  },

  componentWillUnmount: function () {
    this.unbindRootCloseHandlers();
  }
};

module.exports = DropdownStateMixin;
},{"./utils/EventListener":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/EventListener.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/FadeMixin.js":[function(require,module,exports){
/*global document */
// TODO: listen for onTransitionEnd to remove el
function getElementsAndSelf (root, classes){
  var els = root.querySelectorAll('.' + classes.join('.'));

  els = [].map.call(els, function(e){ return e; });

  for(var i = 0; i < classes.length; i++){
    if( !root.className.match(new RegExp('\\b' +  classes[i] + '\\b'))){
      return els;
    }
  }
  els.unshift(root);
  return els;
}

module.exports = {
  _fadeIn: function () {
    var els;

    if (this.isMounted()) {
      els = getElementsAndSelf(this.getDOMNode(), ['fade']);

      if (els.length) {
        els.forEach(function (el) {
          el.className += ' in';
        });
      }
    }
  },

  _fadeOut: function () {
    var els = getElementsAndSelf(this._fadeOutEl, ['fade', 'in']);

    if (els.length) {
      els.forEach(function (el) {
        el.className = el.className.replace(/\bin\b/, '');
      });
    }

    setTimeout(this._handleFadeOutEnd, 300);
  },

  _handleFadeOutEnd: function () {
    if (this._fadeOutEl && this._fadeOutEl.parentNode) {
      this._fadeOutEl.parentNode.removeChild(this._fadeOutEl);
    }
  },

  componentDidMount: function () {
    if (document.querySelectorAll) {
      // Firefox needs delay for transition to be triggered
      setTimeout(this._fadeIn, 20);
    }
  },

  componentWillUnmount: function () {
    var els = getElementsAndSelf(this.getDOMNode(), ['fade']),
        container = (this.props.container && this.props.container.getDOMNode()) || document.body;

    if (els.length) {
      this._fadeOutEl = document.createElement('div');
      container.appendChild(this._fadeOutEl);
      this._fadeOutEl.appendChild(this.getDOMNode().cloneNode(true));
      // Firefox needs delay for transition to be triggered
      setTimeout(this._fadeOut, 20);
    }
  }
};

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Glyphicon.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var constants = require('./constants');

var Glyphicon = React.createClass({displayName: 'Glyphicon',
  mixins: [BootstrapMixin],

  propTypes: {
    glyph: React.PropTypes.oneOf(constants.GLYPHS).isRequired
  },

  getDefaultProps: function () {
    return {
      bsClass: 'glyphicon'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    classes['glyphicon-' + this.props.glyph] = true;

    return (
      React.createElement("span", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Glyphicon;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./constants":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/constants.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Grid.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var Grid = React.createClass({displayName: 'Grid',
  propTypes: {
    fluid: React.PropTypes.bool,
    componentClass: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      componentClass: 'div'
    };
  },

  render: function () {
    var ComponentClass = this.props.componentClass;
    var className = this.props.fluid ? 'container-fluid' : 'container';

    return (
      React.createElement(ComponentClass, React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, className)}), 
        this.props.children
      )
    );
  }
});

module.exports = Grid;
},{"./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Input.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var Button = require('./Button');

var Input = React.createClass({displayName: 'Input',
  propTypes: {
    type: React.PropTypes.string,
    label: React.PropTypes.node,
    help: React.PropTypes.node,
    addonBefore: React.PropTypes.node,
    addonAfter: React.PropTypes.node,
    buttonBefore: React.PropTypes.node,
    buttonAfter: React.PropTypes.node,
    bsStyle: function(props) {
      if (props.type === 'submit') {
        // Return early if `type=submit` as the `Button` component
        // it transfers these props to has its own propType checks.
        return;
      }

      return React.PropTypes.oneOf(['success', 'warning', 'error']).apply(null, arguments);
    },
    hasFeedback: React.PropTypes.bool,
    groupClassName: React.PropTypes.string,
    wrapperClassName: React.PropTypes.string,
    labelClassName: React.PropTypes.string,
    disabled: React.PropTypes.bool
  },

  getInputDOMNode: function () {
    return this.refs.input.getDOMNode();
  },

  getValue: function () {
    if (this.props.type === 'static') {
      return this.props.value;
    }
    else if (this.props.type) {
      return this.getInputDOMNode().value;
    }
    else {
      throw Error('Cannot use getValue without specifying input type.');
    }
  },

  getChecked: function () {
    return this.getInputDOMNode().checked;
  },

  isCheckboxOrRadio: function () {
    return this.props.type === 'radio' || this.props.type === 'checkbox';
  },

  isFile: function () {
    return this.props.type === 'file';
  },

  renderInput: function () {
    var input = null;

    if (!this.props.type) {
      return this.props.children
    }

    switch (this.props.type) {
      case 'select':
        input = (
          React.createElement("select", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'form-control'), ref: "input", key: "input"}), 
            this.props.children
          )
        );
        break;
      case 'textarea':
        input = React.createElement("textarea", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'form-control'), ref: "input", key: "input"}));
        break;
      case 'static':
        input = (
          React.createElement("p", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'form-control-static'), ref: "input", key: "input"}), 
            this.props.value
          )
        );
        break;
      case 'submit':
        input = (
          React.createElement(Button, React.__spread({},  this.props, {componentClass: "input", ref: "input", key: "input"}))
        );
        break;
      default:
        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
        input = React.createElement("input", React.__spread({},  this.props, {className: joinClasses(this.props.className, className), ref: "input", key: "input"}));
    }

    return input;
  },

  renderInputGroup: function (children) {
    var addonBefore = this.props.addonBefore ? (
      React.createElement("span", {className: "input-group-addon", key: "addonBefore"}, 
        this.props.addonBefore
      )
    ) : null;

    var addonAfter = this.props.addonAfter ? (
      React.createElement("span", {className: "input-group-addon", key: "addonAfter"}, 
        this.props.addonAfter
      )
    ) : null;

    var buttonBefore = this.props.buttonBefore ? (
      React.createElement("span", {className: "input-group-btn"}, 
        this.props.buttonBefore
      )
    ) : null;

    var buttonAfter = this.props.buttonAfter ? (
      React.createElement("span", {className: "input-group-btn"}, 
        this.props.buttonAfter
      )
    ) : null;

    return addonBefore || addonAfter || buttonBefore || buttonAfter ? (
      React.createElement("div", {className: "input-group", key: "input-group"}, 
        addonBefore, 
        buttonBefore, 
        children, 
        addonAfter, 
        buttonAfter
      )
    ) : children;
  },

  renderIcon: function () {
    var classes = {
      'glyphicon': true,
      'form-control-feedback': true,
      'glyphicon-ok': this.props.bsStyle === 'success',
      'glyphicon-warning-sign': this.props.bsStyle === 'warning',
      'glyphicon-remove': this.props.bsStyle === 'error'
    };

    return this.props.hasFeedback ? (
      React.createElement("span", {className: classSet(classes), key: "icon"})
    ) : null;
  },

  renderHelp: function () {
    return this.props.help ? (
      React.createElement("span", {className: "help-block", key: "help"}, 
        this.props.help
      )
    ) : null;
  },

  renderCheckboxandRadioWrapper: function (children) {
    var classes = {
      'checkbox': this.props.type === 'checkbox',
      'radio': this.props.type === 'radio'
    };

    return (
      React.createElement("div", {className: classSet(classes), key: "checkboxRadioWrapper"}, 
        children
      )
    );
  },

  renderWrapper: function (children) {
    return this.props.wrapperClassName ? (
      React.createElement("div", {className: this.props.wrapperClassName, key: "wrapper"}, 
        children
      )
    ) : children;
  },

  renderLabel: function (children) {
    var classes = {
      'control-label': !this.isCheckboxOrRadio()
    };
    classes[this.props.labelClassName] = this.props.labelClassName;

    return this.props.label ? (
      React.createElement("label", {htmlFor: this.props.id, className: classSet(classes), key: "label"}, 
        children, 
        this.props.label
      )
    ) : children;
  },

  renderFormGroup: function (children) {
    var classes = {
      'form-group': true,
      'has-feedback': this.props.hasFeedback,
      'has-success': this.props.bsStyle === 'success',
      'has-warning': this.props.bsStyle === 'warning',
      'has-error': this.props.bsStyle === 'error'
    };
    classes[this.props.groupClassName] = this.props.groupClassName;

    return (
      React.createElement("div", {className: classSet(classes)}, 
        children
      )
    );
  },

  render: function () {
    if (this.isCheckboxOrRadio()) {
      return this.renderFormGroup(
        this.renderWrapper([
          this.renderCheckboxandRadioWrapper(
            this.renderLabel(
              this.renderInput()
            )
          ),
          this.renderHelp()
        ])
      );
    }
    else {
      return this.renderFormGroup([
        this.renderLabel(),
        this.renderWrapper([
          this.renderInputGroup(
            this.renderInput()
          ),
          this.renderIcon(),
          this.renderHelp()
        ])
      ]);
    }
  }
});

module.exports = Input;

},{"./Button":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Button.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Interpolate.js":[function(require,module,exports){
// https://www.npmjs.org/package/react-interpolate-component
'use strict';

var React = require('react');
var ValidComponentChildren = require('./utils/ValidComponentChildren');
var assign = require('./utils/Object.assign');

var REGEXP = /\%\((.+?)\)s/;

var Interpolate = React.createClass({
  displayName: 'Interpolate',

  propTypes: {
    format: React.PropTypes.string
  },

  getDefaultProps: function() {
    return { component: 'span' };
  },

  render: function() {
    var format = (ValidComponentChildren.hasValidComponent(this.props.children) ||
        (typeof this.props.children === 'string')) ?
        this.props.children : this.props.format;
    var parent = this.props.component;
    var unsafe = this.props.unsafe === true;
    var props = assign({}, this.props);

    delete props.children;
    delete props.format;
    delete props.component;
    delete props.unsafe;

    if (unsafe) {
      var content = format.split(REGEXP).reduce(function(memo, match, index) {
        var html;

        if (index % 2 === 0) {
          html = match;
        } else {
          html = props[match];
          delete props[match];
        }

        if (React.isValidElement(html)) {
          throw new Error('cannot interpolate a React component into unsafe text');
        }

        memo += html;

        return memo;
      }, '');

      props.dangerouslySetInnerHTML = { __html: content };

      return React.createElement(parent, props);
    } else {
      var kids = format.split(REGEXP).reduce(function(memo, match, index) {
        var child;

        if (index % 2 === 0) {
          if (match.length === 0) {
            return memo;
          }

          child = match;
        } else {
          child = props[match];
          delete props[match];
        }

        memo.push(child);

        return memo;
      }, []);

      return React.createElement(parent, props, kids);
    }
  }
});

module.exports = Interpolate;

},{"./utils/Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/Object.assign.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Jumbotron.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var Jumbotron = React.createClass({displayName: 'Jumbotron',

  render: function () {
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'jumbotron')}), 
        this.props.children
      )
    );
  }
});

module.exports = Jumbotron;
},{"./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Label.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var Label = React.createClass({displayName: 'Label',
  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'label',
      bsStyle: 'default'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    return (
      React.createElement("span", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Label;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ListGroup.js":[function(require,module,exports){
var React = require('react');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');

var ListGroup = React.createClass({displayName: 'ListGroup',
  propTypes: {
    onClick: React.PropTypes.func
  },

  render: function () {
    return (
      React.createElement("div", {className: "list-group"}, 
        ValidComponentChildren.map(this.props.children, this.renderListItem)
      )
    );
  },

  renderListItem: function (child, index) {
    return cloneWithProps(child, {
      onClick: createChainedFunction(child.props.onClick, this.props.onClick),
      ref: child.ref,
      key: child.key ? child.key : index
    });
  }
});

module.exports = ListGroup;

},{"./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ListGroupItem.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var BootstrapMixin = require('./BootstrapMixin');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');

var ListGroupItem = React.createClass({displayName: 'ListGroupItem',
  mixins: [BootstrapMixin],

  propTypes: {
    bsStyle: React.PropTypes.oneOf(['danger','info','success','warning']),
    active: React.PropTypes.any,
    disabled: React.PropTypes.any,
    header: React.PropTypes.node,
    onClick: React.PropTypes.func,
    eventKey: React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      bsClass: 'list-group-item'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    classes['active'] = this.props.active;
    classes['disabled'] = this.props.disabled;

    if (this.props.href || this.props.onClick) {
      return this.renderAnchor(classes);
    } else {
      return this.renderSpan(classes);
    }
  },

  renderSpan: function (classes) {
    return (
      React.createElement("span", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.header ? this.renderStructuredContent() : this.props.children
      )
    );
  },

  renderAnchor: function (classes) {
    return (
      React.createElement("a", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes)), 
        onClick: this.handleClick}), 
        this.props.header ? this.renderStructuredContent() : this.props.children
      )
    );
  },

  renderStructuredContent: function () {
    var header;
    if (React.isValidElement(this.props.header)) {
      header = cloneWithProps(this.props.header, {
        className: 'list-group-item-heading'
      });
    } else {
      header = (
        React.createElement("h4", {className: "list-group-item-heading"}, 
          this.props.header
        )
      );
    }

    var content = (
      React.createElement("p", {className: "list-group-item-text"}, 
        this.props.children
      )
    );

    return {
      header: header,
      content: content
    };
  },

  handleClick: function (e) {
    if (this.props.onClick) {
      e.preventDefault();
      this.props.onClick(this.props.eventKey, this.props.href);
    }
  }
});

module.exports = ListGroupItem;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/MenuItem.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');

var MenuItem = React.createClass({displayName: 'MenuItem',
  propTypes: {
    header:    React.PropTypes.bool,
    divider:   React.PropTypes.bool,
    href:      React.PropTypes.string,
    title:     React.PropTypes.string,
    onSelect:  React.PropTypes.func,
    eventKey: React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      href: '#'
    };
  },

  handleClick: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();
      this.props.onSelect(this.props.eventKey);
    }
  },

  renderAnchor: function () {
    return (
      React.createElement("a", {onClick: this.handleClick, href: this.props.href, title: this.props.title, tabIndex: "-1"}, 
        this.props.children
      )
    );
  },

  render: function () {
    var classes = {
        'dropdown-header': this.props.header,
        'divider': this.props.divider
      };

    var children = null;
    if (this.props.header) {
      children = this.props.children;
    } else if (!this.props.divider) {
      children = this.renderAnchor();
    }

    return (
      React.createElement("li", React.__spread({},  this.props, {role: "presentation", title: null, href: null, 
        className: joinClasses(this.props.className, classSet(classes))}), 
        children
      )
    );
  }
});

module.exports = MenuItem;
},{"./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Modal.js":[function(require,module,exports){
/* global document:false */

var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var FadeMixin = require('./FadeMixin');
var EventListener = require('./utils/EventListener');


// TODO:
// - aria-labelledby
// - Add `modal-body` div if only one child passed in that doesn't already have it
// - Tests

var Modal = React.createClass({displayName: 'Modal',
  mixins: [BootstrapMixin, FadeMixin],

  propTypes: {
    title: React.PropTypes.node,
    backdrop: React.PropTypes.oneOf(['static', true, false]),
    keyboard: React.PropTypes.bool,
    closeButton: React.PropTypes.bool,
    animation: React.PropTypes.bool,
    onRequestHide: React.PropTypes.func.isRequired
  },

  getDefaultProps: function () {
    return {
      bsClass: 'modal',
      backdrop: true,
      keyboard: true,
      animation: true,
      closeButton: true
    };
  },

  render: function () {
    var modalStyle = {display: 'block'};
    var dialogClasses = this.getBsClassSet();
    delete dialogClasses.modal;
    dialogClasses['modal-dialog'] = true;

    var classes = {
      modal: true,
      fade: this.props.animation,
      'in': !this.props.animation || !document.querySelectorAll
    };

    var modal = (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {title: null, 
        tabIndex: "-1", 
        role: "dialog", 
        style: modalStyle, 
        className: joinClasses(this.props.className, classSet(classes)), 
        onClick: this.props.backdrop === true ? this.handleBackdropClick : null, 
        ref: "modal"}), 
        React.createElement("div", {className: classSet(dialogClasses)}, 
          React.createElement("div", {className: "modal-content"}, 
            this.props.title ? this.renderHeader() : null, 
            this.props.children
          )
        )
      )
    );

    return this.props.backdrop ?
      this.renderBackdrop(modal) : modal;
  },

  renderBackdrop: function (modal) {
    var classes = {
      'modal-backdrop': true,
      'fade': this.props.animation
    };

    classes['in'] = !this.props.animation || !document.querySelectorAll;

    var onClick = this.props.backdrop === true ?
      this.handleBackdropClick : null;

    return (
      React.createElement("div", null, 
        React.createElement("div", {className: classSet(classes), ref: "backdrop", onClick: onClick}), 
        modal
      )
    );
  },

  renderHeader: function () {
    var closeButton;
    if (this.props.closeButton) {
      closeButton = (
          React.createElement("button", {type: "button", className: "close", 'aria-hidden': "true", onClick: this.props.onRequestHide}, "×")
        );
    }

    return (
      React.createElement("div", {className: "modal-header"}, 
        closeButton, 
        this.renderTitle()
      )
    );
  },

  renderTitle: function () {
    return (
      React.isValidElement(this.props.title) ?
        this.props.title : React.createElement("h4", {className: "modal-title"}, this.props.title)
    );
  },

  iosClickHack: function () {
    // IOS only allows click events to be delegated to the document on elements
    // it considers 'clickable' - anchors, buttons, etc. We fake a click handler on the
    // DOM nodes themselves. Remove if handled by React: https://github.com/facebook/react/issues/1169
    this.refs.modal.getDOMNode().onclick = function () {};
    this.refs.backdrop.getDOMNode().onclick = function () {};
  },

  componentDidMount: function () {
    this._onDocumentKeyupListener =
      EventListener.listen(document, 'keyup', this.handleDocumentKeyUp);

    if (this.props.backdrop) {
      this.iosClickHack();
    }
  },

  componentDidUpdate: function (prevProps) {
    if (this.props.backdrop && this.props.backdrop !== prevProps.backdrop) {
      this.iosClickHack();
    }
  },

  componentWillUnmount: function () {
    this._onDocumentKeyupListener.remove();
  },

  handleBackdropClick: function (e) {
    if (e.target !== e.currentTarget) {
      return;
    }

    this.props.onRequestHide();
  },

  handleDocumentKeyUp: function (e) {
    if (this.props.keyboard && e.keyCode === 27) {
      this.props.onRequestHide();
    }
  }
});

module.exports = Modal;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./FadeMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/FadeMixin.js","./utils/EventListener":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/EventListener.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ModalTrigger.js":[function(require,module,exports){
var React = require('react');
var OverlayMixin = require('./OverlayMixin');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');

var ModalTrigger = React.createClass({displayName: 'ModalTrigger',
  mixins: [OverlayMixin],

  propTypes: {
    modal: React.PropTypes.node.isRequired
  },

  getInitialState: function () {
    return {
      isOverlayShown: false
    };
  },

  show: function () {
    this.setState({
      isOverlayShown: true
    });
  },

  hide: function () {
    this.setState({
      isOverlayShown: false
    });
  },

  toggle: function () {
    this.setState({
      isOverlayShown: !this.state.isOverlayShown
    });
  },

  renderOverlay: function () {
    if (!this.state.isOverlayShown) {
      return React.createElement("span", null);
    }

    return cloneWithProps(
      this.props.modal,
      {
        onRequestHide: this.hide
      }
    );
  },

  render: function () {
    var child = React.Children.only(this.props.children);
    return cloneWithProps(
      child,
      {
        onClick: createChainedFunction(child.props.onClick, this.toggle)
      }
    );
  }
});

module.exports = ModalTrigger;
},{"./OverlayMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/OverlayMixin.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Nav.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var BootstrapMixin = require('./BootstrapMixin');
var CollapsableMixin = require('./CollapsableMixin');
var classSet = require('./utils/classSet');
var domUtils = require('./utils/domUtils');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');


var Nav = React.createClass({displayName: 'Nav',
  mixins: [BootstrapMixin, CollapsableMixin],

  propTypes: {
    bsStyle: React.PropTypes.oneOf(['tabs','pills']),
    stacked: React.PropTypes.bool,
    justified: React.PropTypes.bool,
    onSelect: React.PropTypes.func,
    collapsable: React.PropTypes.bool,
    expanded: React.PropTypes.bool,
    navbar: React.PropTypes.bool,
    eventKey: React.PropTypes.any,
    right: React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      bsClass: 'nav'
    };
  },

  getCollapsableDOMNode: function () {
    return this.getDOMNode();
  },

  getCollapsableDimensionValue: function () {
    var node = this.refs.ul.getDOMNode(),
        height = node.offsetHeight,
        computedStyles = domUtils.getComputedStyles(node);

    return height + parseInt(computedStyles.marginTop, 10) + parseInt(computedStyles.marginBottom, 10);
  },

  render: function () {
    var classes = this.props.collapsable ? this.getCollapsableClassSet() : {};

    classes['navbar-collapse'] = this.props.collapsable;

    if (this.props.navbar && !this.props.collapsable) {
      return (this.renderUl());
    }

    return (
      React.createElement("nav", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.renderUl()
      )
    );
  },

  renderUl: function () {
    var classes = this.getBsClassSet();

    classes['nav-stacked'] = this.props.stacked;
    classes['nav-justified'] = this.props.justified;
    classes['navbar-nav'] = this.props.navbar;
    classes['pull-right'] = this.props.pullRight;
    classes['navbar-right'] = this.props.right;

    return (
      React.createElement("ul", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), ref: "ul"}), 
        ValidComponentChildren.map(this.props.children, this.renderNavItem)
      )
    );
  },

  getChildActiveProp: function (child) {
    if (child.props.active) {
      return true;
    }
    if (this.props.activeKey != null) {
      if (child.props.eventKey == this.props.activeKey) {
        return true;
      }
    }
    if (this.props.activeHref != null) {
      if (child.props.href === this.props.activeHref) {
        return true;
      }
    }

    return child.props.active;
  },

  renderNavItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        active: this.getChildActiveProp(child),
        activeKey: this.props.activeKey,
        activeHref: this.props.activeHref,
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),
        ref: child.ref,
        key: child.key ? child.key : index,
        navItem: true
      }
    );
  }
});

module.exports = Nav;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./CollapsableMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/CollapsableMixin.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","./utils/domUtils":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/domUtils.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/NavItem.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var NavItem = React.createClass({displayName: 'NavItem',
  mixins: [BootstrapMixin],

  propTypes: {
    onSelect: React.PropTypes.func,
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    href: React.PropTypes.string,
    title: React.PropTypes.string,
    eventKey: React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      href: '#'
    };
  },

  render: function () {
    var $__0= 
        
        
        
        
        
           this.props,disabled=$__0.disabled,active=$__0.active,href=$__0.href,title=$__0.title,children=$__0.children,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{disabled:1,active:1,href:1,title:1,children:1}),
        classes = {
          'active': active,
          'disabled': disabled
        };

    return (
      React.createElement("li", React.__spread({},  props, {className: joinClasses(props.className, classSet(classes))}), 
        React.createElement("a", {
          href: href, 
          title: title, 
          onClick: this.handleClick, 
          ref: "anchor"}, 
          children 
        )
      )
    );
  },

  handleClick: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();

      if (!this.props.disabled) {
        this.props.onSelect(this.props.eventKey, this.props.href);
      }
    }
  }
});

module.exports = NavItem;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Navbar.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var BootstrapMixin = require('./BootstrapMixin');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');
var Nav = require('./Nav');


var Navbar = React.createClass({displayName: 'Navbar',
  mixins: [BootstrapMixin],

  propTypes: {
    fixedTop: React.PropTypes.bool,
    fixedBottom: React.PropTypes.bool,
    staticTop: React.PropTypes.bool,
    inverse: React.PropTypes.bool,
    fluid: React.PropTypes.bool,
    role: React.PropTypes.string,
    componentClass: React.PropTypes.node.isRequired,
    brand: React.PropTypes.node,
    toggleButton: React.PropTypes.node,
    onToggle: React.PropTypes.func,
    navExpanded: React.PropTypes.bool,
    defaultNavExpanded: React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      bsClass: 'navbar',
      bsStyle: 'default',
      role: 'navigation',
      componentClass: 'Nav'
    };
  },

  getInitialState: function () {
    return {
      navExpanded: this.props.defaultNavExpanded
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onSelect` handler.
    return !this._isChanging;
  },

  handleToggle: function () {
    if (this.props.onToggle) {
      this._isChanging = true;
      this.props.onToggle();
      this._isChanging = false;
    }

    this.setState({
      navExpanded: !this.state.navExpanded
    });
  },

  isNavExpanded: function () {
    return this.props.navExpanded != null ? this.props.navExpanded : this.state.navExpanded;
  },

  render: function () {
    var classes = this.getBsClassSet();
    var ComponentClass = this.props.componentClass;

    classes['navbar-fixed-top'] = this.props.fixedTop;
    classes['navbar-fixed-bottom'] = this.props.fixedBottom;
    classes['navbar-static-top'] = this.props.staticTop;
    classes['navbar-inverse'] = this.props.inverse;

    return (
      React.createElement(ComponentClass, React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        React.createElement("div", {className: this.props.fluid ? 'container-fluid' : 'container'}, 
          (this.props.brand || this.props.toggleButton || this.props.toggleNavKey) ? this.renderHeader() : null, 
          ValidComponentChildren.map(this.props.children, this.renderChild)
        )
      )
    );
  },

  renderChild: function (child, index) {
    return cloneWithProps(child, {
      navbar: true,
      collapsable: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey,
      expanded: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey && this.isNavExpanded(),
      key: child.key ? child.key : index,
      ref: child.ref
    });
  },

  renderHeader: function () {
    var brand;

    if (this.props.brand) {
      brand = React.isValidElement(this.props.brand) ?
        cloneWithProps(this.props.brand, {
          className: 'navbar-brand'
        }) : React.createElement("span", {className: "navbar-brand"}, this.props.brand);
    }

    return (
      React.createElement("div", {className: "navbar-header"}, 
        brand, 
        (this.props.toggleButton || this.props.toggleNavKey != null) ? this.renderToggleButton() : null
      )
    );
  },

  renderToggleButton: function () {
    var children;

    if (React.isValidElement(this.props.toggleButton)) {
      return cloneWithProps(this.props.toggleButton, {
        className: 'navbar-toggle',
        onClick: createChainedFunction(this.handleToggle, this.props.toggleButton.props.onClick)
      });
    }

    children = (this.props.toggleButton != null) ?
      this.props.toggleButton : [
        React.createElement("span", {className: "sr-only", key: 0}, "Toggle navigation"),
        React.createElement("span", {className: "icon-bar", key: 1}),
        React.createElement("span", {className: "icon-bar", key: 2}),
        React.createElement("span", {className: "icon-bar", key: 3})
    ];

    return (
      React.createElement("button", {className: "navbar-toggle", type: "button", onClick: this.handleToggle}, 
        children
      )
    );
  }
});

module.exports = Navbar;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Nav":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Nav.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/OverlayMixin.js":[function(require,module,exports){
var React = require('react');
var CustomPropTypes = require('./utils/CustomPropTypes');

module.exports = {
  propTypes: {
    container: CustomPropTypes.mountable
  },

  getDefaultProps: function () {
    return {
      container: {
        // Provide `getDOMNode` fn mocking a React component API. The `document.body`
        // reference needs to be contained within this function so that it is not accessed
        // in environments where it would not be defined, e.g. nodejs. Equally this is needed
        // before the body is defined where `document.body === null`, this ensures
        // `document.body` is only accessed after componentDidMount.
        getDOMNode: function getDOMNode() {
          return document.body;
        }
      }
    };
  },

  componentWillUnmount: function () {
    this._unrenderOverlay();
    if (this._overlayTarget) {
      this.getContainerDOMNode()
        .removeChild(this._overlayTarget);
      this._overlayTarget = null;
    }
  },

  componentDidUpdate: function () {
    this._renderOverlay();
  },

  componentDidMount: function () {
    this._renderOverlay();
  },

  _mountOverlayTarget: function () {
    this._overlayTarget = document.createElement('div');
    this.getContainerDOMNode()
      .appendChild(this._overlayTarget);
  },

  _renderOverlay: function () {
    if (!this._overlayTarget) {
      this._mountOverlayTarget();
    }

    // Save reference to help testing
    this._overlayInstance = React.render(this.renderOverlay(), this._overlayTarget);
  },

  _unrenderOverlay: function () {
    React.unmountComponentAtNode(this._overlayTarget);
    this._overlayInstance = null;
  },

  getOverlayDOMNode: function () {
    if (!this.isMounted()) {
      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
    }

    return this._overlayInstance.getDOMNode();
  },

  getContainerDOMNode: function () {
    return this.props.container.getDOMNode ?
      this.props.container.getDOMNode() : this.props.container;
  }
};

},{"./utils/CustomPropTypes":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/CustomPropTypes.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/OverlayTrigger.js":[function(require,module,exports){
var React = require('react');
var OverlayMixin = require('./OverlayMixin');
var domUtils = require('./utils/domUtils');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');
var assign = require('./utils/Object.assign');

/**
 * Check if value one is inside or equal to the of value
 *
 * @param {string} one
 * @param {string|array} of
 * @returns {boolean}
 */
function isOneOf(one, of) {
  if (Array.isArray(of)) {
    return of.indexOf(one) >= 0;
  }
  return one === of;
}

var OverlayTrigger = React.createClass({displayName: 'OverlayTrigger',
  mixins: [OverlayMixin],

  propTypes: {
    trigger: React.PropTypes.oneOfType([
      React.PropTypes.oneOf(['manual', 'click', 'hover', 'focus']),
      React.PropTypes.arrayOf(React.PropTypes.oneOf(['click', 'hover', 'focus']))
    ]),
    placement: React.PropTypes.oneOf(['top','right', 'bottom', 'left']),
    delay: React.PropTypes.number,
    delayShow: React.PropTypes.number,
    delayHide: React.PropTypes.number,
    defaultOverlayShown: React.PropTypes.bool,
    overlay: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      placement: 'right',
      trigger: ['hover', 'focus']
    };
  },

  getInitialState: function () {
    return {
      isOverlayShown: this.props.defaultOverlayShown == null ?
        false : this.props.defaultOverlayShown,
      overlayLeft: null,
      overlayTop: null
    };
  },

  show: function () {
    this.setState({
      isOverlayShown: true
    }, function() {
      this.updateOverlayPosition();
    });
  },

  hide: function () {
    this.setState({
      isOverlayShown: false
    });
  },

  toggle: function () {
    this.state.isOverlayShown ?
      this.hide() : this.show();
  },

  renderOverlay: function () {
    if (!this.state.isOverlayShown) {
      return React.createElement("span", null);
    }

    return cloneWithProps(
      this.props.overlay,
      {
        onRequestHide: this.hide,
        placement: this.props.placement,
        positionLeft: this.state.overlayLeft,
        positionTop: this.state.overlayTop
      }
    );
  },

  render: function () {
    if (this.props.trigger === 'manual') {
      return React.Children.only(this.props.children);
    }

    var props = {};

    if (isOneOf('click', this.props.trigger)) {
      props.onClick = createChainedFunction(this.toggle, this.props.onClick);
    }

    if (isOneOf('hover', this.props.trigger)) {
      props.onMouseOver = createChainedFunction(this.handleDelayedShow, this.props.onMouseOver);
      props.onMouseOut = createChainedFunction(this.handleDelayedHide, this.props.onMouseOut);
    }

    if (isOneOf('focus', this.props.trigger)) {
      props.onFocus = createChainedFunction(this.handleDelayedShow, this.props.onFocus);
      props.onBlur = createChainedFunction(this.handleDelayedHide, this.props.onBlur);
    }

    return cloneWithProps(
      React.Children.only(this.props.children),
      props
    );
  },

  componentWillUnmount: function() {
    clearTimeout(this._hoverDelay);
  },

  handleDelayedShow: function () {
    if (this._hoverDelay != null) {
      clearTimeout(this._hoverDelay);
      this._hoverDelay = null;
      return;
    }

    var delay = this.props.delayShow != null ?
      this.props.delayShow : this.props.delay;

    if (!delay) {
      this.show();
      return;
    }

    this._hoverDelay = setTimeout(function() {
      this._hoverDelay = null;
      this.show();
    }.bind(this), delay);
  },

  handleDelayedHide: function () {
    if (this._hoverDelay != null) {
      clearTimeout(this._hoverDelay);
      this._hoverDelay = null;
      return;
    }

    var delay = this.props.delayHide != null ?
      this.props.delayHide : this.props.delay;

    if (!delay) {
      this.hide();
      return;
    }

    this._hoverDelay = setTimeout(function() {
      this._hoverDelay = null;
      this.hide();
    }.bind(this), delay);
  },

  updateOverlayPosition: function () {
    if (!this.isMounted()) {
      return;
    }

    var pos = this.calcOverlayPosition();

    this.setState({
      overlayLeft: pos.left,
      overlayTop: pos.top
    });
  },

  calcOverlayPosition: function () {
    var childOffset = this.getPosition();

    var overlayNode = this.getOverlayDOMNode();
    var overlayHeight = overlayNode.offsetHeight;
    var overlayWidth = overlayNode.offsetWidth;

    switch (this.props.placement) {
      case 'right':
        return {
          top: childOffset.top + childOffset.height / 2 - overlayHeight / 2,
          left: childOffset.left + childOffset.width
        };
      case 'left':
        return {
          top: childOffset.top + childOffset.height / 2 - overlayHeight / 2,
          left: childOffset.left - overlayWidth
        };
      case 'top':
        return {
          top: childOffset.top - overlayHeight,
          left: childOffset.left + childOffset.width / 2 - overlayWidth / 2
        };
      case 'bottom':
        return {
          top: childOffset.top + childOffset.height,
          left: childOffset.left + childOffset.width / 2 - overlayWidth / 2
        };
      default:
        throw new Error('calcOverlayPosition(): No such placement of "' + this.props.placement + '" found.');
    }
  },

  getPosition: function () {
    var node = this.getDOMNode();
    var container = this.getContainerDOMNode();

    var offset = container.tagName == 'BODY' ?
      domUtils.getOffset(node) : domUtils.getPosition(node, container);

    return assign({}, offset, {
      height: node.offsetHeight,
      width: node.offsetWidth
    });
  }
});

module.exports = OverlayTrigger;
},{"./OverlayMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/OverlayMixin.js","./utils/Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/Object.assign.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","./utils/domUtils":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/domUtils.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/PageHeader.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var PageHeader = React.createClass({displayName: 'PageHeader',

  render: function () {
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'page-header')}), 
        React.createElement("h1", null, this.props.children)
      )
    );
  }
});

module.exports = PageHeader;
},{"./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/PageItem.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');

var PageItem = React.createClass({displayName: 'PageItem',

  propTypes: {
    disabled: React.PropTypes.bool,
    previous: React.PropTypes.bool,
    next: React.PropTypes.bool,
    onSelect: React.PropTypes.func,
    eventKey: React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      href: '#'
    };
  },

  render: function () {
    var classes = {
      'disabled': this.props.disabled,
      'previous': this.props.previous,
      'next': this.props.next
    };

    return (
      React.createElement("li", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        React.createElement("a", {
          href: this.props.href, 
          title: this.props.title, 
          onClick: this.handleSelect, 
          ref: "anchor"}, 
          this.props.children
        )
      )
    );
  },

  handleSelect: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();

      if (!this.props.disabled) {
        this.props.onSelect(this.props.eventKey, this.props.href);
      }
    }
  }
});

module.exports = PageItem;
},{"./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Pager.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');

var Pager = React.createClass({displayName: 'Pager',

  propTypes: {
    onSelect: React.PropTypes.func
  },

  render: function () {
    return (
      React.createElement("ul", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, 'pager')}), 
        ValidComponentChildren.map(this.props.children, this.renderPageItem)
      )
    );
  },

  renderPageItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),
        ref: child.ref,
        key: child.key ? child.key : index
      }
    );
  }
});

module.exports = Pager;
},{"./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Panel.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var BootstrapMixin = require('./BootstrapMixin');
var CollapsableMixin = require('./CollapsableMixin');

var Panel = React.createClass({displayName: 'Panel',
  mixins: [BootstrapMixin, CollapsableMixin],

  propTypes: {
    onSelect: React.PropTypes.func,
    header: React.PropTypes.node,
    footer: React.PropTypes.node,
    eventKey: React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      bsClass: 'panel',
      bsStyle: 'default'
    };
  },

  handleSelect: function (e) {
    if (this.props.onSelect) {
      this._isChanging = true;
      this.props.onSelect(this.props.eventKey);
      this._isChanging = false;
    }

    e.preventDefault();

    this.setState({
      expanded: !this.state.expanded
    });
  },

  shouldComponentUpdate: function () {
    return !this._isChanging;
  },

  getCollapsableDimensionValue: function () {
    return this.refs.body.getDOMNode().offsetHeight;
  },

  getCollapsableDOMNode: function () {
    if (!this.isMounted() || !this.refs || !this.refs.panel) {
      return null;
    }

    return this.refs.panel.getDOMNode();
  },

  render: function () {
    var classes = this.getBsClassSet();
    classes['panel'] = true;

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), 
        id: this.props.collapsable ? null : this.props.id, onSelect: null}), 
        this.renderHeading(), 
        this.props.collapsable ? this.renderCollapsableBody() : this.renderBody(), 
        this.renderFooter()
      )
    );
  },

  renderCollapsableBody: function () {
    return (
      React.createElement("div", {className: classSet(this.getCollapsableClassSet('panel-collapse')), id: this.props.id, ref: "panel"}, 
        this.renderBody()
      )
    );
  },

  renderBody: function () {
    return (
      React.createElement("div", {className: "panel-body", ref: "body"}, 
        this.props.children
      )
    );
  },

  renderHeading: function () {
    var header = this.props.header;

    if (!header) {
      return null;
    }

    if (!React.isValidElement(header) || Array.isArray(header)) {
      header = this.props.collapsable ?
        this.renderCollapsableTitle(header) : header;
    } else if (this.props.collapsable) {
      header = cloneWithProps(header, {
        className: 'panel-title',
        children: this.renderAnchor(header.props.children)
      });
    } else {
      header = cloneWithProps(header, {
        className: 'panel-title'
      });
    }

    return (
      React.createElement("div", {className: "panel-heading"}, 
        header
      )
    );
  },

  renderAnchor: function (header) {
    return (
      React.createElement("a", {
        href: '#' + (this.props.id || ''), 
        className: this.isExpanded() ? null : 'collapsed', 
        onClick: this.handleSelect}, 
        header
      )
    );
  },

  renderCollapsableTitle: function (header) {
    return (
      React.createElement("h4", {className: "panel-title"}, 
        this.renderAnchor(header)
      )
    );
  },

  renderFooter: function () {
    if (!this.props.footer) {
      return null;
    }

    return (
      React.createElement("div", {className: "panel-footer"}, 
        this.props.footer
      )
    );
  }
});

module.exports = Panel;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./CollapsableMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/CollapsableMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/PanelGroup.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var BootstrapMixin = require('./BootstrapMixin');
var ValidComponentChildren = require('./utils/ValidComponentChildren');

var PanelGroup = React.createClass({displayName: 'PanelGroup',
  mixins: [BootstrapMixin],

  propTypes: {
    collapsable: React.PropTypes.bool,
    activeKey: React.PropTypes.any,
    defaultActiveKey: React.PropTypes.any,
    onSelect: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      bsClass: 'panel-group'
    };
  },

  getInitialState: function () {
    var defaultActiveKey = this.props.defaultActiveKey;

    return {
      activeKey: defaultActiveKey
    };
  },

  render: function () {
    var classes = this.getBsClassSet();
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), onSelect: null}), 
        ValidComponentChildren.map(this.props.children, this.renderPanel)
      )
    );
  },

  renderPanel: function (child, index) {
    var activeKey =
      this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

    var props = {
      bsStyle: child.props.bsStyle || this.props.bsStyle,
      key: child.key ? child.key : index,
      ref: child.ref
    };

    if (this.props.accordion) {
      props.collapsable = true;
      props.expanded = (child.props.eventKey === activeKey);
      props.onSelect = this.handleSelect;
    }

    return cloneWithProps(
      child,
      props
    );
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onSelect` handler.
    return !this._isChanging;
  },

  handleSelect: function (key) {
    if (this.props.onSelect) {
      this._isChanging = true;
      this.props.onSelect(key);
      this._isChanging = false;
    }

    if (this.state.activeKey === key) {
      key = null;
    }

    this.setState({
      activeKey: key
    });
  }
});

module.exports = PanelGroup;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Popover.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');


var Popover = React.createClass({displayName: 'Popover',
  mixins: [BootstrapMixin],

  propTypes: {
    placement: React.PropTypes.oneOf(['top','right', 'bottom', 'left']),
    positionLeft: React.PropTypes.number,
    positionTop: React.PropTypes.number,
    arrowOffsetLeft: React.PropTypes.number,
    arrowOffsetTop: React.PropTypes.number,
    title: React.PropTypes.node
  },

  getDefaultProps: function () {
    return {
      placement: 'right'
    };
  },

  render: function () {
    var classes = {};
    classes['popover'] = true;
    classes[this.props.placement] = true;
    classes['in'] = this.props.positionLeft != null || this.props.positionTop != null;

    var style = {};
    style['left'] = this.props.positionLeft;
    style['top'] = this.props.positionTop;
    style['display'] = 'block';

    var arrowStyle = {};
    arrowStyle['left'] = this.props.arrowOffsetLeft;
    arrowStyle['top'] = this.props.arrowOffsetTop;

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), style: style, title: null}), 
        React.createElement("div", {className: "arrow", style: arrowStyle}), 
        this.props.title ? this.renderTitle() : null, 
        React.createElement("div", {className: "popover-content"}, 
          this.props.children
        )
      )
    );
  },

  renderTitle: function() {
    return (
      React.createElement("h3", {className: "popover-title"}, this.props.title)
    );
  }
});

module.exports = Popover;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ProgressBar.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var Interpolate = require('./Interpolate');
var BootstrapMixin = require('./BootstrapMixin');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');


var ProgressBar = React.createClass({displayName: 'ProgressBar',
  propTypes: {
    min: React.PropTypes.number,
    now: React.PropTypes.number,
    max: React.PropTypes.number,
    label: React.PropTypes.node,
    srOnly: React.PropTypes.bool,
    striped: React.PropTypes.bool,
    active: React.PropTypes.bool
  },

  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'progress-bar',
      min: 0,
      max: 100
    };
  },

  getPercentage: function (now, min, max) {
    return Math.ceil((now - min) / (max - min) * 100);
  },

  render: function () {
    var classes = {
        progress: true
      };

    if (this.props.active) {
      classes['progress-striped'] = true;
      classes['active'] = true;
    } else if (this.props.striped) {
      classes['progress-striped'] = true;
    }

    if (!ValidComponentChildren.hasValidComponent(this.props.children)) {
      if (!this.props.isChild) {
        return (
          React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
            this.renderProgressBar()
          )
        );
      } else {
        return (
          this.renderProgressBar()
        );
      }
    } else {
      return (
        React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
          ValidComponentChildren.map(this.props.children, this.renderChildBar)
        )
      );
    }
  },

  renderChildBar: function (child, index) {
    return cloneWithProps(child, {
      isChild: true,
      key: child.key ? child.key : index,
      ref: child.ref
    });
  },

  renderProgressBar: function () {
    var percentage = this.getPercentage(
        this.props.now,
        this.props.min,
        this.props.max
      );

    var label;

    if (typeof this.props.label === "string") {
      label = this.renderLabel(percentage);
    } else if (this.props.label) {
      label = this.props.label;
    }

    if (this.props.srOnly) {
      label = this.renderScreenReaderOnlyLabel(label);
    }

    var classes = this.getBsClassSet();

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), role: "progressbar", 
        style: {width: percentage + '%'}, 
        'aria-valuenow': this.props.now, 
        'aria-valuemin': this.props.min, 
        'aria-valuemax': this.props.max}), 
        label
      )
    );
  },

  renderLabel: function (percentage) {
    var InterpolateClass = this.props.interpolateClass || Interpolate;

    return (
      React.createElement(InterpolateClass, {
        now: this.props.now, 
        min: this.props.min, 
        max: this.props.max, 
        percent: percentage, 
        bsStyle: this.props.bsStyle}, 
        this.props.label
      )
    );
  },

  renderScreenReaderOnlyLabel: function (label) {
    return (
      React.createElement("span", {className: "sr-only"}, 
        label
      )
    );
  }
});

module.exports = ProgressBar;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Interpolate":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Interpolate.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Row.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var Row = React.createClass({displayName: 'Row',
  propTypes: {
    componentClass: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      componentClass: 'div'
    };
  },

  render: function () {
    var ComponentClass = this.props.componentClass;

    return (
      React.createElement(ComponentClass, React.__spread({},  this.props, {className: joinClasses(this.props.className, 'row')}), 
        this.props.children
      )
    );
  }
});

module.exports = Row;
},{"./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/SplitButton.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var DropdownStateMixin = require('./DropdownStateMixin');
var Button = require('./Button');
var ButtonGroup = require('./ButtonGroup');
var DropdownMenu = require('./DropdownMenu');

var SplitButton = React.createClass({displayName: 'SplitButton',
  mixins: [BootstrapMixin, DropdownStateMixin],

  propTypes: {
    pullRight:     React.PropTypes.bool,
    title:         React.PropTypes.node,
    href:          React.PropTypes.string,
    dropdownTitle: React.PropTypes.node,
    onClick:       React.PropTypes.func,
    onSelect:      React.PropTypes.func,
    disabled:      React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      dropdownTitle: 'Toggle dropdown'
    };
  },

  render: function () {
    var groupClasses = {
        'open': this.state.open,
        'dropup': this.props.dropup
      };

    var button = (
      React.createElement(Button, React.__spread({}, 
        this.props, 
        {ref: "button", 
        onClick: this.handleButtonClick, 
        title: null, 
        id: null}), 
        this.props.title
      )
    );

    var dropdownButton = (
      React.createElement(Button, React.__spread({}, 
        this.props, 
        {ref: "dropdownButton", 
        className: joinClasses(this.props.className, 'dropdown-toggle'), 
        onClick: this.handleDropdownClick, 
        title: null, 
        id: null}), 
        React.createElement("span", {className: "sr-only"}, this.props.dropdownTitle), 
        React.createElement("span", {className: "caret"})
      )
    );

    return (
      React.createElement(ButtonGroup, {
        bsSize: this.props.bsSize, 
        className: classSet(groupClasses), 
        id: this.props.id}, 
        button, 
        dropdownButton, 
        React.createElement(DropdownMenu, {
          ref: "menu", 
          onSelect: this.handleOptionSelect, 
          'aria-labelledby': this.props.id, 
          pullRight: this.props.pullRight}, 
          this.props.children
        )
      )
    );
  },

  handleButtonClick: function (e) {
    if (this.state.open) {
      this.setDropdownState(false);
    }

    if (this.props.onClick) {
      this.props.onClick(e);
    }
  },

  handleDropdownClick: function (e) {
    e.preventDefault();

    this.setDropdownState(!this.state.open);
  },

  handleOptionSelect: function (key) {
    if (this.props.onSelect) {
      this.props.onSelect(key);
    }

    this.setDropdownState(false);
  }
});

module.exports = SplitButton;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Button":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Button.js","./ButtonGroup":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ButtonGroup.js","./DropdownMenu":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownMenu.js","./DropdownStateMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownStateMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/SubNav.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');
var BootstrapMixin = require('./BootstrapMixin');


var SubNav = React.createClass({displayName: 'SubNav',
  mixins: [BootstrapMixin],

  propTypes: {
    onSelect: React.PropTypes.func,
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    href: React.PropTypes.string,
    title: React.PropTypes.string,
    text: React.PropTypes.node
  },

  getDefaultProps: function () {
    return {
      bsClass: 'nav'
    };
  },

  handleClick: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();

      if (!this.props.disabled) {
        this.props.onSelect(this.props.eventKey, this.props.href);
      }
    }
  },

  isActive: function () {
    return this.isChildActive(this);
  },

  isChildActive: function (child) {
    if (child.props.active) {
      return true;
    }

    if (this.props.activeKey != null && this.props.activeKey === child.props.eventKey) {
      return true;
    }

    if (this.props.activeHref != null && this.props.activeHref === child.props.href) {
      return true;
    }

    if (child.props.children) {
      var isActive = false;

      ValidComponentChildren.forEach(
        child.props.children,
        function (child) {
          if (this.isChildActive(child)) {
            isActive = true;
          }
        },
        this
      );

      return isActive;
    }

    return false;
  },

  getChildActiveProp: function (child) {
    if (child.props.active) {
      return true;
    }
    if (this.props.activeKey != null) {
      if (child.props.eventKey == this.props.activeKey) {
        return true;
      }
    }
    if (this.props.activeHref != null) {
      if (child.props.href === this.props.activeHref) {
        return true;
      }
    }

    return child.props.active;
  },

  render: function () {
    var classes = {
      'active': this.isActive(),
      'disabled': this.props.disabled
    };

    return (
      React.createElement("li", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        React.createElement("a", {
          href: this.props.href, 
          title: this.props.title, 
          onClick: this.handleClick, 
          ref: "anchor"}, 
          this.props.text
        ), 
        React.createElement("ul", {className: "nav"}, 
          ValidComponentChildren.map(this.props.children, this.renderNavItem)
        )
      )
    );
  },

  renderNavItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        active: this.getChildActiveProp(child),
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),
        ref: child.ref,
        key: child.key ? child.key : index
      }
    );
  }
});

module.exports = SubNav;

},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","./utils/createChainedFunction":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/TabPane.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var TransitionEvents = require('./utils/TransitionEvents');

var TabPane = React.createClass({displayName: 'TabPane',
  getDefaultProps: function () {
    return {
      animation: true
    };
  },

  getInitialState: function () {
    return {
      animateIn: false,
      animateOut: false
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (this.props.animation) {
      if (!this.state.animateIn && nextProps.active && !this.props.active) {
        this.setState({
          animateIn: true
        });
      } else if (!this.state.animateOut && !nextProps.active && this.props.active) {
        this.setState({
          animateOut: true
        });
      }
    }
  },

  componentDidUpdate: function () {
    if (this.state.animateIn) {
      setTimeout(this.startAnimateIn, 0);
    }
    if (this.state.animateOut) {
      TransitionEvents.addEndEventListener(
        this.getDOMNode(),
        this.stopAnimateOut
      );
    }
  },

  startAnimateIn: function () {
    if (this.isMounted()) {
      this.setState({
        animateIn: false
      });
    }
  },

  stopAnimateOut: function () {
    if (this.isMounted()) {
      this.setState({
        animateOut: false
      });

      if (typeof this.props.onAnimateOutEnd === 'function') {
        this.props.onAnimateOutEnd();
      }
    }
  },

  render: function () {
    var classes = {
      'tab-pane': true,
      'fade': true,
      'active': this.props.active || this.state.animateOut,
      'in': this.props.active && !this.state.animateIn
    };

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = TabPane;
},{"./utils/TransitionEvents":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/TransitionEvents.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/TabbedArea.js":[function(require,module,exports){
var React = require('react');
var BootstrapMixin = require('./BootstrapMixin');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var Nav = require('./Nav');
var NavItem = require('./NavItem');

function getDefaultActiveKeyFromChildren(children) {
  var defaultActiveKey;

  ValidComponentChildren.forEach(children, function(child) {
    if (defaultActiveKey == null) {
      defaultActiveKey = child.props.eventKey;
    }
  });

  return defaultActiveKey;
}

var TabbedArea = React.createClass({displayName: 'TabbedArea',
  mixins: [BootstrapMixin],

  propTypes: {
    bsStyle: React.PropTypes.oneOf(['tabs','pills']),
    animation: React.PropTypes.bool,
    onSelect: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      bsStyle: "tabs",
      animation: true
    };
  },

  getInitialState: function () {
    var defaultActiveKey = this.props.defaultActiveKey != null ?
      this.props.defaultActiveKey : getDefaultActiveKeyFromChildren(this.props.children);

    // TODO: In __DEV__ mode warn via `console.warn` if no `defaultActiveKey` has
    // been set by this point, invalid children or missing key properties are likely the cause.

    return {
      activeKey: defaultActiveKey,
      previousActiveKey: null
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.activeKey != null && nextProps.activeKey !== this.props.activeKey) {
      this.setState({
        previousActiveKey: this.props.activeKey
      });
    }
  },

  handlePaneAnimateOutEnd: function () {
    this.setState({
      previousActiveKey: null
    });
  },

  render: function () {
    var activeKey =
      this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

    function renderTabIfSet(child) {
      return child.props.tab != null ? this.renderTab(child) : null;
    }

    var nav = (
      React.createElement(Nav, React.__spread({},  this.props, {activeKey: activeKey, onSelect: this.handleSelect, ref: "tabs"}), 
        ValidComponentChildren.map(this.props.children, renderTabIfSet, this)
      )
    );

    return (
      React.createElement("div", null, 
        nav, 
        React.createElement("div", {id: this.props.id, className: "tab-content", ref: "panes"}, 
          ValidComponentChildren.map(this.props.children, this.renderPane)
        )
      )
    );
  },

  getActiveKey: function () {
    return this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;
  },

  renderPane: function (child, index) {
    var activeKey = this.getActiveKey();

    return cloneWithProps(
        child,
        {
          active: (child.props.eventKey === activeKey &&
            (this.state.previousActiveKey == null || !this.props.animation)),
          ref: child.ref,
          key: child.key ? child.key : index,
          animation: this.props.animation,
          onAnimateOutEnd: (this.state.previousActiveKey != null &&
            child.props.eventKey === this.state.previousActiveKey) ? this.handlePaneAnimateOutEnd: null
        }
      );
  },

  renderTab: function (child) {
    var key = child.props.eventKey;
    return (
      React.createElement(NavItem, {
        ref: 'tab' + key, 
        eventKey: key}, 
        child.props.tab
      )
    );
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onSelect` handler.
    return !this._isChanging;
  },

  handleSelect: function (key) {
    if (this.props.onSelect) {
      this._isChanging = true;
      this.props.onSelect(key);
      this._isChanging = false;
    } else if (key !== this.getActiveKey()) {
      this.setState({
        activeKey: key,
        previousActiveKey: this.getActiveKey()
      });
    }
  }
});

module.exports = TabbedArea;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Nav":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Nav.js","./NavItem":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/NavItem.js","./utils/ValidComponentChildren":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js","./utils/cloneWithProps":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Table.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');

var Table = React.createClass({displayName: 'Table',
  propTypes: {
    striped: React.PropTypes.bool,
    bordered: React.PropTypes.bool,
    condensed: React.PropTypes.bool,
    hover: React.PropTypes.bool,
    responsive: React.PropTypes.bool
  },

  render: function () {
    var classes = {
      'table': true,
      'table-striped': this.props.striped,
      'table-bordered': this.props.bordered,
      'table-condensed': this.props.condensed,
      'table-hover': this.props.hover
    };
    var table = (
      React.createElement("table", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );

    return this.props.responsive ? (
      React.createElement("div", {className: "table-responsive"}, 
        table
      )
    ) : table;
  }
});

module.exports = Table;
},{"./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Tooltip.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');


var Tooltip = React.createClass({displayName: 'Tooltip',
  mixins: [BootstrapMixin],

  propTypes: {
    placement: React.PropTypes.oneOf(['top','right', 'bottom', 'left']),
    positionLeft: React.PropTypes.number,
    positionTop: React.PropTypes.number,
    arrowOffsetLeft: React.PropTypes.number,
    arrowOffsetTop: React.PropTypes.number
  },

  getDefaultProps: function () {
    return {
      placement: 'right'
    };
  },

  render: function () {
    var classes = {};
    classes['tooltip'] = true;
    classes[this.props.placement] = true;
    classes['in'] = this.props.positionLeft != null || this.props.positionTop != null;

    var style = {};
    style['left'] = this.props.positionLeft;
    style['top'] = this.props.positionTop;

    var arrowStyle = {};
    arrowStyle['left'] = this.props.arrowOffsetLeft;
    arrowStyle['top'] = this.props.arrowOffsetTop;

    return (
        React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), style: style}), 
          React.createElement("div", {className: "tooltip-arrow", style: arrowStyle}), 
          React.createElement("div", {className: "tooltip-inner"}, 
            this.props.children
          )
        )
      );
  }
});

module.exports = Tooltip;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Well.js":[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var Well = React.createClass({displayName: 'Well',
  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'well'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Well;
},{"./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./utils/classSet":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js","./utils/joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/constants.js":[function(require,module,exports){
module.exports = {
  CLASSES: {
    'alert': 'alert',
    'button': 'btn',
    'button-group': 'btn-group',
    'button-toolbar': 'btn-toolbar',
    'column': 'col',
    'input-group': 'input-group',
    'form': 'form',
    'glyphicon': 'glyphicon',
    'label': 'label',
    'list-group-item': 'list-group-item',
    'panel': 'panel',
    'panel-group': 'panel-group',
    'progress-bar': 'progress-bar',
    'nav': 'nav',
    'navbar': 'navbar',
    'modal': 'modal',
    'row': 'row',
    'well': 'well'
  },
  STYLES: {
    'default': 'default',
    'primary': 'primary',
    'success': 'success',
    'info': 'info',
    'warning': 'warning',
    'danger': 'danger',
    'link': 'link',
    'inline': 'inline',
    'tabs': 'tabs',
    'pills': 'pills'
  },
  SIZES: {
    'large': 'lg',
    'medium': 'md',
    'small': 'sm',
    'xsmall': 'xs'
  },
  GLYPHS: [
    'asterisk',
    'plus',
    'euro',
    'minus',
    'cloud',
    'envelope',
    'pencil',
    'glass',
    'music',
    'search',
    'heart',
    'star',
    'star-empty',
    'user',
    'film',
    'th-large',
    'th',
    'th-list',
    'ok',
    'remove',
    'zoom-in',
    'zoom-out',
    'off',
    'signal',
    'cog',
    'trash',
    'home',
    'file',
    'time',
    'road',
    'download-alt',
    'download',
    'upload',
    'inbox',
    'play-circle',
    'repeat',
    'refresh',
    'list-alt',
    'lock',
    'flag',
    'headphones',
    'volume-off',
    'volume-down',
    'volume-up',
    'qrcode',
    'barcode',
    'tag',
    'tags',
    'book',
    'bookmark',
    'print',
    'camera',
    'font',
    'bold',
    'italic',
    'text-height',
    'text-width',
    'align-left',
    'align-center',
    'align-right',
    'align-justify',
    'list',
    'indent-left',
    'indent-right',
    'facetime-video',
    'picture',
    'map-marker',
    'adjust',
    'tint',
    'edit',
    'share',
    'check',
    'move',
    'step-backward',
    'fast-backward',
    'backward',
    'play',
    'pause',
    'stop',
    'forward',
    'fast-forward',
    'step-forward',
    'eject',
    'chevron-left',
    'chevron-right',
    'plus-sign',
    'minus-sign',
    'remove-sign',
    'ok-sign',
    'question-sign',
    'info-sign',
    'screenshot',
    'remove-circle',
    'ok-circle',
    'ban-circle',
    'arrow-left',
    'arrow-right',
    'arrow-up',
    'arrow-down',
    'share-alt',
    'resize-full',
    'resize-small',
    'exclamation-sign',
    'gift',
    'leaf',
    'fire',
    'eye-open',
    'eye-close',
    'warning-sign',
    'plane',
    'calendar',
    'random',
    'comment',
    'magnet',
    'chevron-up',
    'chevron-down',
    'retweet',
    'shopping-cart',
    'folder-close',
    'folder-open',
    'resize-vertical',
    'resize-horizontal',
    'hdd',
    'bullhorn',
    'bell',
    'certificate',
    'thumbs-up',
    'thumbs-down',
    'hand-right',
    'hand-left',
    'hand-up',
    'hand-down',
    'circle-arrow-right',
    'circle-arrow-left',
    'circle-arrow-up',
    'circle-arrow-down',
    'globe',
    'wrench',
    'tasks',
    'filter',
    'briefcase',
    'fullscreen',
    'dashboard',
    'paperclip',
    'heart-empty',
    'link',
    'phone',
    'pushpin',
    'usd',
    'gbp',
    'sort',
    'sort-by-alphabet',
    'sort-by-alphabet-alt',
    'sort-by-order',
    'sort-by-order-alt',
    'sort-by-attributes',
    'sort-by-attributes-alt',
    'unchecked',
    'expand',
    'collapse-down',
    'collapse-up',
    'log-in',
    'flash',
    'log-out',
    'new-window',
    'record',
    'save',
    'open',
    'saved',
    'import',
    'export',
    'send',
    'floppy-disk',
    'floppy-saved',
    'floppy-remove',
    'floppy-save',
    'floppy-open',
    'credit-card',
    'transfer',
    'cutlery',
    'header',
    'compressed',
    'earphone',
    'phone-alt',
    'tower',
    'stats',
    'sd-video',
    'hd-video',
    'subtitles',
    'sound-stereo',
    'sound-dolby',
    'sound-5-1',
    'sound-6-1',
    'sound-7-1',
    'copyright-mark',
    'registration-mark',
    'cloud-download',
    'cloud-upload',
    'tree-conifer',
    'tree-deciduous'
  ]
};

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/main.js":[function(require,module,exports){
module.exports = {
  Accordion: require('./Accordion'),
  Affix: require('./Affix'),
  AffixMixin: require('./AffixMixin'),
  Alert: require('./Alert'),
  BootstrapMixin: require('./BootstrapMixin'),
  Badge: require('./Badge'),
  Button: require('./Button'),
  ButtonGroup: require('./ButtonGroup'),
  ButtonToolbar: require('./ButtonToolbar'),
  Carousel: require('./Carousel'),
  CarouselItem: require('./CarouselItem'),
  Col: require('./Col'),
  CollapsableMixin: require('./CollapsableMixin'),
  DropdownButton: require('./DropdownButton'),
  DropdownMenu: require('./DropdownMenu'),
  DropdownStateMixin: require('./DropdownStateMixin'),
  FadeMixin: require('./FadeMixin'),
  Glyphicon: require('./Glyphicon'),
  Grid: require('./Grid'),
  Input: require('./Input'),
  Interpolate: require('./Interpolate'),
  Jumbotron: require('./Jumbotron'),
  Label: require('./Label'),
  ListGroup: require('./ListGroup'),
  ListGroupItem: require('./ListGroupItem'),
  MenuItem: require('./MenuItem'),
  Modal: require('./Modal'),
  Nav: require('./Nav'),
  Navbar: require('./Navbar'),
  NavItem: require('./NavItem'),
  ModalTrigger: require('./ModalTrigger'),
  OverlayTrigger: require('./OverlayTrigger'),
  OverlayMixin: require('./OverlayMixin'),
  PageHeader: require('./PageHeader'),
  Panel: require('./Panel'),
  PanelGroup: require('./PanelGroup'),
  PageItem: require('./PageItem'),
  Pager: require('./Pager'),
  Popover: require('./Popover'),
  ProgressBar: require('./ProgressBar'),
  Row: require('./Row'),
  SplitButton: require('./SplitButton'),
  SubNav: require('./SubNav'),
  TabbedArea: require('./TabbedArea'),
  Table: require('./Table'),
  TabPane: require('./TabPane'),
  Tooltip: require('./Tooltip'),
  Well: require('./Well')
};

},{"./Accordion":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Accordion.js","./Affix":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Affix.js","./AffixMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/AffixMixin.js","./Alert":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Alert.js","./Badge":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Badge.js","./BootstrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/BootstrapMixin.js","./Button":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Button.js","./ButtonGroup":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ButtonGroup.js","./ButtonToolbar":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ButtonToolbar.js","./Carousel":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Carousel.js","./CarouselItem":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/CarouselItem.js","./Col":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Col.js","./CollapsableMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/CollapsableMixin.js","./DropdownButton":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownButton.js","./DropdownMenu":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownMenu.js","./DropdownStateMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/DropdownStateMixin.js","./FadeMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/FadeMixin.js","./Glyphicon":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Glyphicon.js","./Grid":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Grid.js","./Input":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Input.js","./Interpolate":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Interpolate.js","./Jumbotron":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Jumbotron.js","./Label":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Label.js","./ListGroup":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ListGroup.js","./ListGroupItem":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ListGroupItem.js","./MenuItem":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/MenuItem.js","./Modal":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Modal.js","./ModalTrigger":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ModalTrigger.js","./Nav":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Nav.js","./NavItem":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/NavItem.js","./Navbar":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Navbar.js","./OverlayMixin":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/OverlayMixin.js","./OverlayTrigger":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/OverlayTrigger.js","./PageHeader":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/PageHeader.js","./PageItem":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/PageItem.js","./Pager":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Pager.js","./Panel":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Panel.js","./PanelGroup":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/PanelGroup.js","./Popover":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Popover.js","./ProgressBar":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/ProgressBar.js","./Row":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Row.js","./SplitButton":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/SplitButton.js","./SubNav":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/SubNav.js","./TabPane":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/TabPane.js","./TabbedArea":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/TabbedArea.js","./Table":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Table.js","./Tooltip":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Tooltip.js","./Well":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/Well.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/CustomPropTypes.js":[function(require,module,exports){
var React = require('react');

var ANONYMOUS = '<<anonymous>>';

var CustomPropTypes = {
  /**
   * Checks whether a prop provides a DOM element
   *
   * The element can be provided in two forms:
   * - Directly passed
   * - Or passed an object which has a `getDOMNode` method which will return the required DOM element
   *
   * @param props
   * @param propName
   * @param componentName
   * @returns {Error|undefined}
   */
  mountable: createMountableChecker()
};

/**
 * Create chain-able isRequired validator
 *
 * Largely copied directly from:
 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
 */
function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      if (isRequired) {
        return new Error(
          'Required prop `' + propName + '` was not specified in ' +
            '`' + componentName + '`.'
        );
      }
    } else {
      return validate(props, propName, componentName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createMountableChecker() {
  function validate(props, propName, componentName) {
    if (typeof props[propName] !== 'object' ||
      typeof props[propName].getDOMNode !== 'function' && props[propName].nodeType !== 1) {
      return new Error(
        'Invalid prop `' + propName + '` supplied to ' +
          '`' + componentName + '`, expected a DOM element or an object that has a `getDOMNode` method'
      );
    }
  }

  return createChainableTypeChecker(validate);
}

module.exports = CustomPropTypes;
},{"react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/EventListener.js":[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * This file contains a modified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/EventListener.js
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * TODO: remove in favour of solution provided by:
 *  https://github.com/facebook/react/issues/285
 */

/**
 * Does not take into account specific nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  }
};

module.exports = EventListener;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/Object.assign.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains an unmodified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/Object.assign.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/TransitionEvents.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains a modified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

var canUseDOM = !!(
  typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement
  );

/**
 * EVENT_NAME_MAP is used to determine which event fired when a
 * transition/animation ends, based on the style property used to
 * define that event.
 */
var EVENT_NAME_MAP = {
  transitionend: {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'mozTransitionEnd',
    'OTransition': 'oTransitionEnd',
    'msTransition': 'MSTransitionEnd'
  },

  animationend: {
    'animation': 'animationend',
    'WebkitAnimation': 'webkitAnimationEnd',
    'MozAnimation': 'mozAnimationEnd',
    'OAnimation': 'oAnimationEnd',
    'msAnimation': 'MSAnimationEnd'
  }
};

var endEvents = [];

function detectEvents() {
  var testEl = document.createElement('div');
  var style = testEl.style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are useable, and if not remove them
  // from the map
  if (!('AnimationEvent' in window)) {
    delete EVENT_NAME_MAP.animationend.animation;
  }

  if (!('TransitionEvent' in window)) {
    delete EVENT_NAME_MAP.transitionend.transition;
  }

  for (var baseEventName in EVENT_NAME_MAP) {
    var baseEvents = EVENT_NAME_MAP[baseEventName];
    for (var styleName in baseEvents) {
      if (styleName in style) {
        endEvents.push(baseEvents[styleName]);
        break;
      }
    }
  }
}

if (canUseDOM) {
  detectEvents();
}

// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}

var ReactTransitionEvents = {
  addEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      // If CSS transitions are not supported, trigger an "end animation"
      // event immediately.
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function(endEvent) {
      addEventListener(node, endEvent, eventListener);
    });
  },

  removeEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function(endEvent) {
      removeEventListener(node, endEvent, eventListener);
    });
  }
};

module.exports = ReactTransitionEvents;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/ValidComponentChildren.js":[function(require,module,exports){
var React = require('react');

/**
 * Maps children that are typically specified as `props.children`,
 * but only iterates over children that are "valid components".
 *
 * The mapFunction provided index will be normalised to the components mapped,
 * so an invalid component would not increase the index.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapValidComponents(children, func, context) {
  var index = 0;

  return React.Children.map(children, function (child) {
    if (React.isValidElement(child)) {
      var lastIndex = index;
      index++;
      return func.call(context, child, lastIndex);
    }

    return child;
  });
}

/**
 * Iterates through children that are typically specified as `props.children`,
 * but only iterates over children that are "valid components".
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child with the index reflecting the position relative to "valid components".
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachValidComponents(children, func, context) {
  var index = 0;

  return React.Children.forEach(children, function (child) {
    if (React.isValidElement(child)) {
      func.call(context, child, index);
      index++;
    }
  });
}

/**
 * Count the number of "valid components" in the Children container.
 *
 * @param {?*} children Children tree container.
 * @returns {number}
 */
function numberOfValidComponents(children) {
  var count = 0;

  React.Children.forEach(children, function (child) {
    if (React.isValidElement(child)) { count++; }
  });

  return count;
}

/**
 * Determine if the Child container has one or more "valid components".
 *
 * @param {?*} children Children tree container.
 * @returns {boolean}
 */
function hasValidComponent(children) {
  var hasValid = false;

  React.Children.forEach(children, function (child) {
    if (!hasValid && React.isValidElement(child)) {
      hasValid = true;
    }
  });

  return hasValid;
}

module.exports = {
  map: mapValidComponents,
  forEach: forEachValidComponents,
  numberOf: numberOfValidComponents,
  hasValidComponent: hasValidComponent
};
},{"react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/classSet.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains an unmodified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/cx.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

/**
 * This function is used to mark string literals representing CSS class names
 * so that they can be transformed statically. This allows for modularization
 * and minification of CSS class names.
 *
 * In static_upstream, this function is actually implemented, but it should
 * eventually be replaced with something more descriptive, and the transform
 * that is used in the main stack should be ported for use elsewhere.
 *
 * @param string|object className to modularize, or an object of key/values.
 *                      In the object case, the values are conditions that
 *                      determine if the className keys should be included.
 * @param [string ...]  Variable list of classNames in the string case.
 * @return string       Renderable space-separated CSS className.
 */
function cx(classNames) {
  if (typeof classNames == 'object') {
    return Object.keys(classNames).filter(function(className) {
      return classNames[className];
    }).join(' ');
  } else {
    return Array.prototype.join.call(arguments, ' ');
  }
}

module.exports = cx;
},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/cloneWithProps.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains modified versions of:
 * https://github.com/facebook/react/blob/v0.12.0/src/utils/cloneWithProps.js
 * https://github.com/facebook/react/blob/v0.12.0/src/core/ReactPropTransferer.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 *
 * TODO: This should be replaced as soon as cloneWithProps is available via
 *  the core React package or a separate package.
 *  @see https://github.com/facebook/react/issues/1906
 */

var React = require('react');
var joinClasses = require('./joinClasses');
var assign = require("./Object.assign");

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

function emptyFunction() {}

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * Merge two props objects using TransferStrategies.
 *
 * @param {object} oldProps original props (they take precedence)
 * @param {object} newProps new props to merge in
 * @return {object} a new object containing both sets of props merged.
 */
function mergeProps(oldProps, newProps) {
  return transferInto(assign({}, oldProps), newProps);
}


var ReactPropTransferer = {
  mergeProps: mergeProps
};

var CHILDREN_PROP = 'children';

/**
 * Sometimes you want to change the props of a child passed to you. Usually
 * this is to add a CSS class.
 *
 * @param {object} child child component you'd like to clone
 * @param {object} props props you'd like to modify. They will be merged
 * as if you used `transferPropsTo()`.
 * @return {object} a clone of child with props merged in.
 */
function cloneWithProps(child, props) {
  var newProps = ReactPropTransferer.mergeProps(props, child.props);

  // Use `child.props.children` if it is provided.
  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
    child.props.hasOwnProperty(CHILDREN_PROP)) {
    newProps.children = child.props.children;
  }

  if (React.version.substr(0, 4) === '0.12'){
    var mockLegacyFactory = function(){};
    mockLegacyFactory.isReactLegacyFactory = true;
    mockLegacyFactory.type = child.type;

    return React.createElement(mockLegacyFactory, newProps);
  }

  // The current API doesn't retain _owner and _context, which is why this
  // doesn't use ReactElement.cloneAndReplaceProps.
  return React.createElement(child.type, newProps);
}

module.exports = cloneWithProps;
},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/Object.assign.js","./joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js","react":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/createChainedFunction.js":[function(require,module,exports){
/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} one
 * @param {function} two
 * @returns {function|null}
 */
function createChainedFunction(one, two) {
  var hasOne = typeof one === 'function';
  var hasTwo = typeof two === 'function';

  if (!hasOne && !hasTwo) { return null; }
  if (!hasOne) { return two; }
  if (!hasTwo) { return one; }

  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

module.exports = createChainedFunction;
},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/domUtils.js":[function(require,module,exports){

/**
 * Shortcut to compute element style
 *
 * @param {HTMLElement} elem
 * @returns {CssStyle}
 */
function getComputedStyles(elem) {
  return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
}

/**
 * Get elements offset
 *
 * TODO: REMOVE JQUERY!
 *
 * @param {HTMLElement} DOMNode
 * @returns {{top: number, left: number}}
 */
function getOffset(DOMNode) {
  if (window.jQuery) {
    return window.jQuery(DOMNode).offset();
  }

  var docElem = document.documentElement;
  var box = { top: 0, left: 0 };

  // If we don't have gBCR, just use 0,0 rather than error
  // BlackBerry 5, iOS 3 (original iPhone)
  if ( typeof DOMNode.getBoundingClientRect !== 'undefined' ) {
    box = DOMNode.getBoundingClientRect();
  }

  return {
    top: box.top + window.pageYOffset - docElem.clientTop,
    left: box.left + window.pageXOffset - docElem.clientLeft
  };
}

/**
 * Get elements position
 *
 * TODO: REMOVE JQUERY!
 *
 * @param {HTMLElement} elem
 * @param {HTMLElement?} offsetParent
 * @returns {{top: number, left: number}}
 */
function getPosition(elem, offsetParent) {
  if (window.jQuery) {
    return window.jQuery(elem).position();
  }

  var offset,
      parentOffset = {top: 0, left: 0};

  // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
  if (getComputedStyles(elem).position === 'fixed' ) {
    // We assume that getBoundingClientRect is available when computed position is fixed
    offset = elem.getBoundingClientRect();

  } else {
    if (!offsetParent) {
      // Get *real* offsetParent
      offsetParent = offsetParent(elem);
    }

    // Get correct offsets
    offset = getOffset(elem);
    if ( offsetParent.nodeName !== 'HTML') {
      parentOffset = getOffset(offsetParent);
    }

    // Add offsetParent borders
    parentOffset.top += parseInt(getComputedStyles(offsetParent).borderTopWidth, 10);
    parentOffset.left += parseInt(getComputedStyles(offsetParent).borderLeftWidth, 10);
  }

  // Subtract parent offsets and element margins
  return {
    top: offset.top - parentOffset.top - parseInt(getComputedStyles(elem).marginTop, 10),
    left: offset.left - parentOffset.left - parseInt(getComputedStyles(elem).marginLeft, 10)
  };
}

/**
 * Get parent element
 *
 * @param {HTMLElement?} elem
 * @returns {HTMLElement}
 */
function offsetParent(elem) {
  var docElem = document.documentElement;
  var offsetParent = elem.offsetParent || docElem;

  while ( offsetParent && ( offsetParent.nodeName !== 'HTML' &&
    getComputedStyles(offsetParent).position === 'static' ) ) {
    offsetParent = offsetParent.offsetParent;
  }

  return offsetParent || docElem;
}

module.exports = {
  getComputedStyles: getComputedStyles,
  getOffset: getOffset,
  getPosition: getPosition,
  offsetParent: offsetParent
};
},{}],"/Users/joshua/miniproj/satie/website/node_modules/react-bootstrap/utils/joinClasses.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains an unmodified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/utils/joinClasses.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/focusNode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/BeforeInputEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./SyntheticInputEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticInputEvent.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSProperty.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var camelizeStyleName = require("./camelizeStyleName");
var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== process.env.NODE_ENV) {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

}).call(this,require('_process'))
},{"./CSSProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSProperty.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./camelizeStyleName":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelizeStyleName.js","./dangerousStyleValue":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/dangerousStyleValue.js","./hyphenateStyleName":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenateStyleName.js","./memoizeStringOnly":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/memoizeStringOnly.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CallbackQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var invariant = require("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ChangeEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js","./isEventSupported":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isEventSupported.js","./isTextInputElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextInputElement.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ClientReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CompositionEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");

var getTextContentAccessor = require("./getTextContentAccessor");
var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./ReactInputSelection":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInputSelection.js","./SyntheticCompositionEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticCompositionEvent.js","./getTextContentAccessor":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getTextContentAccessor.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMChildrenOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = require("./getTextContentAccessor");
var invariant = require("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))
},{"./Danger":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Danger.js","./ReactMultiChildUpdateTypes":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./getTextContentAccessor":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getTextContentAccessor.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = require("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))
},{"./DOMProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js","./escapeTextForBrowser":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/escapeTextForBrowser.js","./memoizeStringOnly":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/memoizeStringOnly.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Danger.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./createNodesFromMarkup":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createNodesFromMarkup.js","./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js","./getMarkupWrap":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getMarkupWrap.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DefaultEventPluginOrder.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./SyntheticMouseEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventListener.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))
},{"./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))
},{"./EventPluginRegistry":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginRegistry.js","./EventPluginUtils":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginUtils.js","./accumulateInto":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/forEachAccumulated.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginRegistry.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))
},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))
},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js","./accumulateInto":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/forEachAccumulated.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LinkedValueUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))
},{"./ReactPropTypes":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypes.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LocalEventTrapMixin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))
},{"./ReactBrowserEventEmitter":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js","./accumulateInto":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/forEachAccumulated.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/MobileSafariClickEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/React.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactDOM = require("./ReactDOM");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactServerRendering = require("./ReactServerRendering");
var ReactTextComponent = require("./ReactTextComponent");

var assign = require("./Object.assign");
var deprecated = require("./deprecated");
var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== process.env.NODE_ENV) {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

}).call(this,require('_process'))
},{"./DOMPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js","./EventPluginUtils":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginUtils.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactChildren":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactChildren.js","./ReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactContext":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactDOMComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMComponent.js","./ReactDefaultInjection":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultInjection.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElementValidator.js","./ReactInstanceHandles":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js","./ReactLegacyElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./ReactPropTypes":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypes.js","./ReactServerRendering":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRendering.js","./ReactTextComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactTextComponent.js","./deprecated":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/deprecated.js","./onlyChild":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/onlyChild.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

}).call(this,require('_process'))
},{"./ReactEmptyComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var assign = require("./Object.assign");
var isEventSupported = require("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js","./EventPluginRegistry":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginRegistry.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactEventEmitterMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventEmitterMixin.js","./ViewportMetrics":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ViewportMetrics.js","./isEventSupported":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isEventSupported.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = require("./PooledClass");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))
},{"./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./traverseAllChildren":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/traverseAllChildren.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactOwner = require("./ReactOwner");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== process.env.NODE_ENV ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactOwner.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./keyMirror":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== process.env.NODE_ENV ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== process.env.NODE_ENV ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== process.env.NODE_ENV) {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== process.env.NODE_ENV ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

}).call(this,require('_process'))
},{"./ReactDOMIDOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMarkupChecksum":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMarkupChecksum.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./ReactReconcileTransaction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactReconcileTransaction.js","./getReactRootElementInContainer":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getReactRootElementInContainer.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./setInnerHTML":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/setInnerHTML.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactOwner = require("./ReactOwner");
var ReactPerf = require("./ReactPerf");
var ReactPropTransferer = require("./ReactPropTransferer");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var keyOf = require("./keyOf");
var monitorCodeUse = require("./monitorCodeUse");
var mapObject = require("./mapObject");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== process.env.NODE_ENV ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== process.env.NODE_ENV){
      ("production" !== process.env.NODE_ENV ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== process.env.NODE_ENV) {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== process.env.NODE_ENV) {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== process.env.NODE_ENV ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== process.env.NODE_ENV) {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== process.env.NODE_ENV) {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js","./ReactContext":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElementValidator.js","./ReactEmptyComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js","./ReactErrorUtils":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactErrorUtils.js","./ReactLegacyElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js","./ReactOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactOwner.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./ReactPropTransferer":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTransferer.js","./ReactPropTypeLocationNames":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocations.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./keyMirror":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js","./mapObject":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/mapObject.js","./monitorCodeUse":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js","./shouldUpdateReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactContext.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = require("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactLegacyElement = require("./ReactLegacyElement");

var mapObject = require("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== process.env.NODE_ENV) {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElementValidator.js","./ReactLegacyElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js","./mapObject":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/mapObject.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMButton.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

var keyMirror = require("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./keyMirror":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponent = require("./ReactComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var assign = require("./Object.assign");
var escapeTextForBrowser = require("./escapeTextForBrowser");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var keyOf = require("./keyOf");
var monitorCodeUse = require("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== process.env.NODE_ENV ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== process.env.NODE_ENV) {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== process.env.NODE_ENV) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSPropertyOperations.js","./DOMProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js","./DOMPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactBrowserEventEmitter":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./escapeTextForBrowser":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/escapeTextForBrowser.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./isEventSupported":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isEventSupported.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js","./monitorCodeUse":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMForm.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMIDOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSPropertyOperations.js","./DOMChildrenOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./setInnerHTML":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/setInnerHTML.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMImg.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMInput.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))
},{"./AutoFocusMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMOption.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

var warning = require("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))
},{"./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelect.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js","./LinkedValueUtils":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./getNodeForCharacterOffset":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getNodeForCharacterOffset.js","./getTextContentAccessor":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMTextarea.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var warning = require("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))
},{"./AutoFocusMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js","./Transaction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js","./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultInjection.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var CompositionEventPlugin = require("./CompositionEventPlugin");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))
},{"./BeforeInputEventPlugin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/BeforeInputEventPlugin.js","./ChangeEventPlugin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ChangeEventPlugin.js","./ClientReactRootIndex":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ClientReactRootIndex.js","./CompositionEventPlugin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CompositionEventPlugin.js","./DefaultEventPluginOrder":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DefaultEventPluginOrder.js","./EnterLeaveEventPlugin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EnterLeaveEventPlugin.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./HTMLDOMPropertyConfig":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/HTMLDOMPropertyConfig.js","./MobileSafariClickEventPlugin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/MobileSafariClickEventPlugin.js","./ReactBrowserComponentMixin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactComponentBrowserEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMButton":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMButton.js","./ReactDOMComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMComponent.js","./ReactDOMForm":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMForm.js","./ReactDOMImg":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMImg.js","./ReactDOMInput":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMInput.js","./ReactDOMOption":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMOption.js","./ReactDOMSelect":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelect.js","./ReactDOMTextarea":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMTextarea.js","./ReactDefaultBatchingStrategy":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactDefaultPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerf.js","./ReactEventListener":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventListener.js","./ReactInjection":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInjection.js","./ReactInstanceHandles":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./SVGDOMPropertyConfig":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SVGDOMPropertyConfig.js","./SelectEventPlugin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SelectEventPlugin.js","./ServerReactRootIndex":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ServerReactRootIndex.js","./SimpleEventPlugin":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SimpleEventPlugin.js","./createFullPageComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createFullPageComponent.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerf.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js","./ReactDefaultPerfAnalysis":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerfAnalysis.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./performanceNow":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performanceNow.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerfAnalysis.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = require("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var warning = require("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== process.env.NODE_ENV) {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== process.env.NODE_ENV) {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

}).call(this,require('_process'))
},{"./ReactContext":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElementValidator.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var monitorCodeUse = require("./monitorCodeUse");
var warning = require("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== process.env.NODE_ENV ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocations.js","./monitorCodeUse":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactErrorUtils.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventEmitterMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventListener.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventListener.js","./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./ReactInstanceHandles":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js","./getEventTarget":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventTarget.js","./getUnboundedScrollPosition":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getUnboundedScrollPosition.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInjection.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js","./EventPluginHub":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js","./ReactBrowserEventEmitter":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js","./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactEmptyComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./ReactRootIndex":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactRootIndex.js","./ReactUpdates":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInputSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelection.js","./containsNode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/containsNode.js","./focusNode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/focusNode.js","./getActiveElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getActiveElement.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))
},{"./ReactRootIndex":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactRootIndex.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = require("./ReactCurrentOwner");

var invariant = require("./invariant");
var monitorCodeUse = require("./monitorCodeUse");
var warning = require("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== process.env.NODE_ENV ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== process.env.NODE_ENV ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== process.env.NODE_ENV) {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== process.env.NODE_ENV) {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== process.env.NODE_ENV) {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== process.env.NODE_ENV) {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== process.env.NODE_ENV) {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./monitorCodeUse":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMarkupChecksum.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/adler32.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactPerf = require("./ReactPerf");

var containsNode = require("./containsNode");
var deprecated = require("./deprecated");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== process.env.NODE_ENV ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== process.env.NODE_ENV) {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

}).call(this,require('_process'))
},{"./DOMProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js","./ReactBrowserEventEmitter":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactCurrentOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js","./ReactLegacyElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./containsNode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/containsNode.js","./deprecated":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/deprecated.js","./getReactRootElementInContainer":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getReactRootElementInContainer.js","./instantiateReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./shouldUpdateReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChild.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js","./ReactMultiChildUpdateTypes":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./flattenChildren":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/flattenChildren.js","./instantiateReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js","./shouldUpdateReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shouldUpdateReactComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactNativeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = require("./Object.assign");
var invariant = require("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== process.env.NODE_ENV ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== process.env.NODE_ENV ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactOwner.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = require("./emptyObject");
var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== process.env.NODE_ENV ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))
},{"./emptyObject":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyObject.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))
},{"_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTransferer.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var invariant = require("./invariant");
var joinClasses = require("./joinClasses");
var warning = require("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== process.env.NODE_ENV ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== process.env.NODE_ENV) {
        if (!didWarn) {
          didWarn = true;
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./joinClasses":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/joinClasses.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))
},{"_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocations.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var deprecated = require("./deprecated");
var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocationNames.js","./deprecated":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/deprecated.js","./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPutListenerQueue.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var assign = require("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactReconcileTransaction.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactInputSelection":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInputSelection.js","./ReactPutListenerQueue":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRendering.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

}).call(this,require('_process'))
},{"./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js","./ReactMarkupChecksum":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMarkupChecksum.js","./ReactServerRenderingTransaction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRenderingTransaction.js","./instantiateReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./ReactPutListenerQueue":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js","./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactTextComponent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponent = require("./ReactComponent");
var ReactElement = require("./ReactElement");

var assign = require("./Object.assign");
var escapeTextForBrowser = require("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./ReactComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./escapeTextForBrowser":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/escapeTextForBrowser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== process.env.NODE_ENV ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

}).call(this,require('_process'))
},{"./CallbackQueue":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./ReactCurrentOwner":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js","./ReactPerf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js","./Transaction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SelectEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js","./ReactInputSelection":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInputSelection.js","./SyntheticEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js","./getActiveElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getActiveElement.js","./isTextInputElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextInputElement.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js","./shallowEqual":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shallowEqual.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ServerReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SimpleEventPlugin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var getEventCharCode = require("./getEventCharCode");

var invariant = require("./invariant");
var keyOf = require("./keyOf");
var warning = require("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== process.env.NODE_ENV ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))
},{"./EventConstants":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js","./EventPluginUtils":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginUtils.js","./EventPropagators":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js","./SyntheticClipboardEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticClipboardEvent.js","./SyntheticDragEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticDragEvent.js","./SyntheticEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js","./SyntheticFocusEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticFocusEvent.js","./SyntheticKeyboardEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticKeyboardEvent.js","./SyntheticMouseEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js","./SyntheticTouchEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticTouchEvent.js","./SyntheticUIEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js","./SyntheticWheelEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticWheelEvent.js","./getEventCharCode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventCharCode.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","./keyOf":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticClipboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticCompositionEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticDragEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js","./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js","./getEventTarget":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventTarget.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticFocusEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticInputEvent.js":[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventCharCode = require("./getEventCharCode");
var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js","./getEventCharCode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventCharCode.js","./getEventKey":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventKey.js","./getEventModifierState":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventModifierState.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js","./ViewportMetrics":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ViewportMetrics.js","./getEventModifierState":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventModifierState.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticTouchEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js","./getEventModifierState":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventModifierState.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventTarget.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticWheelEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ViewportMetrics.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getUnboundedScrollPosition.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/accumulateInto.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = require("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/adler32.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelize.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelizeStyleName.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = require("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelize.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/containsNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextNode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createArrayFrom.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/toArray.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createFullPageComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))
},{"./ReactCompositeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js","./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createNodesFromMarkup.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFrom = require("./createArrayFrom");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./createArrayFrom":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createArrayFrom.js","./getMarkupWrap":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getMarkupWrap.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/dangerousStyleValue.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSProperty.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/deprecated.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = require("./Object.assign");
var warning = require("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== process.env.NODE_ENV) {
    var newFn = function() {
      ("production" !== process.env.NODE_ENV ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyObject.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))
},{"_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/escapeTextForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/flattenChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = require("./ReactTextComponent");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))
},{"./ReactTextComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactTextComponent.js","./traverseAllChildren":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/traverseAllChildren.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/focusNode.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/forEachAccumulated.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getActiveElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventCharCode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventKey.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = require("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventCharCode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventModifierState.js":[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventTarget.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getMarkupWrap.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getNodeForCharacterOffset.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getReactRootElementInContainer.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getTextContentAccessor.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getUnboundedScrollPosition.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenate.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenateStyleName.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenate.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = require("./warning");

var ReactElement = require("./ReactElement");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactEmptyComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js","./ReactLegacyElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js","./ReactNativeComponent":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactNativeComponent.js","./warning":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))
},{"_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isEventSupported.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextInputElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isNode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/joinClasses.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/mapObject.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/memoizeStringOnly.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = require("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== process.env.NODE_ENV ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/onlyChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performance.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performanceNow.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performance.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/setInnerHTML.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shallowEqual.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shouldUpdateReactComponent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/toArray.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))
},{"./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/traverseAllChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");

var invariant = require("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== process.env.NODE_ENV ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js","./invariant":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))
},{"./emptyFunction":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/react/react.js":[function(require,module,exports){
module.exports = require('./lib/React');

},{"./lib/React":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/React.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/renderer/molasses.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var Molasses = (function (_super) {
    __extends(Molasses, _super);
    function Molasses() {
        _super.apply(this, arguments);
    }
    Molasses.prototype.render = function () {
        return React.DOM.svg({
            "data-page": this.props.page.idx,
            height: this.props.height,
            onClick: this.props.onClick,
            onMouseDown: this.props.onMouseDown,
            onMouseLeave: this.props.onMouseLeave,
            onMouseMove: this.props.onMouseMove,
            onMouseUp: this.props.onMouseUp,
            ref: "svg" + this.props.page.idx,
            viewBox: this.props.viewbox,
            width: this.props.width
        }, this.props.children);
    };
    return Molasses;
})(TypedReact.Component);
;
var Molasses;
(function (Molasses) {
    "use strict";
    Molasses.Component = TypedReact.createClass(Molasses);
})(Molasses || (Molasses = {}));
module.exports = Molasses;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/renderer/renderer.js":[function(require,module,exports){
(function (global){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var assert = require("assert");
Object.assign = require("react/lib/Object.assign");
var Molasses = require("./molasses");
var C = require("../stores/contracts");
var Header = require("../views/_header");
var PlaceholderModel = require("../stores/placeholder");
var Rect = require("../views/_rect");
var Line = require("../views/_line");
var isBrowser = typeof window !== "undefined";
var useGL = (typeof global.libripienoclient !== "undefined") || (isBrowser && global.location.search.indexOf("engine=gl") !== -1);
C.renderUtil.useGL = useGL;
var RenderEngine = Molasses.Component;
var profilerEnabled = isBrowser && global.location.search.indexOf("profile=1") !== -1;
var Renderer = (function (_super) {
    __extends(Renderer, _super);
    function Renderer() {
        var _this = this;
        _super.apply(this, arguments);
        this._hideMidiEntry = function () {
            localStorage["midiEntry"] = "closed";
            _this.forceUpdate();
        };
        this.handleMouseMoveThrottled = _.throttle(function (mouse) {
            var data = _this._getPointerData(mouse);
            _this.setState({
                mouse: mouse
            });
        }, 16);
        this.handleScroll = _.throttle(function () {
            _this.forceUpdate();
        }, 16);
    }
    Renderer.prototype.render = function () {
        var _this = this;
        if (profilerEnabled) {
            console.time("render");
        }
        var parts = this.props.parts;
        var bodyLength = 0;
        for (var i = 0; i < parts.length; ++i) {
            if (parts[i].body) {
                bodyLength = parts[i].body.length;
            }
        }
        var pages = [];
        var ctx = this.getCtx();
        var scale40 = ctx.calcFontSize();
        assert(ctx, "You must annotate before rendering");
        var pageStarts = ctx.pageStarts;
        var pageLines = ctx.pageLines;
        var pageCount = pageStarts.length;
        for (var i = 1; i < pageCount; ++i) {
            pages.push({ from: pageStarts[i - 1], to: pageStarts[i], idx: i - 1 });
        }
        pages.push({
            from: pageStarts[pageCount - 1],
            to: bodyLength,
            idx: pageCount - 1
        });
        var print = C.getPrint(ctx._layout.header);
        var scaling = ctx._layout.header.defaults.scaling;
        var width10s = print.pageLayout.pageWidth;
        var height10s = print.pageLayout.pageHeight;
        var viewbox = "0 0 " + width10s + " " + height10s;
        var vcHeight = 48 + ctx.staveSpacing * (ctx._parts.length - 1) / 2;
        var rawPages = _.map(pages, function (page, pidx) {
            return React.createElement(RenderEngine, { onClick: _this.handleMouseClick, onMouseLeave: _this.handleMouseLeave, onMouseMove: _this.handleMouseMove, page: page, parts: parts, width: _this.props.raw ? C.renderUtil.tenthsToMM(scale40, width10s) + "mm" : "100%", height: _this.props.raw ? C.renderUtil.tenthsToMM(scale40, height10s) + "mm" : "100%", viewbox: viewbox }, !page.from && !useGL && React.createElement(Header.Component, { editMode: _this.props.editMode, fontSize: scale40, key: "HEADER", model: _this.props.header }), _.map(parts, function (part, idx) {
                assert(part.body);
                return React.createElement("g", { key: "" + idx, style: { fontSize: scale40 + "px" } }, _.reduce(part.body.slice(page.from, page.to), function (memo, obj) {
                    if (obj.type === 130 /* NewLine */) {
                        memo.push([]);
                    }
                    memo[memo.length - 1].push(obj);
                    return memo;
                }, [[]]).splice(page.idx ? 1 : 0).map(function (s, lidx) {
                    return React.createElement(LineContainerComponent, {
                        parts: _this.props.parts,
                        isCurrent: _this.state.visualCursor.annotatedLine === lidx + pageLines[page.idx],
                        store: _this.props.store,
                        h: idx,
                        generate: function generate() {
                            var components = new Array(s.length * 2);
                            var h = 0;
                            var selIdx = -1;
                            var selProps = null;
                            for (var i = 0; i < s.length; ++i) {
                                if (s[i].selected && s[i].type !== 130 /* NewLine */ && s[i].type !== 110 /* EndMarker */) {
                                    if (selIdx === -1) {
                                        selIdx = h++;
                                        selProps = {
                                            key: "selectionrect-" + Math.random(),
                                            x: s[i].x,
                                            y: s[i].y - 1 / 2,
                                            height: 1,
                                            fill: "#75A1D0",
                                            opacity: 0.33
                                        };
                                    }
                                }
                                if (selIdx !== -1 && (!s[i].selected || i + 1 === s.length)) {
                                    selProps.width = Math.abs(s[i].x - selProps.x);
                                    components[selIdx] = React.createElement(Rect.Component, selProps);
                                    selIdx = -1;
                                }
                                if (s[i].visible) {
                                    components[h++] = s[i].render(scale40);
                                }
                            }
                            components.length = h;
                            return components;
                            return null;
                        },
                        idx: lidx + pageLines[page.idx],
                        key: lidx
                    });
                }));
            }), (pidx === _this.state.visualCursor.annotatedPage) && _this.state.visualCursor && _this.state.visualCursor.annotatedObj && React.createElement("g", { style: { fontSize: scale40 + "px" } }, React.createElement(Line.Component, { x1: _this.state.visualCursor.annotatedObj.x - 8, x2: _this.state.visualCursor.annotatedObj.x - 8, y1: _this.state.visualCursor.annotatedObj.y - ctx.staveSpacing * (ctx._parts.length - 1) * _this.state.visualCursor.annotatedStave + (false ? ctx.staveSpacing * (ctx._parts.length - 1) / 2 : 0) - vcHeight, y2: _this.state.visualCursor.annotatedObj.y - ctx.staveSpacing * (ctx._parts.length - 1) * _this.state.visualCursor.annotatedStave + (false ? ctx.staveSpacing * (ctx._parts.length - 1) / 2 : 0) + vcHeight, stroke: "#008CFF", strokeWidth: 2 })));
        });
        var ret;
        var yPtr = { y: this.props.marginTop };
        if (!this.props.raw) {
            ret = React.createElement("div", { className: "workspace", onScroll: this.handleScroll, style: { top: "" + this.props.top } }, _.map(rawPages, function (rawPage, pidx) {
                var page = React.createElement("div", { className: "page", key: "page" + pidx, style: {
                    position: "absolute",
                    width: _this.props.width,
                    height: _this.props.height,
                    left: "50%",
                    marginLeft: -_this.props.width / 2,
                    top: yPtr.y,
                    marginBottom: _this.props.marginBottom
                } }, rawPage);
                yPtr.y += 40 + _this.props.height;
                return page;
            }));
        }
        else {
            ret = rawPages[0];
        }
        if (this.props.store) {
            this.props.store.dangerouslyMarkRenderDone();
        }
        if (profilerEnabled) {
            console.timeEnd("render");
        }
        return ret;
    };
    Renderer.prototype.componentDidMount = function () {
        if (isBrowser && this.props.dispatcher) {
            this._attachToBrowser();
        }
        if (this.props.store) {
            this.props.store.addListener(1 /* Annotate */, this.update);
        }
    };
    Renderer.prototype.componentWillUnmount = function () {
        if (isBrowser) {
            this._detachFromBrowser();
        }
        if (this.props.store) {
            this.props.store.removeListener(1 /* Annotate */, this.update);
        }
    };
    Renderer.prototype._getPointerData = function (mouse) {
        var dynY = mouse.y;
        var dynX = mouse.x;
        var dynLine = 3;
        var foundObj = null;
        var foundIdx;
        var ctxData;
        var ctx = this.getCtx();
        var info = this._getStaveInfoForY(mouse.y, mouse.page);
        if (info) {
            var ctx = this.getCtx();
            dynY = ctx.lines[info.musicLine].y + ctx.staveSpacing * (ctx._parts.length - 1) * info.visualIdx;
            dynLine = Math.round((dynY - mouse.y) / 5) / 2 + 3;
            var body = this.props.parts[info.partIdx].body;
            for (var j = ctx.pageStarts[mouse.page]; j < body.length && body[info.musicLine].type !== 120 /* NewPage */; ++j) {
                var item = body[j];
                ctxData = item.ctxData;
                if (Math.abs(item.y - dynY) < 0.04) {
                    if ((item.type === 160 /* KeySignature */ || item.type === 170 /* TimeSignature */ || item.type === 150 /* Clef */ || item.type === 600 /* Duration */) && Math.abs(dynX - item.x + item.spacing * 2) < 10.8 + item.spacing * 4 + (item.isNote ? (item.note.dots || 0) * 8 : 0)) {
                        dynX = item.x;
                        foundIdx = j;
                        foundObj = item;
                        break;
                    }
                    else if (dynX < item.x || (j === body.length - 1 && info.partIdx === this.props.parts.filter(function (s) { return !!s.body; }).length - 1)) {
                        if (dynX < item.x) {
                            j -= 1;
                        }
                        _pointerData = {
                            mouse: mouse,
                            line: dynLine,
                            idx: j,
                            partIdx: info.partIdx,
                            musicLine: info.musicLine,
                            ctxData: item.ctxData,
                            visualIdx: info.visualIdx,
                            obj: new PlaceholderModel({
                                priority: 1111 /* Unknown */,
                                item: item,
                                musicLine: info.musicLine,
                            }, true)
                        };
                        _pointerData.obj.idx = j;
                        return _pointerData;
                    }
                }
            }
        }
        _pointerData = {
            ctxData: ctxData,
            idx: foundIdx,
            line: dynLine,
            mouse: mouse,
            musicLine: info && info.musicLine,
            obj: foundObj,
            partIdx: info && info.partIdx,
            visualIdx: info ? info.visualIdx : null
        };
        return _pointerData;
    };
    Renderer.prototype._getStaveInfoForY = function (my, page) {
        var ctx = this.getCtx();
        var visualIdx = -1;
        for (var h = 0; h < this.props.parts.length; ++h) {
            var body = this.props.parts[h].body;
            if (!body) {
                continue;
            }
            ++visualIdx;
            for (var i = ctx.pageLines[page]; i < ctx.lines.length; ++i) {
                if (Math.abs(ctx.lines[i].y + visualIdx * ctx.staveSpacing * (ctx._parts.length - 1) - my) < 55) {
                    return {
                        musicLine: i,
                        partIdx: h,
                        visualIdx: visualIdx
                    };
                }
            }
        }
        return null;
    };
    Renderer.prototype._elementsInBBox = function (box, mouse) {
        var ret = [];
        var ctx = this.getCtx();
        for (var h = 0; h < this.props.parts.length; ++h) {
            var body = this.props.parts[h].body;
            if (!body) {
                continue;
            }
            var inRange = function (min, val, max) {
                return min < val && val < max;
            };
            for (var i = ctx.pageStarts[mouse.page]; i < body.length && body[i].type !== 120 /* NewPage */; ++i) {
                var item = body[i];
                if (inRange(box.top - 1, item.y, box.bottom + 1) && inRange(box.left, item.x, box.right)) {
                    ret.push(item);
                }
            }
        }
        return ret;
    };
    Renderer.prototype.getInitialState = function () {
        return {
            mouse: { x: 0, y: 0 },
            visualCursor: this.props.store && this.props.store.visualCursor || this.props.cursor || { annotatedPage: 0 }
        };
    };
    Renderer.prototype.getPositionForMouse = function (event) {
        var target;
        if (useGL) {
            var ctx = this.getCtx();
            var scale40 = ctx.calcFontSize();
            var print = C.getPrint(ctx._layout.header);
            var widthMM = print.pageLayout.pageWidth;
            target = event.target;
            var rect = target.getBoundingClientRect();
            return {
                x: (event.clientX - rect.left) / target.clientWidth,
                y: (event.clientY - rect.top) / target.clientWidth,
                page: 0,
                selectionInfo: null
            };
        }
        var locatable = event.target;
        target = event.target;
        var svg_elt = (locatable.farthestViewportElement || target);
        var svg_pt = svg_elt.createSVGPoint();
        svg_pt.x = event.clientX;
        svg_pt.y = event.clientY;
        var pt = svg_pt.matrixTransform(svg_elt.getScreenCTM().inverse());
        return {
            x: pt.x - 6,
            y: pt.y,
            page: parseInt(svg_elt.getAttribute("data-page"), 10),
            selectionInfo: target.getAttribute("data-selection-info")
        };
    };
    Renderer.prototype.handleMouseClick = function (event) {
        var mouse = this.getPositionForMouse(event);
        var data = this._getPointerData(mouse);
        if (data.ctxData) {
            this.props.dispatcher.PUT("/webapp/visualCursor", {
                bar: data.ctxData.bar,
                beat: data.ctxData.beat,
                endMarker: data.ctxData.endMarker
            });
        }
        this.forceUpdate();
    };
    Renderer.prototype.handleMouseMove = function (event) {
        this.handleMouseMoveThrottled(this.getPositionForMouse(event));
    };
    Renderer.prototype.handleMouseLeave = function () {
        this.setState({
            mouse: null
        });
    };
    Renderer.prototype.getCtx = function () {
        return this.props.context ? this.props.context : (this.props.store && this.props.store.finalCtx);
    };
    Renderer.prototype._attachToBrowser = function () {
        document.addEventListener("keydown", this._handleKeyDown);
        this._oldTitle = document.title;
        document.title = this.props.header.movementTitle;
    };
    Renderer.prototype._detachFromBrowser = function () {
        document.removeEventListener("keydown", this._handleKeyDown);
        if (global.DISQUS) {
            global.DISQUS.reset();
        }
        document.title = this._oldTitle;
    };
    Renderer.prototype._handleKeyDown = function (event) {
        var keyCode = event.keyCode || event.charCode || 0;
        switch (keyCode) {
            case 32:
                event.preventDefault();
                this.props.dispatcher.PUT("/webapp/visualCursor/togglePlay", null);
                break;
            case 8:
            case 37:
                event.preventDefault();
                this.props.dispatcher.PUT("/webapp/visualCursor/step", { step: -1 });
                break;
            case 39:
                event.preventDefault();
                this.props.dispatcher.PUT("/webapp/visualCursor/step", { step: 1 });
                break;
        }
    };
    Renderer.prototype.update = function () {
        this.setState({
            visualCursor: this.props.store && this.props.store.visualCursor
        });
    };
    Renderer.prototype.getDefaultProps = function () {
        return {
            marginTop: 20
        };
    };
    return Renderer;
})(TypedReact.Component);
var Renderer;
(function (Renderer) {
    "use strict";
    Renderer.Component = TypedReact.createClass(Renderer);
})(Renderer || (Renderer = {}));
var LineContainer = (function (_super) {
    __extends(LineContainer, _super);
    function LineContainer() {
        var _this = this;
        _super.apply(this, arguments);
        this.updateIfNeeded = _.throttle(function () {
            if (_this.isMounted()) {
                _this.forceUpdate();
            }
        }, 20, { leading: false });
        this.dirty = false;
        this.shouldClear = false;
    }
    LineContainer.prototype.render = function () {
        if (this.shouldClear) {
            assert(this.dirty);
            this.shouldClear = false;
            return React.createElement("g", null);
        }
        if (profilerEnabled) {
            console.log("Rendering line", this.props.idx);
        }
        return React.createElement("g", null, this.props.generate());
    };
    LineContainer.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var songDirty = this.props.store && this.props.store.dirty || nextProps.parts !== this.props.parts;
        var lineDirty = this.props.store && this.props.store.getLineDirty(nextProps.idx, nextProps.h);
        if (lineDirty) {
            if (profilerEnabled) {
                console.log("Line dirty", this.props.idx);
            }
            if (this.props.store) {
                this.props.store.dangerouslyMarkRendererLineClean({
                    description: null,
                    response: null,
                    query: null,
                    postData: nextProps.h + "_" + nextProps.idx
                });
            }
        }
        if (songDirty || lineDirty || this.dirty) {
            if (this.props.isCurrent || this.props.parts !== nextProps.parts) {
                this.dirty = false;
                return true;
            }
            else if (!this.onScreen) {
                if (!this.dirty) {
                    this.dirty = true;
                    this.shouldClear = true;
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                this.dirty = false;
                _.delay(this.updateIfNeeded, 6);
            }
        }
        return false;
    };
    LineContainer.prototype.onScreen = function () {
        var domNode = this.getDOMNode();
        var bBox = domNode.getBBox();
        var svg = domNode.ownerSVGElement;
        var point = svg.createSVGPoint();
        var matrix = svg.getScreenCTM();
        point.x = bBox.x;
        point.y = bBox.y;
        var topLeft = point.matrixTransform(matrix);
        point.y += bBox.height;
        var bottomLeft = point.matrixTransform(matrix);
        return bottomLeft.y >= 0 && topLeft.y <= window.innerHeight;
    };
    return LineContainer;
})(TypedReact.Component);
;
var LineContainerComponent = TypedReact.createClass(LineContainer);
var _pointerData = {
    partIdx: null,
    obj: null,
    musicLine: null,
    idx: null,
    visualIdx: null
};
module.exports = Renderer;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","../stores/placeholder":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/placeholder.js","../views/_header":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_header.js","../views/_line":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_line.js","../views/_rect":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_rect.js","./molasses":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/renderer/molasses.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/Object.assign.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/satie.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var C = require("./stores/contracts");
var Dispatcher = require("./stores/dispatcher");
var Renderer = require("./renderer/renderer");
var SongEditor = require("./stores/songEditor");
exports.MusicXML = require("musicxml-interfaces");
var Satie = (function (_super) {
    __extends(Satie, _super);
    function Satie() {
        _super.apply(this, arguments);
    }
    Satie.prototype.render = function () {
        var body;
        if (!this.state.context) {
            body = React.createElement("div", null, "Loading...");
        }
        else {
            body = React.createElement(Renderer.Component, {
                context: this.state.context,
                dispatcher: this.state.dispatcher,
                parts: this.state.songEditor.parts,
                header: this.state.songEditor.header,
                editMode: false,
                width: this.props.width,
                height: this.props.width,
                top: 0,
                store: this.state.songEditor
            });
        }
        return React.createElement("div", {
            style: {
                width: this.props.width,
                height: this.props.height,
                overflow: "scroll",
                border: "1px solid #eee",
                position: "relative"
            }
        }, body);
    };
    Satie.prototype.getInitialState = function () {
        var dispatcher = new Dispatcher;
        var songEditor = new SongEditor(dispatcher);
        songEditor.addListener(1 /* Annotate */, this._updateFromStore);
        return {
            dispatcher: dispatcher,
            songEditor: songEditor
        };
    };
    Satie.prototype.componentWillMount = function () {
        if (!cssInjected && typeof window !== "undefined") {
            injectCSS();
        }
    };
    Satie.prototype.componentDidMount = function () {
        this.state.dispatcher.PUT("/webapp/song/mxmlJSON", this.props.musicXML);
    };
    Satie.prototype.componentWillUnmount = function () {
        this.state.songEditor.removeListener(1 /* Annotate */, this._updateFromStore);
        this.state.songEditor.destructor();
    };
    Satie.prototype._updateFromStore = function () {
        this.setState({
            context: this.state.songEditor.finalCtx
        });
    };
    return Satie;
})(TypedReact.Component);
var cssInjected = false;
function injectCSS() {
    cssInjected = true;
    var style = document.createElement("style");
    style.appendChild(document.createTextNode(""));
    document.head.appendChild(style);
    style.innerHTML = "@font-face {" + "font-family: 'bravura';" + "src: url('/res/bravura.woff') format('woff');" + "font-weight: normal;" + "font-style: normal;" + "}" + ".mn_ {" + "-moz-user-select: none;" + "-ms-user-select: none;" + "-webkit-touch-callout: none;" + "-webkit-user-select: none;" + "cursor: default;" + "font-family: 'bravura';" + "user-select: none;" + "pointer-events: none;" + "text-rendering: optimizeSpeed;" + "}" + ".bn_ {" + "font-family: 'Alegreya';" + "font-style: italic;" + "text-anchor: end;" + "stroke: #7a7a7a;" + "}";
}
exports.MusicXMLView = TypedReact.createClass(Satie);

},{"./renderer/renderer":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/renderer/renderer.js","./stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./stores/dispatcher":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/dispatcher.js","./stores/songEditor":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/songEditor.js","musicxml-interfaces":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/musicxml-interfaces/typescript/dist/musicXML_DOM.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/annotator.js":[function(require,module,exports){
var _ = require("lodash");
var assert = require("assert");
var C = require("./contracts");
var Context = (function () {
    function Context(parts, layout, editor, assertionPolicy) {
        this.startOfBeamBeat = NaN;
        this.accidentalsByStave = [];
        this.barlineX = [];
        this.line = 0;
        this.loc = {
            bar: 1,
            beat: 0
        };
        this.pageLines = [0];
        this.pageStarts = [0];
        this.smallest = 10000;
        this.minBottomPaddings = [];
        this.minTopPaddings = [];
        this.disableRecordings = true;
        this._recordings = null;
        this.nullEntry = false;
        this.lines = [];
        this._parts = parts;
        this._layout = layout;
        this._assertionPolicy = assertionPolicy;
        this.songEditor = editor;
        if (layout) {
            if (layout.snapshot) {
                _cpysnapshot(this, layout.snapshot);
            }
            else {
                this.lines = [this.captureLine()];
            }
        }
    }
    Context.prototype.annotate = function (from, cursor, disableRecording, dispatcher) {
        assert(!Context._ANNOTATING, "annotate() may not be called recursively.");
        Context._ANNOTATING = true;
        var error = null;
        var result;
        assert(from.bar !== 0);
        assert(this._parts, "Staves must be set!");
        try {
            result = this._annotateImpl(from, cursor, disableRecording);
        }
        catch (err) {
            error = err;
        }
        Context._ANNOTATING = false;
        if (error) {
            this.abort();
        }
        return result;
    };
    Context.prototype.abort = function () {
        assert(false, "Could not render");
    };
    Context.prototype.captureLine = function () {
        return {
            accidentalsByStave: C.JSONx.clone(this.accidentalsByStave),
            bar: this.loc.bar,
            barKeys: this.barKeys,
            barlineX: this.barlineX,
            beat: this.loc.beat,
            attributes: this.attributes,
            line: this.line,
            pageLines: this.pageLines,
            pageStarts: this.pageStarts,
            partIdx: this.currStaveIdx,
            x: this.x,
            y: this.y
        };
    };
    Context.prototype.captureSnapshot = function () {
        return {
            fontSize: this.fontSize,
            maxX: this.maxX,
            maxY: this.maxY,
            prevLine: this.lines[this.line - 1],
            partialLine: this.lines[this.line],
            attributes: this.attributes
        };
    };
    Object.defineProperty(Context.prototype, "curr", {
        get: function () {
            return this.body[this.idx];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "staveSpacing", {
        get: function () {
            var print = C.getPrint(this._layout.header);
            var staffLayout = print.staffLayouts[this.currStaveIdx];
            var staffSpacing = staffLayout ? staffLayout.staffDistance : null;
            switch (true) {
                case !isNaN(staffSpacing):
                    return staffSpacing;
                case !isNaN(print.staffSpacing):
                    return print.staffSpacing;
                default:
                    return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "page", {
        get: function () {
            for (var i = 0; i < this.pageStarts.length; ++i) {
                if (this.pageStarts[i] < this.line) {
                    return i;
                }
            }
            return this.pageStarts.length;
        },
        enumerable: true,
        configurable: true
    });
    Context.prototype.next = function (condition, skip, allowModifiers) {
        var i;
        skip = (skip === undefined || skip === null) ? 1 : skip;
        i = skip;
        while (this.body[this.idx + i] && ((this.body[this.idx + i].isModifier && !allowModifiers) || (condition && !condition(this.body[this.idx + i])))) {
            ++i;
        }
        return this.body[this.idx + i];
    };
    Context.prototype.nextIdx = function (cond, skip, allowModifiers) {
        var i;
        skip = (skip === undefined || skip === null) ? 1 : skip;
        i = skip;
        while (this.body[this.idx + i] && ((this.body[this.idx + i].isModifier && !allowModifiers) || (cond && !cond(this.body[this.idx + i], this.idx + i)))) {
            ++i;
        }
        return this.idx + i;
    };
    Context.prototype.intersects = function (type, idx) {
        if (idx === void 0) { idx = this.idx; }
        var intersects = [];
        for (var i = 0; i < this._parts.length; ++i) {
            var body = this._parts[i].body;
            if (!body) {
                continue;
            }
            for (var j = idx - 1; j >= 0; --j) {
                if (body[j].type === type) {
                    intersects.push(body[j]);
                }
                if (body[j].priority === 600 /* Duration */) {
                    break;
                }
            }
            if (body[idx].type === type) {
                intersects.push(body[idx]);
            }
            for (var j = idx + 1; j < body.length; ++j) {
                if (body[j].type === type) {
                    intersects.push(body[j]);
                }
                if (body[j].priority === 600 /* Duration */) {
                    break;
                }
            }
        }
        return intersects;
    };
    Context.prototype.beamFollows = function (idx) {
        if (idx === null || idx === undefined) {
            idx = this.idx;
        }
        var inBeam = this.body[idx + 1].priority === 450 /* BeamGroup */;
        if (inBeam) {
            var beamed = [];
            for (var i = 0; i < this._parts.length; ++i) {
                if (this._parts[i].body && this._parts[i].body[idx + 1].type === 450 /* BeamGroup */) {
                    var newBeam = this._parts[i].body[idx + 1].beam;
                    beamed = beamed.concat(newBeam);
                }
            }
            return beamed;
        }
        else {
            return null;
        }
    };
    Context.prototype.removeFollowingBeam = function (idx, past) {
        if (idx === null || idx === undefined) {
            idx = this.idx;
        }
        assert(past || idx >= this.idx, "Set past to true if you are " + "removing an already-processed beam (this is inefficient)");
        var beam = this.beamFollows(idx);
        assert(beam, "There must be a beam to remove");
        beam.forEach(function (p) {
            p.inBeam = false;
        });
        return (past ? this.erasePast : this.eraseFuture).call(this, idx + 1);
    };
    Context.prototype.prev = function (condition, offset) {
        if (!condition) {
            return this.body[this.idx - 1];
        }
        else {
            for (var i = this.idx - (isNaN(offset) ? 1 : offset); i >= 0; --i) {
                if (condition(this.body[i])) {
                    return this.body[i];
                }
            }
            return null;
        }
    };
    Context.prototype.eraseCurrent = function (splicePolicy) {
        if (splicePolicy === void 0) { splicePolicy = 3 /* Masked */; }
        this.splice(this.idx, 1, null, splicePolicy);
        return 20 /* RetryCurrent */;
    };
    Context.prototype.eraseFuture = function (idx) {
        assert(idx > this.idx, "Invalid use of eraseFuture");
        this.splice(idx, 1, null);
        return 10 /* Success */;
    };
    Context.prototype.erasePast = function (idx) {
        assert(idx <= this.idx, "Invalid use of erasePast");
        this.splice(idx, 1);
        return 90 /* RetryFromEntry */;
    };
    Context.prototype.insertFuture = function (obj, index) {
        index = (index === null || index === undefined) ? (this.idx + 1) : index;
        assert(index > this.idx, "Otherwise, use 'insertPast'");
        this.splice(index, 0, [obj], obj.isNote ? 3 /* Masked */ : 2 /* Additive */);
        recordMetreData(this._parts);
        return 10 /* Success */;
    };
    Context.prototype.insertPast = function (obj, index, merge) {
        index = (index === null || index === undefined) ? this.idx : index;
        assert(index <= this.idx, "Otherwise, use 'insertFuture'");
        var exitCode = this.idx === index ? 20 /* RetryCurrent */ : 90 /* RetryFromEntry */;
        this.splice(index, 0, [obj], 2 /* Additive */);
        return exitCode;
    };
    Context.prototype.insertPastVertical = function (objs, index) {
        index = (index === null || index === undefined) ? this.idx : index;
        assert(index <= this.idx, "Otherwise, use 'insertFuture'");
        var exitCode = this.idx === index ? 20 /* RetryCurrent */ : 90 /* RetryFromEntry */;
        var visibleIdx = -1;
        for (var i = 0; i < this._parts.length; ++i) {
            var part = this._parts[i];
            if (part.body) {
                ++visibleIdx;
                part.body.splice(index, 0, objs[visibleIdx]);
            }
        }
        return exitCode;
    };
    Context.prototype.splice = function (start, count, replaceWith, splicePolicy) {
        if (splicePolicy === void 0) { splicePolicy = 1 /* MatchedOnly */; }
        var PlaceholderModel = require("./placeholder");
        assert(!isNaN(start));
        assert(!isNaN(count));
        if (splicePolicy === 2 /* Additive */) {
            assert(!count, "You cannot remove anything in Additive mode");
        }
        replaceWith = replaceWith || [];
        this._assertAligned();
        if (splicePolicy === 3 /* Masked */) {
            var end = start + count - replaceWith.length;
            for (var i = end - 1; i >= start; --i) {
                var vertical = this.findVertical(function (m) { return !m.placeholder; }, i);
                if (vertical.length > 1 || vertical.length === 1 && vertical[0] !== this.body[i]) {
                    replaceWith = [new PlaceholderModel({
                        priority: vertical[0].priority
                    }, vertical[0].annotated)].concat(replaceWith);
                }
            }
        }
        if (this.body[start]) {
            var ctxStartData = this.body[start].ctxData;
            var startPriority = this.body[start].priority;
        }
        else {
            assert(this._assertionPolicy === 1 /* NoAssertions */);
        }
        for (var i = 0; i < this._parts.length; ++i) {
            var part = this._parts[i];
            if (part.body) {
                if (this.body === part.body) {
                    if (replaceWith) {
                        Array.prototype.splice.apply(part.body, [start, count].concat(replaceWith));
                    }
                    else {
                        part.body.splice(start, count);
                    }
                }
                else {
                    var placeholders = [];
                    var vidx = start;
                    var fidx = start + count;
                    var ffidx = start + replaceWith.length;
                    var offset = 0;
                    for (var j = 0; j < replaceWith.length; ++j) {
                        if (splicePolicy !== 5 /* Subtractive */ && vidx + j < Math.max(ffidx, fidx) && part.body[vidx + j] && part.body[vidx + j].priority === replaceWith[j].priority) {
                            if (vidx + j >= fidx) {
                                placeholders.push(new PlaceholderModel({
                                    priority: replaceWith[j].priority
                                }, replaceWith[j].annotated));
                            }
                            else {
                                placeholders.push(part.body[vidx + j]);
                                if (splicePolicy === 4 /* ShortenOtherParts */) {
                                    var retained = placeholders[placeholders.length - 1];
                                    var fromMainPart = replaceWith[j];
                                    if (retained.calcBeats(this) > fromMainPart.calcBeats(this)) {
                                        assert(retained.isNote, "Only notes have durations");
                                        assert(replaceWith[j].isNote, "The retained and replaced notes should have the same priority");
                                        retained.note.count = fromMainPart.note.count;
                                        retained.note.dots = fromMainPart.note.dots;
                                        retained.note.tuplet = fromMainPart.note.tuplet;
                                    }
                                }
                            }
                        }
                        else {
                            placeholders.push(new PlaceholderModel({
                                priority: replaceWith[j].priority
                            }, replaceWith[j].annotated));
                        }
                    }
                    if (replaceWith && replaceWith.length && count === 0 && ctxStartData) {
                        while (startPriority > 300 /* Barline */ && replaceWith[0].priority > 300 /* Barline */ && part.body[start + offset] && part.body[start + offset].ctxData && part.body[start + offset].priority > 300 /* Barline */ && new C.Location(part.body[start + offset].ctxData).lt(ctxStartData)) {
                            ++offset;
                        }
                    }
                    Array.prototype.splice.apply(part.body, [start + offset, count].concat(placeholders));
                }
            }
        }
        this._assertAligned();
        if (splicePolicy === 3 /* Masked */) {
            var clot = start - 1;
            while (this.body[clot + 1] && this.body[clot + 1].priority > 300 /* Barline */) {
                ++clot;
            }
            if (clot >= start) {
                while (this.body[start - 1] && this.body[start - 1].priority > 300 /* Barline */) {
                    --start;
                }
            }
            this._realign(start, clot);
            this._assertAligned();
        }
    };
    Context.prototype.removeAdjacentBeams = function (note) {
        var obj = this.curr;
        if (obj.inBeam) {
            var i = this.idx;
            while (i >= 0 && this.body[i].type !== 450 /* BeamGroup */) {
                --i;
            }
            var tuplet = this.body[i].tuplet;
            if (tuplet && note) {
                note.tuplet = C.JSONx.clone(tuplet);
            }
            this.removeFollowingBeam(i - 1, true);
            --this.idx;
            return 60 /* RetryLine */;
        }
        else if (this.beamFollows()) {
            this.removeFollowingBeam();
            return 20 /* RetryCurrent */;
        }
        return 10 /* Success */;
    };
    Context.prototype.removeRemainingBeamsInBar = function () {
        for (var i = this.idx + 1; this.body[i].priority !== 110 /* EndMarker */; ++i) {
            if (this.body[i].priority === 450 /* BeamGroup */) {
                this.removeFollowingBeam(i - 1);
                --i;
            }
        }
        return 10 /* Success */;
    };
    Context.insertPlaceholders = function (parts) {
        var PlaceholderModel = require("./placeholder");
        function length() {
            var l = 0;
            for (var i = 0; i < parts.length; ++i) {
                if (parts[i].body) {
                    l = Math.max(parts[i].body.length, l);
                }
            }
            return l;
        }
        for (var i = 0; i < length(); ++i) {
            var bestPri = 1111 /* Unknown */;
            for (var j = 0; j < parts.length; ++j) {
                if (parts[j].body && parts[j].body[i]) {
                    bestPri = Math.min(parts[j].body[i].priority, bestPri);
                }
            }
            for (var j = 0; j < parts.length; ++j) {
                if (parts[j].body && (!parts[j].body[i] || parts[j].body[i].priority !== bestPri)) {
                    parts[j].body.splice(i, 0, new PlaceholderModel({ priority: bestPri }, true));
                }
            }
        }
    };
    Context.prototype._realign = function (start, end) {
        var PlaceholderModel = require("./placeholder");
        var bodies = this._parts.filter(function (s) { return !!s.body; }).map(function (s) { return s.body; });
        var cBeats = bodies.map(function (b) { return 0; });
        var placeholders = bodies.map(function (b) { return []; });
        var reals = bodies.map(function (b) { return []; });
        var aligned = bodies.map(function (b) { return []; });
        for (var i = start; i <= end; ++i) {
            for (var j = 0; j < bodies.length; ++j) {
                if (this._assertionPolicy !== 0 /* Strict */ && !bodies[j][i]) {
                    break;
                }
                var valid = bodies[j][i].priority > 300 /* Barline */;
                if (this._assertionPolicy === 0 /* Strict */) {
                    assert(valid, "Realign only takes durations and modifiers.");
                }
                if (bodies[j][i].placeholder) {
                    placeholders[j].push(bodies[j][i]);
                }
                else {
                    reals[j].push(bodies[j][i]);
                }
            }
        }
        while (_.any(reals, function (r) { return r.length; })) {
            var thisBeat = _.min(reals.map(function (r, j) { return r.length ? cBeats[j] : 100000; }));
            var thisPriority = _.min(reals.map(function (r, j) { return r.length && cBeats[j] === thisBeat ? r[0].priority : 100000; }));
            for (var j = 0; j < bodies.length; ++j) {
                if (reals[j].length && (cBeats[j] === thisBeat) && reals[j][0].priority === thisPriority) {
                    if (reals[j][0].isNote) {
                        cBeats[j] += reals[j][0].calcBeats(this);
                    }
                    aligned[j] = aligned[j].concat(reals[j].splice(0, 1));
                }
                else {
                    if (!placeholders[j][0] || placeholders[j][0].priority !== thisPriority) {
                        console.warn("Sketchily adding a new placeholder to fix alignment (be worried)");
                        aligned[j] = aligned[j].concat(new PlaceholderModel({ priority: thisPriority }, true));
                    }
                    else {
                        aligned[j] = aligned[j].concat(placeholders[j].splice(0, 1));
                    }
                }
            }
        }
        var firstSize = aligned[0].length;
        var j = 0;
        for (var k = 0; k < this._parts.length; ++k) {
            if (!this._parts[k].body) {
                continue;
            }
            if (this._assertionPolicy !== 1 /* NoAssertions */) {
                assert.equal(firstSize, aligned[j].length);
            }
            Array.prototype.splice.apply(this._parts[k].body, [start, end + 1 - start].concat(aligned[j]));
            ++j;
        }
        recordMetreData(this._parts);
    };
    Context.prototype.findVertical = function (where, idx) {
        if (isNaN(idx)) {
            idx = this.idx;
        }
        return _.chain(this._parts).filter(function (s) { return !!s.body; }).map(function (s) { return s.body[idx]; }).filter(function (s) { return s && (!where || !!where(s)); }).value();
    };
    Context.prototype.midiOutHint = function (out) {
        this.songEditor.midiOutHint(out);
    };
    Object.defineProperty(Context.prototype, "nextActualType", {
        get: function () {
            var i = this.idx + 1;
            while (i < this.body.length && this.body[i].type === 999 /* Placeholder */) {
                ++i;
            }
            return this.body[i] ? this.body[i].type : null;
        },
        enumerable: true,
        configurable: true
    });
    Context.prototype._barAfter = function (index) {
        for (var i = index; i < this.body.length; ++i) {
            if (this.body[i].type === 300 /* Barline */) {
                return this.body[i];
            }
        }
    };
    Object.defineProperty(Context.prototype, "ts", {
        get: function () {
            return this.attributes.time ? {
                beats: this.attributes.time.beats[0],
                beatType: this.attributes.time.beatTypes[0],
                commonRepresentation: this.attributes.time.symbol !== 5 /* Normal */
            } : null;
        },
        set: function (ts) {
            this.attributes.time = this.attributes.time || {};
            this.attributes.time.beats = [ts.beats];
            this.attributes.time.beatTypes = [ts.beatType];
            switch (true) {
                case ts.commonRepresentation && ts.beats === 4 && ts.beatType === 4:
                    this.attributes.time.symbol = 0 /* Common */;
                    break;
                case ts.commonRepresentation && ts.beats === 2 && ts.beatType === 2:
                    this.attributes.time.symbol = 1 /* Cut */;
                    break;
                default:
                    console.warn("Unknown common TS");
                case !ts.commonRepresentation:
                    this.attributes.time.symbol = 5 /* Normal */;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Context.prototype.markEntireSongDirty = function () {
        this.nullEntry = true;
    };
    Object.defineProperty(Context.prototype, "beat", {
        get: function () {
            return this.loc.beat;
        },
        set: function (b) {
            this.loc.beat = b;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "bar", {
        get: function () {
            return this.loc.bar;
        },
        set: function (b) {
            this.loc.bar = b;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "endMarker", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Context.prototype.record = function (model) {
        this._recordings[model.key] = model;
    };
    Context.prototype.toJSON = function () {
        var serializable = {};
        for (var key in this) {
            if (this.hasOwnProperty(key) && key !== "songEditor") {
                serializable[key] = this[key];
            }
        }
        return serializable;
    };
    Context.prototype._annotateImpl = function (from, cursor, disableRecordings) {
        from = from || { bar: 1, beat: 0 };
        this.disableRecordings = disableRecordings;
        if (!this.disableRecordings) {
            this._recordings = {};
        }
        var status;
        var ops = 0;
        var initialLength = _.max(this._parts, function (s) { return s.body ? s.body.length : 0; }).body.length || 1;
        var verbose = false;
        var stopIn = NaN;
        for (var it = new PrivIterator(this, from, this._parts, cursor, this._assertionPolicy); !it.atEnd; it.next(status)) {
            if (++ops / initialLength >= 500 && isNaN(stopIn)) {
                verbose = true;
                stopIn = 20;
            }
            if (--stopIn === 0) {
                throw "because of timeout";
            }
            status = it.annotate(verbose);
        }
        if (it.eofJustificationDirty) {
            this._semiJustify(this._parts);
        }
        return {
            cursor: null,
            operations: 5,
            resetY: false,
            skip: status === 5 /* ExitEarly */,
            success: true
        };
    };
    Context.prototype._semiJustify = function (parts) {
        var NewlineModel = require("./newline");
        var bodies = [];
        for (var i = 0; i < parts.length; ++i) {
            if (parts[i].body) {
                bodies.push(parts[i].body);
                this.idx = this.body.length - 1;
                this.body = parts[i].body;
                NewlineModel.semiJustify(this);
                this.idx = -1;
            }
        }
        var offset = 0;
        for (var i = 0; i < bodies[0].length; ++i) {
            var minX = Infinity;
            for (var j = 0; j < bodies.length; ++j) {
                minX = Math.min(minX, bodies[j][i].x);
            }
            for (var j = 0; j < bodies.length; ++j) {
                if (bodies[j][i].isRest && bodies[j][i].note.isWholebar) {
                }
                else {
                    bodies[j][i].x = minX - offset;
                }
            }
        }
    };
    Context.prototype.calcFontSize = function () {
        var scaling = this._layout.header.defaults.scaling;
        return scaling.millimeters / scaling.tenths * 40;
    };
    Context.prototype.calcLineSpacing = function (print) {
        if (print === void 0) { print = C.getPrint(this._layout.header); }
        return Math.max(print.systemLayout.systemDistance, this.minBottomPaddings[this.currStaveIdx]);
    };
    Context.prototype._assertAligned = function () {
        if (this._assertionPolicy === 0 /* Strict */) {
            var expectedLength = 0;
            var bodies = [];
            for (var i = 0; i < this._parts.length; ++i) {
                if (this._parts[i].body) {
                    expectedLength = expectedLength || this._parts[i].body.length;
                    assert.equal(expectedLength, this._parts[i].body.length, "All parts must be the same length");
                    bodies.push(this._parts[i].body);
                }
            }
            for (var i = 0; i < bodies[0].length; ++i) {
                for (var j = 1; j < bodies.length; ++j) {
                    assert.equal(bodies[j][i].priority, bodies[0][i].priority, "All parts must be aligned");
                }
            }
        }
    };
    Object.defineProperty(Context.prototype, "attributes", {
        get: function () {
            return this._attributes || {};
        },
        set: function (a) {
            var AttributesModel = require("./attributes");
            if (!!a && !(a instanceof AttributesModel)) {
                a = new AttributesModel(a, true);
            }
            this._attributes = a;
        },
        enumerable: true,
        configurable: true
    });
    Context._ANNOTATING = false;
    return Context;
})();
exports.Context = Context;
(function (SplicePolicy) {
    SplicePolicy[SplicePolicy["MatchedOnly"] = 1] = "MatchedOnly";
    SplicePolicy[SplicePolicy["Additive"] = 2] = "Additive";
    SplicePolicy[SplicePolicy["Masked"] = 3] = "Masked";
    SplicePolicy[SplicePolicy["ShortenOtherParts"] = 4] = "ShortenOtherParts";
    SplicePolicy[SplicePolicy["Subtractive"] = 5] = "Subtractive";
})(exports.SplicePolicy || (exports.SplicePolicy = {}));
var SplicePolicy = exports.SplicePolicy;
(function (AssertionPolicy) {
    AssertionPolicy[AssertionPolicy["Strict"] = 0] = "Strict";
    AssertionPolicy[AssertionPolicy["NoAssertions"] = 1] = "NoAssertions";
})(exports.AssertionPolicy || (exports.AssertionPolicy = {}));
var AssertionPolicy = exports.AssertionPolicy;
function recordMetreData(parts) {
    "use strict";
    try {
        _recordMetreData(parts);
    }
    catch (err) {
        var AttributesModel = require("./attributes");
        switch (true) {
            case (err instanceof AttributesModel.AttributesUndefinedException):
                return;
            default:
                throw err;
        }
    }
}
exports.recordMetreData = recordMetreData;
function _recordMetreData(parts) {
    "use strict";
    var i;
    var j;
    for (i = 0; i < parts.length; ++i) {
        var body = parts[i].body;
        if (!body) {
            continue;
        }
        var mctx1 = new C.MetreContext;
        for (j = 0; j < body.length; ++j) {
            body[j].recordMetreDataImpl(mctx1);
        }
    }
}
var PrivIterator = (function () {
    function PrivIterator(parent, from, parts, cursor, assertionPolicy) {
        this.eofJustificationDirty = true;
        this._canExitAtNewline = false;
        this._components = [];
        this._parent = parent;
        this._parts = parts;
        this._cursor = cursor;
        this._from = from;
        this._parent.loc = C.JSONx.clone(from);
        this._assertionPolicy = assertionPolicy;
        var visibleSidx = -1;
        recordMetreData(this._parts);
        for (var i = 0; i < parts.length; ++i) {
            if (parts[i].body) {
                ++visibleSidx;
                this._components.push(new PrivIteratorComponent(from, parts[i], i, visibleSidx, cursor, this._assertionPolicy));
            }
        }
        this._assertOffsetsOK();
    }
    PrivIterator.prototype.annotate = function (verbose) {
        this._assertOffsetsOK();
        var maxStatus = 5 /* ExitEarly */;
        var origSnapshot = C.JSONx.clone(this._parent.captureLine());
        var componentSnapshots = [];
        var filtered = false;
        for (var i = 0; i < this._components.length; ++i) {
            this._ensureCurrPrioritiesMatch();
            if (this.atEnd) {
                this._assertOffsetsOK();
                return 20 /* RetryCurrent */;
            }
            this._parent.y = origSnapshot.y;
            for (var j = 0; j < i; ++j) {
                this._parent.y += this._parent.staveSpacing;
            }
            this._assertOffsetsOK();
            var componentStatus = this._components[i].annotate(this._parent, this._canExitAtNewline);
            this._assertOffsetsOK();
            if (verbose) {
                console.log(i, this._components[i]._idx, C.Type[this._components[i].curr.type], C.Type[this._components[i].curr.priority], C.IterationStatus[componentStatus]);
            }
            switch (componentStatus) {
                case 70 /* LineCreated */:
                    this._clearCursor();
                    this._markLineDirty();
                    break;
                case 80 /* RetryPreviousLine */:
                    this._markLineDirty();
                    break;
                case 30 /* RetryCurrentNoOptimizations */:
                    this._canExitAtNewline = false;
                    break;
            }
            maxStatus = Math.max(maxStatus, componentStatus);
            var isPlaceholder = this._components[i].curr && this._components[i].curr.type === 999 /* Placeholder */;
            if (!isPlaceholder) {
                componentSnapshots.push(this._parent.captureLine());
            }
            else {
                filtered = true;
            }
            _cpyline(this._parent, origSnapshot, 1 /* MiddleOfLine */);
        }
        this._assertOffsetsOK();
        if (maxStatus <= 10 /* Success */) {
            this._rectify(this._parent, origSnapshot, componentSnapshots, filtered);
        }
        this._assertOffsetsOK();
        return maxStatus;
    };
    PrivIterator.prototype._rectify = function (ctx, origSnapshot, componentSnapshots, filtered) {
        ctx.bar = componentSnapshots[0].bar;
        ctx.barKeys = componentSnapshots[0].barKeys || [];
        ctx.barlineX = componentSnapshots[0].barlineX;
        ctx.line = componentSnapshots[0].line;
        ctx.pageLines = componentSnapshots[0].pageLines;
        ctx.pageStarts = componentSnapshots[0].pageStarts;
        if (!filtered) {
            ctx.y = componentSnapshots[0].y;
        }
        ctx.beat = _.min(componentSnapshots, "beat").beat;
        for (var i = 0; i < this._components.length; ++i) {
            if (this._components[i].nextLocation.bar === ctx.bar && this._components[i].nextLocation.beat < ctx.beat) {
                ctx.beat = this._components[i].nextLocation.beat;
            }
        }
        var mergePolicy = ctx.curr.xPolicy;
        assert(!!mergePolicy, "mergePolicy can't be .Invalid, 0, of otherwise falsy");
        ctx.x = componentSnapshots[0].x;
        for (var i = 1; i < componentSnapshots.length; ++i) {
            var fn = mergePolicy === 1 /* Max */ ? Math.max : Math.min;
            ctx.x = fn(ctx.x, componentSnapshots[i].x);
        }
        var minX = Infinity;
        var otherContexts = ctx.findVertical(function (c) { return true; });
        for (var i = 0; i < otherContexts.length; ++i) {
            minX = Math.min(otherContexts[i].x, minX);
        }
        for (var i = 0; i < otherContexts.length; ++i) {
            otherContexts[i].x = minX;
        }
        ctx.accidentalsByStave = componentSnapshots[0].accidentalsByStave;
        for (var i = 1; i < componentSnapshots.length; ++i) {
            var partIdx = componentSnapshots[i].partIdx;
            ctx.accidentalsByStave[partIdx] = componentSnapshots[i].accidentalsByStave[partIdx];
        }
    };
    PrivIterator.prototype.next = function (status) {
        switch (status) {
            case 10 /* Success */:
                this._increment();
                break;
            case 5 /* ExitEarly */:
                for (var i = 0; i < this._components.length; ++i) {
                    this._components[i].markDone();
                }
                this.eofJustificationDirty = false;
                break;
            case 90 /* RetryFromEntry */:
                this._reset();
                break;
            case 70 /* LineCreated */:
                this._rollbackLine(this._parent.line);
                this._rewindTwoNewlines();
                this._increment();
                break;
            case 80 /* RetryPreviousLine */:
                this._rollbackLine(this._parent.line - 1);
                this._rewindTwoNewlines();
                this._increment();
                break;
            case 60 /* RetryLine */:
                this._rollbackLine(this._parent.line);
                this._rewind(130 /* NewLine */);
                this._increment();
                break;
            case 50 /* LineRemoved */:
                this._rollbackLine(this._parent.line - 1);
                break;
            case 40 /* RetryBeam */:
                this._parent.loc.beat = this._parent.startOfBeamBeat;
                this._rewind(450 /* BeamGroup */);
                this._parent.x = this._componentWithPriority(450 /* BeamGroup */).x;
                break;
            case 20 /* RetryCurrent */:
            case 30 /* RetryCurrentNoOptimizations */:
                this._ensureCurrPrioritiesMatch();
                break;
            default:
                assert(false, "Invalid status");
        }
        this._assertOffsetsOK();
        if (status !== 10 /* Success */) {
            recordMetreData(this._parts);
        }
        this._assertOffsetsOK();
    };
    Object.defineProperty(PrivIterator.prototype, "atEnd", {
        get: function () {
            for (var i = 0; i < this._components.length; ++i) {
                if (this._components[i].atEnd) {
                    return true;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    PrivIterator.prototype._assertOffsetsOK = function () {
        if (this._assertionPolicy === 1 /* NoAssertions */) {
            return;
        }
        var n = this._components[0]._idx;
        var len = this._components[0].len;
        for (var k = 0; k < this._components.length; ++k) {
            assert(n === this._components[k]._idx, "Invalid offset");
            if (len !== this._components[k].len) {
                assert(false, "Mismatched body lengths");
            }
        }
    };
    PrivIterator.prototype._componentWithPriority = function (type) {
        for (var i = 0; i < this._components.length; ++i) {
            if (this._components[i].curr.priority === type) {
                return this._components[i].curr;
            }
        }
        assert(false, "Not reached");
        return null;
    };
    PrivIterator.prototype._rewindTwoNewlines = function () {
        for (var i = 0; i < this._components.length; ++i) {
            this._components[i].rewind(130 /* NewLine */);
            this._components[i].rewind();
            this._components[i].rewind(130 /* NewLine */);
        }
    };
    PrivIterator.prototype._rewind = function (type) {
        var nextLoc = new C.Location(MIN_LOCATION);
        var i;
        for (i = 0; i < this._components.length; ++i) {
            this._components[i].rewind();
            var loc = this._components[i].lastOf(type);
            if (nextLoc.le(loc)) {
                nextLoc = loc;
            }
        }
        for (i = 0; i < this._components.length; ++i) {
            this._components[i].rewindSeek(nextLoc, type);
        }
    };
    PrivIterator.prototype._rollbackLine = function (i) {
        this._parent.line = i;
        _cpyline(this._parent, this._parent.lines[this._parent.line], 0 /* StartOfLine */);
    };
    PrivIterator.prototype._increment = function () {
        var nextLoc = new C.Location(MAX_LOCATION);
        var nextPriority = C.MAX_NUM;
        this._assertOffsetsOK();
        for (var i = 0; i < this._components.length; ++i) {
            var pri = this._components[i].nextPriority;
            var loc = this._components[i].nextLocation;
            if (pri !== C.MAX_NUM && nextLoc.ge(loc) && nextPriority > pri) {
                nextLoc = new C.Location(loc);
                nextPriority = pri;
            }
        }
        this._assertOffsetsOK();
        for (var j = 0; j < this._components.length; ++j) {
            this._components[j].trySeek(nextPriority);
        }
        this._assertOffsetsOK();
    };
    PrivIterator.prototype._ensureCurrPrioritiesMatch = function () {
        var pri = 1111 /* Unknown */;
        _.every(this._components, function (c) {
            if (c.curr) {
                pri = Math.min(pri, c.curr.type);
            }
        });
        if (pri !== 1111 /* Unknown */) {
            _.each(this._components, function (c) {
                if (!c.curr) {
                    c.ensurePriorityIs(pri);
                }
            });
        }
    };
    PrivIterator.prototype._clearCursor = function () {
        if (this._cursor && this._parent.line === this._cursor.annotatedLine) {
            this._cursor.annotatedLine = null;
            this._cursor.annotatedObj = null;
            this._cursor.annotatedPage = null;
            this._cursor.annotatedStave = null;
        }
    };
    PrivIterator.prototype._markLineDirty = function () {
        if (this._parent.songEditor) {
            this._parent.songEditor.dangerouslyMarkRendererLineDirty(this._parent.line);
        }
        this._canExitAtNewline = false;
    };
    PrivIterator.prototype._reset = function () {
        for (var i = 0; i < this._components.length; ++i) {
            if (this._parent.nullEntry) {
                this._from = {
                    bar: 1,
                    beat: 0
                };
            }
            this._components[i].reset(this._from);
        }
    };
    return PrivIterator;
})();
var PrivIteratorComponent = (function () {
    function PrivIteratorComponent(from, part, idx, visibleIdx, cursor, assertionPolicy) {
        this._beat = null;
        this._nextBeat = null;
        this._part = part;
        this._body = part.body;
        this._sidx = idx;
        this._visibleSidx = visibleIdx;
        this._cursor = cursor;
        this._assertionPolicy = assertionPolicy;
        this.reset(from);
        assert(this._location.eq(from));
    }
    PrivIteratorComponent.prototype.annotate = function (ctx, canExitAtNewline) {
        if (this._beat !== null) {
            ctx.__globalBeat__ = ctx.beat;
            ctx.beat = this._beat;
        }
        ctx.body = this._body;
        ctx.currStave = this._part;
        ctx.currStaveIdx = this._sidx;
        ctx.idx = this._idx;
        var shouldUpdateVC = this._shouldUpdateVC(ctx);
        if (this._aheadOfSchedule(ctx)) {
            return this._addPadding(ctx);
        }
        var status = this._body[this._idx].annotate(ctx);
        this._nextBeat = ctx.beat;
        var isClean = status === 10 /* Success */ && (!this._cursor || this._cursor.annotatedObj);
        var isNewline = this.curr && this.curr.type === 130 /* NewLine */;
        if (status === 10 /* Success */ && shouldUpdateVC) {
            this._cursor.annotatedObj = this.curr;
            this._cursor.annotatedStave = this._visibleSidx;
            this._cursor.annotatedLine = ctx.line;
            this._cursor.annotatedPage = ctx.pageStarts.length - 1;
        }
        if (canExitAtNewline && isNewline && isClean) {
            return 5 /* ExitEarly */;
        }
        return status;
    };
    PrivIteratorComponent.prototype.reset = function (from) {
        this._idx = -1;
        do {
            this._location = new C.Location(this._body[++this._idx].ctxData);
        } while ((from.bar !== 1 || from.beat !== 0) && (this._location.lt(from) || this._location.eq(from) && (!this.curr || this.curr.priority <= 140 /* Begin */ || this.curr.priority === 300 /* Barline */)));
        this._updateSubctx();
    };
    PrivIteratorComponent.prototype.rewind = function (priority) {
        if (!priority) {
            --this._idx;
        }
        else {
            while (this._idx >= 0 && this._body[this._idx].priority !== priority) {
                --this._idx;
            }
        }
        this._updateSubctx();
    };
    PrivIteratorComponent.prototype.rewindSeek = function (loc, priority) {
        while (this._idx >= 0 && (!this._body[this._idx].ctxData || loc.lt(this._body[this._idx].ctxData) || loc.eq(this._body[this._idx].ctxData) && this._body[this._idx].priority > priority)) {
            --this._idx;
        }
        this._updateSubctx();
    };
    PrivIteratorComponent.prototype._updateSubctx = function () {
        if (this.curr && this.curr.ctxData) {
            this._beat = this.curr.ctxData.beat;
            this._nextBeat = null;
        }
        else {
            this._beat = null;
            this._nextBeat = null;
        }
    };
    PrivIteratorComponent.prototype.trySeek = function (priority) {
        this.ensurePriorityIs(priority);
        ++this._idx;
        assert(this.nextPriority === C.MAX_NUM || this.curr);
    };
    PrivIteratorComponent.prototype.ensurePriorityIs = function (priority) {
        if (this._assertionPolicy === 0 /* Strict */) {
            assert.equal(this.nextPriority, priority, "Priorities must be aligned");
        }
        else if (this.nextPriority !== priority) {
            var nextIsPlaceholder = this._body[this._idx + 1] && this._body[this._idx + 1].placeholder;
            var PlaceholderModel = require("./placeholder");
            this._body.splice(this._idx + 1, nextIsPlaceholder ? 1 : 0, new PlaceholderModel({ priority: priority }, true));
        }
    };
    PrivIteratorComponent.prototype.lastOf = function (priority) {
        var i = this._idx;
        while (i > 0 && this._body[i].priority !== priority) {
            --i;
        }
        return new C.Location(this._body[i].ctxData);
    };
    PrivIteratorComponent.prototype.markDone = function () {
        this._idx = this._body.length;
    };
    Object.defineProperty(PrivIteratorComponent.prototype, "nextLocation", {
        get: function () {
            var next = this._next;
            return next ? next.ctxData : MAX_LOCATION;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PrivIteratorComponent.prototype, "nextPriority", {
        get: function () {
            var next = this._next;
            return next ? next.priority : C.MAX_NUM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PrivIteratorComponent.prototype, "atEnd", {
        get: function () {
            return !this._body[this._idx];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PrivIteratorComponent.prototype, "curr", {
        get: function () {
            return this._body[this._idx];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PrivIteratorComponent.prototype, "len", {
        get: function () {
            return this._body.length;
        },
        enumerable: true,
        configurable: true
    });
    PrivIteratorComponent.prototype._aheadOfSchedule = function (ctx) {
        if (ctx.curr.type !== 600 /* Duration */) {
            return false;
        }
        var space = !!(ctx.findVertical(function (c) { return c.type !== 999 /* Placeholder */ && c !== ctx.curr; }).length);
        return space && ctx.curr.type !== 999 /* Placeholder */ && ctx.beat > ctx.__globalBeat__;
    };
    PrivIteratorComponent.prototype._addPadding = function (ctx) {
        var PlaceholderModel = require("./placeholder");
        ctx.splice(ctx.idx, 0, [new PlaceholderModel({
            priority: ctx.curr.priority
        }, true)], 2 /* Additive */);
        ctx.beat = ctx.__globalBeat__;
        return 30 /* RetryCurrentNoOptimizations */;
    };
    Object.defineProperty(PrivIteratorComponent.prototype, "_next", {
        get: function () {
            this._beat = this._nextBeat;
            return this._body[this._idx + 1];
        },
        enumerable: true,
        configurable: true
    });
    PrivIteratorComponent.prototype._shouldUpdateVC = function (ctx) {
        if (!this._cursor) {
            return false;
        }
        if (!ctx.curr) {
            return false;
        }
        var target = this._cursor;
        var barMatches = ctx.bar === target.bar;
        var beatMatches = (!target.beat && !target.annotatedObj) || ctx.beat === target.beat;
        var typeMatches = (ctx.curr.isNote && !target.endMarker) || (target.endMarker && ctx.curr.type === 110 /* EndMarker */);
        return barMatches && beatMatches && typeMatches && !target.annotatedObj;
    };
    return PrivIteratorComponent;
})();
function _cpyline(ctx, line, mode) {
    "use strict";
    if (!!line.accidentalsByStave) {
        ctx.accidentalsByStave = line.accidentalsByStave;
    }
    if (line.bar !== null) {
        ctx.bar = line.bar;
    }
    if (!!line.barlineX !== null) {
        ctx.barlineX = line.barlineX;
    }
    if (!!line.barKeys !== null) {
        ctx.barKeys = line.barKeys;
    }
    if (line.beat !== null) {
        ctx.beat = line.beat;
    }
    if (line.line !== null) {
        ctx.line = line.line;
    }
    if (!!line.pageLines) {
        ctx.pageLines = line.pageLines;
    }
    if (!!line.pageStarts) {
        ctx.pageStarts = line.pageStarts;
    }
    if (line.x !== null) {
        ctx.x = line.x;
    }
    if (line.y !== null) {
        ctx.y = line.y;
    }
}
var NewlineMode;
(function (NewlineMode) {
    NewlineMode[NewlineMode["StartOfLine"] = 0] = "StartOfLine";
    NewlineMode[NewlineMode["MiddleOfLine"] = 1] = "MiddleOfLine";
})(NewlineMode || (NewlineMode = {}));
function _cpysnapshot(ctx, layout) {
    "use strict";
    _.each(layout, function (v, attrib) {
        if (layout[attrib] === null) {
            return;
        }
        switch (attrib) {
            case "lines":
                ctx.lines = layout.lines;
                ctx.line = layout.lines.length - 1;
                _cpyline(ctx, ctx.lines[ctx.line], 0 /* StartOfLine */);
                break;
            case "fontSize":
                ctx.fontSize = layout.fontSize;
                break;
            case "maxX":
                ctx.maxX = layout.maxX;
                break;
            case "maxY":
                ctx.maxY = layout.maxY;
                break;
            case "attributes":
                ctx.attributes = layout.attributes;
                break;
            case "partialLine":
                break;
            case "prevLine":
                break;
            default:
                assert(false, "Not reached");
        }
    });
}
var MAX_LOCATION = new C.Location({
    bar: C.MAX_NUM,
    beat: C.MAX_NUM
});
var MIN_LOCATION = new C.Location({
    bar: -1,
    beat: -1
});

},{"./attributes":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/attributes.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./newline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newline.js","./placeholder":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/placeholder.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/attributes.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var C = require("./contracts");
var ClefModel = require("./clef");
var KeySignatureModel = require("./keySignature");
var TimeSignatureModel = require("./timeSignature");
var AttributesModel = (function (_super) {
    __extends(AttributesModel, _super);
    function AttributesModel() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(AttributesModel.prototype, "type", {
        get: function () {
            return 145 /* Attributes */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttributesModel.prototype, "visible", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttributesModel.prototype, "xPolicy", {
        get: function () {
            return 2 /* Min */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttributesModel.prototype, "fields", {
        get: function () {
            return [
                "divisions",
                "partSymbol",
                "measureStyle",
                "staffDetails",
                "transpose",
                "staves",
                "instruments",
                "directive",
                "footnote",
                "level"
            ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttributesModel.prototype, "mxmlJsonOnlyFields", {
        get: function () {
            return [
                "clef",
                "time",
                "keySignature"
            ];
        },
        enumerable: true,
        configurable: true
    });
    AttributesModel.prototype.recordMetreDataImpl = function (mctx) {
        mctx.attributes = this;
        this.divisions = this.divisions || 60;
        this.ctxData = new C.MetreContext(mctx);
    };
    AttributesModel.prototype.annotateImpl = function (ctx) {
        ctx.attributes = this;
        if (!this.time && ctx.lines[ctx.line - 1] && ctx.lines[ctx.line - 1].attributes) {
            this.time = ctx.lines[ctx.line - 1].attributes.time;
        }
        if (this.time && !(this.time instanceof Model)) {
            ctx.insertFuture(new TimeSignatureModel(this.time, false));
            ctx.next().ctxData = this.ctxData;
            this.time = null;
        }
        if (this.keySignature && !(this.keySignature instanceof Model)) {
            ctx.insertFuture(new KeySignatureModel(this.keySignature, false));
            ctx.next().ctxData = this.ctxData;
            this.keySignature = null;
        }
        if (this.clef && !(this.clef instanceof Model)) {
            ctx.insertFuture(new ClefModel(this.clef, false));
            ctx.next().ctxData = this.ctxData;
            this.clef = null;
        }
        this.updateAttached(ctx);
        return 10 /* Success */;
    };
    AttributesModel.prototype.toMXMLObject = function () {
        return C.JSONx.clone({
            clef: this.clef,
            directive: this.directive,
            divisions: this.divisions,
            footnote: this.footnote,
            instruments: this.instruments,
            keySignature: this.keySignature,
            level: this.level,
            measureStyle: this.measureStyle,
            partSymbol: this.partSymbol,
            staffDetails: this.staffDetails,
            staves: this.staves,
            time: this.time,
            transpose: this.transpose
        });
    };
    AttributesModel.prototype.updateAttached = function (ctx) {
        this.clef = ifAttribute(ctx.next(function (c) { return c.type === 150 /* Clef */ || c.type > 199 /* END_OF_ATTRIBUTES */; }));
        this.time = ifAttribute(ctx.next(function (c) { return c.type === 170 /* TimeSignature */ || c.type > 199 /* END_OF_ATTRIBUTES */; })) || this.time;
        this.keySignature = ifAttribute(ctx.next(function (c) { return c.type === 160 /* KeySignature */ || c.type > 199 /* END_OF_ATTRIBUTES */; }));
        function ifAttribute(m) {
            return m && m.priority < 199 /* END_OF_ATTRIBUTES */ ? m : null;
        }
    };
    return AttributesModel;
})(Model);
var AttributesModel;
(function (AttributesModel) {
    "use strict";
    var AttributesUndefinedException = (function () {
        function AttributesUndefinedException() {
        }
        return AttributesUndefinedException;
    })();
    AttributesModel.AttributesUndefinedException = AttributesUndefinedException;
})(AttributesModel || (AttributesModel = {}));
module.exports = AttributesModel;

},{"./clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/barline.js":[function(require,module,exports){
(function (process){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var C = require("./contracts");
var EndMarkerModel = require("./endMarker");
var Metre = require("./metre");
var TimeSignatureModel = require("./timeSignature");
var BarlineModel = (function (_super) {
    __extends(BarlineModel, _super);
    function BarlineModel(spec, annotated) {
        _super.call(this, spec, annotated);
        this.location = 1 /* Right */;
    }
    Object.defineProperty(BarlineModel.prototype, "type", {
        get: function () {
            return 300 /* Barline */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BarlineModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BarlineModel.prototype, "fields", {
        get: function () {
            return [
                "segno",
                "coda",
                "location",
                "codaAttrib",
                "wavyLine",
                "fermatas",
                "segnoAttrib",
                "divisions",
                "barStyle",
                "ending",
                "repeat",
                "footnote",
                "level"
            ];
        },
        enumerable: true,
        configurable: true
    });
    BarlineModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
        this.ctxData.beat = 0;
    };
    BarlineModel.prototype.annotateImpl = function (ctx) {
        if (!ctx.prev().endMarker) {
            return ctx.insertPast(new EndMarkerModel({ endMarker: true }, true));
        }
        if (!ctx.next()) {
            ctx.insertFuture(new EndMarkerModel({ endMarker: true }, true));
        }
        var i;
        var okay;
        if (!ctx.ts) {
            return TimeSignatureModel.createTS(ctx);
        }
        okay = false;
        for (i = ctx.idx - 1; i >= 0 && ctx.body[i].type !== 130 /* NewLine */; --i) {
            if (ctx.body[i].isNote) {
                okay = true;
                break;
            }
        }
        if (!okay) {
            if (i === -1) {
                var DurationModel = require("./duration");
                var fullRest = Metre.wholeNote(ctx).map(function (spec) { return _.extend({ isRest: true }, spec); }).map(function (spec) { return new DurationModel(spec, true); });
                _.each(fullRest, function (r) {
                    r.isRest = true;
                    ctx.insertPast(r);
                });
                return 20 /* RetryCurrent */;
            }
            else {
                ctx.splice(i, ctx.idx - i);
                ctx.markEntireSongDirty();
                ctx.songEditor.dangerouslyMarkRendererLineDirty(ctx.line - 1);
                ctx.songEditor.dangerouslyMarkRendererLineDirty(ctx.line);
                ctx.idx = i;
                return 50 /* LineRemoved */;
            }
        }
        okay = false;
        for (i = ctx.idx - 1; i >= 0 && ctx.body[i].type !== 300 /* Barline */; --i) {
            if (ctx.body[i].isNote || ctx.body[i].type === 130 /* NewLine */) {
                okay = true;
                break;
            }
        }
        if (!okay) {
            return ctx.eraseCurrent();
        }
        if (this.barStyle.data === 5 /* LightHeavy */) {
            okay = false;
            for (i = ctx.idx - 1; i >= 0 && ctx.body[i].type !== 130 /* NewLine */; --i) {
                if (ctx.body[i].isNote) {
                    okay = true;
                    break;
                }
            }
            if (!okay) {
                var DurationModel = require("./duration");
                var whole = Metre.wholeNote(ctx).map(function (w) { return new DurationModel(w, true); });
                for (i = 0; i < whole.length; ++i) {
                    whole[i].chord = [{ step: "R", alter: null, octave: null }];
                    whole[i].tie = false;
                }
                Array.prototype.splice.apply(ctx.body, [ctx.idx + 1, 0].concat(whole));
                return 60 /* RetryLine */;
            }
        }
        var next = ctx.next(function (c) { return c.type !== 50 /* Print */; });
        this.newlineNext = (ctx.body.length > ctx.idx + 1) && (next.type === 130 /* NewLine */ || next.type === 120 /* NewPage */);
        var intersectingNotes = _.filter(ctx.intersects(600 /* Duration */), function (l) { return l.isNote; });
        var nextNonPlaceholderIdx = ctx.nextIdx(function (c) { return !c.placeholder; });
        var nextNonPlaceholder = ctx.body[nextNonPlaceholderIdx];
        if (nextNonPlaceholder.isNote) {
            this.annotatedAccidentalSpacing = 10 * (_.any(intersectingNotes, function (n) { return n.containsAccidentalAfterBarline(ctx); }) ? 1 : 0);
        }
        else {
            this.annotatedAccidentalSpacing = 0;
        }
        if (this.barStyle.data === 5 /* LightHeavy */ && ctx.next(null, 2)) {
            this.barStyle.data = 0 /* Regular */;
            return 20 /* RetryCurrent */;
        }
        ctx.barKeys.push(this.key);
        ctx.x += (this.newlineNext ? 0 : 12) + this.annotatedAccidentalSpacing;
        ctx.beat = 0;
        ++ctx.bar;
        ctx.accidentalsByStave[ctx.currStaveIdx] = C.NoteUtil.getAccidentals(ctx.attributes.keySignature);
        this.height = 20;
        this.yOffset = 0;
        this.barStyle.color = this.temporary ? "#A5A5A5" : (this.selected ? "#75A1D0" : "#2A2A2A");
        if (!ctx.disableRecordings) {
            ctx.record(this);
        }
        return 10 /* Success */;
    };
    BarlineModel.createBarline = function (ctx, type) {
        if (type === void 0) { type = 0 /* Regular */; }
        if (ctx.curr.type === 450 /* BeamGroup */) {
            ctx.eraseCurrent();
            for (var j = ctx.idx; j < ctx.body.length && ctx.body[j].inBeam; ++j) {
                ctx.body[j].inBeam = false;
                if (ctx.body[j] === ctx.curr) {
                    var newBarline = new BarlineModel({ barStyle: { data: type } }, true);
                    if (j === ctx.idx) {
                        ctx.insertPast(newBarline);
                    }
                    else {
                        ctx.insertFuture(newBarline, j);
                    }
                    ++j;
                }
            }
            return 60 /* RetryLine */;
        }
        BarlineModel._seperate(ctx, type);
        return 30 /* RetryCurrentNoOptimizations */;
    };
    BarlineModel._seperate = function (ctx, type) {
        var jdx = ctx.nextIdx(null, 2);
        var inTwo = ctx.body[jdx];
        if (inTwo && inTwo.type === 300 /* Barline */) {
            ctx.body[jdx] = new BarlineModel({ barStyle: { data: inTwo.barStyle.data } }, true);
            inTwo.barStyle.data = type;
            ctx.insertPast(inTwo, null, true);
            return;
        }
        ctx.insertPast(new BarlineModel({ barStyle: { data: type } }, true), null, true);
    };
    return BarlineModel;
})(Model);
BarlineModel.prototype.barStyle = {
    color: "#000000",
    data: 0 /* Regular */
};
if ("production" !== process.env.NODE_ENV) {
    Object.freeze(BarlineModel.prototype.barStyle);
}
module.exports = BarlineModel;

}).call(this,require('_process'))
},{"./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","./endMarker":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/endMarker.js","./metre":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/metre.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js","_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/beamGroup.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var assert = require("assert");
var C = require("./contracts");
var Annotator = require("./annotator");
var ClefModel = require("./clef");
var KeySignatureModel = require("./keySignature");
var TimeSignatureModel = require("./timeSignature");
var BeamGroupModel = (function (_super) {
    __extends(BeamGroupModel, _super);
    function BeamGroupModel(spec, placeholder) {
        _super.call(this, spec, placeholder);
        if (spec.beam) {
            this.beam = spec.beam;
        }
    }
    Object.defineProperty(BeamGroupModel.prototype, "type", {
        get: function () {
            return 450 /* BeamGroup */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BeamGroupModel.prototype, "xPolicy", {
        get: function () {
            return 2 /* Min */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BeamGroupModel.prototype, "fields", {
        get: function () {
            return ["beamCount", "variableBeams"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BeamGroupModel.prototype, "beamCount", {
        get: function () {
            return this.beam ? this.beam.length : 0;
        },
        set: function (l) {
            if (!this.beam) {
                this.beam = [];
            }
            this.beam.length = l;
        },
        enumerable: true,
        configurable: true
    });
    BeamGroupModel.prototype.modelDidLoad = function (body, idx) {
        var beamCount = this.beamCount;
        var toMark = beamCount;
        var gotTuplet = false;
        for (var i = idx; toMark; ++i) {
            assert(body[i]);
            if (body[i].isNote) {
                this.tuplet = gotTuplet ? C.JSONx.clone(body[i].note.tuplet) : this.tuplet;
                gotTuplet = true;
                --toMark;
            }
        }
        this.beam = [];
        for (var i = idx; i < body.length && this.beam.length < beamCount; ++i) {
            if (body[i].isNote) {
                this.beam.push(body[i]);
            }
        }
    };
    BeamGroupModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    BeamGroupModel.prototype.annotateImpl = function (ctx) {
        var _this = this;
        if (!ctx.attributes.clef) {
            return ClefModel.createClef(ctx);
        }
        if (!ctx.attributes.keySignature) {
            return KeySignatureModel.createKeySignature(ctx);
        }
        if (!ctx.ts) {
            return TimeSignatureModel.createTS(ctx);
        }
        var beats = 0;
        for (var i = 0; i < this.beam.length; ++i) {
            beats += this.beam[i].calcBeats(ctx);
        }
        if (ctx.beat + beats > ctx.ts.beats) {
            _.each(this.beam, function (o) {
                o.inBeam = false;
            });
            ctx.eraseCurrent();
            return 20 /* RetryCurrent */;
        }
        if (this.beam.length < 2) {
            _.each(this.beam, function (o) {
                o.inBeam = false;
            });
            ctx.eraseCurrent();
            return 20 /* RetryCurrent */;
        }
        for (var i = 0; i < this.beam.length; ++i) {
            if (!this.beam[i].temporary && !this.beam[i].isRest && !this.beam[i].hasFlagOrBeam) {
                _.each(this.beam, function (o) {
                    o.inBeam = false;
                });
                ctx.eraseCurrent();
                return 20 /* RetryCurrent */;
            }
        }
        var mret = 90 /* RetryFromEntry */;
        var next = ctx.next(function (obj) { return obj.isNote; }).note;
        this.tuplet = next ? next.displayTuplet : null;
        ctx.startOfBeamBeat = ctx.beat;
        var b1 = this.beam[0].count;
        if (_.all(this.beam, function (b) { return b.count === b1; })) {
            this.beams = Math.round(Math.log(this.beam[0].count) / Math.log(2)) - 2;
        }
        else {
            this.beams = -1 /* Variable */;
            this.variableBeams = _.map(this.beam, toBeamCount);
            function toBeamCount(b) {
                return Math.round(Math.log(b.count) / Math.log(2)) - 2;
            }
        }
        if (!this.beam.every(function (b) {
            b.x = ctx.x;
            b.y = ctx.y;
            var cidx = _this.idx;
            while (ctx.body[cidx] !== b) {
                cidx = cidx + 1;
            }
            var oldIdx = ctx.idx;
            ctx.isBeam = true;
            ctx.idx = cidx;
            var ret = b.annotate(ctx);
            ctx.idx = oldIdx;
            ctx.isBeam = undefined;
            mret = ret;
            return (mret === 10 /* Success */);
        })) {
            return mret;
        }
        ctx.x = this.x;
        return 10 /* Success */;
    };
    BeamGroupModel.prototype.generate = function (options) {
        return _.map(this.beam, function (b, idx) { return b.render(options[idx]); });
    };
    BeamGroupModel.prototype.calcBeats = function (ctx, inheritedCount, force) {
        var sum = 0;
        for (var i = 0; i < this.beam.length; ++i) {
            sum += this.beam[i].calcBeats(ctx, inheritedCount, force);
        }
        return sum;
    };
    BeamGroupModel.createBeam = function (ctx, beam) {
        var replaceMode = ctx.body[ctx.idx - 1].placeholder && ctx.body[ctx.idx - 1].priority === 450 /* BeamGroup */;
        var model = new BeamGroupModel({ beam: beam }, true);
        var offset = replaceMode ? 1 : 0;
        var idx = ctx.idx - offset;
        var spliceMode = replaceMode ? 3 /* Masked */ : 1 /* MatchedOnly */;
        model.tuplet = model.beam[0].tuplet;
        ctx.splice(idx, offset, [model], spliceMode);
        return 90 /* RetryFromEntry */;
    };
    BeamGroupModel.decideDirection = function (firstLines, lastLines) {
        var firstAvgLine;
        var lastAvgLine;
        firstAvgLine = _.reduce(firstLines, function (m, s) { return m + s; }, 0) / firstLines.length;
        lastAvgLine = _.reduce(lastLines, function (m, s) { return m + s; }, 0) / lastLines.length;
        var avgLine = (firstAvgLine + lastAvgLine) / 2;
        return avgLine >= 3 ? -1 : 1;
    };
    return BeamGroupModel;
})(Model);
BeamGroupModel.prototype.tuplet = null;
module.exports = BeamGroupModel;

},{"./annotator":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/annotator.js","./clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/begin.js":[function(require,module,exports){
(function (global){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var C = require("./contracts");
var PrintModel = require("./print");
var BeginModel = (function (_super) {
    __extends(BeginModel, _super);
    function BeginModel() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(BeginModel.prototype, "type", {
        get: function () {
            return 140 /* Begin */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BeginModel.prototype, "xPolicy", {
        get: function () {
            return 2 /* Min */;
        },
        enumerable: true,
        configurable: true
    });
    BeginModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    BeginModel.prototype.annotateImpl = function (ctx) {
        if (!ctx.print) {
            return ctx.insertPast(new PrintModel({}, true));
        }
        if (ctx.idx !== 1) {
            return ctx.eraseCurrent();
        }
        var print = ctx.print;
        var systemMargins = print.systemLayout.systemMargins;
        var pageMargins = print.pageMarginsFor(ctx.page);
        var pageLayout = print.pageLayout;
        ctx.fontSize = ctx.calcFontSize();
        ctx.maxX = pageLayout.pageWidth - systemMargins.rightMargin - pageMargins.rightMargin;
        ctx.maxY = pageLayout.pageHeight - pageMargins.topMargin;
        ctx.x = systemMargins.leftMargin + pageMargins.leftMargin;
        ctx.y = pageMargins.topMargin + print.systemLayout.topSystemDistance;
        ctx.lines[ctx.line].y = ctx.y;
        ctx.lines[ctx.line].x = ctx.x;
        ctx.minBottomPaddings = _.times(ctx._parts.length, function () { return 0; });
        ctx.minTopPaddings = _.times(ctx._parts.length, function () { return 0; });
        this.x = ctx.x;
        this.y = ctx.y;
        this.width = ctx.maxX - ctx.x;
        ctx.x += 8;
        ctx.barKeys = [];
        this.part = ctx.currStave;
        if (typeof window === "undefined" || global.location.href.indexOf("/scales/") !== -1) {
            this.noMargin = true;
        }
        else {
            this.noMargin = false;
        }
        this.braceY = this.y;
        this.braceY2 = this.y + ctx.staveSpacing * (ctx._parts.length - 1);
        return 10 /* Success */;
    };
    BeginModel.createBegin = function (ctx) {
        return ctx.insertPast(new BeginModel({ source: true }, true));
    };
    return BeginModel;
})(Model);
module.exports = BeginModel;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./print":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/print.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var Annotator = require("./annotator");
var C = require("./contracts");
var ClefModel = (function (_super) {
    __extends(ClefModel, _super);
    function ClefModel(spec, annotated) {
        _super.call(this, spec, annotated);
        this.sign = this.sign.toUpperCase();
    }
    Object.defineProperty(ClefModel.prototype, "type", {
        get: function () {
            return 150 /* Clef */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClefModel.prototype, "visible", {
        get: function () {
            return this.isVisible !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClefModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClefModel.prototype, "fields", {
        get: function () {
            return [
                "isLocked",
                "clefOctaveChange",
                "sign",
                "number_",
                "size",
                "line",
                "afterBarline",
                "additional",
                "defaultX",
                "relativeY",
                "defaultY",
                "relativeX",
                "fontFamily",
                "fontWeight",
                "fontStyle",
                "fontSize",
                "color",
                "printObject"
            ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClefModel.prototype, "displayedClef", {
        get: function () {
            return this._displayedClef || this;
        },
        set: function (clef) {
            this._displayedClef = clef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClefModel.prototype, "retryStatus", {
        get: function () {
            return 60 /* RetryLine */;
        },
        enumerable: true,
        configurable: true
    });
    ClefModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    ClefModel.prototype.annotateImpl = function (ctx) {
        var AttributesModel = require("./attributes");
        if (!(ctx.attributes instanceof AttributesModel)) {
            return ctx.insertPast(new AttributesModel({}, true));
        }
        if (this._clefIsRedundant(ctx)) {
            ctx.eraseCurrent(3 /* Masked */);
            return 60 /* RetryLine */;
        }
        this.sign = this.sign.toUpperCase();
        if (isNaN(this.line)) {
            for (var i = 0; i < ClefModel.standardClefs.length; ++i) {
                if (ClefModel.standardClefs[i].sign === this.sign) {
                    this.line = ClefModel.standardClefs[i].line;
                }
            }
        }
        for (var i = ctx.idx + 1; ctx.body[i] && !ctx.body[i].isNote; ++i) {
            if (ctx.body[i].type === 150 /* Clef */) {
                return ctx.eraseCurrent(1 /* MatchedOnly */);
            }
        }
        this.isChange = ctx.attributes.clef !== this;
        if (this.isChange) {
            var barCandidate = ctx.prev(function (m) { return m.type === 300 /* Barline */ || m.isNote && !m.isRest; });
            if (barCandidate && barCandidate.type === 300 /* Barline */) {
                ctx.insertPastVertical(ctx.findVertical(), barCandidate.idx - 1);
                for (var i = 0; i < ctx._parts.length; ++i) {
                    ctx._parts[i].body.splice(ctx.idx, 1);
                }
                return 60 /* RetryLine */;
            }
        }
        else {
            if (ctx.ts && ctx.beat >= ctx.ts.beats) {
                var BarlineModel = require("./barline");
                return BarlineModel.createBarline(ctx, 0 /* Regular */);
            }
        }
        ctx.attributes.clef = this;
        var next = ctx.next();
        if (next.isNote) {
            var note = next;
            if (note.alter) {
                this._annotatedSpacing = 15;
            }
            else {
                this._annotatedSpacing = 25;
            }
        }
        else {
            this._annotatedSpacing = 12.5;
        }
        if (this.isChange) {
            ctx.x += 4.2 + this._annotatedSpacing;
        }
        else {
            ctx.x += 24 + this._annotatedSpacing;
        }
        this.color = this.displayedClef !== this ? "#A5A5A5" : (this.selected ? "#75A1D0" : "#000000");
        return 10 /* Success */;
    };
    ClefModel.prototype._clefIsRedundant = function (ctx) {
        switch (true) {
            case ctx.attributes.clef === this:
            case !ctx.attributes.clef:
                return false;
            case ClefModel.serializeClef(ctx.attributes.clef) === ClefModel.serializeClef(this):
                return true;
            default:
                console.warn("_clefIsRedundant: not reached");
        }
    };
    ClefModel.createClef = function (ctx) {
        var clef = ctx.prev(function (c) { return c.type === 150 /* Clef */; });
        return ctx.insertPast(new ClefModel(clef, true));
    };
    ClefModel.standardClefs = [
        {
            line: 2,
            sign: "G",
            additional: false,
            afterBarline: false,
            clefOctaveChange: null,
            color: "#000000",
            defaultX: -16,
            defaultY: 16,
            fontFamily: "",
            fontSize: "small",
            fontStyle: 0,
            fontWeight: 0,
            number_: 1,
            printObject: true,
            relativeX: 0,
            relativeY: 0,
            size: 1
        },
        {
            line: 4,
            sign: "F",
            additional: false,
            afterBarline: false,
            clefOctaveChange: null,
            color: "#000000",
            defaultX: -16,
            defaultY: 4,
            fontFamily: "",
            fontSize: "small",
            fontStyle: 0,
            fontWeight: 0,
            number_: 1,
            printObject: true,
            relativeX: 0,
            relativeY: 0,
            size: 1
        },
        {
            line: 3,
            sign: "C",
            additional: false,
            afterBarline: false,
            clefOctaveChange: null,
            color: "#000000",
            defaultX: -16,
            defaultY: 0,
            fontFamily: "",
            fontSize: "small",
            fontStyle: 0,
            fontWeight: 0,
            number_: 1,
            printObject: true,
            relativeX: 0,
            relativeY: 0,
            size: 1
        },
        {
            line: 4,
            sign: "C",
            additional: false,
            afterBarline: false,
            clefOctaveChange: null,
            color: "#000000",
            defaultX: -16,
            defaultY: 8,
            fontFamily: "",
            fontSize: "small",
            fontStyle: 0,
            fontWeight: 0,
            number_: 1,
            printObject: true,
            relativeX: 0,
            relativeY: 0,
            size: 1
        }
    ];
    return ClefModel;
})(Model.StateChangeModel);
var ClefModel;
(function (ClefModel) {
    "use strict";
    function serializeClef(c) {
        return JSON.stringify({
            additional: c.additional || false,
            size: c.sign,
            number_: c.number_,
            line: c.line
        });
    }
    ClefModel.serializeClef = serializeClef;
})(ClefModel || (ClefModel = {}));
module.exports = ClefModel;

},{"./annotator":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/annotator.js","./attributes":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/attributes.js","./barline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/barline.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js":[function(require,module,exports){
(function (global){
exports.MusicXML = require("musicxml-interfaces");
var _ = require("lodash");
var assign = require("react/lib/Object.assign");
exports.SMuFL = require("../util/SMuFL");
exports.renderUtil = require("../util/renderUtil");
exports.strHash = require("../util/hash");
;
(function (BeamCount) {
    BeamCount[BeamCount["Variable"] = -1] = "Variable";
    BeamCount[BeamCount["One"] = 1] = "One";
    BeamCount[BeamCount["Two"] = 2] = "Two";
    BeamCount[BeamCount["Three"] = 3] = "Three";
    BeamCount[BeamCount["Four"] = 4] = "Four";
    BeamCount[BeamCount["Five"] = 5] = "Five";
    BeamCount[BeamCount["Six"] = 6] = "Six";
    BeamCount[BeamCount["Seven"] = 7] = "Seven";
    BeamCount[BeamCount["Eight"] = 8] = "Eight";
    BeamCount[BeamCount["Nine"] = 9] = "Nine";
})(exports.BeamCount || (exports.BeamCount = {}));
var BeamCount = exports.BeamCount;
(function (Clef) {
    Clef[Clef["Treble"] = 0] = "Treble";
    Clef[Clef["Bass"] = 1] = "Bass";
    Clef[Clef["Alto"] = 2] = "Alto";
    Clef[Clef["Tenor"] = 3] = "Tenor";
    Clef[Clef["Piano"] = 4] = "Piano";
    Clef[Clef["Choral"] = 5] = "Choral";
    Clef[Clef["TrebleDrums"] = 6] = "TrebleDrums";
})(exports.Clef || (exports.Clef = {}));
var Clef = exports.Clef;
var DispatcherRedirect = (function () {
    function DispatcherRedirect(verb, newUrl) {
        this.newUrl = newUrl;
        this.verb = verb;
    }
    return DispatcherRedirect;
})();
exports.DispatcherRedirect = DispatcherRedirect;
;
var ScoreHeader = (function () {
    function ScoreHeader(spec) {
        this.credits = [];
        this.identification = {
            creators: [],
            encoding: null,
            miscellaneous: [],
            relations: [],
            rights: [],
            source: null
        };
        this.defaults = {
            appearance: {
                distances: {
                    hyphen: {
                        tenths: 120,
                        type: "hyphen"
                    },
                    beam: {
                        tenths: 10 * exports.SMuFL.distances.beam,
                        type: "beam"
                    }
                },
                lineWidths: {
                    staff: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.staffLineThickness,
                        "type": "staff"
                    },
                    wedge: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.hairpinThickness,
                        "type": "wedge"
                    },
                    ending: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.repeatEndingLineThickness,
                        "type": "ending"
                    },
                    heavyBarline: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.thickBarlineThickness,
                        "type": "heavy barline"
                    },
                    leger: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.legerLineThickness,
                        "type": "leger"
                    },
                    stem: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.stemThickness,
                        "type": "stem"
                    },
                    tupletBracket: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.tupletBracketThickness,
                        "type": "tuplet bracket"
                    },
                    beam: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.beamThickness,
                        "type": "beam"
                    },
                    lightBarline: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.thinBarlineThickness,
                        "type": "light barline"
                    },
                    enclosure: {
                        "tenths": 10 * exports.SMuFL.bravuraMetadata.engravingDefaults.textEnclosureThickness,
                        "type": "enclosure"
                    }
                },
                noteSizes: {
                    1: {
                        "type": 1,
                        "size": 60
                    },
                    0: {
                        "type": 0,
                        "size": 60
                    }
                },
                otherAppearances: []
            },
            lyricFonts: [],
            lyricLanguages: [],
            musicFont: {
                fontSize: "20.5",
                fontFamily: "Bravura, Maestro, engraved",
                fontStyle: 0 /* Normal */,
                fontWeight: 0 /* Normal */
            },
            pageLayout: {
                pageHeight: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.pageSizes[0].height),
                pageWidth: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.pageSizes[0].width),
                pageMargins: [
                    {
                        bottomMargin: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.defaultMargins.bottom),
                        leftMargin: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.defaultMargins.left),
                        rightMargin: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.defaultMargins.right),
                        topMargin: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.defaultMargins.top),
                        type: 2 /* Both */
                    }
                ]
            },
            scaling: {
                millimeters: exports.renderUtil.defaultStaveHeight,
                tenths: 40
            },
            staffLayouts: [],
            systemLayout: {
                systemDistance: 131,
                systemDividers: null,
                systemMargins: {
                    leftMargin: 0,
                    rightMargin: 0
                },
                topSystemDistance: 0
            },
            wordFont: {
                fontSize: "12",
                fontFamily: "Alegreya, Times New Roman, serif",
                fontStyle: 0 /* Normal */,
                fontWeight: 0 /* Normal */
            }
        };
        this.work = {
            opus: {},
            workNumber: "",
            workTitle: ""
        };
        this.movementTitle = "Untitled";
        this.movementNumber = "";
        this.partList = {
            scoreParts: [],
            partGroups: []
        };
        for (var key in spec) {
            if (spec.hasOwnProperty(key) && typeof key === "string" && !!spec[key]) {
                this[key] = spec[key];
            }
        }
    }
    Object.defineProperty(ScoreHeader.prototype, "composer", {
        get: function () {
            if (!(this.identification.creators || []).length) {
                return "";
            }
            var idComposer = this.identification.creators.filter(function (c) { return c.type === "composer"; }).map(function (c) { return c.creator; }).join(", ");
            if (idComposer) {
                return idComposer;
            }
            return this.credits.filter(function (c) { return !!~c.creditTypes.indexOf("composer"); }).map(function (m) { return m.creditWords.map(function (w) { return w.words; }).join(" "); }).join(", ");
        },
        set: function (composer) {
            this.identification.creators = this.identification.creators || [];
            if (!_.any(this.identification.creators, function (c) {
                var isComposer = c.type === "composer";
                c.creator = isComposer ? composer : c.creator;
                return isComposer;
            })) {
                this.identification.creators.push({
                    creator: composer,
                    type: "composer"
                });
            }
            this.credits = this.credits || [];
            if (!_.any(this.credits, function (c) {
                if (!c.creditWords.length) {
                    return false;
                }
                var isComposer = !!~c.creditTypes.indexOf("composer");
                c.creditWords[0].words = isComposer ? composer : c.creditWords[0].words;
                return isComposer;
            })) {
                this.credits.push({
                    creditImage: null,
                    creditTypes: ["composer"],
                    creditWords: [{
                        words: composer,
                        defaultX: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.defaultPageSize().width - exports.renderUtil.defaultMargins.right),
                        justify: 1 /* Right */,
                        defaultY: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, 2),
                        fontSize: "18px"
                    }],
                    page: 1
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScoreHeader.prototype, "title", {
        get: function () {
            return this.movementTitle;
        },
        set: function (title) {
            this.movementTitle = title;
            this.credits = this.credits || [];
            if (!_.any(this.credits, function (c) {
                if (!c.creditWords.length) {
                    return false;
                }
                var isComposer = !!~c.creditTypes.indexOf("title");
                c.creditWords[0].words = isComposer ? title : c.creditWords[0].words;
                return isComposer;
            })) {
                this.credits.push({
                    creditImage: null,
                    creditTypes: ["title"],
                    creditWords: [{
                        words: title,
                        defaultX: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.defaultPageSize().width / 2),
                        justify: 2 /* Center */,
                        defaultY: exports.renderUtil.mmToTenths(exports.renderUtil.defaultStaveHeight, exports.renderUtil.defaultMargins.top / 2),
                        fontSize: "24px"
                    }],
                    page: 1
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    return ScoreHeader;
})();
exports.ScoreHeader = ScoreHeader;
function generateUUID() {
    "use strict";
    return (Math.random().toString(16) + "000000000").substr(2, 8);
}
exports.generateUUID = generateUUID;
var Print = (function () {
    function Print(print) {
        assign(this, print);
    }
    Print.prototype.pageMarginsFor = function (page) {
        for (var i = 0; i < this.pageLayout.pageMargins.length; ++i) {
            var margins = this.pageLayout.pageMargins[i];
            if (margins.type === 2 /* Both */ || (margins.type === 0 /* Odd */) === !!(page % 2)) {
                return margins;
            }
        }
        console.warn("No valid page margins for current page...");
        return null;
    };
    return Print;
})();
exports.Print = Print;
function getPrint(header) {
    "use strict";
    return new Print({
        blankPage: "",
        measureLayout: null,
        measureNumbering: {
            relativeX: 0,
            relativeY: 0,
            fontSize: "small",
            color: "#000000",
            data: "system",
            defaultX: null,
            defaultY: null,
            fontFamily: "Alegreya, serif",
            fontStyle: 0 /* Normal */,
            fontWeight: 0 /* Normal */
        },
        newPage: false,
        newSystem: false,
        partAbbreviationDisplay: null,
        pageLayout: header.defaults.pageLayout,
        pageNumber: "",
        partNameDisplay: null,
        staffLayouts: header.defaults.staffLayouts,
        staffSpacing: null,
        systemLayout: header.defaults.systemLayout
    });
}
exports.getPrint = getPrint;
var InvalidDurationError = (function () {
    function InvalidDurationError() {
    }
    return InvalidDurationError;
})();
exports.InvalidDurationError = InvalidDurationError;
(function (IterationStatus) {
    IterationStatus[IterationStatus["ExitEarly"] = 5] = "ExitEarly";
    IterationStatus[IterationStatus["Success"] = 10] = "Success";
    IterationStatus[IterationStatus["RetryCurrent"] = 20] = "RetryCurrent";
    IterationStatus[IterationStatus["RetryCurrentNoOptimizations"] = 30] = "RetryCurrentNoOptimizations";
    IterationStatus[IterationStatus["RetryBeam"] = 40] = "RetryBeam";
    IterationStatus[IterationStatus["LineRemoved"] = 50] = "LineRemoved";
    IterationStatus[IterationStatus["RetryLine"] = 60] = "RetryLine";
    IterationStatus[IterationStatus["LineCreated"] = 70] = "LineCreated";
    IterationStatus[IterationStatus["RetryPreviousLine"] = 80] = "RetryPreviousLine";
    IterationStatus[IterationStatus["RetryFromEntry"] = 90] = "RetryFromEntry";
})(exports.IterationStatus || (exports.IterationStatus = {}));
var IterationStatus = exports.IterationStatus;
;
var Location = (function () {
    function Location(opts) {
        this.bar = opts.bar;
        this.beat = opts.beat;
        this.endMarker = opts.endMarker;
    }
    Location.prototype.eq = function (b) {
        return this.bar === b.bar && this.beat === b.beat;
    };
    Location.prototype.lt = function (b) {
        return this.bar < b.bar || this.bar === b.bar && this.beat < b.beat;
    };
    Location.prototype.le = function (b) {
        return this.bar < b.bar || this.bar === b.bar && this.beat <= b.beat;
    };
    Location.prototype.ge = function (b) {
        return this.bar > b.bar || this.bar === b.bar && this.beat >= b.beat;
    };
    Location.prototype.gt = function (b) {
        return this.bar > b.bar || this.bar === b.bar && this.beat > b.beat;
    };
    return Location;
})();
exports.Location = Location;
exports.log2 = Math.log(2);
exports.MAX_NUM = 1000000000;
;
exports.noteNames = ["C", "C\u266F", "D\u266D", "D", "D\u266F", "E\u266D", "E", "F", "F\u266F", "G\u266D", "G", "G\u266F", "A\u266D", "A", "A\u266F", "B\u266D", "B"];
var MetreContext = (function () {
    function MetreContext(other) {
        this.endMarker = false;
        this.ts = { beats: 4, beatType: 4, commonRepresentation: false };
        this.bar = 1;
        this.beat = 0;
        if (other) {
            this.ts = {
                beats: other.ts.beats,
                beatType: other.ts.beatType,
                commonRepresentation: other.ts.commonRepresentation
            };
            this.bar = other.bar;
            this.beat = other.beat;
            this.endMarker = other.endMarker || false;
        }
    }
    return MetreContext;
})();
exports.MetreContext = MetreContext;
(function (MidiEventType) {
    MidiEventType[MidiEventType["NoteOn"] = 0] = "NoteOn";
    MidiEventType[MidiEventType["NoteOff"] = 1] = "NoteOff";
})(exports.MidiEventType || (exports.MidiEventType = {}));
var MidiEventType = exports.MidiEventType;
;
;
;
;
(function (PreviewMode) {
    PreviewMode[PreviewMode["ExcludePreviews"] = 0] = "ExcludePreviews";
    PreviewMode[PreviewMode["IncludePreviews"] = 1] = "IncludePreviews";
})(exports.PreviewMode || (exports.PreviewMode = {}));
var PreviewMode = exports.PreviewMode;
;
(function (RectifyXPolicy) {
    RectifyXPolicy[RectifyXPolicy["Invalid"] = 0] = "Invalid";
    RectifyXPolicy[RectifyXPolicy["Max"] = 1] = "Max";
    RectifyXPolicy[RectifyXPolicy["Min"] = 2] = "Min";
})(exports.RectifyXPolicy || (exports.RectifyXPolicy = {}));
var RectifyXPolicy = exports.RectifyXPolicy;
;
(function (EventType) {
    EventType[EventType["Change"] = 0] = "Change";
    EventType[EventType["Annotate"] = 1] = "Annotate";
    EventType[EventType["History"] = 2] = "History";
    EventType[EventType["ClearHistory"] = 3] = "ClearHistory";
    EventType[EventType["MidiOut"] = 4] = "MidiOut";
    EventType[EventType["MidiIn"] = 5] = "MidiIn";
})(exports.EventType || (exports.EventType = {}));
var EventType = exports.EventType;
(function (Type) {
    Type[Type["Print"] = 50] = "Print";
    Type[Type["START_OF_ATTRIBUTES"] = 100] = "START_OF_ATTRIBUTES";
    Type[Type["EndMarker"] = 110] = "EndMarker";
    Type[Type["NewPage"] = 120] = "NewPage";
    Type[Type["NewLine"] = 130] = "NewLine";
    Type[Type["Begin"] = 140] = "Begin";
    Type[Type["Attributes"] = 145] = "Attributes";
    Type[Type["Clef"] = 150] = "Clef";
    Type[Type["KeySignature"] = 160] = "KeySignature";
    Type[Type["TimeSignature"] = 170] = "TimeSignature";
    Type[Type["END_OF_ATTRIBUTES"] = 199] = "END_OF_ATTRIBUTES";
    Type[Type["Barline"] = 300] = "Barline";
    Type[Type["START_OF_MODIFIERS"] = 400] = "START_OF_MODIFIERS";
    Type[Type["Slur"] = 425] = "Slur";
    Type[Type["BeamGroup"] = 450] = "BeamGroup";
    Type[Type["Wedge"] = 475] = "Wedge";
    Type[Type["END_OF_MODIFIERS"] = 499] = "END_OF_MODIFIERS";
    Type[Type["Duration"] = 600] = "Duration";
    Type[Type["Placeholder"] = 999] = "Placeholder";
    Type[Type["Unknown"] = 1111] = "Unknown";
})(exports.Type || (exports.Type = {}));
var Type = exports.Type;
;
;
;
;
var NoteUtil;
(function (NoteUtil) {
    "use strict";
    function makeDuration(spec) {
        "use strict";
        return {
            count: spec.count,
            dots: spec.dots || 0,
            tuplet: spec.tuplet || null,
            displayTuplet: null
        };
    }
    NoteUtil.makeDuration = makeDuration;
    function pitchToMidiNumber(p) {
        "use strict";
        var base = require("./duration").chromaticScale[p.step] + 48;
        return base + (p.octave || 0) * 12 + (p.alter || 0);
    }
    NoteUtil.pitchToMidiNumber = pitchToMidiNumber;
    NoteUtil.noteToVal = {
        c: 0,
        d: 2,
        e: 4,
        f: 5,
        g: 7,
        a: 9,
        b: 11
    };
    NoteUtil.valToNote = _.invert(NoteUtil.noteToVal);
    function midiNumberToPitch(n, ctx) {
        "use strict";
        var key = ctx.attributes.keySignature;
        var tendency = key.fifths >= 0 ? 0 : 1;
        var idealStepsPerInterval = {
            0: 0,
            1: 0 + tendency,
            2: 1,
            3: 2,
            4: 2,
            5: 3,
            6: 3 + tendency,
            7: 4,
            8: 5,
            9: 5,
            10: 6,
            11: 6
        };
        var pitchS = NoteUtil.keyCircle[NoteUtil.circleOffsetByMode[key.mode] + key.fifths];
        var pitch = {
            alter: pitchS[1] === "#" ? 1 : (pitchS[1] === "b" ? -1 : 0),
            octave: 0,
            step: pitchS[0]
        };
        var halfStepsFromScaleRoot = (((n - pitchToMidiNumber(pitch)) % 12) + 12) % 12;
        var idealSteps = idealStepsPerInterval[halfStepsFromScaleRoot];
        var notesInv = {
            "C": 0,
            "D": 1,
            "E": 2,
            "F": 3,
            "G": 4,
            "A": 5,
            "B": 6
        };
        var notes = _.invert(notesInv);
        var base = notes[(notesInv[pitch.step] + idealSteps) % 7];
        var acc = -positiveMod(pitchToMidiNumber({ octave: 0, alter: 0, step: base }) - n, 12) || null;
        if (acc < -6) {
            acc += 12;
        }
        return {
            octave: Math.floor(n / 12 - 4),
            alter: acc,
            step: base
        };
    }
    NoteUtil.midiNumberToPitch = midiNumberToPitch;
    function positiveMod(base, mod) {
        return ((base % mod) + mod) % mod;
    }
    NoteUtil.positiveMod = positiveMod;
    function getAccidentals(key) {
        var ret = {};
        if (key.fifths < 0) {
            _.times(-key.fifths, function (idx) {
                ret[NoteUtil.flatCircle[idx]] = -1;
            });
            return ret;
        }
        _.times(key.fifths, function (idx) {
            ret[NoteUtil.sharpCircle[idx]] = 1;
        });
        return ret;
    }
    NoteUtil.getAccidentals = getAccidentals;
    ;
    NoteUtil.flatCircle = "beadgcf";
    NoteUtil.sharpCircle = "fcgdaeb";
    NoteUtil.keyCircle = [
        "fb",
        "cb",
        "gb",
        "db",
        "ab",
        "eb",
        "bb",
        "f ",
        "c ",
        "g ",
        "d ",
        "a ",
        "e ",
        "b ",
        "f#",
        "c#",
        "g#",
        "d#",
        "a#",
        "e#"
    ];
    NoteUtil.circleOffsetByMode = {
        major: 8,
        minor: 11
    };
    function isPitch(k, name, acc) {
        return k.step === name && (k.alter || 0) === (acc || 0);
    }
    NoteUtil.isPitch = isPitch;
})(NoteUtil = exports.NoteUtil || (exports.NoteUtil = {}));
exports.InvalidAccidental = 9001;
var JSONx;
(function (JSONx) {
    "use strict";
    function clone(obj) {
        "use strict";
        return JSON.parse(JSON.stringify(obj));
    }
    JSONx.clone = clone;
    function hash(obj) {
        "use strict";
        return exports.strHash(JSON.stringify(obj));
    }
    JSONx.hash = hash;
})(JSONx = exports.JSONx || (exports.JSONx = {}));
function deepAssign(a, b) {
    "use strict";
    if (a instanceof Array || b instanceof Array) {
        var retArr = [];
        var aArr = a;
        var bArr = b;
        for (var i = 0; i < Math.max(a ? aArr.length : 0, b ? bArr.length : 0); ++i) {
            retArr.push(deepAssign(a ? aArr[i] : null, b ? bArr[i] : null));
        }
        return retArr;
    }
    else if (a instanceof Object || b instanceof Object) {
        var ret = a ? JSONx.clone(a) : {};
        for (var key in b) {
            if (b.hasOwnProperty(key)) {
                ret[key] = deepAssign(ret[key], b[key]);
            }
        }
        return ret;
    }
    else {
        return (a === undefined) ? b : a;
    }
}
exports.deepAssign = deepAssign;
global.C = module.exports;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../util/SMuFL":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/SMuFL.js","../util/hash":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/hash.js","../util/renderUtil":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/renderUtil.js","./duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","musicxml-interfaces":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/musicxml-interfaces/typescript/dist/musicXML_DOM.js","react/lib/Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/Object.assign.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/dispatcher.js":[function(require,module,exports){
(function (global){
var Promise = require("es6-promise");
var _ = require("lodash");
var assert = require("assert");
var C = require("./contracts");
var ajax = require("../util/ajax");
var types = require("./types");
var isBrowser = typeof window !== "undefined";
var FLUX_DEBUG = isBrowser && global.location.search.indexOf("fluxDebug=1") !== -1;
var Dispatcher = (function () {
    function Dispatcher() {
        var _this = this;
        this._clearPromises = function () {
            _this._promises = [];
            _this._inAction = null;
        };
        this._events = "";
        this._inAction = null;
        this._callbacks = [];
        this._promises = [];
        types.ensureRegistered();
    }
    Dispatcher.prototype.register = function (callback) {
        this._callbacks.push(callback);
        return this._callbacks.length - 1;
    };
    Dispatcher.prototype.unregister = function (callback) {
        this._callbacks = this._callbacks.filter(function (cb) { return cb !== callback; });
    };
    Dispatcher.prototype.DELETE = function (url, p, cb, nested) {
        return this._dispatch(url, "DELETE", p, cb, nested);
    };
    Dispatcher.prototype.GET = function (url, p, cb, nested) {
        return this._dispatch(url, "GET", p, cb, nested);
    };
    Dispatcher.prototype.PATCH = function (url, p, cb, nested) {
        return this._dispatch(url, "PATCH", p, cb, nested);
    };
    Dispatcher.prototype.POST = function (url, p, cb, nested) {
        return this._dispatch(url, "POST", p, cb, nested);
    };
    Dispatcher.prototype.PUT = function (url, p, cb, nested) {
        return this._dispatch(url, "PUT", p, cb, nested);
    };
    Dispatcher.prototype._dispatch = function (url, verb, postData, cb, nested) {
        var _this = this;
        if (nested === void 0) { nested = false; }
        assert(verb, "Verb must be defined");
        var pr;
        var root = url;
        var resource = null;
        var query = null;
        if (root.indexOf("?") !== -1) {
            query = root.substr(root.indexOf("?") + 1);
            root = root.substr(0, root.indexOf("?"));
        }
        if (root.indexOf("/_") !== -1) {
            resource = root.substr(root.indexOf("/_") + 2);
            root = root.substr(0, root.indexOf("/_"));
        }
        if (verb === "GET") {
            ajax.untrusted.getJSON(url, function (response, request) {
                var ev = _this._dispatchImpl({
                    description: "GET " + root + (request.status === 200 ? "" : " ERROR"),
                    status: request.status,
                    resource: resource,
                    query: query,
                    url: url,
                    response: response,
                    postData: null,
                    nexted: nested
                });
                if (cb) {
                    ev.then(function () { return cb(response); });
                }
            });
        }
        else if (verb in immediateActions) {
            pr = this._dispatchImpl({
                description: verb + " " + root,
                resource: resource,
                response: null,
                status: null,
                query: query,
                postData: postData,
                nested: nested
            });
            if ((verb in networkActions) && !url.indexOf("/api")) {
                ajax.untrusted.anyJSON(verb, url, postData, function (response, request) {
                    var ev = _this._dispatchImpl({
                        description: verb + " " + root + (request.status === 200 ? " DONE" : " ERROR"),
                        status: request.status,
                        resource: resource,
                        query: query,
                        url: url,
                        response: response,
                        postData: null,
                        nested: nested
                    });
                    if (cb) {
                        ev.then(function () { return cb(response); });
                    }
                });
            }
            else {
                assert(!cb, "Callbacks are only necessary for network actions.");
            }
        }
        return pr;
    };
    Dispatcher.prototype._addPromise = function (callback, payload) {
        this._promises.push(new Promise.Promise(function resolvePromise(resolve, reject) {
            if (callback(payload)) {
                resolve(payload);
            }
            else {
                reject(new Error("Dispatcher callback unsuccessful"));
            }
        }));
    };
    Dispatcher.prototype._dispatchImpl = function (action) {
        var _this = this;
        if (FLUX_DEBUG) {
            console.log(action.description + (action.resource ? " " + action.resource : ""), (action.query ? " " + action.query : ""), (action.postData ? [action.postData] : []), [action]);
        }
        if (global.localStorage && localStorage["superCowPowers"]) {
            if (this._events.length > 12000) {
                this._events = this._events.substr(this._events.length - 12000);
            }
            var done = action.description.indexOf(" DONE") !== -1;
            var errord = action.description.indexOf(" ERROR") !== -1;
            this._events += action.description.replace(" DONE", "").replace(" ERROR", "");
            if (action.resource) {
                this._events += "/_" + action.resource;
            }
            if (action.query) {
                this._events += "?" + action.query;
            }
            if (done) {
                this._events += " ✓";
            }
            if (errord) {
                this._events += " ✗";
            }
            if (action.postData) {
                var data = JSON.stringify(action.postData, null, 2);
                if (data.length > 400) {
                    this._events += "(" + data.length + " characters omitted…)";
                }
                else {
                    var lines = data.split("\n");
                    if (lines.length > 1) {
                        this._events += "(" + lines.map(function (v, i) { return (i ? "  " : "") + v; }).join("\n") + ")";
                    }
                    else if (lines.length === 1) {
                        this._events += "(" + lines[0] + ")";
                    }
                }
            }
            this._events += "\n";
        }
        if (this._inAction && !action.nested) {
        }
        _.each(this._callbacks, function (callback) {
            _this._addPromise(callback, action);
        });
        this._inAction = action.description;
        return Promise.Promise.all(this._promises).then(this._clearPromises).catch(function (err) {
            if (err instanceof C.DispatcherRedirect) {
                var redirect = err;
                _this._dispatch(redirect.newUrl, redirect.verb, redirect.postData);
            }
            _this._inAction = null;
            console.warn("Exception occurred in promise", err);
            console.log(err.stack);
        });
    };
    return Dispatcher;
})();
var immediateActions = {
    PATCH: true,
    PUT: true,
    POST: true,
    DELETE: true
};
var networkActions = {
    GET: true,
    PATCH: true,
    POST: true,
    PUT: true,
    DELETE: true
};
module.exports = Dispatcher;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../util/ajax":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/ajax.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./types":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/types.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","es6-promise":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/es6-promise/dist/es6-promise.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var assert = require("assert");
var Annotator = require("./annotator");
var AttributesModel = require("./attributes");
var BarlineModel = require("./barline");
var C = require("./contracts");
var EndMarkerModel = require("./endMarker");
var KeySignatureModel = require("./keySignature");
var Metre = require("./metre");
var NewlineModel = require("./newline");
var TimeSignatureModel = require("./timeSignature");
var DurationModel = (function (_super) {
    __extends(DurationModel, _super);
    function DurationModel(spec, annotated) {
        var _this = this;
        _super.call(this, spec, annotated);
        var self = this;
        var properties = [
            "count",
            "dots",
            "displayCount",
            "displayDots",
            "displayNotation",
            "isRest",
            "tuplet",
            "displayTuplet",
            "chord",
            "_notes"
        ];
        _.forEach(properties, setIfDefined);
        if (!this._p_notes) {
            this._p_notes = _.map(this.chord, function (pitch, idx) {
                return new DurationModel.MNote(_this, idx, {
                    pitch: pitch
                });
            });
        }
        this.tie = this.tie;
        function setIfDefined(property) {
            if (spec.hasOwnProperty(property)) {
                self[property] = spec[property];
            }
        }
    }
    Object.defineProperty(DurationModel.prototype, "fields", {
        get: function () {
            return ["_notes", "dots"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "visible", {
        get: function () {
            return !this.inBeam;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "isNote", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "note", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "type", {
        get: function () {
            return 600 /* Duration */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "xPolicy", {
        get: function () {
            return 2 /* Min */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "isRest", {
        get: function () {
            return (this.chord && this.chord.length === 1 && this.chord[0].step === "R");
        },
        set: function (r) {
            if (!!r) {
                this.chord = [{
                    step: "R",
                    alter: null,
                    octave: null
                }];
                this.tie = false;
            }
            else {
                assert(!this.isRest, "Instead, set the exact pitch or chord...");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "tie", {
        get: function () {
            return this._getFlag(Flags.TIE);
        },
        set: function (v) {
            this._setFlag(Flags.TIE, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "isWholebar", {
        get: function () {
            return this._getFlag(Flags.WHOLE_BAR);
        },
        set: function (v) {
            this._setFlag(Flags.WHOLE_BAR, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "count", {
        get: function () {
            return this._count;
        },
        set: function (n) {
            assert(!isNaN(n));
            this._count = n;
            this._beats = null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "displayDots", {
        get: function () {
            if (this.isWholebar && this.isRest) {
                return 0;
            }
            return this._displayDots === void 0 || this._displayDots === null ? this.dots : this._displayDots;
        },
        set: function (c) {
            this._displayDots = c;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "tuplet", {
        get: function () {
            return this._tuplet;
        },
        set: function (t) {
            this._tuplet = t;
            this._displayTuplet = null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "displayTuplet", {
        get: function () {
            return this._displayTuplet || this._tuplet;
        },
        set: function (t) {
            this._displayTuplet = t;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "hasFlagOrBeam", {
        get: function () {
            return !!this.tuplet || !this.isRest && DurationModel.countToIsBeamable[this.count];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "temporary", {
        get: function () {
            return this._getFlag(Flags.TEMPORARY);
        },
        set: function (v) {
            this._setFlag(Flags.TEMPORARY, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "accStrokes", {
        get: function () {
            var _this = this;
            return _.map(this.chord, function (c, idx) { return (c.displayAlter !== null && c.displayAlter !== undefined || _this.accToDelete === idx) ? "#A5A5A5" : "#000000"; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "extraWidth", {
        get: function () {
            return this._extraWidth;
        },
        set: function (w) {
            assert(isFinite(w));
            this._extraWidth = w;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "direction", {
        get: function () {
            return isNaN(this.forceMiddleNoteDirection) ? undefined : this.forceMiddleNoteDirection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "displayCount", {
        get: function () {
            return this._displayCount || this.count;
        },
        set: function (c) {
            assert(c !== null);
            this._displayCount = c;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "displayNotation", {
        get: function () {
            return this._displayNotation || this._notes[0].notations;
        },
        set: function (m) {
            this._displayNotation = m;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "flag", {
        get: function () {
            return !this.inBeam && (this.displayCount in DurationModel.countToFlag) && DurationModel.countToFlag[this.displayCount];
        },
        set: function (a) {
            assert(false, "Read-only property");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "hasStem", {
        get: function () {
            return DurationModel.countToHasStem[this.displayCount];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "isMultibar", {
        get: function () {
            return this.count < 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "noteheadGlyph", {
        get: function () {
            return DurationModel.countToNotehead[this.displayCount];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "restHead", {
        get: function () {
            if (this.isWholebar) {
                return DurationModel.countToRest[1];
            }
            return DurationModel.countToRest[this.count];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "strokes", {
        get: function () {
            var _this = this;
            return _.map(this.chord, function (c) { return c.temporary ? "#A5A5A5" : (_this.selected ? "#75A1D0" : "#000000"); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "beats", {
        get: function () {
            assert(false);
            return NaN;
        },
        set: function (n) {
            assert(false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "notations", {
        get: function () {
            return this._notes[0].notations;
        },
        set: function (m) {
            this._notes[0].notations = m;
            this.displayNotation = null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "color", {
        get: function () {
            return this._notes[0].color;
        },
        set: function (c) {
            _.forEach(this._notes, function (n) {
                n.color = c;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationModel.prototype, "_notes", {
        get: function () {
            return this._p_notes;
        },
        set: function (notes) {
            this.chord = this.chord || [];
            this.chord.length = notes.length;
            for (var i = 0; i < notes.length; ++i) {
                if (!(notes[i] instanceof DurationModel.MNote)) {
                    notes[i] = new DurationModel.MNote(this, i, notes[i]);
                }
            }
            this._p_notes = notes;
        },
        enumerable: true,
        configurable: true
    });
    DurationModel.prototype.modelDidLoad = function (body, idx) {
        for (var i = 0; i < this.chord.length; ++i) {
            if (this.chord[i].temporary) {
                this.chord.splice(i, 1);
                if (this._p_notes && i < this._p_notes.length) {
                    this._p_notes.splice(i, 1);
                }
            }
        }
    };
    DurationModel.prototype.recordMetreDataImpl = function (mctx) {
        if (!mctx.attributes) {
            throw new AttributesModel.AttributesUndefinedException();
        }
        if (!this.chord.length && !this._p_notes.length) {
            this.isRest = true;
            assert(this.chord.length);
        }
        if (this.chord.length !== this._p_notes.length) {
            var notes = this._p_notes;
            for (var i = 0; i < this.chord.length; ++i) {
                if (!(notes[i] instanceof DurationModel.MNote)) {
                    notes[i] = new DurationModel.MNote(this, i, notes[i] || {
                        pitch: this.chord[i],
                        dots: this.dots,
                        count: this.count
                    }, false);
                }
            }
            notes.length = this.chord.length;
            this._p_notes = notes;
        }
        assert(this._count === this._notes[0].noteType.duration);
        this.ctxData = new C.MetreContext(mctx);
        assert(isFinite(this._count));
        this._beats = this.calcBeats(mctx, null, true);
        assert(isFinite(this._beats) && this._beats !== null);
        mctx.bar += Math.floor((mctx.beat + this._beats) / mctx.ts.beats);
        mctx.beat = (mctx.beat + this._beats) % mctx.ts.beats;
        Metre.correctRoundingErrors(mctx);
    };
    DurationModel.prototype.annotateImpl = function (ctx) {
        var i;
        var j;
        if (!ctx.attributes.keySignature) {
            return KeySignatureModel.createKeySignature(ctx);
        }
        this.impliedTS = ctx.ts;
        if (!this.impliedTS) {
            return TimeSignatureModel.createTS(ctx);
        }
        assert(this._beats !== null, "Unknown beat count");
        this.isWholebar = this._beats === ctx.ts.beats;
        if (ctx.isBeam || !this.inBeam) {
            if (this._beats > ctx.ts.beats && ctx.beat >= ctx.ts.beats) {
                return BarlineModel.createBarline(ctx, 0 /* Regular */);
            }
            else if (!this.isMultibar) {
                if (ctx.beat + this._beats > ctx.ts.beats) {
                    var overfill = ctx.beat + this._beats - ctx.ts.beats;
                    if (this._beats === overfill) {
                        var ret = BarlineModel.createBarline(ctx, 0 /* Regular */);
                        return ret;
                    }
                    else {
                        var replaceWith = Metre.subtract(this, overfill, ctx).map(function (t) { return new DurationModel(t, true); });
                        var addAfterBar = Metre.subtract(this, this._beats - overfill, ctx).map(function (t) { return new DurationModel(t, true); });
                        for (i = 0; i < replaceWith.length; ++i) {
                            replaceWith[i].chord = this.chord ? C.JSONx.clone(this.chord) : null;
                            if ((i + 1 !== replaceWith.length || addAfterBar.length) && !this.isRest) {
                                replaceWith[i].tie = true;
                            }
                        }
                        for (i = 0; i < addAfterBar.length; ++i) {
                            addAfterBar[i].chord = this.chord ? C.JSONx.clone(this.chord) : null;
                            if (i + 1 !== addAfterBar.length && !this.isRest) {
                                addAfterBar[i].tie = true;
                            }
                        }
                        BarlineModel.createBarline(ctx, 0 /* Regular */);
                        ctx.splice(ctx.idx, 0, replaceWith, 4 /* ShortenOtherParts */);
                        ctx.splice(ctx.idx + 1 + replaceWith.length, 1, addAfterBar, 4 /* ShortenOtherParts */);
                        return 60 /* RetryLine */;
                    }
                }
                var status = Metre.rhythmicSpellcheck(ctx);
                if (status !== 10 /* Success */) {
                    return status;
                }
            }
            assert(isFinite(this._beats) && this._beats !== null);
            if (ctx.smallest > this._beats) {
                ctx.smallest = this._beats;
                return 60 /* RetryLine */;
            }
            this.extraWidth = (Math.log(this._beats) - Math.log(ctx.smallest)) / C.log2 / 3 * 40;
            if ((ctx.x + this.getWidth(ctx) > ctx.maxX)) {
                return NewlineModel.createNewline(ctx);
            }
        }
        if (!ctx.isBeam && this.hasFlagOrBeam && !this.perfectlyBeamed(ctx)) {
            var b = DurationModel.BEAMDATA;
            DurationModel.BEAMDATA = null;
            while (_.any(b, function (b) { return b.inBeam; })) {
                j = b[0].idx;
                while (ctx.body[j].inBeam) {
                    --j;
                }
                while (ctx.body[j].type !== 450 /* BeamGroup */) {
                    ++j;
                }
                var isInPast = j <= ctx.idx;
                ctx.removeFollowingBeam(j - 1, isInPast);
                ctx.idx = j;
            }
            _.each(b, function (b) {
                b.inBeam = true;
            });
            var BeamGroupModel = require("./beamGroup");
            BeamGroupModel.createBeam(ctx, b);
            return 60 /* RetryLine */;
        }
        if (!ctx.next()) {
            ctx.insertFuture(new EndMarkerModel({ endMarker: true }, true));
        }
        if (DurationModel.getAverageLine(this, ctx) === 3) {
            this.forceMiddleNoteDirection = this.calcMiddleNoteDirection(ctx);
        }
        else {
            this.forceMiddleNoteDirection = NaN;
        }
        this.lines = DurationModel.getLines(this, ctx);
        assert(this.lines);
        assert(_.forEach(this.lines, function (l) { return isFinite(l); }));
        for (var i = 0; i < this.lines.length; ++i) {
            ctx.minBottomPaddings[i] = Math.max(ctx.minBottomPaddings[i], -(this.lines[i] - 3) * 10);
            ctx.minTopPaddings[i] = Math.max(ctx.minTopPaddings[i], (this.lines[i] - 4) * 10);
        }
        if (!ctx.isBeam) {
            ctx.beat = (ctx.beat || 0) + this._beats;
            Metre.correctRoundingErrors(ctx);
        }
        if (!ctx.isBeam && this.inBeam) {
            ctx.x = this.x + this.getWidth(ctx);
            this._handleTie(ctx);
            return 10 /* Success */;
        }
        else if (!this.inBeam) {
            this._handleTie(ctx);
        }
        this.x = ctx.x;
        this._displayedAccidentals = this.getDisplayedAccidentals(ctx);
        for (i = 0; i < this.chord.length; ++i) {
            ctx.accidentalsByStave[ctx.currStaveIdx][this.chord[i].step + this.chord[i].octave] = this.chord[i].alter;
            if ((ctx.accidentalsByStave[ctx.currStaveIdx][this.chord[i].step] || null) !== this.chord[i].alter) {
                ctx.accidentalsByStave[ctx.currStaveIdx][this.chord[i].step] = C.InvalidAccidental;
            }
        }
        ctx.x += this.getWidth(ctx);
        this.color = this.temporary ? "#A5A5A5" : (this.selected ? "#75A1D0" : "#000000");
        return 10 /* Success */;
    };
    DurationModel.prototype.getWidth = function (ctx) {
        var width = 22.8 + (this.extraWidth || 0) + (this._displayedAccidentals ? 9.6 : 0);
        assert(isFinite(width));
        return width;
    };
    DurationModel.prototype.calcBeats = function (ctx, inheritedCount, force) {
        if (!force && this._beats) {
            return this._beats;
        }
        return Metre.calcBeats2(this, ctx, inheritedCount);
    };
    DurationModel.prototype.containsAccidentalAfterBarline = function (ctx, previewMode) {
        var nonAccidentals = C.NoteUtil.getAccidentals(ctx.attributes.keySignature);
        var pitches = this.chord;
        for (var i = 0; i < pitches.length; ++i) {
            if ((nonAccidentals[pitches[i].step] || 0) !== (pitches[i].alter || 0)) {
                return true;
            }
            var prevNote = ctx.prev(function (c) { return c.isNote && !c.isRest; });
            if (prevNote) {
                if (_hasConflict(prevNote.note.chord, pitches[i].step, nonAccidentals[pitches[i].step] || null)) {
                    return true;
                }
            }
        }
        return false;
    };
    DurationModel.prototype.perfectlyBeamed = function (ctx) {
        if (this.tuplet) {
            var prevNote = ctx.prev(function (c) { return c.isNote || c.endMarker; });
            if (prevNote && prevNote.isNote && prevNote.note.tuplet) {
                return true;
            }
        }
        var rebeamable = Metre.rebeamable(ctx.idx, ctx);
        var prevBeamMaybe = ctx.prev(function (m) { return m.type === 450 /* BeamGroup */ || m.type === 300 /* Barline */; }, 0);
        if (rebeamable && prevBeamMaybe && prevBeamMaybe.type === 450 /* BeamGroup */) {
            var thisBeam = prevBeamMaybe.beam;
            if (thisBeam.length === rebeamable.length) {
                var isValid = true;
                for (var i = 0; i < thisBeam.length; ++i) {
                    if (thisBeam[i] !== rebeamable[i]) {
                        isValid = false;
                        break;
                    }
                }
                if (isValid) {
                    return true;
                }
            }
        }
        if (rebeamable) {
            DurationModel.BEAMDATA = rebeamable;
        }
        return !rebeamable;
    };
    DurationModel.prototype.calcMiddleNoteDirection = function (ctx) {
        var prevLine = ctx.prev() && ctx.prev().isNote ? DurationModel.getAverageLine(ctx.prev().note, ctx) : null;
        var nextLine = ctx.next() && ctx.next().isNote ? DurationModel.getAverageLine(ctx.next().note, ctx) : null;
        if ((nextLine !== null) && ctx.beat + this._beats + Metre.calcBeats2(ctx.next().note, ctx, this.count) > ctx.ts.beats) {
            nextLine = null;
        }
        if (ctx.prev() && ctx.prev().forceMiddleNoteDirection) {
            prevLine -= ctx.prev().forceMiddleNoteDirection;
        }
        var check;
        if (prevLine === null && nextLine === null) {
            this.forceMiddleNoteDirection = -1;
        }
        else if (prevLine === null) {
            check = nextLine;
        }
        else if (nextLine === null) {
            check = prevLine;
        }
        else {
            var startsAt = ctx.beat;
            var endsAt = ctx.beat + this._beats;
            if (Math.floor(startsAt) === Math.floor(endsAt)) {
                check = nextLine;
            }
            else if (Math.floor(startsAt) !== startsAt) {
                check = prevLine;
            }
            else if (startsAt >= ctx.ts.beats / 2) {
                check = nextLine;
            }
            else {
                check = prevLine;
            }
        }
        return (check === undefined || check >= 3) ? -1 : 1;
    };
    DurationModel.prototype.getDisplayedAccidentals = function (ctx) {
        return this.getAccidentals(ctx, true);
    };
    DurationModel.prototype.getAccidentals = function (ctx, display) {
        var chord = this.chord || [this];
        var result = new Array(chord.length || 1);
        function or3(first, second, third) {
            if (third === undefined) {
                third = null;
            }
            var a = first === null || first === undefined || first !== first ? second : first;
            return a == null || a === undefined || a !== a ? third : a;
        }
        ;
        for (var i = 0; i < result.length; ++i) {
            var pitch = chord[i];
            var actual = or3(display ? pitch.displayAlter : null, pitch.alter);
            assert(actual !== undefined);
            var generalTarget = or3(ctx.accidentalsByStave[ctx.currStaveIdx][pitch.step], null);
            var target = or3(ctx.accidentalsByStave[ctx.currStaveIdx][pitch.step + pitch.octave], null);
            if (!target && generalTarget !== C.InvalidAccidental) {
                target = generalTarget;
            }
            if (actual === target) {
                var noConflicts = target === generalTarget || generalTarget === C.InvalidAccidental;
                for (var j = 0; j < ctx.accidentalsByStave.length && noConflicts; ++j) {
                    if (ctx.accidentalsByStave[j] && target !== or3(ctx.accidentalsByStave[j][pitch.step + pitch.octave], ctx.accidentalsByStave[j][pitch.step], target)) {
                        noConflicts = false;
                    }
                }
                var concurrentNotes = ctx.findVertical(function (c) { return c.isNote; });
                for (var j = 0; j < concurrentNotes.length && noConflicts; ++j) {
                    var otherChord = concurrentNotes[j].note.chord;
                    noConflicts = noConflicts && !_hasConflict(otherChord, pitch.step, target);
                }
                var prevBarOrNote = ctx.prev(function (c) { return c.isNote && !c.isRest || c.type === 300 /* Barline */; });
                if (prevBarOrNote && prevBarOrNote.type === 300 /* Barline */) {
                    var prevNote = ctx.prev(function (c) { return c.isNote && !c.isRest; });
                    if (prevNote) {
                        noConflicts = noConflicts && !_hasConflict(prevNote.note.chord, pitch.step, target);
                    }
                }
                if (noConflicts) {
                    result[i] = NaN;
                    continue;
                }
                else {
                }
            }
            if (!actual) {
                ctx.accidentalsByStave[ctx.currStaveIdx][pitch.step] = undefined;
                result[i] = 0;
                continue;
            }
            assert(actual !== C.InvalidAccidental, "Accidental is invalid");
            result[i] = actual;
        }
        return result;
    };
    DurationModel.prototype._handleTie = function (ctx) {
        if (this.tie) {
            var nextNote = ctx.next(function (obj) { return obj.isNote; });
            if (!nextNote || nextNote.isRest) {
                this.tie = false;
                this.tieTo = null;
            }
            else {
                this.tieTo = nextNote;
            }
        }
        else {
            this.tieTo = null;
        }
    };
    DurationModel.prototype.getAccWidth = function (ctx) {
        var accWidth = 0;
        var accTmp = this.getAccidentals(ctx);
        if (accTmp) {
            var acc = (accTmp instanceof Array) ? accTmp : [accTmp];
            var max = _.reduce(acc, function (memo, t) { return Math.max(Math.abs(t || 0), memo); }, 0);
            accWidth = max * 6;
        }
        return Math.max(0, accWidth - 12);
    };
    DurationModel.clefOffsets = {
        G: -3.5,
        F: 2.5,
        C: -0.5
    };
    DurationModel.chromaticScale = {
        c: 0,
        d: 2,
        e: 4,
        f: 5,
        g: 7,
        a: 9,
        b: 11
    };
    DurationModel.countToFlag = {
        8: "flag8th",
        16: "flag16th",
        32: "flag32nd",
        64: "flag64th",
        128: "flag128th",
        256: "flag256th",
        512: "flag512th",
        1024: "flag1024th"
    };
    DurationModel.countToHasStem = {
        0.25: true,
        0.5: false,
        1: false,
        2: true,
        4: true,
        8: true,
        16: true,
        32: true,
        64: true,
        128: true,
        256: true,
        512: true,
        1024: true
    };
    DurationModel.countToIsBeamable = {
        8: true,
        16: true,
        32: true,
        64: true,
        128: true,
        256: true,
        512: true,
        1024: true
    };
    DurationModel.countToNotehead = {
        9992: "noteheadDoubleWhole",
        9991: "noteheadDoubleWhole",
        9990: "noteheadDoubleWhole",
        1: "noteheadWhole",
        2: "noteheadHalf",
        4: "noteheadBlack",
        8: "noteheadBlack",
        16: "noteheadBlack",
        32: "noteheadBlack",
        64: "noteheadBlack",
        128: "noteheadBlack",
        256: "noteheadBlack",
        512: "noteheadBlack",
        1024: "noteheadBlack"
    };
    DurationModel.countToRest = {
        9992: "restLonga",
        9991: "restLonga",
        9990: "restDoubleWhole",
        1: "restWhole",
        2: "restHalf",
        4: "restQuarter",
        8: "rest8th",
        16: "rest16th",
        32: "rest32nd",
        64: "rest64th",
        128: "rest128th",
        256: "rest256th",
        512: "rest512th",
        1024: "rest1024th"
    };
    DurationModel.getAverageLine = function (note, ctx) {
        var lines = DurationModel.getLines(note, ctx, { filterTemporary: true });
        var sum = 0;
        for (var i = 0; i < lines.length; ++i) {
            sum += lines[i] / lines.length;
        }
        return sum;
    };
    DurationModel.getLine = function (pitch, ctx, options) {
        options = options || { filterTemporary: false };
        if (pitch.isRest) {
            return 3;
        }
        if (!ctx) {
            assert(pitch.line !== undefined, "Must be first annotated in duration.jsx");
            return pitch.line;
        }
        assert(ctx.attributes.clef, "A clef must be inserted before the first note");
        return DurationModel.clefOffsets[ctx.attributes.clef.sign] + (pitch.octave || 0) * 3.5 + DurationModel.pitchOffsets[pitch.step];
    };
    DurationModel.getLines = function (note, ctx, options) {
        options = options || { filterTemporary: false };
        var ret = [];
        for (var i = 0; i < note.chord.length; ++i) {
            if (!options.filterTemporary || !note.chord[i].temporary) {
                ret.push(note.isRest ? 3 : DurationModel.clefOffsets[ctx.attributes.clef.sign] + ((note.chord[i].octave || 0) - 3) * 3.5 + DurationModel.pitchOffsets[note.chord[i].step]);
            }
        }
        for (var i = 0; i < ret.length; ++i) {
            assert(!isNaN(ret[i]));
        }
        return ret;
    };
    DurationModel.getPitch = function (line, ctx) {
        assert(ctx.attributes.clef, "A clef must be inserted before the first note");
        var pitch = DurationModel.offsetToPitch[((line - DurationModel.clefOffsets[ctx.attributes.clef.sign]) % 3.5 + 3.5) % 3.5];
        var octave = Math.floor((line - DurationModel.clefOffsets[ctx.attributes.clef.sign]) / 3.5);
        var alter = ctx.accidentalsByStave[ctx.currStaveIdx][pitch + octave] || ctx.accidentalsByStave[ctx.currStaveIdx][pitch] || null;
        return {
            step: DurationModel.offsetToPitch[((line - DurationModel.clefOffsets[ctx.attributes.clef.sign]) % 3.5 + 3.5) % 3.5],
            octave: octave,
            alter: alter === C.InvalidAccidental ? null : alter
        };
    };
    DurationModel.offsetToPitch = {
        0: "C",
        0.5: "D",
        1: "E",
        1.5: "F",
        2: "G",
        2.5: "A",
        3: "B"
    };
    DurationModel.pitchOffsets = {
        C: 0,
        D: 0.5,
        E: 1,
        F: 1.5,
        G: 2,
        A: 2.5,
        B: 3
    };
    return DurationModel;
})(Model);
var DurationModel;
(function (DurationModel) {
    var MNote = (function () {
        function MNote(parent, idx, note, updateParent) {
            if (updateParent === void 0) { updateParent = true; }
            this._color = 0x000000;
            var self = this;
            this._parent = parent;
            this._idx = idx;
            if (note.pitch) {
                note.pitch.step = note.pitch.step.toUpperCase();
            }
            if (updateParent) {
                parent.chord[idx] = note.pitch;
                parent.dots = (note.dots || []).length;
                if (note.rest) {
                    parent.isRest = true;
                }
                parent.count = note.noteType ? note.noteType.duration : (parent.count || 4);
                parent.tuplet = note.timeModification ? {
                    num: note.timeModification.normalNotes.count,
                    den: note.timeModification.actualNotes.count
                } : parent.tuplet;
            }
            var properties = [
                "unpitched",
                "noteheadText",
                "accidental",
                "instrument",
                "attack",
                "endDynamics",
                "lyrics",
                "notations",
                "stem",
                "cue",
                "ties",
                "dynamics",
                "duration",
                "play",
                "staff",
                "grace",
                "notehead",
                "release",
                "pizzicato",
                "beams",
                "voice",
                "footnote",
                "level",
                "relativeY",
                "defaultY",
                "relativeX",
                "fontFamily",
                "fontWeight",
                "fontStyle",
                "fontSize",
                "color",
                "printDot",
                "printLyric",
                "printObject",
                "printSpacing",
                "timeOnly"
            ];
            _.forEach(properties, setIfDefined);
            function setIfDefined(property) {
                if (note.hasOwnProperty(property)) {
                    self[property] = note[property];
                }
            }
        }
        MNote.prototype.toJSON = function () {
            var clone = {};
            if (this.pitch) {
                clone["pitch"] = this.pitch;
            }
            if (this.rest) {
                clone["rest"] = this.rest;
            }
            if (this.chord) {
                clone["chord"] = this.chord;
            }
            if (this.color) {
                clone["color"] = this.color;
            }
            if (this.noteType) {
                clone["noteType"] = this.noteType;
            }
            if (this.timeModification) {
                clone["timeModification"] = this.timeModification;
            }
            for (var key in this) {
                if (this.hasOwnProperty(key) && key[0] !== "_" && !!this[key]) {
                    clone[key] = this[key];
                }
            }
            return clone;
        };
        Object.defineProperty(MNote.prototype, "chord", {
            get: function () {
                return this._idx + 1 !== this._parent.chord.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MNote.prototype, "pitch", {
            get: function () {
                return this._parent.isRest ? null : this._parent.chord[this._idx];
            },
            set: function (pitch) {
                this._parent.chord[this._idx].alter = pitch.alter;
                this._parent.chord[this._idx].step = pitch.step;
                this._parent.chord[this._idx].octave = pitch.octave;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MNote.prototype, "rest", {
            get: function () {
                return this._parent.isRest ? {
                    measure: this._parent.isWholebar,
                    displayStep: null,
                    displayOctave: null
                } : null;
            },
            set: function (rest) {
                this._parent.isRest = !!rest;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MNote.prototype, "dots", {
            get: function () {
                return _.times(this._parent.dots, function (idx) { return {}; });
            },
            set: function (dots) {
                this._parent.dots = dots.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MNote.prototype, "noteType", {
            get: function () {
                return {
                    duration: this._parent.count,
                    size: 1 /* Full */
                };
            },
            set: function (type) {
                this._parent.count = type.duration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MNote.prototype, "timeModification", {
            get: function () {
                return this._parent.tuplet ? {
                    normalNotes: {
                        count: this._parent.tuplet.num
                    },
                    actualNotes: {
                        count: this._parent.tuplet.den
                    },
                    normalDots: [],
                    normalType: "eighth"
                } : null;
            },
            set: function (tm) {
                this._parent.tuplet = {
                    num: tm.normalNotes.count,
                    den: tm.actualNotes.count
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MNote.prototype, "defaultX", {
            get: function () {
                return this._parent.x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MNote.prototype, "color", {
            get: function () {
                var hex = this._color.toString(16);
                return "#" + "000000".substr(0, 6 - hex.length) + hex;
            },
            set: function (a) {
                switch (true) {
                    case !a:
                        this._color = 0;
                        break;
                    case a[0] === "#":
                        a = a.slice(1);
                    default:
                        this._color = parseInt(a, 16);
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        return MNote;
    })();
    DurationModel.MNote = MNote;
})(DurationModel || (DurationModel = {}));
function _hasConflict(otherChord, step, target) {
    "use strict";
    for (var k = 0; k < otherChord.length; ++k) {
        var actual = (otherChord[k].alter !== otherChord[k].alter) ? NaN : (otherChord[k].alter || 0);
        var target = (target !== target) ? NaN : (target || 0);
        if (otherChord[k].step === step && actual !== target) {
            return true;
        }
    }
    return false;
}
var Flags;
(function (Flags) {
    Flags[Flags["TEMPORARY"] = 2 << 7] = "TEMPORARY";
    Flags[Flags["WHOLE_BAR"] = 2 << 8] = "WHOLE_BAR";
    Flags[Flags["TIE"] = 2 << 9] = "TIE";
})(Flags || (Flags = {}));
module.exports = DurationModel;

},{"./annotator":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/annotator.js","./attributes":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/attributes.js","./barline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/barline.js","./beamGroup":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/beamGroup.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./endMarker":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/endMarker.js","./keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js","./metre":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/metre.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./newline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newline.js","./timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/endMarker.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var assert = require("assert");
var C = require("./contracts");
var Metre = require("./metre");
var NewlineModel = require("./newline");
var EndMarkerModel = (function (_super) {
    __extends(EndMarkerModel, _super);
    function EndMarkerModel() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(EndMarkerModel.prototype, "visible", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EndMarkerModel.prototype, "type", {
        get: function () {
            return 110 /* EndMarker */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EndMarkerModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    EndMarkerModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext({
            attributes: mctx.attributes,
            ts: mctx.ts,
            beat: mctx.ts.beats,
            bar: mctx.bar - 1,
            endMarker: true
        });
    };
    EndMarkerModel.prototype.annotateImpl = function (ctx) {
        var next = ctx.next();
        var prev = ctx.prev();
        if (next && next.type === 110 /* EndMarker */ || prev && prev.type === 110 /* EndMarker */) {
            for (var i = ctx.idx; i >= 0; --i) {
                if (ctx.body[i].type === 130 /* NewLine */) {
                    ctx.splice(i, 1);
                    ctx.markEntireSongDirty();
                    if (ctx.songEditor) {
                        ctx.songEditor.dangerouslyMarkRendererDirty();
                    }
                    return 90 /* RetryFromEntry */;
                }
            }
            ctx.eraseCurrent();
            return 60 /* RetryLine */;
        }
        if (next && next.priority !== 300 /* Barline */ && (!ctx.body[ctx.idx + 2] || (ctx.body[ctx.idx + 2].priority !== 130 /* NewLine */ && ctx.body[ctx.idx + 2].priority !== 120 /* NewPage */))) {
            ctx.eraseCurrent();
            return 20 /* RetryCurrent */;
        }
        if (prev.type !== 300 /* Barline */ && ctx.beat && ctx.beat < ctx.ts.beats) {
            var beatsRemaining = ctx.ts.beats - ctx.beat;
            assert(beatsRemaining < ctx.ts.beats, "Don't run this on entirely blank bars!");
            var DurationModel = require("./duration");
            var toAdd = Metre.subtract(ctx.ts.beats, ctx.beat, ctx).map(function (beat) {
                beat.chord = [{ step: "R", octave: 0, alter: null }];
                beat.tie = false;
                return new DurationModel(beat, true);
            });
            ctx.splice(this.idx, 0, toAdd);
            return 60 /* RetryLine */;
        }
        if (!ctx.next() && (prev.type !== 300 /* Barline */ || prev.barStyle.data !== 5 /* LightHeavy */)) {
            if (prev.type === 300 /* Barline */) {
                prev.barStyle.data = 5 /* LightHeavy */;
                return 60 /* RetryLine */;
            }
            else {
                var BarlineModel = require("./barline");
                return BarlineModel.createBarline(ctx, 5 /* LightHeavy */);
            }
        }
        if (!ctx.next()) {
            NewlineModel.pushDownIfNeeded(ctx);
        }
        this.endMarker = true;
        return 10 /* Success */;
    };
    return EndMarkerModel;
})(Model);
module.exports = EndMarkerModel;

},{"./barline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/barline.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","./metre":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/metre.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./newline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newline.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/instruments.js":[function(require,module,exports){
var _ = require("lodash");
var C = require("./contracts");
exports.List = [
    {
        name: "Acoustic Grand Piano",
        clef: 4 /* Piano */,
        shortName: "Piano",
        soundfont: "acoustic_grand_piano",
        lilypond: "acoustic grand",
        program: 0
    },
    {
        name: "Bright Acoustic Piano",
        clef: 4 /* Piano */,
        shortName: "Piano",
        soundfont: "bright_acoustic_piano",
        lilypond: "bright acoustic",
        program: 1
    },
    {
        name: "Electric Grand Piano",
        clef: 4 /* Piano */,
        shortName: "Piano",
        soundfont: "electric_grand_piano",
        lilypond: "electric grand",
        program: 2
    },
    {
        name: "Honky-tonk Piano",
        clef: 4 /* Piano */,
        shortName: "HT Piano",
        soundfont: "honytonk_piano",
        lilypond: "honky-tonk",
        program: 3
    },
    {
        name: "Electric Piano 1",
        clef: 4 /* Piano */,
        shortName: "E Piano",
        soundfont: "electric_piano_1",
        lilypond: "electric piano 1",
        program: 4
    },
    {
        name: "Electric Piano 2",
        clef: 4 /* Piano */,
        shortName: "E Piano",
        soundfont: "electric_piano_2",
        lilypond: "electric piano 2",
        program: 5
    },
    {
        name: "Harpsichord",
        clef: 4 /* Piano */,
        shortName: "Harpsichord",
        soundfont: "harpsichord",
        lilypond: "harpsichord",
        program: 6
    },
    {
        name: "Clavi",
        clef: 4 /* Piano */,
        shortName: "Clavi",
        soundfont: "clavichord",
        lilypond: "clav",
        program: 7
    },
    {
        name: "Celesta",
        shortName: "Celesta",
        clef: 4 /* Piano */,
        soundfont: "celesta",
        lilypond: "celesta",
        program: 8
    },
    {
        name: "Glockenspiel",
        shortName: "Glockenspiel",
        clef: 0 /* Treble */,
        soundfont: "glockenspiel",
        lilypond: "glockenspiel",
        program: 9
    },
    {
        name: "Music Box",
        shortName: "Music Box",
        clef: 0 /* Treble */,
        soundfont: "music_box",
        lilypond: "music box",
        program: 10
    },
    {
        name: "Vibraphone",
        shortName: "Vibraphone",
        clef: 0 /* Treble */,
        soundfont: "vibraphone",
        lilypond: "vibraphone",
        program: 11
    },
    {
        name: "Marimba",
        shortName: "Marimba",
        clef: 4 /* Piano */,
        soundfont: "marimba",
        lilypond: "marimba",
        program: 12
    },
    {
        name: "Xylophone",
        shortName: "Xylophone",
        clef: 0 /* Treble */,
        soundfont: "xylophone",
        lilypond: "xylophone",
        program: 13
    },
    {
        name: "Tubular Bells",
        shortName: "Bells",
        clef: 0 /* Treble */,
        soundfont: "tubular_bells",
        lilypond: "tubular bells",
        program: 14
    },
    {
        name: "Dulcimer",
        shortName: "Dulcimer",
        clef: 0 /* Treble */,
        soundfont: "dulcimer",
        lilypond: "dulcimer",
        program: 15
    },
    {
        name: "Drawbar Organ",
        shortName: "Organ",
        clef: 4 /* Piano */,
        soundfont: "drawbar_organ",
        lilypond: "drawbar organ",
        program: 16
    },
    {
        name: "Percussive Organ",
        shortName: "Organ",
        clef: 4 /* Piano */,
        soundfont: "percussive_organ",
        lilypond: "percussive organ",
        program: 17
    },
    {
        name: "Rock Organ",
        shortName: "Organ",
        clef: 4 /* Piano */,
        soundfont: "rock_organ",
        lilypond: "rock organ",
        program: 18
    },
    {
        name: "Church Organ",
        shortName: "Organ",
        clef: 4 /* Piano */,
        soundfont: "church_organ",
        lilypond: "church organ",
        program: 19
    },
    {
        name: "Reed Organ",
        shortName: "Organ",
        clef: 4 /* Piano */,
        soundfont: "reed_organ",
        lilypond: "reed organ",
        program: 20
    },
    {
        name: "Accordion",
        shortName: "Accordion",
        clef: 4 /* Piano */,
        soundfont: "accordion",
        lilypond: "accordion",
        program: 21
    },
    {
        name: "Tango Accordion",
        shortName: "Accordion",
        clef: 4 /* Piano */,
        soundfont: "tango_accordion",
        lilypond: "concertina",
        program: 23
    },
    {
        name: "Harmonica",
        shortName: "Harmonica",
        clef: 0 /* Treble */,
        soundfont: "harmonica",
        lilypond: "harmonica",
        program: 22
    },
    {
        name: "Acoustic Guitar (nylon)",
        shortName: "Acc. Guitar",
        clef: 0 /* Treble */,
        soundfont: "acoustic_guitar_nylon",
        lilypond: "acoustic guitar (nylon)",
        program: 24
    },
    {
        name: "Acoustic Guitar (steel)",
        shortName: "Acc. Guitar",
        clef: 0 /* Treble */,
        soundfont: "acoustic_guitar_steel",
        lilypond: "acoustic guitar (steel)",
        program: 25
    },
    {
        name: "Electric Guitar (jazz)",
        shortName: "E Guitar",
        clef: 0 /* Treble */,
        soundfont: "acoustic_guitar_jazz",
        lilypond: "acoustic guitar (jazz)",
        program: 26
    },
    {
        name: "Electric Guitar (clean)",
        shortName: "E Guitar",
        clef: 0 /* Treble */,
        soundfont: "electric_guitar_clean",
        lilypond: "acoustic guitar (clean)",
        program: 27
    },
    {
        name: "Electric Guitar (muted)",
        shortName: "E Guitar",
        clef: 0 /* Treble */,
        soundfont: "electric_guitar_muted",
        lilypond: "acoustic guitar (muted)",
        program: 28
    },
    {
        name: "Overdriven Guitar",
        shortName: "E Guitar",
        clef: 0 /* Treble */,
        soundfont: "overdriven_guitar",
        lilypond: "overdriven guitar",
        program: 29
    },
    {
        name: "Distortion Guitar",
        shortName: "E Guitar",
        clef: 0 /* Treble */,
        soundfont: "distortion_guitar",
        lilypond: "distortion guitar",
        program: 30
    },
    {
        name: "Guitar harmonics",
        shortName: "Guitar Harm.",
        clef: 0 /* Treble */,
        soundfont: "guitar_harmonics",
        lilypond: "guitar harmonics",
        program: 31
    },
    {
        name: "Acoustic Bass",
        shortName: "Bass",
        clef: 1 /* Bass */,
        soundfont: "acoustic_bass",
        lilypond: "acoustic bass",
        program: 32
    },
    {
        name: "Electric Bass (finger)",
        shortName: "E. Bass",
        clef: 1 /* Bass */,
        soundfont: "electric_bass_finger",
        lilypond: "electric bass (finger)",
        program: 33
    },
    {
        name: "Electric Bass (pick)",
        shortName: "E. Bass",
        clef: 1 /* Bass */,
        soundfont: "electric_bass_pick",
        lilypond: "electric bass (pick)",
        program: 34
    },
    {
        name: "Fretless Bass",
        shortName: "Fretless Bass",
        clef: 1 /* Bass */,
        soundfont: "fretless_bass",
        lilypond: "fretless bass",
        program: 35
    },
    {
        name: "Slap Bass 1",
        shortName: "Slap Bass",
        clef: 1 /* Bass */,
        soundfont: "slap_bass_1",
        lilypond: "slap bass 1",
        program: 36
    },
    {
        name: "Slap Bass 2",
        shortName: "Slap Bass",
        clef: 1 /* Bass */,
        soundfont: "slap_bass_2",
        lilypond: "slap bass 2",
        program: 37
    },
    {
        name: "Synth Bass 1",
        shortName: "Synth Bass",
        clef: 1 /* Bass */,
        soundfont: "synth_bass_1",
        lilypond: "synth bass 1",
        program: 38
    },
    {
        name: "Synth Bass 2",
        shortName: "Synth Bass",
        clef: 1 /* Bass */,
        soundfont: "synth_bass_2",
        lilypond: "synth bass 2",
        program: 39
    },
    {
        name: "Violin",
        shortName: "Violin",
        clef: 0 /* Treble */,
        soundfont: "violin",
        lilypond: "violin",
        program: 40
    },
    {
        name: "Viola",
        shortName: "Viola",
        clef: 2 /* Alto */,
        soundfont: "viola",
        lilypond: "viola",
        program: 41
    },
    {
        name: "Cello",
        shortName: "Cello",
        clef: 1 /* Bass */,
        soundfont: "cello",
        lilypond: "cello",
        program: 42
    },
    {
        name: "Contrabass",
        shortName: "Bass",
        clef: 1 /* Bass */,
        soundfont: "contrabass",
        lilypond: "contrabass",
        program: 43
    },
    {
        name: "Tremolo Strings",
        shortName: "Strings",
        clef: 5 /* Choral */,
        soundfont: "tremolo_strings",
        lilypond: "tremolo strings",
        program: 44
    },
    {
        name: "Pizzicato Strings",
        shortName: "Pizz. Strings",
        clef: 5 /* Choral */,
        soundfont: "pizzicato_strings",
        lilypond: "pizzicato strings",
        program: 45
    },
    {
        name: "Orchestral Harp",
        shortName: "Harp",
        clef: 4 /* Piano */,
        soundfont: "orchestral_harp",
        lilypond: "orchestral harp",
        program: 46
    },
    {
        name: "Timpani",
        shortName: "Timpani",
        clef: 1 /* Bass */,
        soundfont: "timpani",
        lilypond: "timpani",
        program: 47
    },
    {
        name: "String Ensemble 1",
        shortName: "Strings",
        clef: 4 /* Piano */,
        soundfont: "string_ensemble_1",
        lilypond: "string ensemble 1",
        program: 48
    },
    {
        name: "String Ensemble 2",
        shortName: "Strings",
        clef: 4 /* Piano */,
        soundfont: "string_ensemble_2",
        lilypond: "string ensemble 2",
        program: 49
    },
    {
        name: "SynthStrings 1",
        shortName: "Synth Strings",
        clef: 4 /* Piano */,
        soundfont: "synthstrings_1",
        lilypond: "synthstrings 1",
        program: 50
    },
    {
        name: "SynthStrings 2",
        shortName: "Synth Strings",
        clef: 4 /* Piano */,
        soundfont: "synthstrings_2",
        lilypond: "synthstrings 2",
        program: 51
    },
    {
        name: "Choir Aahs",
        shortName: "Choir",
        clef: 5 /* Choral */,
        soundfont: "choir_aahs",
        lilypond: "choir aahs",
        program: 52
    },
    {
        name: "Voice Oohs",
        shortName: "Choir",
        clef: 5 /* Choral */,
        soundfont: "voice_oohs",
        lilypond: "voice oohs",
        program: 53
    },
    {
        name: "Synth Voice",
        shortName: "Voice",
        clef: 5 /* Choral */,
        soundfont: "synth_voice",
        lilypond: "synth voice",
        program: 54
    },
    {
        name: "Orchestra Hit",
        shortName: "Orch. Hit",
        clef: 4 /* Piano */,
        soundfont: "orchestra_hit",
        lilypond: "orchestra hit",
        program: 55
    },
    {
        name: "Trumpet",
        shortName: "Trumpet",
        clef: 0 /* Treble */,
        soundfont: "trumpet",
        lilypond: "trumpet",
        program: 56
    },
    {
        name: "Muted Trumpet",
        shortName: "Muted Trumpet",
        clef: 0 /* Treble */,
        soundfont: "muted_trumpet",
        lilypond: "muted trumpet",
        program: 59
    },
    {
        name: "Trombone",
        shortName: "Trombone",
        clef: 1 /* Bass */,
        soundfont: "trombone",
        lilypond: "trombone",
        program: 57
    },
    {
        name: "Tenor Trombone",
        shortName: "Tnr. Trbne.",
        clef: 3 /* Tenor */,
        soundfont: "trombone",
        lilypond: "trombone<tenor>",
        program: 57
    },
    {
        name: "Tuba",
        shortName: "Tuba",
        clef: 1 /* Bass */,
        soundfont: "tuba",
        lilypond: "tuba",
        program: 58
    },
    {
        name: "French Horn",
        shortName: "F. Horn",
        clef: 0 /* Treble */,
        soundfont: "french_horn",
        lilypond: "french horn",
        program: 60
    },
    {
        name: "French Horn (Bass)",
        shortName: "Bs. F. Horn",
        clef: 1 /* Bass */,
        soundfont: "french_horn",
        lilypond: "french horn<bass>",
        program: 60
    },
    {
        name: "Brass Section",
        shortName: "Brass",
        clef: 5 /* Choral */,
        soundfont: "brass_section",
        lilypond: "brass section",
        program: 61
    },
    {
        name: "SynthBrass 1",
        shortName: "Synth Brass",
        clef: 4 /* Piano */,
        soundfont: "synthbrass_1",
        lilypond: "synthbrass 1",
        program: 62
    },
    {
        name: "SynthBrass 2",
        shortName: "Synth Brass",
        clef: 4 /* Piano */,
        soundfont: "synthbrass_2",
        lilypond: "synthbrass 2",
        program: 63
    },
    {
        name: "Soprano Sax",
        shortName: "S. Sax",
        clef: 0 /* Treble */,
        soundfont: "soprano_sax",
        lilypond: "soprano sax",
        program: 64
    },
    {
        name: "Alto Sax",
        shortName: "A. Sax",
        clef: 0 /* Treble */,
        soundfont: "alto_sax",
        lilypond: "alto sax",
        program: 65
    },
    {
        name: "Tenor Sax",
        shortName: "T. Sax",
        clef: 0 /* Treble */,
        soundfont: "tenor_sax",
        lilypond: "tenor sax",
        program: 66
    },
    {
        name: "Baritone Sax",
        shortName: "B. Sax",
        clef: 0 /* Treble */,
        soundfont: "baritone_sax",
        lilypond: "baritone sax",
        program: 67
    },
    {
        name: "Oboe",
        shortName: "Oboe",
        clef: 0 /* Treble */,
        soundfont: "oboe",
        lilypond: "oboe",
        program: 68
    },
    {
        name: "English Horn",
        shortName: "E. Horn",
        clef: 0 /* Treble */,
        soundfont: "english_horn",
        lilypond: "english horn",
        program: 69
    },
    {
        name: "Bassoon",
        shortName: "Bassoon",
        clef: 1 /* Bass */,
        soundfont: "bassoon",
        lilypond: "bassoon",
        program: 70
    },
    {
        name: "Bassoon (tenor)",
        shortName: "Bassoon",
        clef: 3 /* Tenor */,
        soundfont: "bassoon",
        lilypond: "bassoon",
        program: 70
    },
    {
        name: "Clarinet",
        shortName: "Clarinet",
        clef: 0 /* Treble */,
        soundfont: "clarinet",
        lilypond: "clarinet",
        program: 71
    },
    {
        name: "Bass Clarinet",
        shortName: "B. Clarinet",
        clef: 1 /* Bass */,
        soundfont: "clarinet",
        lilypond: "clarinet",
        program: 71
    },
    {
        name: "Piccolo",
        shortName: "Piccolo",
        clef: 0 /* Treble */,
        soundfont: "piccolo",
        lilypond: "piccolo",
        program: 72
    },
    {
        name: "Flute",
        shortName: "Flute",
        clef: 0 /* Treble */,
        soundfont: "flute",
        lilypond: "flute",
        program: 73
    },
    {
        name: "Recorder",
        shortName: "Recorder",
        clef: 0 /* Treble */,
        soundfont: "recorder",
        lilypond: "recorder",
        program: 74
    },
    {
        name: "Pan Flute",
        shortName: "Pan Flute",
        clef: 0 /* Treble */,
        soundfont: "pan_flute",
        lilypond: "pan flute",
        program: 75
    },
    {
        name: "Blown Bottle",
        shortName: "Bottle",
        clef: 0 /* Treble */,
        soundfont: "blown_bottle",
        lilypond: "blown bottle",
        program: 76
    },
    {
        name: "Shakuhachi",
        shortName: "Shakuhachi",
        clef: 0 /* Treble */,
        soundfont: "shakuhachi",
        lilypond: "shakuhachi",
        program: 77
    },
    {
        name: "Whistle",
        shortName: "Whistle",
        clef: 0 /* Treble */,
        soundfont: "whistle",
        lilypond: "whistle",
        program: 78
    },
    {
        name: "Ocarina",
        shortName: "Ocarina",
        clef: 0 /* Treble */,
        soundfont: "ocarina",
        lilypond: "ocarina",
        program: 79
    },
    {
        name: "Lead 1 (square)",
        shortName: "Square",
        clef: 0 /* Treble */,
        soundfont: "lead_1_square",
        lilypond: "lead 1 (square)",
        program: 80
    },
    {
        name: "Lead 2 (sawtooth)",
        shortName: "Sawtooth",
        clef: 0 /* Treble */,
        soundfont: "lead_2_sawtooth",
        lilypond: "lead 2 (sawtooth)",
        program: 81
    },
    {
        name: "Lead 3 (calliope)",
        shortName: "Calliope",
        clef: 0 /* Treble */,
        soundfont: "lead_3_calliope",
        lilypond: "lead 3 (calliope)",
        program: 82
    },
    {
        name: "Lead 4 (chiff)",
        shortName: "Chiff",
        clef: 0 /* Treble */,
        soundfont: "lead_4_chiff",
        lilypond: "lead 4 (chiff)",
        program: 83
    },
    {
        name: "Lead 5 (charang)",
        shortName: "Charang",
        clef: 0 /* Treble */,
        soundfont: "lead_5_charang",
        lilypond: "lead 5 (charang)",
        program: 84
    },
    {
        name: "Lead 6 (voice)",
        shortName: "Voice",
        clef: 0 /* Treble */,
        soundfont: "lead_6_voice",
        lilypond: "lead 6 (voice)",
        program: 85
    },
    {
        name: "Lead 7 (fifths)",
        shortName: "Fifths",
        clef: 0 /* Treble */,
        soundfont: "lead_7_fifths",
        lilypond: "lead 7 (fifths)",
        program: 86
    },
    {
        name: "Lead 8 (bass + lead)",
        shortName: "Bass+Lead",
        clef: 0 /* Treble */,
        soundfont: "lead_8_bass_lead",
        lilypond: "lead 8 (bass+lead)",
        program: 87
    },
    {
        name: "Pad 1 (new age)",
        shortName: "Pad 1",
        clef: 4 /* Piano */,
        soundfont: "pad_1_new_age",
        lilypond: "pad 1 (new age)",
        program: 88
    },
    {
        name: "Pad 2 (warm)",
        shortName: "Pad 2",
        clef: 4 /* Piano */,
        soundfont: "pad_2_warm",
        lilypond: "pad 2 (warm)",
        program: 89
    },
    {
        name: "Pad 3 (polysynth)",
        shortName: "Pad 3",
        clef: 4 /* Piano */,
        soundfont: "pad_3_polysynth",
        lilypond: "pad 3 (polysynth)",
        program: 90
    },
    {
        name: "Pad 4 (choir)",
        shortName: "Pad 4",
        clef: 4 /* Piano */,
        soundfont: "pad_4_choir",
        lilypond: "pad 4 (choir)",
        program: 91
    },
    {
        name: "Pad 5 (bowed)",
        shortName: "Pad 5",
        clef: 4 /* Piano */,
        soundfont: "pad_5_bowed",
        lilypond: "pad 5 (bowed)",
        program: 92
    },
    {
        name: "Pad 6 (metallic)",
        shortName: "Pad y",
        clef: 4 /* Piano */,
        soundfont: "pad_6_metallic",
        lilypond: "pad 6 (metallic)",
        program: 93
    },
    {
        name: "Pad 7 (halo)",
        shortName: "Pad 7",
        clef: 4 /* Piano */,
        soundfont: "pad_7_halo",
        lilypond: "pad 7 (halo)",
        program: 94
    },
    {
        name: "Pad 8 (sweep)",
        shortName: "Pad 8",
        clef: 4 /* Piano */,
        soundfont: "pad_8_sweep",
        lilypond: "pad 8 (sweep)",
        program: 95
    },
    {
        name: "FX 1 (rain)",
        shortName: "FX 1",
        clef: 0 /* Treble */,
        soundfont: "fx_1_rain",
        lilypond: "fx 1 (rain)",
        program: 96
    },
    {
        name: "FX 2 (soundtrack)",
        shortName: "FX 2",
        clef: 0 /* Treble */,
        soundfont: "fx_2_soundtrack",
        lilypond: "fx 2 (soundtrack)",
        program: 97
    },
    {
        name: "FX 3 (crystal)",
        shortName: "FX 3",
        clef: 0 /* Treble */,
        soundfont: "fx_3_crystal",
        lilypond: "fx 3 (crystal)",
        program: 98
    },
    {
        name: "FX 4 (atmosphere)",
        shortName: "FX 4",
        soundfont: "fx_4_atmosphere",
        lilypond: "fx 4 (atmosphere)",
        clef: 0 /* Treble */,
        program: 99
    },
    {
        name: "FX 5 (brightness)",
        shortName: "FX 5",
        soundfont: "fx_5_brightness",
        lilypond: "fx 5 (brightness)",
        clef: 0 /* Treble */,
        program: 100
    },
    {
        name: "FX 6 (goblins)",
        shortName: "FX 6",
        soundfont: "fx_6_goblins",
        lilypond: "fx 6 (goblins)",
        clef: 0 /* Treble */,
        program: 101
    },
    {
        name: "FX 7 (echoes)",
        shortName: "FX 7",
        soundfont: "fx_7_echoes",
        lilypond: "fx 7 (echoes)",
        clef: 0 /* Treble */,
        program: 102
    },
    {
        name: "FX 8 (sci-fi)",
        shortName: "FX 8",
        soundfont: "fx_8_scifi",
        lilypond: "fx 8 (scifi)",
        clef: 0 /* Treble */,
        program: 103
    },
    {
        name: "Sitar",
        shortName: "Sitar",
        soundfont: "sitar",
        lilypond: "sitar",
        clef: 0 /* Treble */,
        program: 104
    },
    {
        name: "Banjo",
        soundfont: "banjo",
        shortName: "Banjo",
        lilypond: "banjo",
        clef: 0 /* Treble */,
        program: 105
    },
    {
        name: "Shamisen",
        shortName: "Shamisen",
        soundfont: "shamisen",
        lilypond: "shamisen",
        clef: 0 /* Treble */,
        program: 106
    },
    {
        name: "Koto",
        shortName: "Koto",
        soundfont: "koto",
        lilypond: "koto",
        clef: 0 /* Treble */,
        program: 107
    },
    {
        name: "Kalimba",
        shortName: "Kalimba",
        soundfont: "kalimba",
        lilypond: "kalimba",
        clef: 0 /* Treble */,
        program: 108
    },
    {
        name: "Bag pipe",
        shortName: "Bag Pipe",
        soundfont: "bag_pipe",
        lilypond: "bagpipe",
        clef: 0 /* Treble */,
        program: 109
    },
    {
        name: "Fiddle",
        shortName: "Fiddle",
        soundfont: "fiddle",
        lilypond: "fiddle",
        clef: 0 /* Treble */,
        program: 110
    },
    {
        name: "Shanai",
        shortName: "Shanai",
        soundfont: "shanai",
        lilypond: "shanai",
        clef: 0 /* Treble */,
        program: 111
    },
    {
        name: "Tinkle Bell",
        shortName: "Tl. Bell",
        soundfont: "tinkle_bell",
        lilypond: "tinkle bell",
        clef: 0 /* Treble */,
        program: 112
    },
    {
        name: "Agogo",
        shortName: "Agogo",
        soundfont: "agogo",
        lilypond: "agogo",
        clef: 6 /* TrebleDrums */,
        program: 113
    },
    {
        name: "Steel Drums",
        shortName: "Steel Drums",
        soundfont: "steel_drums",
        lilypond: "steel drums",
        clef: 0 /* Treble */,
        program: 114
    },
    {
        name: "Woodblock",
        shortName: "Woodblock",
        soundfont: "woodblock",
        lilypond: "woodblock",
        clef: 6 /* TrebleDrums */,
        program: 115
    },
    {
        name: "Taiko Drum",
        shortName: "Taiko Drum",
        soundfont: "taiko_drum",
        lilypond: "taiko drum",
        clef: 6 /* TrebleDrums */,
        program: 116
    },
    {
        name: "Melodic Tom",
        shortName: "Melodic Tom",
        soundfont: "melodic_tom",
        lilypond: "melodic tom",
        clef: 0 /* Treble */,
        program: 117
    },
    {
        name: "Synth Drum",
        shortName: "Synth Drum",
        soundfont: "synth_drum",
        lilypond: "synth drum",
        clef: 6 /* TrebleDrums */,
        program: 118
    },
    {
        name: "Reverse Cymbal",
        shortName: "Reverse Cymbal",
        soundfont: "reverse_cymbal",
        lilypond: "reverse cymbal",
        clef: 6 /* TrebleDrums */,
        program: 119
    },
    {
        name: "Guitar Fret Noise",
        shortName: "Guitar Fret",
        soundfont: "guitar_fret_noise",
        lilypond: "guitar fret noise",
        clef: 6 /* TrebleDrums */,
        program: 120
    },
    {
        name: "Breath Noise",
        shortName: "Breath",
        soundfont: "breath_noise",
        lilypond: "breath noise",
        clef: 6 /* TrebleDrums */,
        program: 121
    },
    {
        name: "Seashore",
        shortName: "Seashore",
        soundfont: "seashore",
        lilypond: "seashore",
        clef: 6 /* TrebleDrums */,
        program: 122
    },
    {
        name: "Bird Tweet",
        shortName: "Tweet",
        soundfont: "bird_tweet",
        lilypond: "bird tweet",
        clef: 6 /* TrebleDrums */,
        program: 123
    },
    {
        name: "Telephone Ring",
        shortName: "Telephone",
        soundfont: "telephone_ring",
        lilypond: "telephone ring",
        clef: 6 /* TrebleDrums */,
        program: 124
    },
    {
        name: "Helicopter",
        shortName: "Helicopter",
        soundfont: "helicopter",
        lilypond: "helicopter",
        clef: 6 /* TrebleDrums */,
        program: 125
    },
    {
        name: "Applause",
        shortName: "Applause",
        clef: 6 /* TrebleDrums */,
        soundfont: "applause",
        lilypond: "applause",
        program: 126
    },
    {
        name: "Gunshot",
        shortName: "Gunshot",
        clef: 6 /* TrebleDrums */,
        soundfont: "gunshot",
        lilypond: "gunshot",
        program: 127
    }
];
exports.byLilypondName = _.indexBy(exports.List, "lilypond");
exports.soundfontToProgram = _.reduce(_.indexBy(exports.List, "soundfont"), function (memo, obj, soundfont) {
    memo[soundfont] = obj.program;
    return memo;
}, {});

},{"./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var assert = require("assert");
var C = require("./contracts");
var ClefModel = require("./clef");
var KeySignatureModel = (function (_super) {
    __extends(KeySignatureModel, _super);
    function KeySignatureModel(spec, annotated) {
        _super.call(this, spec, annotated);
        if (spec.clef) {
            this.clef = spec.clef;
        }
        this.locked = spec.locked === true;
    }
    Object.defineProperty(KeySignatureModel.prototype, "type", {
        get: function () {
            return 160 /* KeySignature */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeySignatureModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeySignatureModel.prototype, "fields", {
        get: function () {
            return [
                "cancel",
                "keySteps",
                "keyOctaves",
                "number_",
                "fifths",
                "keyAlters",
                "keyAccidentals",
                "mode",
                "defaultX",
                "relativeY",
                "defaultY",
                "relativeX",
                "fontFamily",
                "fontWeight",
                "fontStyle",
                "fontSize",
                "color",
                "printObject"
            ];
        },
        enumerable: true,
        configurable: true
    });
    KeySignatureModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    KeySignatureModel.prototype.annotateImpl = function (ctx) {
        if (!ctx.attributes.clef) {
            return ClefModel.createClef(ctx);
        }
        this.clef = ctx.attributes.clef;
        assert(this.clef instanceof Object);
        var intersectingNotes = _.filter(ctx.intersects(600 /* Duration */), function (l) { return l.isNote; });
        ctx.attributes.keySignature = this;
        ctx.accidentalsByStave[ctx.currStaveIdx] = C.NoteUtil.getAccidentals(this);
        if (intersectingNotes.length) {
            if (_.any(intersectingNotes, function (n) { return n.containsAccidentalAfterBarline(ctx); })) {
                console.log("!");
                this._annotatedSpacing = 25;
            }
            else {
                this._annotatedSpacing = 15;
            }
        }
        else {
            this._annotatedSpacing = 10;
        }
        var c = Math.abs(this.fifths);
        if (c) {
            ctx.x += this._annotatedSpacing + 10.4 * c;
        }
        else {
            ctx.x += this._annotatedSpacing - 5;
        }
        switch (true) {
            case this.temporary:
                this.color = "#A5A5A5";
                break;
            case this.selected:
                this.color = "#75A1D0";
                break;
            default:
                this.color = "#000000";
                break;
        }
        return 10 /* Success */;
    };
    KeySignatureModel.createKeySignature = function (ctx) {
        var keySignature = ctx.prev(function (c) { return c.type === 160 /* KeySignature */; });
        return ctx.insertPast(new KeySignatureModel(keySignature, true));
    };
    return KeySignatureModel;
})(Model.StateChangeModel);
module.exports = KeySignatureModel;

},{"./clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/metre.js":[function(require,module,exports){
var assert = require("assert");
var _ = require("lodash");
var C = require("./contracts");
var Annotator = require("./annotator");
function rhythmicSpellcheck(ctx) {
    "use strict";
    var DurationModel = require("./duration");
    if (!ctx.curr.isNote) {
        return 10 /* Success */;
    }
    if (ctx.curr.calcBeats(ctx) + ctx.beat > ctx.ts.beats) {
        return 10 /* Success */;
    }
    var pattern = beamingPatterns[getTSString(ctx.ts)];
    assert(pattern, "Unknown beaming pattern");
    var currNote = ctx.curr.note;
    var currNoteStartBeat = ctx.beat;
    var currNoteEndBeat = currNoteStartBeat + calcBeats2(currNote, ctx);
    var nextIdx = ctx.nextIdx(function (c) { return c.type === 600 /* Duration */ || c.priority === 300 /* Barline */; });
    var nextObj = ctx.body[nextIdx];
    var nextNote = nextObj && nextObj.isNote ? nextObj.note : null;
    var nextEquivNote = nextIdx < ctx.body.length && currNote && nextNote && !currNote.tuplet && !nextNote.tuplet && (currNote.isRest && nextObj.isRest || nextObj.isNote && currNote.tie ? nextObj.note : null);
    if (currNote.tuplet && (!nextNote || !nextNote.tuplet)) {
        var base = 1;
        var partial = 0;
        for (var i = ctx.idx; ctx.body[i] && ctx.body[i].type !== 300 /* Barline */ && isTupletIfNote(ctx.body[i]); --i) {
            if (ctx.body[i].isNote) {
                partial = (partial + ctx.body[i].calcBeats(ctx)) % base;
            }
        }
        if (partial) {
            var toRestoreUntuplet = (base - partial) * currNote.tuplet.den / currNote.tuplet.num;
            var toAdd = subtract(toRestoreUntuplet, 0, ctx, -ctx.beat).map(function (m) { return new DurationModel(m, true); });
            for (var i = 0; i < toAdd.length; ++i) {
                toAdd[i].tuplet = C.JSONx.clone(currNote.tuplet);
                toAdd[i].isRest = true;
            }
            ctx.splice(ctx.idx + 1, 0, toAdd, 3 /* Masked */);
            return 60 /* RetryLine */;
        }
    }
    if (!ctx.curr.annotated) {
        return 10 /* Success */;
    }
    var excessBeats = 0;
    var patternStartBeat = 0;
    for (var p = 0; p < pattern.length; ++p) {
        var patternEndBeat = patternStartBeat + calcBeats2(pattern[p], ctx);
        if (currNoteStartBeat > patternStartBeat && currNoteEndBeat > patternEndBeat && currNoteStartBeat < patternEndBeat) {
            excessBeats = currNoteEndBeat - patternEndBeat;
            break;
        }
        patternStartBeat = patternEndBeat;
    }
    if (excessBeats > 0) {
        return clearExcessBeats(currNote, excessBeats, ctx);
    }
    if (nextEquivNote) {
        var nextNoteEndBeat = currNoteStartBeat + calcBeats2(nextNote, ctx);
        patternStartBeat = 0;
        for (var p = 0; p < pattern.length; ++p) {
            var patternEndBeat = patternStartBeat + calcBeats2(pattern[p], ctx);
            if (currNoteStartBeat >= patternStartBeat && currNoteEndBeat < patternEndBeat && nextNoteEndBeat <= patternEndBeat + 0.0000001) {
                if (tryMerge(currNote, nextObj, nextIdx, ctx)) {
                    return 60 /* RetryLine */;
                }
            }
            patternStartBeat = patternEndBeat;
        }
    }
    if (nextEquivNote) {
        var nextNoteEndBeat = currNoteStartBeat + calcBeats2(nextNote, ctx);
        patternStartBeat = 0;
        var gotFirstNote = false;
        for (var p = 0; p < pattern.length; ++p) {
            var patternEndBeat = patternStartBeat + calcBeats2(pattern[p], ctx);
            if (!gotFirstNote) {
                if (currNoteStartBeat > patternStartBeat) {
                    break;
                }
                else if (currNoteStartBeat === patternStartBeat) {
                    gotFirstNote = true;
                    continue;
                }
            }
            else {
                if (nextNoteEndBeat > patternEndBeat) {
                    break;
                }
                else if (currNoteEndBeat === patternEndBeat) {
                    if (tryMerge(currNote, nextObj, nextIdx, ctx)) {
                        return 20 /* RetryCurrent */;
                    }
                    break;
                }
            }
            patternStartBeat = patternEndBeat;
        }
    }
    return 10 /* Success */;
}
exports.rhythmicSpellcheck = rhythmicSpellcheck;
;
function isTupletIfNote(model) {
    "use strict";
    return !model.isNote || !!model.note.tuplet;
}
function tryMerge(currNote, nextObj, nextIdx, ctx) {
    "use strict";
    if (nextObj.inBeam) {
        return false;
    }
    var replaceWithMaybe = add(currNote, nextObj.note, ctx);
    if (replaceWithMaybe.length !== 1) {
        return false;
    }
    var spec = replaceWithMaybe[0];
    currNote.count = spec.count;
    currNote.dots = spec.dots;
    currNote.tuplet = spec.tuplet;
    ctx.splice(nextIdx, 1, null);
    return true;
}
function clearExcessBeats(currNote, excessBeats, ctx) {
    "use strict";
    var nextIdx = ctx.nextIdx(function (c) { return !c.placeholder; });
    var replaceWith = subtract(currNote, excessBeats, ctx).concat(subtract(currNote, calcBeats2(currNote, ctx) - excessBeats, ctx, calcBeats2(currNote, ctx) - excessBeats));
    replaceWith.forEach(function (m) {
        m.chord = C.JSONx.clone(currNote.chord);
    });
    var DurationModel = require("./duration");
    ctx.splice(ctx.idx, nextIdx - ctx.idx, replaceWith.map(function (m) { return new DurationModel(m, true); }), 3 /* Masked */);
    var after = ctx.idx + replaceWith.length;
    if (!currNote.isRest) {
        for (var i = ctx.idx; i < after - 1; ++i) {
            ctx.body[i].note.tie = true;
        }
    }
    return 60 /* RetryLine */;
}
function getTSString(ts) {
    "use strict";
    return ts.beats + "/" + ts.beatType;
}
exports.getTSString = getTSString;
function add(durr1, durr2, ctx, beatOffset) {
    "use strict";
    return subtract((isNaN(durr1) ? calcBeats2(durr1, ctx) : durr1) + calcBeats2(durr2, ctx), 0, ctx, beatOffset);
}
exports.add = add;
function subtract(durr1, beats, ctx, beatOffset) {
    "use strict";
    var tsName = getTSString(ctx.ts);
    var replaceWith = [];
    var durr1Beats = isNaN(durr1) ? calcBeats2(durr1, ctx) : durr1;
    var beatsToFill = durr1Beats - beats;
    var bp = beamingPatterns[tsName];
    var currBeat = (ctx.beat + (beatOffset || 0)) % ctx.ts.beats;
    for (var tries = 0; tries < 20; ++tries) {
        var bpIdx = 0;
        var bpCount = 0;
        while (bp[bpIdx] && bpCount + calcBeats(bp[bpIdx].count, bp[bpIdx].dots, null, ctx.ts) <= currBeat) {
            ++bpIdx;
            if (!bp[bpIdx]) {
                return replaceWith;
            }
            bpCount += calcBeats(bp[bpIdx].count, bp[bpIdx].dots, null, ctx.ts);
        }
        if (beatsToFill <= 0) {
            return replaceWith;
        }
        _.any(allNotes, function (note) {
            var noteBeats = calcBeats(note.count, note.dots, null, ctx.ts);
            if (noteBeats <= beatsToFill) {
                var completelyFills = false;
                var tmpBeats = currBeat + noteBeats;
                for (var i = 0; bp[bpIdx + i]; ++i) {
                    if (tmpBeats < 0) {
                        break;
                    }
                    var bpBeats = calcBeats(bp[bpIdx + i].count, bp[bpIdx + i].dots, null, ctx.ts);
                    if (tmpBeats === bpBeats) {
                        completelyFills = true;
                        break;
                    }
                    tmpBeats -= bpBeats;
                }
                if (completelyFills || (i - bpIdx <= 1)) {
                    replaceWith.push(_.clone(note));
                    beatsToFill -= noteBeats;
                    currBeat += noteBeats;
                    return true;
                }
            }
        });
    }
    throw new C.InvalidDurationError();
}
exports.subtract = subtract;
function rebeamable(idx, ctx, alt) {
    "use strict";
    var body = ctx.body;
    var tsName = getTSString(ctx.ts) + (alt ? "_" + alt : "");
    var replaceWith = [];
    var bp = beamingPatterns[tsName];
    var currBeat = ctx.beat;
    var bpIdx = 0;
    var bpCount = 0;
    while (bp[bpIdx] && bpCount + calcBeats(bp[bpIdx].count, bp[bpIdx].dots, null, ctx.ts) <= currBeat) {
        ++bpIdx;
        if (!bp[bpIdx]) {
            return replaceWith;
        }
        bpCount += calcBeats(bp[bpIdx].count, bp[bpIdx].dots, null, ctx.ts);
    }
    var needsReplacement = false;
    var prevCount;
    var prevInBeam = true;
    var foundNote = false;
    var tuplet;
    for (var i = idx; body[i] && !body[i].endMarker; ++i) {
        if (body[i].type === 450 /* BeamGroup */) {
            if (idx !== i) {
                needsReplacement = true;
            }
        }
        else if (body[i].isNote) {
            if (!!tuplet !== !!body[i].note.tuplet && foundNote) {
                break;
            }
            foundNote = true;
            tuplet = body[i].note.tuplet;
            prevCount = body[i].note.count || prevCount;
            if (!body[i].note.hasFlagOrBeam || body[i].note.temporary) {
                break;
            }
            if (tsName === "4/4" && body[i].note.count >= 16 || tsName === "2/4" && body[i].note.count >= 8) {
                var alternativeOption = rebeamable(idx, ctx, "clean");
                if (alternativeOption) {
                    return alternativeOption;
                }
                else {
                    return null;
                }
            }
            var bBeats = calcBeats2(body[i].note, ctx, prevCount);
            var bpBeats = calcBeats(bp[bpIdx].count, bp[bpIdx].dots, null, ctx.ts);
            currBeat += bBeats;
            if (currBeat > bpCount + bpBeats) {
                break;
            }
            if (prevInBeam && !body[i].inBeam) {
                needsReplacement = true;
                prevInBeam = false;
            }
            assert(body[i].isNote);
            replaceWith.push(body[i]);
            if (currBeat === bpCount + bpBeats) {
                break;
            }
        }
    }
    if (needsReplacement && replaceWith.length) {
        var first = replaceWith[0];
        var last = replaceWith[replaceWith.length - 1];
        if (tsName.indexOf("/4") !== -1) {
            while (((first.ctxData.beat % 1) !== 0 || (last.ctxData.beat % 1) === 0) && Math.floor(first.ctxData.beat) !== Math.floor(last.ctxData.beat)) {
                replaceWith.pop();
                last = replaceWith[replaceWith.length - 1];
            }
        }
        return replaceWith.length > 1 ? replaceWith : null;
    }
    return null;
}
exports.rebeamable = rebeamable;
function calcBeats2(durr, ctx, inheritedCount) {
    "use strict";
    if (inheritedCount === void 0) { inheritedCount = NaN; }
    return calcBeats(durr.count || inheritedCount, durr.dots, durr.tuplet, ctx.ts);
}
exports.calcBeats2 = calcBeats2;
function calcBeats(count, dots, tuplet, ts) {
    "use strict";
    assert(ts, "Not supplying a ts is deprecated");
    var base = ts.beatType / count;
    if (tuplet) {
        base *= tuplet.num / tuplet.den;
    }
    var total = base;
    for (var i = 0; i < dots; ++i) {
        base /= 2;
        total += base;
    }
    return total;
}
exports.calcBeats = calcBeats;
;
function wholeNote(ctx) {
    "use strict";
    var tsName = getTSString(ctx.ts);
    return wholeNotePatterns[tsName];
}
exports.wholeNote = wholeNote;
function correctRoundingErrors(mctx) {
    "use strict";
    var huge = 10000000;
    var rounded = Math.round(mctx.beat * huge) / huge;
    if (Math.abs(rounded - mctx.beat) < 0.00000001) {
        mctx.beat = Math.round(mctx.beat * 10000) / 10000;
    }
}
exports.correctRoundingErrors = correctRoundingErrors;
var _512 = C.NoteUtil.makeDuration({ count: 512 });
var _256 = C.NoteUtil.makeDuration({ count: 256 });
var _256D = C.NoteUtil.makeDuration({ count: 256, dots: 1 });
var _128 = C.NoteUtil.makeDuration({ count: 128 });
var _128D = C.NoteUtil.makeDuration({ count: 128, dots: 1 });
var _64 = C.NoteUtil.makeDuration({ count: 64 });
var _64D = C.NoteUtil.makeDuration({ count: 64, dots: 1 });
var _32 = C.NoteUtil.makeDuration({ count: 32 });
var _32D = C.NoteUtil.makeDuration({ count: 32, dots: 1 });
var _16 = C.NoteUtil.makeDuration({ count: 16 });
var _16D = C.NoteUtil.makeDuration({ count: 16, dots: 1 });
var _16DD = C.NoteUtil.makeDuration({ count: 16, dots: 2 });
var _8 = C.NoteUtil.makeDuration({ count: 8 });
var _8D = C.NoteUtil.makeDuration({ count: 8, dots: 1 });
var _8DD = C.NoteUtil.makeDuration({ count: 8, dots: 2 });
var _4 = C.NoteUtil.makeDuration({ count: 4 });
var _4D = C.NoteUtil.makeDuration({ count: 4, dots: 1 });
var _4DD = C.NoteUtil.makeDuration({ count: 4, dots: 2 });
var _2 = C.NoteUtil.makeDuration({ count: 2 });
var _2D = C.NoteUtil.makeDuration({ count: 2, dots: 1 });
var _2DD = C.NoteUtil.makeDuration({ count: 2, dots: 2 });
var _1 = C.NoteUtil.makeDuration({ count: 1 });
var _1D = C.NoteUtil.makeDuration({ count: 1, dots: 1 });
var _1DD = C.NoteUtil.makeDuration({ count: 1, dots: 2 });
var _05 = C.NoteUtil.makeDuration({ count: 1 / 2 });
var allNotes = [_1, _2D, _2, _4DD, _4D, _4, _8DD, _8D, _8, _16DD, _16D, _16, _32D, _32, _64D, _64, _128D, _128, _256D, _256, _512];
var beamingPatterns = {
    "2/16": [_16, _16],
    "1/8": [_8],
    "3/16": [_8D],
    "4/16": [_8, _8],
    "2/8": [_8, _8],
    "1/4": [_4],
    "5/16": [_8D, _8],
    "5/16_alt": [_8, _8D],
    "6/16": [_8D, _8D],
    "3/8": [_4D],
    "4/8": [_4, _4],
    "2/4": [_2],
    "2/4_clean": [_4, _4],
    "1/2": [_2],
    "9/16": [_8D, _8D, _8D],
    "5/8": [_4D, _4],
    "5/8_alt": [_4, _4D],
    "12/16": [_8D, _8D, _8D, _8D],
    "6/8": [_4D, _4D],
    "3/4": [_2D],
    "7/8": [_4, _8D],
    "7/8_alt": [_8D, _4],
    "8/8": [_4D, _4D, _4],
    "8/8_alt": [_4D, _4, _4D],
    "8/8_alt2": [_4, _4D, _4D],
    "4/4": [_2, _2],
    "4/4_clean": [_4, _4, _4, _4],
    "2/2": [_2, _2],
    "1/1": [_1],
    "9/8": [_4D, _4D, _4D],
    "10/8": [_2, _4D, _4D],
    "10/8_alt": [_4D, _2, _4D],
    "10/8_alt2": [_4D, _4D, _2],
    "5/4": [_2D, _2],
    "5/4_alt": [_2, _2D],
    "12/8": [_4D, _4D, _4D, _4D],
    "6/4": [_2D, _2D],
    "3/2": [_2, _2, _2],
    "7/4": [_1, _2D],
    "7/4_alt": [_2D, _1],
    "15/8": [_4D, _4D, _4D, _4D, _4D],
    "8/4": [_1, _1],
    "4/2": [_1, _1],
    "2/1": [_1, _1],
    "18/8": [_4D, _4D, _4D, _4D, _4D, _4D],
    "9/4": [_2D, _2D, _2D]
};
var wholeNotePatterns = {
    "2/16": [_8],
    "1/8": [_8],
    "3/16": [_8D],
    "4/16": [_4],
    "2/8": [_4],
    "1/4": [_4],
    "5/16": [_8D, _8],
    "5/16_alt": [_8, _8D],
    "6/16": [_4D],
    "3/8": [_4D],
    "4/8": [_2],
    "2/4": [_2],
    "1/2": [_2],
    "9/16": [_4D, _8D],
    "5/8": [_4D, _4],
    "5/8_alt": [_4, _4D],
    "12/16": [_2D],
    "6/8": [_2D],
    "3/4": [_2D],
    "7/8": [_2DD],
    "7/8_alt": [_2DD],
    "8/8": [_1],
    "8/8_alt": [_1],
    "8/8_alt2": [_1],
    "4/4": [_1],
    "2/2": [_1],
    "1/1": [_1],
    "9/8": [_2D, _4D],
    "10/8": [_2, _2D],
    "10/8_alt": [_4D, _2, _4D],
    "10/8_alt2": [_2D, _2],
    "5/4": [_2D, _2],
    "5/4_alt": [_2, _2D],
    "12/8": [_1D],
    "6/4": [_1D],
    "3/2": [_1D],
    "7/4": [_1DD],
    "7/4_alt": [_1DD],
    "15/8": [_2D, _2D, _4D],
    "8/4": [_05],
    "4/2": [_1, _1],
    "2/1": [_1, _1],
    "18/8": [_1D, _2D],
    "9/4": [_1D, _2D]
};
(function (Beaming) {
    Beaming[Beaming["Default"] = 0] = "Default";
    Beaming[Beaming["Alt1"] = 1] = "Alt1";
    Beaming[Beaming["Alt2"] = 2] = "Alt2";
})(exports.Beaming || (exports.Beaming = {}));
var Beaming = exports.Beaming;
;

},{"./annotator":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/annotator.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var assert = require("assert");
var _ = require("lodash");
var assign = require("react/lib/Object.assign");
var C = require("./contracts");
var Model = (function () {
    function Model(spec, annotated) {
        this.key = Model.newKey();
        this.idx = NaN;
        this.x = NaN;
        this.y = NaN;
        this.spacing = 0;
        this.ctxData = null;
        this._flags = 0;
        var _this = this;
        var allFields = this.fields.concat(this.mxmlJsonOnlyFields);
        for (var i = 0; i < allFields.length; ++i) {
            if (spec.hasOwnProperty(allFields[i])) {
                var key = allFields[i];
                _this[key] = spec[key];
            }
        }
        if (spec.key) {
            this.key = spec.key;
            this._flags = spec._flags;
        }
        if (spec.x) {
            this.x = spec.x;
            this.y = spec.y;
        }
        this.annotated = annotated;
    }
    Object.defineProperty(Model.prototype, "isModifier", {
        get: function () {
            return this.priority > 400 /* START_OF_MODIFIERS */ && this.priority < 499 /* END_OF_MODIFIERS */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "inBeam", {
        get: function () {
            return this._getFlag(Flags.InBeam);
        },
        set: function (b) {
            this._setFlag(Flags.InBeam, b);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "placeholder", {
        get: function () {
            return this._getFlag(Flags.Placeholder);
        },
        set: function (b) {
            this._setFlag(Flags.Placeholder, b);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "selected", {
        get: function () {
            return this._getFlag(Flags.Selected);
        },
        set: function (b) {
            this._setFlag(Flags.Selected, b);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "annotated", {
        get: function () {
            return this._getFlag(Flags.Annotator);
        },
        set: function (b) {
            this._setFlag(Flags.Annotator, b);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "proposed", {
        get: function () {
            return this._getFlag(Flags.Proposed);
        },
        set: function (b) {
            this._setFlag(Flags.Proposed, b);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "note", {
        get: function () {
            throw "Not a Duration";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "isNote", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "isRest", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "visible", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "xPolicy", {
        get: function () {
            throw "Not implemented";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "type", {
        get: function () {
            throw "Not implemented";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "fields", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "mxmlJsonOnlyFields", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "extraWidth", {
        get: function () {
            return 0;
        },
        set: function (w) {
            if (w !== 0) {
                assert(false, "This element does not support annotatedExtraWidth.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "revision", {
        get: function () {
            throw "Not a Barline";
        },
        set: function (n) {
            throw "Not a Barline";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "priority", {
        get: function () {
            return this.type;
        },
        set: function (p) {
            throw "Not a Placeholder";
        },
        enumerable: true,
        configurable: true
    });
    Model.prototype.calcBeats = function (ctx) {
        return 0;
    };
    Model.prototype.modelDidLoad = function (body, idx) {
    };
    Model.prototype.annotate = function (ctx) {
        if (!this.inBeam) {
            this.x = ctx.x;
            this.y = ctx.y;
            if (!this.isNote || !this.note.temporary) {
                this.spacing = 0;
            }
        }
        this.idx = ctx.idx;
        var status = this.annotateImpl(ctx);
        this.proposed = false;
        assert(status !== undefined);
        return status;
    };
    Model.prototype.annotateImpl = function (ctx) {
        throw C.Type[this.type] + " does not implement annotateImpl.";
    };
    Model.prototype.recordMetreDataImpl = function (mctx) {
        assert(false, "Not implemented");
    };
    Model.prototype.render = function (options) {
        throw "No view has been set for " + C.Type[this.type] + ". See Model.setView(...)";
    };
    Model.prototype.toJSON = function () {
        var _this = this;
        var json = {
            _: [this.key, this.type, this._flags]
        };
        _.forEach(this.fields, function (value) {
            if (!!_this[value]) {
                json[value] = _this[value];
            }
        });
        return json;
    };
    Model.prototype.assign = function (obj) {
        var _this = this;
        _.forEach(obj, function (value, key) {
            _this[key] = C.JSONx.clone(value);
        });
    };
    Model.prototype._getFlag = function (f) {
        return !!(this._flags & f);
    };
    Model.prototype._setFlag = function (f, v) {
        this._flags = v ? (this._flags | f) : (this._flags & ~f);
    };
    Model.fromJSON = function (json, existingObjects) {
        var spec;
        if (json instanceof Model) {
            json = C.JSONx.clone(json);
        }
        else if (typeof json === "string" || json instanceof String) {
            spec = JSON.parse(json);
        }
        else {
            spec = json;
        }
        var _data = spec._;
        delete spec._;
        spec.key = _data[0];
        var type = _data[1];
        spec._flags = _data[2];
        var model = (existingObjects && existingObjects[spec.key]) || Model.constructorsByType[type](spec);
        assert(model);
        var modelObj = model;
        assert(model);
        _.each(spec, function (value, key) {
            if (modelObj[key] !== value) {
                console.warn("Not loading saved key \"" + key + "\" in type " + C.Type[model.type] + ":", value);
            }
        });
        return model;
    };
    Model.newKey = function () {
        return Model._sessionId + "-" + ++Model._lastKey;
    };
    Model._sessionId = C.generateUUID();
    Model._lastKey = 0;
    Model.setView = function (View) {
        this.prototype.render = function (options) {
            var props = assign({}, options, { key: this.key, spec: this });
            return React.createElement(View, props);
        };
    };
    Model.removeAnnotations = function (parts) {
        for (var i = 0; i < parts.length; ++i) {
            for (var j = 0; parts[i].body && j < parts[i].body.length; ++j) {
                var item = parts[i].body[j];
                if (item.annotated && !item.placeholder) {
                    for (var k = 0; k < parts.length; ++k) {
                        if (parts[k].body) {
                            parts[k].body.splice(j, 1);
                        }
                    }
                    --j;
                }
                else if (item.inBeam) {
                    item.inBeam = false;
                }
            }
        }
    };
    return Model;
})();
var Model;
(function (Model) {
    "use strict";
    Model.constructorsByType = {};
    var StateChangeModel = (function (_super) {
        __extends(StateChangeModel, _super);
        function StateChangeModel() {
            _super.apply(this, arguments);
        }
        StateChangeModel.prototype.annotate = function (ctx) {
            if (ctx.next(null, 1, true).priority === this.type) {
                var here = ctx.findVertical(null, this.idx);
                var next = ctx.findVertical(null, this.idx + 1);
                var combined = new Array(here.length);
                for (var i = 0; i < combined.length; ++i) {
                    if (!next[i].placeholder) {
                        combined[i] = next[i];
                    }
                    else {
                        combined[i] = here[i];
                    }
                }
                for (var i = 0; i < ctx._parts.length; ++i) {
                    ctx._parts[i].body.splice(ctx.idx, 1);
                    ctx._parts[i].body[ctx.idx] = combined[i];
                }
                return this.retryStatus;
            }
            return _super.prototype.annotate.call(this, ctx);
        };
        Object.defineProperty(StateChangeModel.prototype, "retryStatus", {
            get: function () {
                return 20 /* RetryCurrent */;
            },
            enumerable: true,
            configurable: true
        });
        return StateChangeModel;
    })(Model);
    Model.StateChangeModel = StateChangeModel;
})(Model || (Model = {}));
var Flags;
(function (Flags) {
    Flags[Flags["InBeam"] = 2 << 0] = "InBeam";
    Flags[Flags["Placeholder"] = 2 << 1] = "Placeholder";
    Flags[Flags["Selected"] = 2 << 2] = "Selected";
    Flags[Flags["Annotator"] = 2 << 3] = "Annotator";
    Flags[Flags["Proposed"] = 2 << 4] = "Proposed";
})(Flags || (Flags = {}));
module.exports = Model;

},{"./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/Object.assign":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/Object.assign.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newline.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var AttributesModel = require("./attributes");
var C = require("./contracts");
var NewPageModel = require("./newpage");
var PrintModel = require("./print");
var NewlineModel = (function (_super) {
    __extends(NewlineModel, _super);
    function NewlineModel() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(NewlineModel.prototype, "type", {
        get: function () {
            return 130 /* NewLine */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NewlineModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    NewlineModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    NewlineModel.prototype.annotateImpl = function (ctx) {
        if (ctx.prev().priority !== 50 /* Print */) {
            return ctx.insertPast(new PrintModel({}, true));
        }
        if (ctx.y + ctx.calcLineSpacing() > ctx.maxY) {
            return NewPageModel.createNewPage(ctx);
        }
        if (ctx.maxX - ctx.x > 0.001) {
            this._justify(ctx);
            for (var i = 0; i < ctx._parts.length; ++i) {
                var body = ctx._parts[i].body;
                if (body !== ctx.body) {
                    var len = Math.min(ctx.body.length, body.length);
                    for (var j = 0; j < len; ++j) {
                        ctx.body[j].x = body[j].x = Math.min(body[j].x, ctx.body[j].x);
                    }
                }
                else {
                    break;
                }
            }
        }
        var visibleStaveCount = 0;
        for (var i = 0; i < ctx._parts.length; ++i) {
            if (ctx._parts[i].body) {
                ++visibleStaveCount;
            }
        }
        NewlineModel.pushDownIfNeeded(ctx);
        this.lineSpacing = ctx.calcLineSpacing(print);
        this.braceY = this.y;
        this.braceY2 = this.y + C.renderUtil.staveSeperation;
        ctx.lines[ctx.line].y = ctx.y;
        ctx.lines[ctx.line].x = ctx.x;
        var print = ctx.print;
        var systemMargins = print.systemLayout.systemMargins;
        var pageMargins = print.pageMarginsFor(ctx.page);
        var pageLayout = print.pageLayout;
        ctx.fontSize = ctx.calcFontSize();
        ctx.maxX = pageLayout.pageWidth - systemMargins.rightMargin - pageMargins.rightMargin;
        ctx.maxY = pageLayout.pageHeight - pageMargins.topMargin;
        ctx.x = systemMargins.leftMargin + pageMargins.leftMargin;
        ctx.y = ctx.y + this.lineSpacing;
        ctx.lines[ctx.line].attributes.time = ctx.attributes.time;
        ctx.line = ctx.line + 1;
        ctx.smallest = 10000;
        ctx.minBottomPaddings = _.times(ctx._parts.length, function () { return 0; });
        ctx.minTopPaddings = _.times(ctx._parts.length, function () { return 0; });
        this.x = ctx.x;
        this.width = ctx.maxX - ctx.x;
        ctx.x = ctx.x + 8;
        var lattributes = new AttributesModel({
            time: ctx.attributes.time
        }, true);
        ctx.attributes = null;
        if (!ctx.lines[ctx.line]) {
            ctx.lines[ctx.line] = {
                accidentalsByStave: C.JSONx.clone(ctx.accidentalsByStave),
                attributes: {},
                bar: null,
                barKeys: null,
                barlineX: null,
                beat: null,
                line: ctx.line,
                pageLines: null,
                pageStarts: null,
                prevClefByStave: {},
                partIdx: ctx.currStaveIdx,
                x: null,
                y: null
            };
        }
        ctx.lines[ctx.line].accidentalsByStave = [];
        ctx.lines[ctx.line].attributes = {};
        ctx.lines[ctx.line].bar = ctx.bar;
        ctx.lines[ctx.line].barlineX = [];
        ctx.lines[ctx.line].barKeys = C.JSONx.clone(ctx.barKeys);
        ctx.lines[ctx.line].beat = 0;
        ctx.lines[ctx.line].x = ctx.x;
        ctx.lines[ctx.line].y = ctx.y;
        ctx.lines[ctx.line].pageLines = ctx.pageLines;
        ctx.lines[ctx.line].pageStarts = ctx.pageStarts;
        if (ctx.songEditor) {
            ctx.songEditor.dangerouslyTakeSnapshot(ctx);
        }
        return 10 /* Success */;
    };
    NewlineModel.prototype._justify = function (ctx) {
        var diff = ctx.maxX - ctx.x;
        var i;
        var l = 0;
        for (i = ctx.idx - 1; i >= 0; --i) {
            if (ctx.body[i].isNote) {
                ++l;
            }
            if (ctx.body[i].priority === 130 /* NewLine */) {
                break;
            }
        }
        diff -= 0.0001;
        var xOffset = diff;
        for (i = ctx.idx - 1; i >= 0; --i) {
            if (ctx.body[i].priority === 130 /* NewLine */) {
                break;
            }
            if (ctx.body[i].isNote) {
                ctx.body[i].extraWidth = (ctx.body[i].extraWidth || 0) + diff / l;
                xOffset -= diff / l;
            }
            var newX = ctx.body[i].x + xOffset;
            if (ctx.body[i].priority === 300 /* Barline */ && (!ctx.body[i + 1] || ctx.body[i + 1].priority !== 130 /* NewLine */)) {
                if (ctx.lines[ctx.line - 1] && _.any(ctx.lines[ctx.line - 1].barlineX, function (x) { return Math.abs(x - newX) < 0.15; })) {
                    var offset = -0.2;
                    newX += offset;
                    var j;
                    var noteCount = 0;
                    for (j = i - 1; j >= 0 && ctx.body[j].priority !== 300 /* Barline */; --j) {
                        if (ctx.body[j].isNote) {
                            ++noteCount;
                        }
                    }
                    var remaining = offset;
                    for (j = i - 1; j >= 0 && ctx.body[j].priority !== 300 /* Barline */; --j) {
                        ctx.body[j].x = ctx.body[j].x + remaining;
                        if (ctx.body[j].isNote) {
                            remaining -= offset / noteCount;
                        }
                    }
                    noteCount = 0;
                    for (j = i + 1; j < ctx.body.length && ctx.body[j].priority !== 300 /* Barline */; ++j) {
                        if (ctx.body[j].isNote) {
                            ++noteCount;
                        }
                    }
                    remaining = offset;
                    for (j = i + 1; j < ctx.body.length && ctx.body[j].priority !== 300 /* Barline */; ++j) {
                        ctx.body[j].x = ctx.body[j].x + remaining;
                        if (ctx.body[j].isNote) {
                            remaining -= offset / noteCount;
                        }
                    }
                }
                ctx.barlineX.push(newX);
            }
            ctx.body[i].x = newX;
        }
        for (i = ctx.idx - 1; i >= 0 && ctx.body[i].type !== 130 /* NewLine */; --i) {
            if (ctx.body[i].type === 300 /* Barline */) {
                NewlineModel.centerWholeBarRests(ctx.body, i);
            }
        }
        return 10 /* Success */;
    };
    NewlineModel.centerWholeBarRests = function (body, idx) {
        var toCenter = [];
        for (var i = idx - 2; i >= 0 && body[i].type > 300 /* Barline */; --i) {
            if (body[i].isRest && body[i].note.isWholebar) {
                toCenter.push(body[i]);
            }
        }
        for (var j = 0; j < toCenter.length; ++j) {
            var bbox = C.SMuFL.bravuraBBoxes[toCenter[j].restHead];
            var offset = 0;
            if (body[i].type === 170 /* TimeSignature */) {
                offset += 0.7 / 4;
            }
            if (body[i].isNote && body[i].note.temporary) {
                continue;
            }
            toCenter[j].spacing = offset + (body[i].x + body[idx].x) / 2 - (bbox[0] + bbox[3]) / 8 - toCenter[j].x;
        }
    };
    NewlineModel.pushDownIfNeeded = function (ctx) {
        for (var i = 0; i < ctx._parts.length; ++i) {
            var body = ctx._parts[i].body;
            for (var l = ctx.idx; l + 1 === ctx.idx || !body[l + 1] || body[l] && body[l + 1].priority !== 130 /* NewLine */; --l) {
                body[l].y += ctx.minTopPaddings[i];
                var bodyl = body[l];
                if (bodyl.braceY) {
                    bodyl.braceY += ctx.minTopPaddings[i];
                    bodyl.braceY2 += ctx.minTopPaddings[i];
                }
            }
        }
        ctx.y = ctx.curr.y;
    };
    NewlineModel.createNewline = function (ctx) {
        if (ctx.songEditor) {
            ctx.songEditor.dangerouslyMarkRendererLineDirty(ctx.line + 1);
        }
        var l = 0;
        var fidx;
        for (fidx = ctx.idx; fidx >= 0; --fidx) {
            ctx.body[fidx].extraWidth = 0;
            if (ctx.body[fidx].type === 300 /* Barline */) {
                break;
            }
        }
        if (ctx.body[fidx + 1].type === 120 /* NewPage */) {
            return 10 /* Success */;
        }
        for (var i = ctx.idx + 1; i < ctx.body.length; ++i) {
            if (!ctx.body[i].annotated) {
                if (ctx.body[i].type === 130 /* NewLine */ || ctx.body[i].type === 150 /* Clef */ || ctx.body[i].type === 170 /* TimeSignature */ || ctx.body[i].type === 160 /* KeySignature */) {
                    ctx.eraseFuture(i);
                    --i;
                }
            }
        }
        ctx.insertPast(new NewlineModel({
            newline: true
        }, true), fidx + 1);
        return 70 /* LineCreated */;
    };
    NewlineModel.semiJustify = function (ctx) {
        var fullJustify = false;
        var i;
        if (ctx._parts.isScale) {
            fullJustify = true;
        }
        var n = 0;
        for (i = ctx.idx; i >= 0 && (ctx.body[i].type !== 130 /* NewLine */); --i) {
            if (ctx.body[i].priority === 600 /* Duration */) {
                ++n;
            }
        }
        if (n) {
            var lw = ctx.maxX - 3 - ctx.curr.x;
            var nw = lw / n;
            if (fullJustify) {
                lw = ctx.maxX - ctx.curr.x;
                nw = lw / n;
            }
            else {
                var weight = C.renderUtil.sigmoid((nw - ctx.maxX / 80) / 20) * 2 / 3;
                nw = (1 - weight) * nw;
                lw = nw * n;
            }
            for (i = ctx.idx; i >= 0 && ctx.body[i].type !== 130 /* NewLine */; --i) {
                if (ctx.body[i].priority === 600 /* Duration */) {
                    lw -= nw;
                }
                ctx.body[i].x = ctx.body[i].x + lw;
            }
            for (i = ctx.idx; i >= 0 && ctx.body[i].type !== 130 /* NewLine */; --i) {
                if (ctx.body[i].type === 300 /* Barline */) {
                    NewlineModel.centerWholeBarRests(ctx.body, i);
                }
            }
        }
    };
    return NewlineModel;
})(Model);
module.exports = NewlineModel;

},{"./attributes":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/attributes.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./newpage":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newpage.js","./print":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/print.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newpage.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var C = require("./contracts");
var NewPageModel = (function (_super) {
    __extends(NewPageModel, _super);
    function NewPageModel() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(NewPageModel.prototype, "visible", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NewPageModel.prototype, "type", {
        get: function () {
            return 120 /* NewPage */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NewPageModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    NewPageModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    NewPageModel.prototype.annotateImpl = function (ctx) {
        ctx.y = 0;
        ctx.pageLines = _.clone(ctx.pageLines);
        ctx.pageLines.push(ctx.line + 1);
        ctx.pageStarts = _.clone(ctx.pageStarts);
        ctx.pageStarts.push(ctx.idx);
        return 10 /* Success */;
    };
    NewPageModel.createNewPage = function (ctx) {
        ctx.insertPast(new NewPageModel({ newpage: true }, true));
        for (var i = ctx.idx + 1; i < ctx.body.length; ++i) {
            if (ctx.body[i].type === 120 /* NewPage */ && ctx.body[i].annotated) {
                ctx.eraseFuture(i);
                --i;
            }
        }
        return 20 /* RetryCurrent */;
    };
    return NewPageModel;
})(Model);
module.exports = NewPageModel;

},{"./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/placeholder.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var assert = require("assert");
var Annotator = require("./annotator");
var BarlineModel = require("./barline");
var BeginModel = require("./begin");
var C = require("./contracts");
var ClefModel = require("./clef");
var DurationModel = require("./duration");
var EndMarkerModel = require("./endMarker");
var KeySignatureModel = require("./keySignature");
var Metre = require("./metre");
var NewlineModel = require("./newline");
var NewpageModel = require("./newpage");
var TimeSignatureModel = require("./timeSignature");
var PlaceholderModel = (function (_super) {
    __extends(PlaceholderModel, _super);
    function PlaceholderModel(spec, annotated) {
        _super.call(this, spec, annotated);
        this.annotated = annotated;
    }
    Object.defineProperty(PlaceholderModel.prototype, "visible", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderModel.prototype, "xPolicy", {
        get: function () {
            return 0 /* Invalid */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderModel.prototype, "fields", {
        get: function () {
            return ["priority", "item", "musicLine"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderModel.prototype, "type", {
        get: function () {
            return 999 /* Placeholder */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderModel.prototype, "placeholder", {
        get: function () {
            return true;
        },
        set: function (b) {
            assert(false, "A PlaceholderModel cannot help but be a placeholder, however much it tries...");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderModel.prototype, "priority", {
        get: function () {
            return this._priority;
        },
        set: function (c) {
            this._priority = c;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderModel.prototype.recordMetreDataImpl = function (mctx) {
        if (this.priority === 600 /* Duration */ && mctx.beat === 0) {
            this.ctxData = new C.MetreContext({
                attributes: mctx.attributes,
                beat: mctx.ts.beats,
                bar: mctx.bar - 1,
                endMarker: false,
                ts: mctx.ts
            });
        }
        else {
            this.ctxData = new C.MetreContext(mctx);
        }
    };
    PlaceholderModel.prototype.annotateImpl = function (ctx) {
        var loc = new C.Location(ctx.loc);
        var usefulItems = ctx.findVertical(function (obj) { return obj.type !== 999 /* Placeholder */ || !obj.ctxData || !loc.eq(obj.ctxData); });
        if (!usefulItems.length) {
            return ctx.eraseCurrent();
        }
        var realItems = ctx.findVertical(function (obj) { return obj.type !== 999 /* Placeholder */; });
        while (ctx.next() && !ctx.findVertical(function (obj) { return obj.type !== 999 /* Placeholder */; }, ctx.idx + 1).length) {
            ctx.eraseFuture(ctx.idx + 1);
        }
        if (this.priority !== realItems[0].type) {
            console.warn("Dangerously correcting a mismatched type.");
            this.priority = realItems[0].type;
        }
        if (ctx.ts && ctx.__globalBeat__ < ctx.ts.beats) {
            if (ctx.beat < ctx.__globalBeat__) {
                return PlaceholderModel.fillMissingBeats(ctx);
            }
            if (ctx.beat === ctx.__globalBeat__ && this.priority === 600 /* Duration */) {
                assert(realItems[0], "We can't have an entire column of fake durations,");
                return PlaceholderModel.fillMissingBeats(ctx, realItems[0].calcBeats(ctx));
            }
        }
        switch (this.priority) {
            case 300 /* Barline */:
                ctx.body.splice(ctx.idx, 1, new BarlineModel({ barStyle: { data: 0 /* Regular */ } }, true));
                ctx.body[ctx.idx].annotated = this.annotated;
                ctx.body[ctx.idx].proposed = this.proposed;
                return 20 /* RetryCurrent */;
            case 140 /* Begin */:
                ctx.body.splice(ctx.idx, 1, new BeginModel({}, true));
                ctx.body[ctx.idx].annotated = this.annotated;
                ctx.body[ctx.idx].proposed = this.proposed;
                return 20 /* RetryCurrent */;
            case 150 /* Clef */:
                if (!ctx.attributes.clef) {
                    ctx.body.splice(ctx.idx, 1, new ClefModel(null, true));
                    ctx.body[ctx.idx].annotated = this.annotated;
                    ctx.body[ctx.idx].proposed = this.proposed;
                    return 20 /* RetryCurrent */;
                }
                break;
            case 600 /* Duration */:
                assert(!ctx.findVertical(function (c) { return c.priority !== 600 /* Duration */; }).length);
                if (ctx.next(null, 1, true).type === 450 /* BeamGroup */) {
                    var bodies = ctx.findVertical(function () { return true; }, this.idx + 1);
                    ctx.eraseFuture(this.idx + 1);
                    ctx.insertPastVertical(bodies);
                    ctx.body[ctx.idx].annotated = this.annotated;
                    ctx.body[ctx.idx].proposed = this.proposed;
                    return 20 /* RetryCurrent */;
                }
                break;
            case 110 /* EndMarker */:
                ctx.body.splice(ctx.idx, 1, new EndMarkerModel({}, true));
                ctx.body[ctx.idx].annotated = this.annotated;
                ctx.body[ctx.idx].proposed = this.proposed;
                return 20 /* RetryCurrent */;
            case 160 /* KeySignature */:
                var ks = C.JSONx.clone(realItems[0]);
                assert(ks, "Undefined prevKeySignature!!");
                ctx.body.splice(ctx.idx, 1, new KeySignatureModel({ keySignature: ks }, true));
                ctx.body[ctx.idx].annotated = this.annotated;
                ctx.body[ctx.idx].proposed = this.proposed;
                return 20 /* RetryCurrent */;
            case 130 /* NewLine */:
                ctx.body.splice(ctx.idx, 1, new NewlineModel({}, true));
                ctx.body[ctx.idx].annotated = this.annotated;
                ctx.body[ctx.idx].proposed = this.proposed;
                return 20 /* RetryCurrent */;
            case 120 /* NewPage */:
                ctx.body.splice(ctx.idx, 1, new NewpageModel({}, true));
                ctx.body[ctx.idx].annotated = this.annotated;
                ctx.body[ctx.idx].proposed = this.proposed;
                return 20 /* RetryCurrent */;
            case 170 /* TimeSignature */:
                var tses = ctx.findVertical(function (obj) { return obj.type === 170 /* TimeSignature */; });
                assert(tses.length, "Staves cannot all be placeholders!");
                ctx.body.splice(ctx.idx, 1, new TimeSignatureModel(tses[0], true));
                ctx.body[ctx.idx].annotated = this.annotated;
                ctx.body[ctx.idx].proposed = this.proposed;
                return 20 /* RetryCurrent */;
        }
        this.recordMetreDataImpl(ctx);
        return 10 /* Success */;
    };
    PlaceholderModel.fillMissingBeats = function (ctx, extraBeats) {
        extraBeats = extraBeats || 0;
        var rest = { chord: [{ step: "R", octave: null, acc: null }] };
        var missingBeats = Metre.subtract(ctx.__globalBeat__ + extraBeats, ctx.beat, ctx).map(function (spec) { return new DurationModel(_.extend(spec, rest), true); });
        ctx.splice(ctx.idx, 1, missingBeats, 3 /* Masked */);
        return 60 /* RetryLine */;
    };
    return PlaceholderModel;
})(Model);
PlaceholderModel.prototype._priority = 1111 /* Unknown */;
module.exports = PlaceholderModel;

},{"./annotator":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/annotator.js","./barline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/barline.js","./begin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/begin.js","./clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","./endMarker":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/endMarker.js","./keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js","./metre":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/metre.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./newline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newline.js","./newpage":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newpage.js","./timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/print.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var C = require("./contracts");
var PrintModel = (function (_super) {
    __extends(PrintModel, _super);
    function PrintModel() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(PrintModel.prototype, "type", {
        get: function () {
            return 50 /* Print */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PrintModel.prototype, "visible", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PrintModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PrintModel.prototype, "fields", {
        get: function () {
            return [
                "measureNumbering",
                "partNameDisplay",
                "newSystem",
                "newPage",
                "blankPage",
                "measureLayout",
                "partAbbreviationDisplay",
                "pageLayout",
                "systemLayout",
                "staffSpacing",
                "staffLayouts",
                "pageNumber"
            ];
        },
        enumerable: true,
        configurable: true
    });
    PrintModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    PrintModel.prototype.annotateImpl = function (ctx) {
        var defaultPrint = C.getPrint(ctx._layout.header);
        var spec = C.deepAssign(this, defaultPrint);
        ctx.print = new C.Print(spec);
        return 10 /* Success */;
    };
    return PrintModel;
})(Model);
module.exports = PrintModel;

},{"./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/slur.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var BeamGroupModel = require("./beamGroup");
var C = require("./contracts");
var ClefModel = require("./clef");
var KeySignatureModel = require("./keySignature");
var DurationModel = require("./duration");
var TimeSignatureModel = require("./timeSignature");
var SlurGroupModel = (function (_super) {
    __extends(SlurGroupModel, _super);
    function SlurGroupModel() {
        _super.apply(this, arguments);
        this._beam = null;
        this._notes = null;
    }
    Object.defineProperty(SlurGroupModel.prototype, "type", {
        get: function () {
            return 425 /* Slur */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlurGroupModel.prototype, "fields", {
        get: function () {
            return ["slur"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlurGroupModel.prototype, "xPolicy", {
        get: function () {
            return 2 /* Min */;
        },
        enumerable: true,
        configurable: true
    });
    SlurGroupModel.prototype.annotateImpl = function (ctx) {
        if (ctx.prev().type === 999 /* Placeholder */) {
            this.x = ctx.prev().x;
            ctx.x = this.x;
        }
        if (!ctx.attributes.clef) {
            return ClefModel.createClef(ctx);
        }
        if (!ctx.attributes.keySignature) {
            return KeySignatureModel.createKeySignature(ctx);
        }
        if (!ctx.ts) {
            return TimeSignatureModel.createTS(ctx);
        }
        var n = [];
        this._beam = undefined;
        for (var i = ctx.idx; i < ctx.body.length && n.length < this.slur; ++i) {
            if (ctx.body[i].type === 450 /* BeamGroup */) {
                this._beam = ctx.body[i];
            }
            if (ctx.body[i].isNote) {
                n.push(ctx.body[i]);
            }
        }
        this._notes = n;
        this.isEmpty = !n.length;
        if (!this.isEmpty) {
            var first = this._notes[0];
            var last = this._notes[this._notes.length - 1];
            var firstLines = DurationModel.getLines(first, ctx);
            var lastLines = DurationModel.getLines(last, ctx);
            this.direction = -BeamGroupModel.decideDirection(firstLines, lastLines);
            this.m_x = first.x;
            this.m_y = first.y;
            this.lines1 = DurationModel.getLines(first, ctx);
            this.lines2 = DurationModel.getLines(last, ctx);
            this.width = last.x - first.x;
        }
        return 10 /* Success */;
    };
    return SlurGroupModel;
})(Model);
SlurGroupModel.prototype.slur = null;
SlurGroupModel.prototype.isEmpty = true;
SlurGroupModel.prototype.direction = NaN;
SlurGroupModel.prototype.lines1 = null;
SlurGroupModel.prototype.lines2 = null;
SlurGroupModel.prototype.width = NaN;
SlurGroupModel.prototype.m_x = NaN;
SlurGroupModel.prototype.m_y = NaN;
module.exports = SlurGroupModel;

},{"./beamGroup":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/beamGroup.js","./clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","./keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/songEditor.js":[function(require,module,exports){
(function (global){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _ = require("lodash");
var assert = require("assert");
var TSEE = require("./tsee");
var Annotator = require("./annotator");
var BeginModel = require("./begin");
var C = require("./contracts");
var Instruments = require("./instruments");
var Model = require("./model");
var isBrowser = typeof window !== "undefined";
var SongEditorStore = (function (_super) {
    __extends(SongEditorStore, _super);
    function SongEditorStore(dispatcher) {
        var _this = this;
        _super.call(this);
        this.dangerouslyMarkRendererLineClean = this["DELETE /webapp/song/lineDirty"].bind(this);
        this.dangerouslySetVisualCursor = this._visualCursorIs.bind(this);
        this.ensureSoundfontLoaded = function (s, e) { return false; };
        this._handleAction = function (action) {
            assert(action.description.indexOf(" ") !== -1, "Malformed description " + action.description);
            var fn = _this[action.description];
            if (fn) {
                fn.call(_this, action);
            }
            return true;
        };
        this._activeStaveIdx = NaN;
        this._ctx = null;
        this._dirty = false;
        this._dispatcher = null;
        this._linesToUpdate = {};
        this._parts = null;
        this._header = null;
        this._snapshots = {};
        this._visualCursor = defaultCursor;
        dispatcher.register(this._handleAction);
        this._dispatcher = dispatcher;
        global.SongEditor = this;
        this._clear();
    }
    SongEditorStore.prototype.destructor = function () {
        this._dispatcher.unregister(this._handleAction);
        this._clear();
    };
    Object.defineProperty(SongEditorStore.prototype, "dirty", {
        get: function () {
            return this._dirty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SongEditorStore.prototype, "finalCtx", {
        get: function () {
            return this._ctx;
        },
        enumerable: true,
        configurable: true
    });
    SongEditorStore.prototype.getLineDirty = function (idx, h) {
        return this._linesToUpdate[h + "_" + idx];
    };
    Object.defineProperty(SongEditorStore.prototype, "parts", {
        get: function () {
            return this._parts;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SongEditorStore.prototype, "header", {
        get: function () {
            return this._header;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SongEditorStore.prototype, "src", {
        get: function () {
            return "RIPMUS0," + JSON.stringify({
                parts: this._parts,
                header: this._header
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SongEditorStore.prototype, "visualCursor", {
        get: function () {
            return this._visualCursor;
        },
        enumerable: true,
        configurable: true
    });
    SongEditorStore.prototype.ctxFromSnapshot = function (pointerData, parts, assertionPolicy) {
        var i;
        if (!pointerData) {
            return null;
        }
        if (pointerData && this._snapshots[pointerData.musicLine]) {
            var ctx = new Annotator.Context(parts, {
                header: this.header,
                snapshot: this._recreateSnapshot(pointerData.musicLine)
            }, this, assertionPolicy);
            for (i = 0; i < parts.length; ++i) {
                this._linesToUpdate[i + "_" + ctx.line] = true;
            }
            return ctx;
        }
        else {
            for (i = 0; i < parts.length; ++i) {
                this._linesToUpdate[i + "_0"] = true;
            }
        }
    };
    SongEditorStore.prototype.dangerouslyMarkRenderDone = function () {
        var _this = this;
        _.defer(function () {
            _this._dirty = false;
        });
    };
    SongEditorStore.prototype.dangerouslyMarkRendererDirty = function () {
        this._dirty = true;
    };
    SongEditorStore.prototype.dangerouslyMarkRendererLineDirty = function (line) {
        if (!this._parts) {
            return;
        }
        for (var i = 0; i < this._parts.length; ++i) {
            this._linesToUpdate[i + "_" + line] = true;
        }
    };
    SongEditorStore.prototype.dangerouslyTakeSnapshot = function (ctx) {
        this._snapshots[ctx.line] = JSON.stringify(ctx.captureSnapshot());
    };
    SongEditorStore.parse = function (src) {
        var song = null;
        if (src.length && src.substr(0, 8) === "RIPMUS0,") {
            var songJson = JSON.parse(src.substring(8));
            song = {
                parts: [],
                header: new C.ScoreHeader(songJson.header)
            };
            for (var i = 0; i < songJson.parts.length; ++i) {
                song.parts.push({
                    body: [],
                    instrument: songJson.parts[i].instrument || Instruments.List[0]
                });
                var body = songJson.parts[i].body;
                if (body) {
                    for (var j = 0; j < body.length; ++j) {
                        song.parts[i].body[j] = Model.fromJSON(body[j]);
                    }
                    for (var j = 0; j < body.length; ++j) {
                        song.parts[i].body[j].modelDidLoad(song.parts[i].body, j);
                    }
                }
            }
        }
        else {
            assert(false, "Unknown format");
        }
        return song;
    };
    SongEditorStore.extractMXMLHeader = function (m) {
        var header = new C.ScoreHeader({
            work: m.work,
            movementNumber: m.movementNumber,
            movementTitle: m.movementTitle,
            identification: m.identification,
            defaults: m.defaults,
            credits: m.credits,
            partList: m.partList
        });
        if ((!header.credits || !header.credits.length) && header.movementTitle) {
            header.title = header.movementTitle;
        }
        return header;
    };
    SongEditorStore.extractMXMLParts = function (m) {
        var idxToPart = {};
        var partCount = 0;
        _.forEach(m.partList.scoreParts, function (part, idx) {
            idxToPart[partCount++] = part.id;
        });
        var partToIdx = _.invert(idxToPart);
        assert(partCount, "At least one part is needed.");
        var parts = _.times(partCount, function () { return new Object({
            instrument: Instruments.List[0],
            body: [new BeginModel({}, true)]
        }); });
        var mxmlClassToType = {
            "Note": 600 /* Duration */,
            "Attributes": 145 /* Attributes */,
            "Barline": 300 /* Barline */
        };
        _.forEach(m.measures, function (measure) {
            var minPriority;
            var idxPerPart = _.map(parts, function (part) { return 0; });
            do {
                var elements = _.map(measure.parts, function (p, partID) { return p[idxPerPart[partToIdx[partID]]] || {}; });
                var priorities = _.map(elements, function (element) { return mxmlClassToType[element._class] || C.MAX_NUM; });
                minPriority = _.min(priorities);
                _.forEach(elements, function (element, partIdx) {
                    if (mxmlClassToType[element._class] === minPriority) {
                        if (minPriority === 600 /* Duration */) {
                            var note = element;
                            element = {
                                _notes: [note],
                                _class: element._class,
                                dots: note.dots
                            };
                            if (note.chord) {
                                assert(false, "TODO");
                            }
                        }
                        var _class = element._class;
                        delete element._class;
                        element._ = [Model.newKey(), minPriority, 0];
                        parts[partIdx].body.push(Model.fromJSON(element));
                        element._class = _class;
                        delete element._;
                        ++idxPerPart[partIdx];
                    }
                    else {
                    }
                });
            } while (minPriority !== C.MAX_NUM);
        });
        _.forEach(parts, function (part) {
            _.forEach(part.body, function (model, j) {
                model.modelDidLoad(part.body, j);
            });
        });
        return parts;
    };
    SongEditorStore.prototype["DELETE /webapp/song/lineDirty"] = function (action) {
        this._linesToUpdate[action.postData] = false;
    };
    SongEditorStore.prototype["PUT /webapp/song/src"] = function (action) {
        this._reparse(action.postData);
        this.dangerouslyMarkRendererDirty();
        this.emit(0 /* Change */);
        this.emit(1 /* Annotate */);
    };
    SongEditorStore.prototype["PUT /webapp/song/mxmlJSON"] = function (action) {
        var mxml = C.JSONx.clone(action.postData);
        this._header = SongEditorStore.extractMXMLHeader(mxml);
        this._parts = SongEditorStore.extractMXMLParts(mxml);
        Annotator.recordMetreData(this._parts);
        this._annotate(null, null, null, null, true, null, 1 /* NoAssertions */);
        this.dangerouslyMarkRendererDirty();
        this.emit(0 /* Change */);
        this.emit(1 /* Annotate */);
    };
    SongEditorStore.prototype["PUT /webapp/visualCursor"] = function (action) {
        this._visualCursorIs(action.postData);
        if (!this._visualCursor.annotatedObj) {
            this._annotate(null, null, null, null, true);
        }
        this.emit(1 /* Annotate */);
    };
    SongEditorStore.prototype["PUT /webapp/visualCursor/step"] = function (action) {
        this._stepCursor({
            step: action.postData.step,
            loopThroughEnd: action.postData.loopThroughEnd,
            skipDurationlessContent: action.postData.skipDurationlessContent
        });
        if (!this._visualCursor.annotatedObj) {
            this._annotate(null, null, null, null, true);
        }
        this.emit(1 /* Annotate */);
    };
    SongEditorStore.prototype["DELETE /webapp/visualCursor"] = function (action) {
        this._visualCursor = null;
        this.emit(0 /* Change */);
        this._annotate(null, null, null, null, true);
    };
    SongEditorStore.prototype["PUT /webapp/instrument"] = function (action) {
        var instrument = action.postData.instrument;
        var part = action.postData.part;
        this.ensureSoundfontLoaded(instrument.soundfont);
        this.emit(2 /* History */);
        part.instrument = instrument;
        this.emit(0 /* Change */);
    };
    SongEditorStore.prototype.midiOutHint = function (out) {
        this.emit(4 /* MidiOut */, out);
    };
    SongEditorStore.prototype._annotate = function (pointerData, toolFn, parts, profile, disableRecording, godAction, assertionPolicy) {
        assertionPolicy = isNaN(assertionPolicy) ? 0 /* Strict */ : assertionPolicy;
        parts = parts || this._parts;
        if (SongEditorStore.PROFILER_ENABLED) {
            console.time("annotate");
        }
        var aBody;
        for (var i = 0; i < parts.length; ++i) {
            if (parts[i].body) {
                aBody = parts[i].body;
                break;
            }
        }
        var cursor = this._visualCursor;
        if (!pointerData) {
            cursor.annotatedObj = null;
            cursor.annotatedLine = null;
            cursor.annotatedStave = null;
        }
        var layout = {
            header: this.header,
            isFirstLine: true
        };
        if (godAction) {
            godAction();
        }
        var context = this.ctxFromSnapshot(pointerData, parts, assertionPolicy) || new Annotator.Context(parts, layout, this, assertionPolicy);
        var location = {
            bar: context.lines ? context.lines[context.line].bar : 1,
            beat: context.lines ? context.lines[context.line].beat : 0
        };
        var result = context.annotate(location, cursor, disableRecording, this._dispatcher);
        if (SongEditorStore.PROFILER_ENABLED) {
            console.log("I broke the profiler");
        }
        if (!result.skip) {
            this._ctx = context;
        }
        if (SongEditorStore.PROFILER_ENABLED) {
            console.timeEnd("annotate");
        }
        return result;
    };
    SongEditorStore.prototype._clear = function () {
        this._activeStaveIdx = null;
        this._parts = null;
        this._header = null;
        this._visualCursorIs({
            bar: 1,
            beat: 0
        });
    };
    SongEditorStore.prototype._recreateSnapshot = function (line) {
        var lines = [];
        for (var i = 1; i <= line; ++i) {
            var sn = JSON.parse(this._snapshots[i]);
            lines.push(sn.prevLine);
            if (i === line) {
                lines.push(sn.partialLine);
                sn.lines = lines;
                return sn;
            }
        }
    };
    SongEditorStore.prototype._reparse = function (src, profile) {
        if (profile) {
            console.time("Parse source");
        }
        var song = SongEditorStore.parse(src);
        this._header = song.header;
        this._parts = song.parts;
        for (var i = 0; i < this._parts.length; ++i) {
            if (this._parts[i].body) {
                this._activeStaveIdx = i;
            }
        }
        var origPE = SongEditorStore.PROFILER_ENABLED;
        if (profile) {
            console.timeEnd("Parse source");
            SongEditorStore.PROFILER_ENABLED = true;
        }
        var res = this._annotate(null, null, null, null, true, null, 1 /* NoAssertions */);
        if (profile) {
            SongEditorStore.PROFILER_ENABLED = origPE;
        }
        return res;
    };
    SongEditorStore.prototype._stepCursor = function (spec) {
        if (!this._visualCursor || !this._visualCursor.annotatedObj) {
            return;
        }
        var sign = spec.step > 0 ? 1 : -1;
        var steps = spec.step;
        var idx = this._visualCursor.annotatedObj.idx;
        var parts = this._parts;
        var iterations = 0;
        var page = this._visualCursor.annotatedPage;
        var part = 0;
        var line = this._visualCursor.annotatedLine;
        while (steps && parts[part].body[idx += sign]) {
            var priority = parts[part].body[idx].priority;
            var visible = false;
            for (var i = 0; !visible && i < parts.length; ++i) {
                visible = visible || !!parts[i].body[idx].visible;
            }
            if (!visible) {
            }
            else if (priority === 600 /* Duration */) {
                steps -= sign;
            }
            else if (!spec.skipDurationlessContent) {
                while (parts[part].body[idx] && parts[part].body[idx].priority !== 600 /* Duration */ && parts[part].body[idx].priority !== 110 /* EndMarker */) {
                    if (parts[part].body[idx].type === 120 /* NewPage */) {
                        page += sign;
                    }
                    if (parts[part].body[idx].type === 130 /* NewLine */) {
                        line += sign;
                    }
                    idx += sign;
                    ++iterations;
                }
                break;
            }
            ++iterations;
        }
        var obj = parts[part].body[idx];
        if (!obj) {
            if (sign === 1 && spec.loopThroughEnd) {
                this._visualCursor = {
                    bar: 0,
                    beat: 0,
                    endMarker: false,
                    annotatedObj: parts[part].body[0],
                    annotatedLine: line,
                    annotatedPage: page,
                    annotatedStave: part
                };
                this._stepCursor({ step: 1 });
            }
            return;
        }
        for (var i = 1; obj.placeholder && i < parts.length; ++i) {
            obj = parts[i].body[idx];
        }
        this._visualCursor = {
            bar: obj.ctxData.bar,
            beat: obj.ctxData.beat,
            endMarker: obj.priority <= 110 /* EndMarker */,
            annotatedObj: obj,
            annotatedLine: 0,
            annotatedPage: page,
            annotatedStave: part
        };
    };
    SongEditorStore.prototype._visualCursorIs = function (visualCursor) {
        this._visualCursor.bar = visualCursor.bar;
        this._visualCursor.beat = visualCursor.beat;
        this._visualCursor.endMarker = visualCursor.endMarker;
        this._visualCursor.annotatedObj = null;
        this._visualCursor.annotatedLine = null;
        this._visualCursor.annotatedPage = null;
        this._visualCursor.annotatedStave = null;
    };
    SongEditorStore.PROFILER_ENABLED = isBrowser && global.location.search.indexOf("profile=1") !== -1;
    return SongEditorStore;
})(TSEE);
var defaultCursor = {
    bar: 1,
    beat: 0,
    endMarker: null,
    annotatedObj: null,
    annotatedLine: null,
    annotatedPage: null
};
var SongEditorStore;
(function (SongEditorStore) {
    "use strict";
})(SongEditorStore || (SongEditorStore = {}));
module.exports = SongEditorStore;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./annotator":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/annotator.js","./begin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/begin.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./instruments":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/instruments.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./tsee":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/tsee.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var _ = require("lodash");
var assert = require("assert");
var C = require("./contracts");
var ClefModel = require("./clef");
var KeySignatureModel = require("./keySignature");
var TimeSignatureModel = (function (_super) {
    __extends(TimeSignatureModel, _super);
    function TimeSignatureModel(spec, annotated) {
        _super.call(this, spec, annotated);
        assert(!spec.timeSignature, "Deprecated");
        assert(!spec.ts, "Not supported in constructor");
    }
    Object.defineProperty(TimeSignatureModel.prototype, "type", {
        get: function () {
            return 170 /* TimeSignature */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSignatureModel.prototype, "xPolicy", {
        get: function () {
            return 1 /* Max */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSignatureModel.prototype, "fields", {
        get: function () {
            return ["interchangeables", "beats", "beatTypes", "senzaMisura", "symbol", "separator", "voice", "footnote", "level", "defaultX", "relativeY", "defaultY", "relativeX", "fontFamily", "fontWeight", "fontStyle", "fontSize", "color", "halign", "valign", "printObject"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSignatureModel.prototype, "ts", {
        get: function () {
            return {
                beats: this.beats[0],
                beatType: this.beatTypes[0],
                commonRepresentation: this.symbol !== 5 /* Normal */
            };
        },
        set: function (c) {
            this.beats = [c.beats];
            this.beatTypes = [c.beatType];
            switch (true) {
                case c.commonRepresentation && c.beats === 4 && c.beatType === 4:
                    this.symbol = 0 /* Common */;
                    break;
                case c.commonRepresentation && c.beats === 2 && c.beatType === 2:
                    this.symbol = 1 /* Cut */;
                    break;
                case !c.commonRepresentation:
                    this.symbol = 5 /* Normal */;
                    break;
                default:
                    console.warn("Unknown common TS");
                    this.symbol = 5 /* Normal */;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSignatureModel.prototype, "displayTimeSignature", {
        get: function () {
            return this._displayTimeSignature || this.ts;
        },
        set: function (ts) {
            this._displayTimeSignature = ts;
        },
        enumerable: true,
        configurable: true
    });
    TimeSignatureModel.prototype.recordMetreDataImpl = function (mctx) {
        mctx.ts = this.ts;
        this.ctxData = new C.MetreContext(mctx);
    };
    TimeSignatureModel.prototype.annotateImpl = function (ctx) {
        if (!ctx.attributes.clef) {
            return ClefModel.createClef(ctx);
        }
        if (!ctx.attributes.clef) {
            return KeySignatureModel.createKeySignature(ctx);
        }
        if (ctx.ts && ctx.attributes.time !== this && TimeSignatureModel.isEqual(this.ts, ctx.ts)) {
            ctx.eraseCurrent();
            return 20 /* RetryCurrent */;
        }
        var intersectingNotes = _.filter(ctx.intersects(600 /* Duration */), function (l) { return l.isNote; });
        if (intersectingNotes.length) {
            if (_.any(intersectingNotes, function (n) { return n.containsAccidentalAfterBarline(ctx); })) {
                this._annotatedSpacing = 15;
            }
            else {
                this._annotatedSpacing = 25;
            }
        }
        else {
            this._annotatedSpacing = 12.5;
        }
        ctx.x += 28 + this._annotatedSpacing;
        ctx.attributes.time = this;
        this.color = this.temporary ? "#A5A5A5" : (this.selected ? "#75A1D0" : "#000000");
        return 10 /* Success */;
    };
    TimeSignatureModel.isEqual = function (ts1, ts2) {
        return (!!ts1 === !!ts2) && (!ts1 || ts1.beats === ts2.beats && ts1.beatType === ts2.beatType && ts1.commonRepresentation === ts2.commonRepresentation);
    };
    TimeSignatureModel.createTS = function (ctx) {
        ctx.insertPast(new TimeSignatureModel({
            beats: [4],
            beatTypes: [4],
            senzaMisura: false
        }, true));
        return 60 /* RetryLine */;
    };
    return TimeSignatureModel;
})(Model.StateChangeModel);
TimeSignatureModel.prototype._displayTimeSignature = null;
module.exports = TimeSignatureModel;

},{"./clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/tsee.js":[function(require,module,exports){
var EventEmitter = require("events");
var TSEE = (function () {
    function TSEE() {
        EventEmitter.EventEmitter.call(this);
    }
    TSEE.prototype.addListener = function (event, listener) {
        EventEmitter.EventEmitter.prototype.addListener.call(this, event, listener);
    };
    TSEE.prototype.on = function (event, listener) {
        return EventEmitter.EventEmitter.prototype.on.call(this, event, listener);
    };
    TSEE.prototype.once = function (event, listener) {
        EventEmitter.EventEmitter.prototype.once.call(this, event, listener);
    };
    TSEE.prototype.removeListener = function (event, listener) {
        EventEmitter.EventEmitter.prototype.removeListener.call(this, event, listener);
    };
    TSEE.prototype.removeAllListener = function (event) {
        EventEmitter.EventEmitter.prototype.removeAllListener.call(this, event);
    };
    TSEE.prototype.setMaxListeners = function (n) {
        EventEmitter.EventEmitter.prototype.setMaxListeners.call(this, n);
    };
    TSEE.prototype.listeners = function (event) {
        return EventEmitter.EventEmitter.prototype.listeners.call(this, event);
    };
    TSEE.prototype.emit = function (event, arg1, arg2) {
        EventEmitter.EventEmitter.prototype.emit.call(this, event, arg1, arg2);
    };
    return TSEE;
})();
module.exports = TSEE;

},{"events":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/events/events.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/types.js":[function(require,module,exports){
var C = require("./contracts");
var Model = require("./model");
var AttributesModel = require("./attributes");
var BarlineModel = require("./barline");
var BarlineView = require("../views/barline");
var BeamGroupModel = require("./beamGroup");
var BeamGroupView = require("../views/beamGroup");
var BeginModel = require("./begin");
var BeginView = require("../views/begin");
var ClefModel = require("./clef");
var ClefView = require("../views/clef");
var DurationModel = require("./duration");
var DurationView = require("../views/duration");
var EndMarkerModel = require("./endMarker");
var KeySignatureModel = require("./keySignature");
var KeySignatureView = require("../views/keySignature");
var NewlineModel = require("./newline");
var NewlineView = require("../views/newline");
var NewpageModel = require("./newpage");
var PlaceholderModel = require("./placeholder");
var PrintModel = require("./print");
var SlurModel = require("./slur");
var SlurView = require("../views/slur");
var TimeSignatureModel = require("./timeSignature");
var TimeSignatureView = require("../views/timeSignature");
var WedgeModel = require("./wedge");
var WedgeView = require("../views/wedge");
var registered = false;
function ensureRegistered() {
    "use strict";
    if (registered) {
        return;
    }
    registered = true;
    registerType(145 /* Attributes */, AttributesModel, null);
    registerType(300 /* Barline */, BarlineModel, BarlineView.Component);
    registerType(450 /* BeamGroup */, BeamGroupModel, BeamGroupView.Component);
    registerType(140 /* Begin */, BeginModel, BeginView.Component);
    registerType(150 /* Clef */, ClefModel, ClefView.Component);
    registerType(600 /* Duration */, DurationModel, DurationView.Component);
    registerType(110 /* EndMarker */, EndMarkerModel, null);
    registerType(160 /* KeySignature */, KeySignatureModel, KeySignatureView.Component);
    registerType(130 /* NewLine */, NewlineModel, NewlineView.Component);
    registerType(120 /* NewPage */, NewpageModel, null);
    registerType(999 /* Placeholder */, PlaceholderModel, null);
    registerType(50 /* Print */, PrintModel, null);
    registerType(425 /* Slur */, SlurModel, SlurView.Component);
    registerType(170 /* TimeSignature */, TimeSignatureModel, TimeSignatureView.Component);
    registerType(475 /* Wedge */, WedgeModel, WedgeView.Component);
    function registerType(type, model, view) {
        Model.constructorsByType[type] = function (spec) {
            return new model(spec);
        };
        model.setView(view);
    }
}
exports.ensureRegistered = ensureRegistered;
;

},{"../views/barline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/barline.js","../views/beamGroup":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/beamGroup.js","../views/begin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/begin.js","../views/clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/clef.js","../views/duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/duration.js","../views/keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/keySignature.js","../views/newline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/newline.js","../views/slur":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/slur.js","../views/timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/timeSignature.js","../views/wedge":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/wedge.js","./attributes":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/attributes.js","./barline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/barline.js","./beamGroup":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/beamGroup.js","./begin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/begin.js","./clef":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/clef.js","./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","./endMarker":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/endMarker.js","./keySignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/keySignature.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","./newline":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newline.js","./newpage":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/newpage.js","./placeholder":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/placeholder.js","./print":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/print.js","./slur":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/slur.js","./timeSignature":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/timeSignature.js","./wedge":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/wedge.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/wedge.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Model = require("./model");
var C = require("./contracts");
var assert = require("assert");
var WedgeModel = (function (_super) {
    __extends(WedgeModel, _super);
    function WedgeModel() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(WedgeModel.prototype, "type", {
        get: function () {
            return 475 /* Wedge */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WedgeModel.prototype, "xPolicy", {
        get: function () {
            return 2 /* Min */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WedgeModel.prototype, "fields", {
        get: function () {
            return ["wedgeType"];
        },
        enumerable: true,
        configurable: true
    });
    WedgeModel.prototype.recordMetreDataImpl = function (mctx) {
        this.ctxData = new C.MetreContext(mctx);
    };
    WedgeModel.prototype.annotateImpl = function (ctx) {
        if (this.wedgeType === 2 /* Stop */) {
            var endpoint = ctx.prev(function (m) { return m.type === 475 /* Wedge */; }, 1);
            assert.equal(endpoint.type, 475 /* Wedge */);
            assert.notEqual(endpoint.wedgeType, 2 /* Stop */);
            this.endpoint = endpoint;
            this.endpoint.endpoint = this;
        }
        return 10 /* Success */;
    };
    return WedgeModel;
})(Model);
module.exports = WedgeModel;

},{"./contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./model":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/model.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/SMuFL.js":[function(require,module,exports){
var _ = require("lodash");
exports.bravuraMetadata = require("./bravura_metadata");
exports.glyphClasses = require("./classes.json");
exports.glyphNames = require("./glyphnames_diet.json");
exports.bravuraBBoxes = _.indexBy(exports.bravuraMetadata.glyphBBoxes, 4);
function getGlyphCode(name) {
    "use strict";
    if (!(name in this.glyphNames)) {
        console.warn(name, " is not a valid glyph");
    }
    return String.fromCharCode(parseInt(this.glyphNames[name].substring(2), 16));
}
exports.getGlyphCode = getGlyphCode;
exports.distances = {
    beam: 0.88
};

},{"./bravura_metadata":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/bravura_metadata.js","./classes.json":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/classes.json","./glyphnames_diet.json":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/glyphnames_diet.json","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/ajax.js":[function(require,module,exports){
(function (global){
var _ = require("lodash");
var postJSON = function (withCredentials, verb, url, json, onload) {
    if (typeof XMLHttpRequest === "undefined") {
        return;
    }
    if (url.indexOf("/api") === 0 && global.RipienoDesktop) {
        url = "http://ripieno.local:8000" + url;
    }
    var request = new XMLHttpRequest();
    request.open(verb, url);
    request.withCredentials = withCredentials;
    if (json) {
        request.setRequestHeader("Content-Type", "application/json");
    }
    request.onload = function () {
        onload(JSON.parse(request.responseText), request);
    };
    request.onerror = function () {
        onload(null, { status: undefined });
    };
    request.send(JSON.stringify(json));
};
var getJSON = function (withCredentials, url, onload) {
    if (typeof XMLHttpRequest === "undefined") {
        return;
    }
    if (url.indexOf("/api") === 0 && global.RipienoDesktop) {
        url = "http://ripieno.local:8000" + url;
    }
    var request = new XMLHttpRequest();
    request.open("GET", url);
    request.withCredentials = withCredentials;
    request.onload = function () {
        onload(JSON.parse(request.responseText), request);
    };
    request.send();
};
exports.untrusted = {
    postJSON: _.partial(postJSON, false, "POST"),
    putJSON: _.partial(postJSON, false, "PUT"),
    anyJSON: _.partial(postJSON, false),
    getJSON: _.partial(getJSON, false)
};
exports.trusted = {
    postJSON: _.partial(postJSON, true, "POST"),
    putJSON: _.partial(postJSON, true, "PUT"),
    anyJSON: _.partial(postJSON, true),
    getJSON: _.partial(getJSON, true)
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/bravura_metadata.js":[function(require,module,exports){
var Bravura = {
    "fontName": "Bravura",
    "fontVersion": 0.9,
    "engravingDefaults": {
        "arrowShaftThickness": 0.16,
        "barlineSeparation": 0.4,
        "beamSpacing": 0.25,
        "beamThickness": 0.5,
        "bracketThickness": 0.5,
        "dashedBarlineDashLength": 0.5,
        "dashedBarlineGapLength": 0.25,
        "dashedBarlineThickness": 0.16,
        "hairpinThickness": 0.16,
        "legerLineExtension": 0.4,
        "legerLineThickness": 0.16,
        "lyricLineThickness": 0.16,
        "octaveLineThickness": 0.16,
        "pedalLineThickness": 0.16,
        "repeatBarlineDotSeparation": 0.16,
        "repeatEndingLineThickness": 0.16,
        "slurEndpointThickness": 0.1,
        "slurMidpointThickness": 0.22,
        "staffLineThickness": 0.13,
        "stemThickness": 0.16,
        "subBracketThickness": 0.16,
        "textEnclosureThickness": 0.16,
        "thickBarlineThickness": 0.5,
        "thinBarlineThickness": 0.16,
        "tieEndpointThickness": 0.1,
        "tieMidpointThickness": 0.22,
        "tupletBracketThickness": 0.16
    },
    "glyphBBoxes": [
        [
            0.328,
            3.988,
            0.008,
            0.0,
            "brace"
        ],
        [
            0.352,
            3.988,
            0.032,
            0.0,
            "reversedBrace"
        ],
        [
            2.204,
            6.124,
            0.016,
            -2.124,
            "bracket"
        ],
        [
            2.116,
            1.996,
            0.0,
            0.0,
            "bracketTop"
        ],
        [
            2.116,
            0.0,
            0.0,
            -1.996,
            "bracketBottom"
        ],
        [
            2.128,
            1.996,
            0.012,
            0.0,
            "reversedBracketTop"
        ],
        [
            2.128,
            0.0,
            0.012,
            -1.996,
            "reversedBracketBottom"
        ],
        [
            4.232,
            4.24,
            0.0,
            -0.272,
            "systemDivider"
        ],
        [
            6.252,
            4.2,
            0.0,
            -0.24,
            "systemDividerLong"
        ],
        [
            9.276,
            4.244,
            0.0,
            -0.28,
            "systemDividerExtraLong"
        ],
        [
            1.2,
            2.748,
            0.0,
            1.252,
            "splitBarDivider"
        ],
        [
            2.104,
            2.104,
            0.0,
            0.0,
            "staffDivideArrowDown"
        ],
        [
            2.104,
            4.0,
            0.0,
            1.896,
            "staffDivideArrowUp"
        ],
        [
            2.104,
            4.072,
            0.0,
            0.0,
            "staffDivideArrowUpDown"
        ],
        [
            2.0,
            2.064,
            0.0,
            1.936,
            "staff1Line"
        ],
        [
            2.0,
            2.564,
            0.0,
            1.436,
            "staff2Lines"
        ],
        [
            2.0,
            3.064,
            0.0,
            0.936,
            "staff3Lines"
        ],
        [
            2.0,
            3.564,
            0.0,
            0.436,
            "staff4Lines"
        ],
        [
            2.0,
            4.064,
            0.0,
            -0.064,
            "staff5Lines"
        ],
        [
            2.0,
            4.564,
            0.0,
            -0.564,
            "staff6Lines"
        ],
        [
            3.0,
            2.064,
            0.0,
            1.936,
            "staff1LineWide"
        ],
        [
            3.0,
            2.564,
            0.0,
            1.436,
            "staff2LinesWide"
        ],
        [
            3.0,
            3.064,
            0.0,
            0.936,
            "staff3LinesWide"
        ],
        [
            3.0,
            3.564,
            0.0,
            0.436,
            "staff4LinesWide"
        ],
        [
            3.0,
            4.064,
            0.0,
            -0.064,
            "staff5LinesWide"
        ],
        [
            3.0,
            4.564,
            0.0,
            -0.564,
            "staff6LinesWide"
        ],
        [
            1.0,
            2.064,
            0.0,
            1.936,
            "staff1LineNarrow"
        ],
        [
            1.0,
            2.564,
            0.0,
            1.436,
            "staff2LinesNarrow"
        ],
        [
            1.0,
            3.064,
            0.0,
            0.936,
            "staff3LinesNarrow"
        ],
        [
            1.0,
            3.564,
            0.0,
            0.436,
            "staff4LinesNarrow"
        ],
        [
            1.0,
            4.064,
            0.0,
            -0.064,
            "staff5LinesNarrow"
        ],
        [
            1.0,
            4.564,
            0.0,
            -0.564,
            "staff6LinesNarrow"
        ],
        [
            1.648,
            0.08,
            -0.32,
            -0.08,
            "legerLine"
        ],
        [
            2.448,
            0.08,
            -0.32,
            -0.08,
            "legerLineWide"
        ],
        [
            0.848,
            0.08,
            -0.32,
            -0.08,
            "legerLineNarrow"
        ],
        [
            0.144,
            4.0,
            0.0,
            0.0,
            "barlineSingle"
        ],
        [
            0.576,
            4.0,
            0.0,
            0.0,
            "barlineDouble"
        ],
        [
            0.912,
            4.0,
            0.0,
            0.0,
            "barlineFinal"
        ],
        [
            0.912,
            4.0,
            0.0,
            0.0,
            "barlineReverseFinal"
        ],
        [
            0.5,
            4.0,
            0.0,
            0.0,
            "barlineHeavy"
        ],
        [
            1.372,
            4.0,
            0.0,
            0.0,
            "barlineHeavyHeavy"
        ],
        [
            0.144,
            4.0,
            0.0,
            0.0,
            "barlineDashed"
        ],
        [
            0.196,
            3.988,
            0.0,
            0.0,
            "barlineDotted"
        ],
        [
            0.148,
            4.0,
            0.004,
            2.0,
            "barlineShort"
        ],
        [
            0.144,
            4.48,
            0.0,
            3.472,
            "barlineTick"
        ],
        [
            1.464,
            4.0,
            0.0,
            0.0,
            "repeatLeft"
        ],
        [
            1.468,
            4.0,
            0.004,
            0.0,
            "repeatRight"
        ],
        [
            2.432,
            4.0,
            0.004,
            0.0,
            "repeatRightLeft"
        ],
        [
            0.4,
            2.68,
            0.0,
            1.272,
            "repeatDots"
        ],
        [
            0.4,
            0.7,
            0.0,
            0.3,
            "repeatDot"
        ],
        [
            4.328,
            1.768,
            0.044,
            -0.036,
            "dalSegno"
        ],
        [
            4.328,
            1.768,
            0.044,
            -0.036,
            "daCapo"
        ],
        [
            2.2,
            3.036,
            0.016,
            -0.108,
            "segno"
        ],
        [
            3.82,
            3.592,
            -0.016,
            -0.632,
            "coda"
        ],
        [
            3.288,
            3.612,
            0.0,
            -0.616,
            "codaSquare"
        ],
        [
            1.612,
            4.124,
            0.008,
            -0.132,
            "segnoSerpent1"
        ],
        [
            1.608,
            4.124,
            0.004,
            -0.132,
            "segnoSerpent2"
        ],
        [
            1.464,
            3.48,
            0.0,
            0.5,
            "leftRepeatSmall"
        ],
        [
            1.464,
            3.48,
            0.0,
            0.5,
            "rightRepeatSmall"
        ],
        [
            2.708,
            4.408,
            0.024,
            -2.632,
            "gClef"
        ],
        [
            2.672,
            4.376,
            0.02,
            -3.504,
            "gClef15mb"
        ],
        [
            2.676,
            4.404,
            0.016,
            -3.46,
            "gClef8vb"
        ],
        [
            2.696,
            5.336,
            0.016,
            -2.604,
            "gClef8va"
        ],
        [
            2.668,
            5.26,
            0.016,
            -2.572,
            "gClef15ma"
        ],
        [
            4.172,
            4.396,
            0.032,
            -2.6,
            "gClef8vbOld"
        ],
        [
            3.368,
            4.356,
            0.028,
            -2.616,
            "gClef8vbCClef"
        ],
        [
            2.728,
            4.432,
            0.024,
            -2.644,
            "gClefLigatedNumberBelow"
        ],
        [
            2.708,
            4.416,
            0.028,
            -2.628,
            "gClefLigatedNumberAbove"
        ],
        [
            2.676,
            5.036,
            0.0,
            -2.628,
            "gClefArrowUp"
        ],
        [
            2.692,
            4.412,
            0.016,
            -2.972,
            "gClefArrowDown"
        ],
        [
            2.796,
            2.012,
            0.0,
            -2.012,
            "cClef"
        ],
        [
            2.796,
            2.012,
            0.0,
            -3.012,
            "cClef8vb"
        ],
        [
            2.796,
            3.628,
            -0.128,
            -2.0,
            "cClefArrowUp"
        ],
        [
            2.796,
            2.024,
            -0.124,
            -3.612,
            "cClefArrowDown"
        ],
        [
            2.336,
            1.996,
            0.0,
            -1.996,
            "cClefSquare"
        ],
        [
            0.904,
            2.132,
            -0.004,
            -2.156,
            "cClefCombining"
        ],
        [
            2.72,
            1.048,
            -0.084,
            -2.488,
            "fClef"
        ],
        [
            2.72,
            1.048,
            -0.084,
            -3.02,
            "fClef15mb"
        ],
        [
            2.72,
            1.048,
            -0.084,
            -3.0,
            "fClef8vb"
        ],
        [
            2.72,
            1.896,
            -0.084,
            -2.484,
            "fClef8va"
        ],
        [
            2.716,
            2.012,
            -0.088,
            -2.484,
            "fClef15ma"
        ],
        [
            2.72,
            2.688,
            -0.084,
            -2.488,
            "fClefArrowUp"
        ],
        [
            2.72,
            1.048,
            -0.084,
            -4.124,
            "fClefArrowDown"
        ],
        [
            1.528,
            1.0,
            0.0,
            -1.0,
            "unpitchedPercussionClef1"
        ],
        [
            1.248,
            1.844,
            0.0,
            -1.86,
            "unpitchedPercussionClef2"
        ],
        [
            0.98,
            2.516,
            0.004,
            -2.516,
            "semipitchedPercussionClef1"
        ],
        [
            1.836,
            0.824,
            0.008,
            -0.808,
            "semipitchedPercussionClef2"
        ],
        [
            1.632,
            3.056,
            -0.012,
            -2.992,
            "6stringTabClef"
        ],
        [
            1.088,
            2.016,
            -0.012,
            -2.032,
            "4stringTabClef"
        ],
        [
            1.856,
            1.5,
            0.0,
            -1.5,
            "cClefTriangular"
        ],
        [
            1.264,
            1.004,
            0.0,
            -0.996,
            "fClefTriangular"
        ],
        [
            2.416,
            2.46,
            -0.016,
            -1.544,
            "cClefTriangularToFClef"
        ],
        [
            2.428,
            2.496,
            -0.004,
            -1.508,
            "fClefTriangularToCClef"
        ],
        [
            2.664,
            4.408,
            -0.02,
            -2.632,
            "gClefReversed"
        ],
        [
            2.664,
            4.616,
            -0.02,
            -2.424,
            "gClefTurned"
        ],
        [
            2.796,
            2.012,
            0.0,
            -2.012,
            "cClefReversed"
        ],
        [
            2.8,
            1.048,
            -0.004,
            -2.488,
            "fClefReversed"
        ],
        [
            2.72,
            2.48,
            -0.084,
            -1.056,
            "fClefTurned"
        ],
        [
            0.956,
            1.408,
            0.0,
            -1.392,
            "bridgeClef"
        ],
        [
            1.136,
            1.864,
            0.0,
            -1.852,
            "accdnDiatonicClef"
        ],
        [
            1.76,
            2.828,
            0.0,
            -1.82,
            "gClefChange"
        ],
        [
            2.024,
            1.328,
            0.0,
            -1.328,
            "cClefChange"
        ],
        [
            1.852,
            0.68,
            -0.06,
            -1.656,
            "fClefChange"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "clefChangeCombining"
        ],
        [
            1.72,
            1.004,
            0.0,
            -1.0,
            "timeSig0"
        ],
        [
            1.172,
            1.004,
            -0.004,
            -1.0,
            "timeSig1"
        ],
        [
            1.656,
            1.016,
            0.032,
            -1.028,
            "timeSig2"
        ],
        [
            1.54,
            0.996,
            0.016,
            -1.004,
            "timeSig3"
        ],
        [
            1.728,
            1.004,
            0.008,
            -1.0,
            "timeSig4"
        ],
        [
            1.452,
            0.984,
            0.0,
            -1.004,
            "timeSig5"
        ],
        [
            1.572,
            1.004,
            -0.004,
            -0.996,
            "timeSig6"
        ],
        [
            1.604,
            0.996,
            0.0,
            -1.0,
            "timeSig7"
        ],
        [
            1.56,
            1.036,
            -0.024,
            -1.036,
            "timeSig8"
        ],
        [
            1.576,
            1.0,
            0.0,
            -1.0,
            "timeSig9"
        ],
        [
            1.696,
            1.004,
            0.02,
            -0.996,
            "timeSigCommon"
        ],
        [
            1.672,
            1.444,
            0.0,
            -1.436,
            "timeSigCutCommon"
        ],
        [
            1.996,
            1.0,
            -0.004,
            -1.0,
            "timeSigPlus"
        ],
        [
            1.016,
            0.488,
            -0.004,
            -0.532,
            "timeSigPlusSmall"
        ],
        [
            1.512,
            0.756,
            0.0,
            -0.76,
            "timeSigFractionalSlash"
        ],
        [
            1.792,
            0.496,
            0.0,
            -0.5,
            "timeSigEquals"
        ],
        [
            1.792,
            0.16,
            0.0,
            -0.14,
            "timeSigMinus"
        ],
        [
            1.58,
            0.792,
            0.0,
            -0.792,
            "timeSigMultiply"
        ],
        [
            0.652,
            1.0,
            0.0,
            -1.004,
            "timeSigParensLeftSmall"
        ],
        [
            0.72,
            1.0,
            0.068,
            -1.004,
            "timeSigParensRightSmall"
        ],
        [
            0.732,
            2.0,
            -0.004,
            -1.988,
            "timeSigParensLeft"
        ],
        [
            0.504,
            2.0,
            -0.232,
            -1.988,
            "timeSigParensRight"
        ],
        [
            0.736,
            0.552,
            0.036,
            -0.6,
            "timeSigComma"
        ],
        [
            1.54,
            1.004,
            0.0,
            -0.992,
            "timeSigFractionQuarter"
        ],
        [
            1.564,
            0.992,
            0.0,
            -0.992,
            "timeSigFractionHalf"
        ],
        [
            1.636,
            1.0,
            -0.012,
            -1.0,
            "timeSigFractionThreeQuarters"
        ],
        [
            1.616,
            1.0,
            0.0,
            -1.0,
            "timeSigFractionOneThird"
        ],
        [
            1.656,
            1.0,
            0.0,
            -1.0,
            "timeSigFractionTwoThirds"
        ],
        [
            1.608,
            1.5,
            -0.012,
            -1.508,
            "timeSigX"
        ],
        [
            3.384,
            1.0,
            -0.004,
            -0.992,
            "timeSigOpenPenderecki"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "timeSigCombNumerator"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "timeSigCombDenominator"
        ],
        [
            2.62,
            0.668,
            0.0,
            -0.684,
            "noteheadDoubleWhole"
        ],
        [
            2.132,
            1.0,
            0.0,
            -1.0,
            "noteheadDoubleWholeSquare"
        ],
        [
            1.836,
            0.548,
            0.0,
            -0.544,
            "noteheadWhole"
        ],
        [
            1.364,
            0.58,
            0.0,
            -0.58,
            "noteheadHalf"
        ],
        [
            1.328,
            0.564,
            0.0,
            -0.564,
            "noteheadBlack"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "noteheadNull"
        ],
        [
            2.468,
            0.604,
            0.0,
            -0.596,
            "noteheadXDoubleWhole"
        ],
        [
            1.704,
            0.564,
            0.0,
            -0.564,
            "noteheadXWhole"
        ],
        [
            1.516,
            0.564,
            0.004,
            -0.564,
            "noteheadXHalf"
        ],
        [
            1.32,
            0.56,
            0.0,
            -0.576,
            "noteheadXBlack"
        ],
        [
            0.988,
            0.504,
            0.0,
            -0.504,
            "noteheadXOrnate"
        ],
        [
            2.352,
            0.62,
            0.0,
            -0.62,
            "noteheadPlusDoubleWhole"
        ],
        [
            1.416,
            0.62,
            0.0,
            -0.62,
            "noteheadPlusWhole"
        ],
        [
            1.188,
            0.576,
            0.0,
            -0.56,
            "noteheadPlusHalf"
        ],
        [
            1.124,
            0.564,
            -0.004,
            -0.564,
            "noteheadPlusBlack"
        ],
        [
            1.92,
            0.688,
            0.0,
            -0.676,
            "noteheadCircleXDoubleWhole"
        ],
        [
            1.136,
            0.568,
            0.004,
            -0.568,
            "noteheadCircleXWhole"
        ],
        [
            1.14,
            0.568,
            0.004,
            -0.568,
            "noteheadCircleXHalf"
        ],
        [
            1.128,
            0.564,
            0.004,
            -0.564,
            "noteheadCircleX"
        ],
        [
            2.64,
            0.68,
            0.0,
            -0.68,
            "noteheadDoubleWholeWithX"
        ],
        [
            1.848,
            0.544,
            0.0,
            -0.556,
            "noteheadWholeWithX"
        ],
        [
            1.376,
            0.58,
            0.0,
            -0.588,
            "noteheadHalfWithX"
        ],
        [
            1.484,
            0.644,
            -0.004,
            -0.644,
            "noteheadVoidWithX"
        ],
        [
            1.416,
            0.56,
            0.0,
            -0.568,
            "noteheadSquareWhite"
        ],
        [
            1.416,
            0.564,
            0.0,
            -0.564,
            "noteheadSquareBlack"
        ],
        [
            2.152,
            0.608,
            0.004,
            -0.58,
            "noteheadTriangleUpDoubleWhole"
        ],
        [
            1.416,
            0.556,
            0.004,
            -0.548,
            "noteheadTriangleUpWhole"
        ],
        [
            1.256,
            0.548,
            -0.004,
            -0.556,
            "noteheadTriangleUpHalf"
        ],
        [
            1.316,
            0.568,
            0.0,
            -0.564,
            "noteheadTriangleUpWhite"
        ],
        [
            1.312,
            0.572,
            0.0,
            -0.56,
            "noteheadTriangleUpBlack"
        ],
        [
            1.524,
            0.572,
            0.0,
            -0.56,
            "noteheadTriangleLeftWhite"
        ],
        [
            1.524,
            0.572,
            0.0,
            -0.56,
            "noteheadTriangleLeftBlack"
        ],
        [
            1.528,
            0.572,
            0.004,
            -0.56,
            "noteheadTriangleRightWhite"
        ],
        [
            1.524,
            0.572,
            0.0,
            -0.56,
            "noteheadTriangleRightBlack"
        ],
        [
            2.152,
            0.608,
            0.004,
            -0.58,
            "noteheadTriangleDownDoubleWhole"
        ],
        [
            1.416,
            0.556,
            0.004,
            -0.548,
            "noteheadTriangleDownWhole"
        ],
        [
            1.256,
            0.548,
            -0.004,
            -0.556,
            "noteheadTriangleDownHalf"
        ],
        [
            1.316,
            0.564,
            0.0,
            -0.568,
            "noteheadTriangleDownWhite"
        ],
        [
            1.312,
            0.568,
            0.0,
            -0.564,
            "noteheadTriangleDownBlack"
        ],
        [
            1.524,
            0.568,
            0.0,
            -0.564,
            "noteheadTriangleUpRightWhite"
        ],
        [
            1.524,
            0.568,
            0.0,
            -0.564,
            "noteheadTriangleUpRightBlack"
        ],
        [
            1.416,
            0.564,
            0.0,
            -0.564,
            "noteheadMoonWhite"
        ],
        [
            1.416,
            0.564,
            0.0,
            -0.564,
            "noteheadMoonBlack"
        ],
        [
            1.272,
            0.572,
            0.0,
            -0.576,
            "noteheadTriangleRoundDownWhite"
        ],
        [
            1.272,
            0.576,
            0.0,
            -0.572,
            "noteheadTriangleRoundDownBlack"
        ],
        [
            1.592,
            0.728,
            -0.292,
            -0.72,
            "noteheadParenthesis"
        ],
        [
            1.684,
            0.74,
            -0.36,
            -0.752,
            "noteheadSlashedBlack1"
        ],
        [
            1.688,
            0.744,
            -0.356,
            -0.748,
            "noteheadSlashedBlack2"
        ],
        [
            1.8,
            0.7,
            -0.308,
            -0.708,
            "noteheadSlashedHalf1"
        ],
        [
            1.772,
            0.7,
            -0.336,
            -0.708,
            "noteheadSlashedHalf2"
        ],
        [
            2.012,
            0.684,
            -0.1,
            -0.736,
            "noteheadSlashedWhole1"
        ],
        [
            2.028,
            0.7,
            -0.084,
            -0.72,
            "noteheadSlashedWhole2"
        ],
        [
            2.62,
            0.744,
            0.0,
            -0.784,
            "noteheadSlashedDoubleWhole1"
        ],
        [
            2.62,
            0.744,
            0.0,
            -0.784,
            "noteheadSlashedDoubleWhole2"
        ],
        [
            2.08,
            0.604,
            0.0,
            -0.604,
            "noteheadDiamondDoubleWhole"
        ],
        [
            1.3,
            0.6,
            0.0,
            -0.608,
            "noteheadDiamondWhole"
        ],
        [
            1.132,
            0.572,
            0.004,
            -0.556,
            "noteheadDiamondHalf"
        ],
        [
            1.576,
            0.572,
            0.0,
            -0.556,
            "noteheadDiamondHalfWide"
        ],
        [
            1.124,
            0.568,
            0.0,
            -0.56,
            "noteheadDiamondBlack"
        ],
        [
            1.572,
            0.568,
            0.0,
            -0.56,
            "noteheadDiamondBlackWide"
        ],
        [
            1.124,
            0.568,
            0.0,
            -0.56,
            "noteheadDiamondWhite"
        ],
        [
            1.572,
            0.568,
            0.0,
            -0.56,
            "noteheadDiamondWhiteWide"
        ],
        [
            2.068,
            0.62,
            0.0,
            -0.58,
            "noteheadDiamondDoubleWholeOld"
        ],
        [
            1.348,
            0.576,
            0.0,
            -0.568,
            "noteheadDiamondWholeOld"
        ],
        [
            1.324,
            0.564,
            0.0,
            -0.572,
            "noteheadDiamondHalfOld"
        ],
        [
            1.316,
            0.564,
            0.0,
            -0.576,
            "noteheadDiamondBlackOld"
        ],
        [
            1.308,
            0.568,
            -0.004,
            -0.568,
            "noteheadDiamondHalfFilled"
        ],
        [
            1.532,
            0.76,
            -0.004,
            -0.76,
            "noteheadCircledBlack"
        ],
        [
            1.532,
            0.768,
            0.0,
            -0.764,
            "noteheadCircledHalf"
        ],
        [
            2.032,
            1.016,
            0.0,
            -1.012,
            "noteheadCircledWhole"
        ],
        [
            2.62,
            0.924,
            0.0,
            -0.948,
            "noteheadCircledDoubleWhole"
        ],
        [
            2.164,
            1.0,
            0.004,
            -0.58,
            "noteheadLargeArrowUpDoubleWhole"
        ],
        [
            1.408,
            1.0,
            0.004,
            -0.548,
            "noteheadLargeArrowUpWhole"
        ],
        [
            1.256,
            0.996,
            -0.004,
            -0.556,
            "noteheadLargeArrowUpHalf"
        ],
        [
            1.328,
            1.0,
            0.0,
            -0.56,
            "noteheadLargeArrowUpBlack"
        ],
        [
            2.164,
            1.0,
            0.004,
            -0.58,
            "noteheadLargeArrowDownDoubleWhole"
        ],
        [
            1.408,
            1.0,
            0.004,
            -0.548,
            "noteheadLargeArrowDownWhole"
        ],
        [
            1.256,
            0.996,
            -0.004,
            -0.556,
            "noteheadLargeArrowDownHalf"
        ],
        [
            1.328,
            1.0,
            0.0,
            -0.56,
            "noteheadLargeArrowDownBlack"
        ],
        [
            0.436,
            0.724,
            0.0,
            -0.724,
            "noteheadParenthesisLeft"
        ],
        [
            0.292,
            0.724,
            -0.144,
            -0.724,
            "noteheadParenthesisRight"
        ],
        [
            1.128,
            0.564,
            0.004,
            -0.564,
            "noteheadCircleSlash"
        ],
        [
            1.736,
            0.564,
            0.004,
            -0.564,
            "noteheadHeavyX"
        ],
        [
            2.06,
            1.168,
            -0.324,
            -0.564,
            "noteheadHeavyXHat"
        ],
        [
            1.836,
            0.548,
            0.0,
            -0.544,
            "noteheadWholeFilled"
        ],
        [
            1.364,
            0.58,
            0.0,
            -0.58,
            "noteheadHalfFilled"
        ],
        [
            1.296,
            0.564,
            0.0,
            -0.564,
            "noteheadDiamondOpen"
        ],
        [
            1.46,
            0.996,
            0.0,
            -1.004,
            "noteheadSlashVerticalEnds"
        ],
        [
            2.12,
            1.0,
            0.0,
            -1.0,
            "noteheadSlashHorizontalEnds"
        ],
        [
            3.92,
            1.0,
            0.0,
            -1.0,
            "noteheadSlashWhiteWhole"
        ],
        [
            3.12,
            1.0,
            0.0,
            -1.0,
            "noteheadSlashWhiteHalf"
        ],
        [
            2.0,
            0.988,
            0.0,
            -1.0,
            "noteheadSlashDiamondWhite"
        ],
        [
            0.732,
            0.496,
            0.0,
            -0.504,
            "noteheadSlashVerticalEndsSmall"
        ],
        [
            2.12,
            1.0,
            0.0,
            -1.0,
            "noteheadSlashX"
        ],
        [
            1.512,
            1.032,
            -0.052,
            -1.04,
            "noteheadSlashVerticalEndsMuted"
        ],
        [
            2.12,
            1.036,
            0.0,
            -1.036,
            "noteheadSlashHorizontalEndsMuted"
        ],
        [
            3.12,
            1.036,
            0.0,
            -1.036,
            "noteheadSlashWhiteMuted"
        ],
        [
            2.12,
            1.124,
            0.0,
            -0.996,
            "noteheadRoundBlackLarge"
        ],
        [
            2.124,
            1.12,
            0.004,
            -1.0,
            "noteheadRoundWhiteLarge"
        ],
        [
            2.12,
            1.12,
            0.0,
            -1.0,
            "noteheadRoundWhiteWithDotLarge"
        ],
        [
            1.12,
            0.56,
            0.0,
            -0.56,
            "noteheadRoundBlack"
        ],
        [
            1.124,
            0.56,
            0.004,
            -0.56,
            "noteheadRoundWhite"
        ],
        [
            1.12,
            0.56,
            0.0,
            -0.56,
            "noteheadRoundWhiteWithDot"
        ],
        [
            3.244,
            2.068,
            -0.892,
            -2.068,
            "noteheadRoundBlackSlashedLarge"
        ],
        [
            3.116,
            2.068,
            -1.02,
            -2.068,
            "noteheadRoundWhiteSlashedLarge"
        ],
        [
            2.628,
            2.068,
            -1.508,
            -2.068,
            "noteheadRoundBlackSlashed"
        ],
        [
            2.632,
            2.068,
            -1.504,
            -2.068,
            "noteheadRoundWhiteSlashed"
        ],
        [
            2.144,
            1.048,
            0.0,
            -1.056,
            "noteheadSquareBlackLarge"
        ],
        [
            2.144,
            1.056,
            0.0,
            -1.048,
            "noteheadSquareBlackWhite"
        ],
        [
            1.328,
            3.112,
            0.0,
            0.0,
            "noteheadClusterSquareWhite"
        ],
        [
            1.328,
            3.112,
            0.0,
            0.0,
            "noteheadClusterSquareBlack"
        ],
        [
            1.496,
            3.124,
            0.0,
            0.0,
            "noteheadClusterRoundWhite"
        ],
        [
            1.328,
            3.124,
            0.0,
            0.0,
            "noteheadClusterRoundBlack"
        ],
        [
            2.64,
            1.868,
            0.0,
            0.0,
            "noteheadClusterDoubleWhole2nd"
        ],
        [
            1.852,
            1.604,
            0.004,
            0.0,
            "noteheadClusterWhole2nd"
        ],
        [
            1.376,
            1.672,
            0.0,
            0.0,
            "noteheadClusterHalf2nd"
        ],
        [
            1.42,
            1.64,
            0.0,
            0.0,
            "noteheadClusterQuarter2nd"
        ],
        [
            2.644,
            2.368,
            0.004,
            0.0,
            "noteheadClusterDoubleWhole3rd"
        ],
        [
            1.848,
            2.108,
            0.0,
            0.0,
            "noteheadClusterWhole3rd"
        ],
        [
            1.376,
            2.176,
            0.0,
            0.0,
            "noteheadClusterHalf3rd"
        ],
        [
            1.544,
            2.144,
            0.0,
            0.0,
            "noteheadClusterQuarter3rd"
        ],
        [
            2.644,
            0.684,
            0.0,
            -0.732,
            "noteheadClusterDoubleWholeTop"
        ],
        [
            2.64,
            0.312,
            0.0,
            -0.564,
            "noteheadClusterDoubleWholeMiddle"
        ],
        [
            2.644,
            0.828,
            0.0,
            -0.68,
            "noteheadClusterDoubleWholeBottom"
        ],
        [
            1.852,
            0.548,
            0.0,
            -0.92,
            "noteheadClusterWholeTop"
        ],
        [
            1.396,
            0.368,
            0.46,
            -0.5,
            "noteheadClusterWholeMiddle"
        ],
        [
            1.852,
            0.916,
            0.0,
            -0.552,
            "noteheadClusterWholeBottom"
        ],
        [
            1.376,
            0.568,
            0.0,
            -0.7,
            "noteheadClusterHalfTop"
        ],
        [
            1.076,
            0.376,
            0.3,
            -0.5,
            "noteheadClusterHalfMiddle"
        ],
        [
            1.376,
            0.624,
            0.0,
            -0.592,
            "noteheadClusterHalfBottom"
        ],
        [
            1.34,
            0.56,
            0.0,
            -0.812,
            "noteheadClusterQuarterTop"
        ],
        [
            1.016,
            0.388,
            0.32,
            -0.5,
            "noteheadClusterQuarterMiddle"
        ],
        [
            1.34,
            0.904,
            0.0,
            -0.576,
            "noteheadClusterQuarterBottom"
        ],
        [
            1.18,
            1.664,
            0.0,
            0.004,
            "noteheadDiamondClusterWhite2nd"
        ],
        [
            1.18,
            1.664,
            0.0,
            0.004,
            "noteheadDiamondClusterBlack2nd"
        ],
        [
            1.18,
            2.132,
            0.0,
            -0.028,
            "noteheadDiamondClusterWhite3rd"
        ],
        [
            1.18,
            2.128,
            0.0,
            -0.032,
            "noteheadDiamondClusterBlack3rd"
        ],
        [
            1.38,
            0.456,
            0.004,
            -0.704,
            "noteheadDiamondClusterWhiteTop"
        ],
        [
            1.02,
            0.504,
            0.372,
            -0.5,
            "noteheadDiamondClusterWhiteMiddle"
        ],
        [
            1.38,
            0.704,
            0.004,
            -0.456,
            "noteheadDiamondClusterWhiteBottom"
        ],
        [
            1.372,
            0.444,
            0.008,
            -0.7,
            "noteheadDiamondClusterBlackTop"
        ],
        [
            1.02,
            0.5,
            0.388,
            -0.5,
            "noteheadDiamondClusterBlackMiddle"
        ],
        [
            1.364,
            0.7,
            0.0,
            -0.444,
            "noteheadDiamondClusterBlackBottom"
        ],
        [
            1.376,
            0.5,
            0.0,
            -0.54,
            "noteheadRectangularClusterBlackTop"
        ],
        [
            1.376,
            0.52,
            0.0,
            -0.52,
            "noteheadRectangularClusterBlackMiddle"
        ],
        [
            1.376,
            0.54,
            0.0,
            -0.5,
            "noteheadRectangularClusterBlackBottom"
        ],
        [
            1.376,
            0.5,
            0.0,
            -0.54,
            "noteheadRectangularClusterWhiteTop"
        ],
        [
            1.376,
            0.52,
            0.0,
            -0.52,
            "noteheadRectangularClusterWhiteMiddle"
        ],
        [
            1.376,
            0.54,
            0.0,
            -0.5,
            "noteheadRectangularClusterWhiteBottom"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteDoWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteReWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteMiWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteFaWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteSoWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteLaWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteTiWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteSiWhole"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteDoHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteReHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteMiHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteFaHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteSoHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteLaHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteTiHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteSiHalf"
        ],
        [
            1.432,
            0.568,
            0.0,
            -0.56,
            "noteDoBlack"
        ],
        [
            1.432,
            0.568,
            0.0,
            -0.56,
            "noteReBlack"
        ],
        [
            1.432,
            0.572,
            0.0,
            -0.556,
            "noteMiBlack"
        ],
        [
            1.432,
            0.572,
            0.0,
            -0.556,
            "noteFaBlack"
        ],
        [
            1.432,
            0.572,
            0.0,
            -0.556,
            "noteSoBlack"
        ],
        [
            1.432,
            0.572,
            0.0,
            -0.556,
            "noteLaBlack"
        ],
        [
            1.432,
            0.572,
            0.0,
            -0.556,
            "noteTiBlack"
        ],
        [
            1.432,
            0.572,
            0.0,
            -0.556,
            "noteSiBlack"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteAFlatWhole"
        ],
        [
            1.944,
            0.58,
            0.0,
            -0.58,
            "noteAWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteASharpWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteBFlatWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteBWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteBSharpWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteCFlatWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteCWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteCSharpWhole"
        ],
        [
            1.944,
            0.572,
            0.0,
            -0.588,
            "noteDFlatWhole"
        ],
        [
            1.944,
            0.572,
            0.0,
            -0.588,
            "noteDWhole"
        ],
        [
            1.944,
            0.572,
            0.0,
            -0.588,
            "noteDSharpWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteEFlatWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteEWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteESharpWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteFFlatWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteFWhole"
        ],
        [
            1.944,
            0.572,
            0.0,
            -0.588,
            "noteFSharpWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteGFlatWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteGWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteGSharpWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteHWhole"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteHSharpWhole"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteAFlatHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteAHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteASharpHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteBFlatHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteBHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteBSharpHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteCFlatHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteCHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteCSharpHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteDFlatHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteDHalf"
        ],
        [
            1.444,
            0.584,
            0.0,
            -0.576,
            "noteDSharpHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteEFlatHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteEHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteESharpHalf"
        ],
        [
            1.44,
            0.58,
            0.0,
            -0.58,
            "noteFFlatHalf"
        ],
        [
            1.44,
            0.58,
            0.0,
            -0.58,
            "noteFHalf"
        ],
        [
            1.44,
            0.58,
            0.0,
            -0.58,
            "noteFSharpHalf"
        ],
        [
            1.44,
            0.58,
            0.0,
            -0.58,
            "noteGFlatHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteGHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteGSharpHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteHHalf"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteHSharpHalf"
        ],
        [
            1.432,
            0.56,
            0.0,
            -0.568,
            "noteAFlatBlack"
        ],
        [
            1.432,
            0.564,
            0.0,
            -0.564,
            "noteABlack"
        ],
        [
            1.432,
            0.56,
            0.0,
            -0.568,
            "noteASharpBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteBFlatBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteBBlack"
        ],
        [
            1.428,
            0.568,
            0.0,
            -0.56,
            "noteBSharpBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteCFlatBlack"
        ],
        [
            1.432,
            0.568,
            0.0,
            -0.56,
            "noteCBlack"
        ],
        [
            1.428,
            0.568,
            0.0,
            -0.56,
            "noteCSharpBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteDFlatBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteDBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteDSharpBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteEFlatBlack"
        ],
        [
            1.432,
            0.564,
            0.0,
            -0.564,
            "noteEBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteESharpBlack"
        ],
        [
            1.428,
            0.568,
            0.0,
            -0.56,
            "noteFFlatBlack"
        ],
        [
            1.432,
            0.564,
            0.0,
            -0.564,
            "noteFBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteFSharpBlack"
        ],
        [
            1.432,
            0.568,
            0.0,
            -0.56,
            "noteGFlatBlack"
        ],
        [
            1.432,
            0.568,
            0.0,
            -0.56,
            "noteGBlack"
        ],
        [
            1.428,
            0.564,
            0.0,
            -0.564,
            "noteGSharpBlack"
        ],
        [
            1.432,
            0.568,
            0.0,
            -0.56,
            "noteHBlack"
        ],
        [
            1.432,
            0.568,
            0.0,
            -0.56,
            "noteHSharpBlack"
        ],
        [
            1.944,
            0.576,
            0.0,
            -0.584,
            "noteEmptyWhole"
        ],
        [
            1.44,
            0.584,
            0.0,
            -0.576,
            "noteEmptyHalf"
        ],
        [
            1.432,
            0.564,
            0.0,
            -0.564,
            "noteEmptyBlack"
        ],
        [
            1.364,
            0.58,
            0.0,
            -0.58,
            "noteShapeRoundWhite"
        ],
        [
            1.328,
            0.564,
            0.0,
            -0.564,
            "noteShapeRoundBlack"
        ],
        [
            1.616,
            0.56,
            0.0,
            -0.56,
            "noteShapeSquareWhite"
        ],
        [
            1.616,
            0.56,
            0.0,
            -0.56,
            "noteShapeSquareBlack"
        ],
        [
            1.62,
            0.556,
            0.0,
            -0.564,
            "noteShapeTriangleRightWhite"
        ],
        [
            1.62,
            0.56,
            0.0,
            -0.56,
            "noteShapeTriangleRightBlack"
        ],
        [
            1.62,
            0.556,
            0.0,
            -0.564,
            "noteShapeTriangleLeftWhite"
        ],
        [
            1.62,
            0.56,
            0.0,
            -0.56,
            "noteShapeTriangleLeftBlack"
        ],
        [
            1.544,
            0.588,
            0.0,
            -0.588,
            "noteShapeDiamondWhite"
        ],
        [
            1.54,
            0.588,
            0.0,
            -0.588,
            "noteShapeDiamondBlack"
        ],
        [
            1.62,
            0.564,
            0.0,
            -0.568,
            "noteShapeTriangleUpWhite"
        ],
        [
            1.62,
            0.564,
            0.0,
            -0.568,
            "noteShapeTriangleUpBlack"
        ],
        [
            1.596,
            0.528,
            0.0,
            -0.524,
            "noteShapeMoonWhite"
        ],
        [
            1.596,
            0.524,
            0.0,
            -0.528,
            "noteShapeMoonBlack"
        ],
        [
            1.588,
            0.548,
            0.004,
            -0.564,
            "noteShapeTriangleRoundWhite"
        ],
        [
            1.584,
            0.556,
            0.0,
            -0.556,
            "noteShapeTriangleRoundBlack"
        ],
        [
            1.224,
            0.52,
            0.004,
            -0.52,
            "noteShapeKeystoneWhite"
        ],
        [
            1.224,
            0.52,
            0.0,
            -0.52,
            "noteShapeKeystoneBlack"
        ],
        [
            1.04,
            0.5,
            0.004,
            -0.5,
            "noteShapeQuarterMoonWhite"
        ],
        [
            1.04,
            0.5,
            0.004,
            -0.5,
            "noteShapeQuarterMoonBlack"
        ],
        [
            1.172,
            0.52,
            0.0,
            -0.52,
            "noteShapeIsoscelesTriangleWhite"
        ],
        [
            1.172,
            0.52,
            0.0,
            -0.52,
            "noteShapeIsoscelesTriangleBlack"
        ],
        [
            1.04,
            0.5,
            0.0,
            -0.5,
            "noteShapeMoonLeftWhite"
        ],
        [
            1.04,
            0.5,
            0.0,
            -0.5,
            "noteShapeMoonLeftBlack"
        ],
        [
            1.172,
            0.52,
            0.0,
            -0.524,
            "noteShapeArrowheadLeftWhite"
        ],
        [
            1.172,
            0.52,
            0.0,
            -0.52,
            "noteShapeArrowheadLeftBlack"
        ],
        [
            1.292,
            0.5,
            0.0,
            -0.504,
            "noteShapeTriangleRoundLeftWhite"
        ],
        [
            1.292,
            0.504,
            0.0,
            -0.504,
            "noteShapeTriangleRoundLeftBlack"
        ],
        [
            2.62,
            0.892,
            0.0,
            -0.46,
            "noteDoubleWhole"
        ],
        [
            2.132,
            1.0,
            0.0,
            -1.0,
            "noteDoubleWholeSquare"
        ],
        [
            1.836,
            0.592,
            0.0,
            -0.5,
            "noteWhole"
        ],
        [
            1.324,
            3.54,
            0.0,
            -0.5,
            "noteHalfUp"
        ],
        [
            1.324,
            0.64,
            0.0,
            -3.432,
            "noteHalfDown"
        ],
        [
            1.3,
            3.54,
            0.0,
            -0.5,
            "noteQuarterUp"
        ],
        [
            1.304,
            0.608,
            0.004,
            -3.436,
            "noteQuarterDown"
        ],
        [
            2.152,
            3.552,
            0.0,
            -0.5,
            "note8thUp"
        ],
        [
            1.3,
            0.604,
            0.0,
            -3.444,
            "note8thDown"
        ],
        [
            2.204,
            3.552,
            0.0,
            -0.5,
            "note16thUp"
        ],
        [
            1.304,
            0.604,
            0.004,
            -3.428,
            "note16thDown"
        ],
        [
            2.224,
            4.292,
            0.0,
            -0.5,
            "note32ndUp"
        ],
        [
            1.304,
            0.604,
            0.0,
            -4.18,
            "note32ndDown"
        ],
        [
            2.212,
            5.04,
            0.0,
            -0.5,
            "note64thUp"
        ],
        [
            1.308,
            0.604,
            0.004,
            -4.928,
            "note64thDown"
        ],
        [
            2.228,
            5.788,
            0.0,
            -0.5,
            "note128thUp"
        ],
        [
            1.308,
            0.604,
            0.0,
            -5.676,
            "note128thDown"
        ],
        [
            2.224,
            6.548,
            0.0,
            -0.5,
            "note256thUp"
        ],
        [
            1.304,
            0.604,
            0.0,
            -6.428,
            "note256thDown"
        ],
        [
            2.228,
            7.304,
            0.0,
            -0.5,
            "note512thUp"
        ],
        [
            1.308,
            0.604,
            0.0,
            -7.16,
            "note512thDown"
        ],
        [
            2.224,
            8.048,
            0.0,
            -0.5,
            "note1024thUp"
        ],
        [
            1.3,
            0.604,
            0.0,
            -7.912,
            "note1024thDown"
        ],
        [
            0.572,
            0.288,
            0.0,
            -0.284,
            "augmentationDot"
        ],
        [
            1.3,
            3.048,
            0.0,
            -0.496,
            "textBlackNoteShortStem"
        ],
        [
            1.3,
            3.808,
            0.0,
            -0.496,
            "textBlackNoteLongStem"
        ],
        [
            1.372,
            3.048,
            0.0,
            -0.496,
            "textBlackNoteFrac8thShortStem"
        ],
        [
            1.368,
            3.808,
            0.0,
            -0.496,
            "textBlackNoteFrac8thLongStem"
        ],
        [
            1.368,
            3.048,
            0.0,
            -0.496,
            "textBlackNoteFrac16thShortStem"
        ],
        [
            1.372,
            3.808,
            0.0,
            -0.496,
            "textBlackNoteFrac16thLongStem"
        ],
        [
            1.368,
            3.808,
            0.0,
            -0.496,
            "textBlackNoteFrac32ndLongStem"
        ],
        [
            1.368,
            3.048,
            0.0,
            2.548,
            "textCont8thBeamShortStem"
        ],
        [
            1.368,
            3.808,
            0.0,
            3.308,
            "textCont8thBeamLongStem"
        ],
        [
            1.368,
            3.048,
            0.0,
            1.8,
            "textCont16thBeamShortStem"
        ],
        [
            1.368,
            3.808,
            0.0,
            2.56,
            "textCont16thBeamLongStem"
        ],
        [
            1.368,
            3.808,
            0.0,
            1.8,
            "textCont32ndBeamLongStem"
        ],
        [
            1.06,
            0.368,
            0.56,
            -0.132,
            "textAugmentationDot"
        ],
        [
            1.78,
            -0.668,
            0.32,
            -1.24,
            "textTie"
        ],
        [
            1.272,
            4.172,
            0.0,
            3.348,
            "textTupletBracketStartShortStem"
        ],
        [
            1.74,
            4.668,
            0.8,
            3.568,
            "textTuplet3ShortStem"
        ],
        [
            1.272,
            4.172,
            0.0,
            3.348,
            "textTupletBracketEndShortStem"
        ],
        [
            1.272,
            4.996,
            0.0,
            4.172,
            "textTupletBracketStartLongStem"
        ],
        [
            1.74,
            5.492,
            0.8,
            4.392,
            "textTuplet3LongStem"
        ],
        [
            1.272,
            4.996,
            0.0,
            4.172,
            "textTupletBracketEndLongStem"
        ],
        [
            0.08,
            3.5,
            -0.08,
            0.0,
            "stem"
        ],
        [
            0.644,
            3.5,
            -0.644,
            0.0,
            "stemSprechgesang"
        ],
        [
            1.22,
            3.5,
            -0.76,
            0.0,
            "stemSwished"
        ],
        [
            0.68,
            3.5,
            -0.688,
            0.0,
            "stemPendereckiTremolo"
        ],
        [
            1.064,
            3.5,
            -1.064,
            0.0,
            "stemSulPonticello"
        ],
        [
            0.792,
            3.5,
            -0.784,
            0.0,
            "stemBowOnBridge"
        ],
        [
            0.788,
            3.496,
            -0.788,
            0.0,
            "stemBowOnTailpiece"
        ],
        [
            0.624,
            3.496,
            -0.624,
            0.0,
            "stemBuzzRoll"
        ],
        [
            0.86,
            3.5,
            -0.86,
            0.0,
            "stemDamp"
        ],
        [
            1.08,
            3.5,
            -1.052,
            0.0,
            "stemVibratoPulse"
        ],
        [
            1.116,
            3.5,
            -1.112,
            0.0,
            "stemMultiphonicsBlack"
        ],
        [
            1.196,
            3.488,
            -1.196,
            0.0,
            "stemMultiphonicsWhite"
        ],
        [
            1.196,
            3.488,
            -1.196,
            0.0,
            "stemMultiphonicsBlackWhite"
        ],
        [
            0.52,
            3.5,
            -0.512,
            0.0,
            "stemSussurando"
        ],
        [
            0.488,
            3.5,
            -0.5,
            0.0,
            "stemRimShot"
        ],
        [
            0.72,
            3.5,
            -0.732,
            0.0,
            "stemHarpStringNoise"
        ],
        [
            1.2,
            0.748,
            0.0,
            0.0,
            "tremolo1"
        ],
        [
            1.2,
            1.492,
            0.0,
            -0.004,
            "tremolo2"
        ],
        [
            1.2,
            2.228,
            0.0,
            -0.004,
            "tremolo3"
        ],
        [
            1.2,
            2.988,
            0.0,
            -0.004,
            "tremolo4"
        ],
        [
            1.2,
            3.744,
            0.0,
            -0.004,
            "tremolo5"
        ],
        [
            1.2,
            0.748,
            0.0,
            0.0,
            "tremoloFingered1"
        ],
        [
            1.2,
            1.492,
            0.0,
            -0.004,
            "tremoloFingered2"
        ],
        [
            1.2,
            2.228,
            0.0,
            -0.004,
            "tremoloFingered3"
        ],
        [
            1.2,
            2.988,
            0.0,
            -0.004,
            "tremoloFingered4"
        ],
        [
            1.2,
            3.724,
            0.0,
            -0.004,
            "tremoloFingered5"
        ],
        [
            0.624,
            0.928,
            -0.62,
            0.0,
            "buzzRoll"
        ],
        [
            0.684,
            1.272,
            -0.684,
            -0.004,
            "pendereckiTremolo"
        ],
        [
            1.236,
            2.624,
            -0.04,
            0.0,
            "unmeasuredTremolo"
        ],
        [
            1.508,
            2.328,
            -0.024,
            0.0,
            "unmeasuredTremoloSimple"
        ],
        [
            1.0,
            0.4,
            0.0,
            0.0,
            "tremoloDivisiDots2"
        ],
        [
            1.6,
            0.4,
            0.0,
            0.0,
            "tremoloDivisiDots3"
        ],
        [
            2.2,
            0.4,
            0.0,
            0.0,
            "tremoloDivisiDots4"
        ],
        [
            1.6,
            1.0,
            0.0,
            0.0,
            "tremoloDivisiDots6"
        ],
        [
            1.004,
            0.068,
            0.0,
            -2.688,
            "flag8thUp"
        ],
        [
            1.044,
            2.832,
            0.0,
            -0.08,
            "flag8thDown"
        ],
        [
            1.06,
            0.064,
            0.0,
            -3.028,
            "flag16thUp"
        ],
        [
            1.104,
            3.088,
            0.0,
            -0.076,
            "flag16thDown"
        ],
        [
            1.044,
            0.884,
            0.0,
            -2.96,
            "flag32ndUp"
        ],
        [
            1.092,
            3.008,
            0.0,
            -0.928,
            "flag32ndDown"
        ],
        [
            1.044,
            1.684,
            0.0,
            -2.952,
            "flag64thUp"
        ],
        [
            1.092,
            3.0,
            0.0,
            -1.752,
            "flag64thDown"
        ],
        [
            1.044,
            2.452,
            0.0,
            -2.928,
            "flag128thUp"
        ],
        [
            1.092,
            3.008,
            0.0,
            -2.56,
            "flag128thDown"
        ],
        [
            1.056,
            3.176,
            0.0,
            -2.888,
            "flag256thUp"
        ],
        [
            1.196,
            2.972,
            0.0,
            -3.284,
            "flag256thDown"
        ],
        [
            1.06,
            3.932,
            -0.004,
            -2.88,
            "flag512thUp"
        ],
        [
            1.2,
            2.964,
            0.0,
            -4.04,
            "flag512thDown"
        ],
        [
            1.06,
            4.676,
            0.0,
            -2.888,
            "flag1024thUp"
        ],
        [
            1.204,
            2.972,
            0.0,
            -4.808,
            "flag1024thDown"
        ],
        [
            1.056,
            0.044,
            0.0,
            -2.08,
            "flagInternalUp"
        ],
        [
            1.2,
            2.284,
            0.0,
            -0.084,
            "flagInternalDown"
        ],
        [
            0.904,
            1.756,
            0.0,
            -0.7,
            "accidentalFlat"
        ],
        [
            0.672,
            1.364,
            0.0,
            -1.34,
            "accidentalNatural"
        ],
        [
            0.996,
            1.4,
            0.0,
            -1.392,
            "accidentalSharp"
        ],
        [
            0.988,
            0.508,
            0.0,
            -0.5,
            "accidentalDoubleSharp"
        ],
        [
            1.644,
            1.748,
            0.0,
            -0.7,
            "accidentalDoubleFlat"
        ],
        [
            2.076,
            1.4,
            0.0,
            -1.392,
            "accidentalTripleSharp"
        ],
        [
            2.384,
            1.756,
            0.0,
            -0.7,
            "accidentalTripleFlat"
        ],
        [
            1.836,
            1.756,
            0.0,
            -1.34,
            "accidentalNaturalFlat"
        ],
        [
            1.924,
            1.4,
            0.0,
            -1.392,
            "accidentalNaturalSharp"
        ],
        [
            2.076,
            1.4,
            0.0,
            -1.392,
            "accidentalSharpSharp"
        ],
        [
            0.652,
            1.0,
            0.0,
            -1.004,
            "accidentalParensLeft"
        ],
        [
            0.652,
            1.0,
            0.0,
            -1.004,
            "accidentalParensRight"
        ],
        [
            0.992,
            2.316,
            -0.168,
            -0.708,
            "accidentalQuarterToneFlatArrowUp"
        ],
        [
            1.004,
            1.768,
            -0.156,
            -1.672,
            "accidentalThreeQuarterTonesFlatArrowDown"
        ],
        [
            0.848,
            2.188,
            -0.208,
            -1.36,
            "accidentalQuarterToneSharpNaturalArrowUp"
        ],
        [
            1.08,
            1.344,
            0.012,
            -2.212,
            "accidentalQuarterToneFlatNaturalArrowDown"
        ],
        [
            1.1,
            2.12,
            0.0,
            -1.388,
            "accidentalThreeQuarterTonesSharpArrowUp"
        ],
        [
            0.996,
            1.396,
            -0.112,
            -2.136,
            "accidentalQuarterToneSharpArrowDown"
        ],
        [
            1.184,
            1.448,
            0.0,
            -0.5,
            "accidentalFiveQuarterTonesSharpArrowUp"
        ],
        [
            0.992,
            0.488,
            -0.192,
            -1.46,
            "accidentalThreeQuarterTonesSharpArrowDown"
        ],
        [
            1.644,
            2.492,
            0.0,
            -0.7,
            "accidentalThreeQuarterTonesFlatArrowUp"
        ],
        [
            1.652,
            1.768,
            -0.24,
            -1.672,
            "accidentalFiveQuarterTonesFlatArrowDown"
        ],
        [
            0.74,
            1.56,
            0.0,
            -0.5,
            "accidentalArrowUp"
        ],
        [
            0.74,
            1.552,
            0.0,
            -0.508,
            "accidentalArrowDown"
        ],
        [
            0.908,
            1.756,
            0.004,
            -0.7,
            "accidentalQuarterToneFlatStein"
        ],
        [
            1.864,
            1.756,
            0.004,
            -0.7,
            "accidentalThreeQuarterTonesFlatZimmermann"
        ],
        [
            0.716,
            1.228,
            0.0,
            -1.412,
            "accidentalQuarterToneSharpStein"
        ],
        [
            1.268,
            1.476,
            0.012,
            -1.388,
            "accidentalThreeQuarterTonesSharpStein"
        ],
        [
            0.656,
            1.684,
            0.0,
            -0.776,
            "accidentalNarrowReversedFlat"
        ],
        [
            1.656,
            1.684,
            0.0,
            -0.776,
            "accidentalNarrowReversedFlatAndFlat"
        ],
        [
            1.248,
            2.54,
            0.008,
            -0.696,
            "accidentalReversedFlatArrowUp"
        ],
        [
            1.22,
            1.748,
            0.008,
            -1.932,
            "accidentalReversedFlatArrowDown"
        ],
        [
            1.24,
            2.54,
            0.0,
            -0.696,
            "accidentalFilledReversedFlatArrowUp"
        ],
        [
            1.216,
            1.748,
            0.004,
            -1.932,
            "accidentalFilledReversedFlatArrowDown"
        ],
        [
            1.54,
            2.188,
            0.0,
            -0.7,
            "accidentalReversedFlatAndFlatArrowUp"
        ],
        [
            1.54,
            1.748,
            0.0,
            -2.212,
            "accidentalReversedFlatAndFlatArrowDown"
        ],
        [
            1.46,
            1.748,
            0.0,
            -0.7,
            "accidentalFilledReversedFlatAndFlat"
        ],
        [
            1.46,
            2.188,
            0.0,
            -0.7,
            "accidentalFilledReversedFlatAndFlatArrowUp"
        ],
        [
            1.46,
            1.748,
            0.0,
            -2.212,
            "accidentalFilledReversedFlatAndFlatArrowDown"
        ],
        [
            0.928,
            2.188,
            -0.008,
            -1.348,
            "accidentalHalfSharpArrowUp"
        ],
        [
            0.924,
            1.288,
            -0.012,
            -2.168,
            "accidentalHalfSharpArrowDown"
        ],
        [
            1.476,
            2.432,
            0.012,
            -1.388,
            "accidentalOneAndAHalfSharpsArrowUp"
        ],
        [
            1.268,
            1.476,
            -0.204,
            -2.364,
            "accidentalOneAndAHalfSharpsArrowDown"
        ],
        [
            1.088,
            2.184,
            0.0,
            -0.528,
            "accidentalSims12Down"
        ],
        [
            1.088,
            2.184,
            0.0,
            -0.528,
            "accidentalSims6Down"
        ],
        [
            1.952,
            2.516,
            0.0,
            -0.528,
            "accidentalSims4Down"
        ],
        [
            1.212,
            0.528,
            0.0,
            -2.184,
            "accidentalSims12Up"
        ],
        [
            1.088,
            0.532,
            0.0,
            -2.18,
            "accidentalSims6Up"
        ],
        [
            1.088,
            0.532,
            -0.484,
            -2.756,
            "accidentalSims4Up"
        ],
        [
            0.8,
            0.4,
            0.0,
            -0.4,
            "accidentalJohnstonPlus"
        ],
        [
            0.8,
            0.072,
            0.0,
            -0.072,
            "accidentalJohnstonMinus"
        ],
        [
            0.552,
            0.548,
            0.0,
            -0.504,
            "accidentalJohnstonEl"
        ],
        [
            0.552,
            0.54,
            0.0,
            -0.512,
            "accidentalJohnstonSeven"
        ],
        [
            0.712,
            0.604,
            -0.004,
            -0.5,
            "accidentalJohnstonUp"
        ],
        [
            0.712,
            0.604,
            -0.004,
            -0.5,
            "accidentalJohnstonDown"
        ],
        [
            0.64,
            0.236,
            0.0,
            -0.528,
            "accidentalJohnston13"
        ],
        [
            0.64,
            0.236,
            0.0,
            -0.528,
            "accidentalJohnston31"
        ],
        [
            1.668,
            1.748,
            0.0,
            -1.408,
            "accidentalDoubleFlatOneArrowDown"
        ],
        [
            0.904,
            1.748,
            -0.284,
            -1.408,
            "accidentalFlatOneArrowDown"
        ],
        [
            0.952,
            1.372,
            0.0,
            -1.68,
            "accidentalNaturalOneArrowDown"
        ],
        [
            1.072,
            1.4,
            0.0,
            -2.056,
            "accidentalSharpOneArrowDown"
        ],
        [
            0.984,
            0.508,
            -0.004,
            -1.288,
            "accidentalDoubleSharpOneArrowDown"
        ],
        [
            1.668,
            2.136,
            -0.28,
            -0.732,
            "accidentalDoubleFlatOneArrowUp"
        ],
        [
            0.904,
            2.14,
            -0.284,
            -0.728,
            "accidentalFlatOneArrowUp"
        ],
        [
            0.676,
            1.704,
            -0.28,
            -1.328,
            "accidentalNaturalOneArrowUp"
        ],
        [
            0.996,
            2.036,
            -0.08,
            -1.392,
            "accidentalSharpOneArrowUp"
        ],
        [
            0.984,
            1.324,
            -0.004,
            -0.496,
            "accidentalDoubleSharpOneArrowUp"
        ],
        [
            1.668,
            1.748,
            0.0,
            -1.848,
            "accidentalDoubleFlatTwoArrowsDown"
        ],
        [
            0.904,
            1.748,
            -0.28,
            -1.852,
            "accidentalFlatTwoArrowsDown"
        ],
        [
            0.956,
            1.372,
            0.0,
            -2.128,
            "accidentalNaturalTwoArrowsDown"
        ],
        [
            1.076,
            1.4,
            0.0,
            -2.5,
            "accidentalSharpTwoArrowsDown"
        ],
        [
            0.984,
            0.508,
            -0.004,
            -1.732,
            "accidentalDoubleSharpTwoArrowsDown"
        ],
        [
            1.668,
            2.576,
            -0.284,
            -0.732,
            "accidentalDoubleFlatTwoArrowsUp"
        ],
        [
            0.904,
            2.576,
            -0.284,
            -0.728,
            "accidentalFlatTwoArrowsUp"
        ],
        [
            0.676,
            2.148,
            -0.284,
            -1.328,
            "accidentalNaturalTwoArrowsUp"
        ],
        [
            0.996,
            2.476,
            -0.084,
            -1.392,
            "accidentalSharpTwoArrowsUp"
        ],
        [
            0.984,
            1.764,
            -0.004,
            -0.496,
            "accidentalDoubleSharpTwoArrowsUp"
        ],
        [
            1.668,
            1.748,
            0.0,
            -2.292,
            "accidentalDoubleFlatThreeArrowsDown"
        ],
        [
            0.904,
            1.748,
            -0.28,
            -2.292,
            "accidentalFlatThreeArrowsDown"
        ],
        [
            0.956,
            1.372,
            0.0,
            -2.568,
            "accidentalNaturalThreeArrowsDown"
        ],
        [
            1.076,
            1.4,
            0.0,
            -2.944,
            "accidentalSharpThreeArrowsDown"
        ],
        [
            0.984,
            0.512,
            -0.004,
            -2.172,
            "accidentalDoubleSharpThreeArrowsDown"
        ],
        [
            1.668,
            3.016,
            -0.284,
            -0.732,
            "accidentalDoubleFlatThreeArrowsUp"
        ],
        [
            0.904,
            3.024,
            -0.284,
            -0.728,
            "accidentalFlatThreeArrowsUp"
        ],
        [
            0.676,
            2.584,
            -0.284,
            -1.328,
            "accidentalNaturalThreeArrowsUp"
        ],
        [
            0.996,
            2.916,
            -0.084,
            -1.392,
            "accidentalSharpThreeArrowsUp"
        ],
        [
            0.984,
            2.208,
            -0.004,
            -0.5,
            "accidentalDoubleSharpThreeArrowsUp"
        ],
        [
            0.684,
            1.616,
            0.0,
            -0.5,
            "accidentalLowerOneSeptimalComma"
        ],
        [
            0.684,
            1.608,
            0.0,
            -0.508,
            "accidentalRaiseOneSeptimalComma"
        ],
        [
            0.684,
            2.28,
            0.0,
            -0.496,
            "accidentalLowerTwoSeptimalCommas"
        ],
        [
            0.684,
            2.276,
            0.0,
            -0.5,
            "accidentalRaiseTwoSeptimalCommas"
        ],
        [
            0.904,
            1.748,
            0.0,
            -0.728,
            "accidentalLowerOneUndecimalQuartertone"
        ],
        [
            1.08,
            1.368,
            0.0,
            -1.308,
            "accidentalRaiseOneUndecimalQuartertone"
        ],
        [
            0.9,
            1.748,
            0.0,
            -0.696,
            "accidentalLowerOneTridecimalQuartertone"
        ],
        [
            1.076,
            1.524,
            -0.004,
            -1.3,
            "accidentalRaiseOneTridecimalQuartertone"
        ],
        [
            0.792,
            0.88,
            0.0,
            -0.504,
            "accidentalCombiningLower17Schisma"
        ],
        [
            0.792,
            0.88,
            0.0,
            -0.504,
            "accidentalCombiningRaise17Schisma"
        ],
        [
            0.792,
            0.26,
            0.0,
            -0.496,
            "accidentalCombiningLower19Schisma"
        ],
        [
            0.792,
            0.26,
            0.0,
            -0.496,
            "accidentalCombiningRaise19Schisma"
        ],
        [
            0.98,
            1.02,
            -0.004,
            -0.5,
            "accidentalCombiningLower23Limit29LimitComma"
        ],
        [
            0.98,
            1.02,
            -0.004,
            -0.5,
            "accidentalCombiningRaise23Limit29LimitComma"
        ],
        [
            1.188,
            0.332,
            0.0,
            0.152,
            "accidentalCombiningLower31Schisma"
        ],
        [
            1.188,
            0.836,
            0.0,
            -0.352,
            "accidentalCombiningRaise31Schisma"
        ],
        [
            0.548,
            1.328,
            0.0,
            -0.492,
            "accidentalCombiningOpenCurlyBrace"
        ],
        [
            0.548,
            1.328,
            0.0,
            -0.492,
            "accidentalCombiningCloseCurlyBrace"
        ],
        [
            1.668,
            1.808,
            -0.396,
            -0.728,
            "accidentalDoubleFlatEqualTempered"
        ],
        [
            0.904,
            1.808,
            -0.388,
            -0.728,
            "accidentalFlatEqualTempered"
        ],
        [
            0.672,
            1.432,
            -0.396,
            -1.332,
            "accidentalNaturalEqualTempered"
        ],
        [
            0.996,
            1.776,
            -0.192,
            -1.392,
            "accidentalSharpEqualTempered"
        ],
        [
            0.984,
            1.036,
            -0.004,
            -0.5,
            "accidentalDoubleSharpEqualTempered"
        ],
        [
            0.624,
            0.684,
            0.0,
            -1.44,
            "accSagittal5v7KleismaUp"
        ],
        [
            0.628,
            1.436,
            0.0,
            -0.688,
            "accSagittal5v7KleismaDown"
        ],
        [
            0.624,
            0.688,
            0.0,
            -1.436,
            "accSagittal5CommaUp"
        ],
        [
            0.624,
            1.436,
            0.0,
            -0.688,
            "accSagittal5CommaDown"
        ],
        [
            0.624,
            0.688,
            0.0,
            -1.436,
            "accSagittal7CommaUp"
        ],
        [
            0.624,
            1.436,
            0.0,
            -0.688,
            "accSagittal7CommaDown"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.436,
            "accSagittal25SmallDiesisUp"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittal25SmallDiesisDown"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittal35MediumDiesisUp"
        ],
        [
            1.124,
            1.436,
            0.0,
            -0.688,
            "accSagittal35MediumDiesisDown"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittal11MediumDiesisUp"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittal11MediumDiesisDown"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittal11LargeDiesisUp"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittal11LargeDiesisDown"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittal35LargeDiesisUp"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittal35LargeDiesisDown"
        ],
        [
            1.376,
            0.684,
            -0.004,
            -1.436,
            "accSagittalSharp25SDown"
        ],
        [
            1.38,
            1.436,
            0.0,
            -0.684,
            "accSagittalFlat25SUp"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp7CDown"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat7CUp"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5CDown"
        ],
        [
            1.124,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5CUp"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5v7kDown"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v7kUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat"
        ],
        [
            1.248,
            0.684,
            0.0,
            -1.444,
            "accSagittalSharp5v7kUp"
        ],
        [
            1.248,
            1.436,
            -0.004,
            -0.688,
            "accSagittalFlat5v7kDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5CUp"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5CDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp7CUp"
        ],
        [
            1.248,
            1.44,
            0.0,
            -0.684,
            "accSagittalFlat7CDown"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp25SUp"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat25SDown"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp35MUp"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat35MDown"
        ],
        [
            1.876,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp11MUp"
        ],
        [
            1.876,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat11MDown"
        ],
        [
            1.876,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp11LUp"
        ],
        [
            1.876,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat11LDown"
        ],
        [
            2.0,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp35LUp"
        ],
        [
            2.0,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat35LDown"
        ],
        [
            1.624,
            0.684,
            0.004,
            -1.436,
            "accSagittalDoubleSharp25SDown"
        ],
        [
            1.62,
            1.436,
            0.0,
            -0.684,
            "accSagittalDoubleFlat25SUp"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp7CDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat7CUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp5CDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat5CUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp5v7kDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat5v7kUp"
        ],
        [
            1.876,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp"
        ],
        [
            1.876,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat"
        ],
        [
            0.876,
            0.684,
            -0.004,
            -1.436,
            "accSagittal7v11KleismaUp"
        ],
        [
            0.88,
            1.436,
            0.0,
            -0.684,
            "accSagittal7v11KleismaDown"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittal17CommaUp"
        ],
        [
            1.128,
            1.436,
            0.004,
            -0.688,
            "accSagittal17CommaDown"
        ],
        [
            0.876,
            0.688,
            0.0,
            -1.436,
            "accSagittal55CommaUp"
        ],
        [
            0.876,
            1.436,
            0.0,
            -0.688,
            "accSagittal55CommaDown"
        ],
        [
            0.748,
            0.688,
            0.0,
            -1.436,
            "accSagittal7v11CommaUp"
        ],
        [
            0.748,
            1.436,
            0.0,
            -0.688,
            "accSagittal7v11CommaDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittal5v11SmallDiesisUp"
        ],
        [
            1.252,
            1.436,
            0.0,
            -0.688,
            "accSagittal5v11SmallDiesisDown"
        ],
        [
            1.376,
            0.684,
            0.0,
            -1.44,
            "accSagittalSharp5v11SDown"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v11SUp"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp7v11CDown"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat7v11CUp"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp55CDown"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat55CUp"
        ],
        [
            1.5,
            0.684,
            0.0,
            -1.436,
            "accSagittalSharp17CDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat17CUp"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp7v11kDown"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat7v11kUp"
        ],
        [
            1.624,
            0.684,
            0.004,
            -1.436,
            "accSagittalSharp7v11kUp"
        ],
        [
            1.62,
            1.436,
            0.0,
            -0.684,
            "accSagittalFlat7v11kDown"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp17CUp"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat17CDown"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp55CUp"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat55CDown"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp7v11CUp"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat7v11CDown"
        ],
        [
            1.748,
            0.684,
            0.0,
            -1.436,
            "accSagittalSharp5v11SUp"
        ],
        [
            1.748,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v11SDown"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp5v11SDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat5v11SUp"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp7v11CDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat7v11CUp"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp55CDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat55CUp"
        ],
        [
            1.748,
            0.684,
            0.0,
            -1.436,
            "accSagittalDoubleSharp17CDown"
        ],
        [
            1.748,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat17CUp"
        ],
        [
            1.748,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp7v11kDown"
        ],
        [
            1.748,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat7v11kUp"
        ],
        [
            0.748,
            0.688,
            0.0,
            -1.436,
            "accSagittal23CommaUp"
        ],
        [
            0.748,
            1.436,
            0.0,
            -0.688,
            "accSagittal23CommaDown"
        ],
        [
            0.624,
            0.688,
            0.0,
            -1.436,
            "accSagittal5v19CommaUp"
        ],
        [
            0.624,
            1.436,
            0.0,
            -0.688,
            "accSagittal5v19CommaDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittal5v23SmallDiesisUp"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittal5v23SmallDiesisDown"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5v23SDown"
        ],
        [
            1.124,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v23SUp"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5v19CDown"
        ],
        [
            1.252,
            1.436,
            0.0,
            -0.684,
            "accSagittalFlat5v19CUp"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp23CDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat23CUp"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp23CUp"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat23CDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5v19CUp"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v19CDown"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5v23SUp"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v23SDown"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp5v23SDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.684,
            "accSagittalDoubleFlat5v23SUp"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp5v19CDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat5v19CUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp23CDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat23CUp"
        ],
        [
            0.5,
            0.688,
            0.0,
            -1.436,
            "accSagittal19SchismaUp"
        ],
        [
            0.5,
            1.436,
            0.0,
            -0.684,
            "accSagittal19SchismaDown"
        ],
        [
            0.624,
            0.688,
            0.0,
            -1.436,
            "accSagittal17KleismaUp"
        ],
        [
            0.624,
            1.436,
            0.0,
            -0.688,
            "accSagittal17KleismaDown"
        ],
        [
            0.624,
            0.688,
            0.0,
            -1.436,
            "accSagittal143CommaUp"
        ],
        [
            0.624,
            1.436,
            0.0,
            -0.688,
            "accSagittal143CommaDown"
        ],
        [
            0.748,
            0.688,
            0.0,
            -1.436,
            "accSagittal11v49CommaUp"
        ],
        [
            0.748,
            1.436,
            -0.004,
            -0.688,
            "accSagittal11v49CommaDown"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittal19CommaUp"
        ],
        [
            1.128,
            1.44,
            0.0,
            -0.684,
            "accSagittal19CommaDown"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.436,
            "accSagittal7v19CommaUp"
        ],
        [
            1.0,
            1.44,
            0.0,
            -0.684,
            "accSagittal7v19CommaDown"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittal49SmallDiesisUp"
        ],
        [
            1.124,
            1.436,
            0.0,
            -0.688,
            "accSagittal49SmallDiesisDown"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittal23SmallDiesisUp"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittal23SmallDiesisDown"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.436,
            "accSagittal5v13MediumDiesisUp"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittal5v13MediumDiesisDown"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittal11v19MediumDiesisUp"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittal11v19MediumDiesisDown"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.436,
            "accSagittal49MediumDiesisUp"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittal49MediumDiesisDown"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittal5v49MediumDiesisUp"
        ],
        [
            1.376,
            1.44,
            0.0,
            -0.684,
            "accSagittal5v49MediumDiesisDown"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittal49LargeDiesisUp"
        ],
        [
            1.124,
            1.436,
            0.0,
            -0.688,
            "accSagittal49LargeDiesisDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittal11v19LargeDiesisUp"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittal11v19LargeDiesisDown"
        ],
        [
            1.748,
            0.688,
            0.0,
            -1.436,
            "accSagittal5v13LargeDiesisUp"
        ],
        [
            1.752,
            1.44,
            0.0,
            -0.684,
            "accSagittal5v13LargeDiesisDown"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.44,
            "accSagittalSharp23SDown"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat23SUp"
        ],
        [
            1.0,
            0.688,
            -0.004,
            -1.436,
            "accSagittalSharp49SDown"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat49SUp"
        ],
        [
            1.0,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp7v19CDown"
        ],
        [
            1.0,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat7v19CUp"
        ],
        [
            1.128,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp19CDown"
        ],
        [
            1.124,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat19CUp"
        ],
        [
            1.376,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp11v49CDown"
        ],
        [
            1.376,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat11v49CUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp143CDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat143CUp"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp17kDown"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat17kUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp19sDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat19sUp"
        ],
        [
            1.124,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp19sUp"
        ],
        [
            1.128,
            1.436,
            0.0,
            -0.684,
            "accSagittalFlat19sDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp17kUp"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat17kDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp143CUp"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.684,
            "accSagittalFlat143CDown"
        ],
        [
            1.248,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp11v49CUp"
        ],
        [
            1.248,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat11v49CDown"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp19CUp"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat19CDown"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp7v19CUp"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat7v19CDown"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp49SUp"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat49SDown"
        ],
        [
            1.876,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp23SUp"
        ],
        [
            1.876,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat23SDown"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.44,
            "accSagittalSharp5v13MUp"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v13MDown"
        ],
        [
            1.748,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp11v19MUp"
        ],
        [
            1.748,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat11v19MDown"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp49MUp"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat49MDown"
        ],
        [
            1.876,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5v49MUp"
        ],
        [
            1.876,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat5v49MDown"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp49LUp"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat49LDown"
        ],
        [
            1.748,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp11v19LUp"
        ],
        [
            1.748,
            1.436,
            0.0,
            -0.688,
            "accSagittalFlat11v19LDown"
        ],
        [
            2.0,
            0.688,
            0.0,
            -1.436,
            "accSagittalSharp5v13LUp"
        ],
        [
            2.0,
            1.44,
            0.0,
            -0.684,
            "accSagittalFlat5v13LDown"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp23SDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat23SUp"
        ],
        [
            1.5,
            0.684,
            0.004,
            -1.44,
            "accSagittalDoubleSharp49SDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat49SUp"
        ],
        [
            1.5,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp7v19CDown"
        ],
        [
            1.5,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat7v19CUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp19CDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat19CUp"
        ],
        [
            1.624,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp11v49CDown"
        ],
        [
            1.624,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat11v49CUp"
        ],
        [
            1.876,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp143CDown"
        ],
        [
            1.876,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat143CUp"
        ],
        [
            1.748,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp17kDown"
        ],
        [
            1.748,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat17kUp"
        ],
        [
            1.748,
            0.688,
            0.0,
            -1.436,
            "accSagittalDoubleSharp19sDown"
        ],
        [
            1.748,
            1.436,
            0.0,
            -0.688,
            "accSagittalDoubleFlat19sUp"
        ],
        [
            0.124,
            0.688,
            0.0,
            -1.436,
            "accSagittalShaftUp"
        ],
        [
            0.124,
            1.436,
            0.0,
            -0.688,
            "accSagittalShaftDown"
        ],
        [
            0.5,
            0.5,
            0.0,
            -0.248,
            "accSagittalAcute"
        ],
        [
            0.5,
            0.248,
            0.0,
            -0.5,
            "accSagittalGrave"
        ],
        [
            0.652,
            1.404,
            0.0,
            -1.452,
            "accidentalWyschnegradsky1TwelfthsSharp"
        ],
        [
            0.652,
            1.404,
            0.0,
            -1.452,
            "accidentalWyschnegradsky2TwelfthsSharp"
        ],
        [
            0.652,
            1.228,
            0.0,
            -1.388,
            "accidentalWyschnegradsky3TwelfthsSharp"
        ],
        [
            0.904,
            1.464,
            0.0,
            -1.388,
            "accidentalWyschnegradsky4TwelfthsSharp"
        ],
        [
            0.9,
            2.044,
            0.0,
            -1.388,
            "accidentalWyschnegradsky5TwelfthsSharp"
        ],
        [
            0.996,
            1.4,
            0.0,
            -1.392,
            "accidentalWyschnegradsky6TwelfthsSharp"
        ],
        [
            1.324,
            2.008,
            0.0,
            -1.392,
            "accidentalWyschnegradsky7TwelfthsSharp"
        ],
        [
            1.324,
            2.588,
            0.0,
            -1.392,
            "accidentalWyschnegradsky8TwelfthsSharp"
        ],
        [
            1.256,
            1.476,
            0.0,
            -1.388,
            "accidentalWyschnegradsky9TwelfthsSharp"
        ],
        [
            1.576,
            1.988,
            0.0,
            -1.388,
            "accidentalWyschnegradsky10TwelfthsSharp"
        ],
        [
            1.576,
            2.572,
            0.0,
            -1.388,
            "accidentalWyschnegradsky11TwelfthsSharp"
        ],
        [
            0.852,
            1.832,
            0.0,
            -1.264,
            "accidentalWyschnegradsky1TwelfthsFlat"
        ],
        [
            0.852,
            1.832,
            0.0,
            -1.264,
            "accidentalWyschnegradsky2TwelfthsFlat"
        ],
        [
            0.852,
            1.592,
            0.0,
            -1.264,
            "accidentalWyschnegradsky3TwelfthsFlat"
        ],
        [
            0.904,
            1.972,
            0.0,
            -0.7,
            "accidentalWyschnegradsky4TwelfthsFlat"
        ],
        [
            0.904,
            1.972,
            0.0,
            -0.7,
            "accidentalWyschnegradsky5TwelfthsFlat"
        ],
        [
            0.904,
            1.756,
            0.0,
            -0.7,
            "accidentalWyschnegradsky6TwelfthsFlat"
        ],
        [
            1.664,
            1.908,
            0.0,
            -1.188,
            "accidentalWyschnegradsky7TwelfthsFlat"
        ],
        [
            1.664,
            1.908,
            0.0,
            -1.188,
            "accidentalWyschnegradsky8TwelfthsFlat"
        ],
        [
            1.664,
            1.756,
            0.0,
            -1.188,
            "accidentalWyschnegradsky9TwelfthsFlat"
        ],
        [
            1.656,
            1.972,
            0.0,
            -0.7,
            "accidentalWyschnegradsky10TwelfthsFlat"
        ],
        [
            1.656,
            1.972,
            0.0,
            -0.7,
            "accidentalWyschnegradsky11TwelfthsFlat"
        ],
        [
            1.148,
            1.752,
            0.004,
            -0.696,
            "accidentalBuyukMucennebFlat"
        ],
        [
            0.904,
            1.756,
            0.0,
            -0.7,
            "accidentalKucukMucennebFlat"
        ],
        [
            1.144,
            1.756,
            -0.004,
            -0.7,
            "accidentalBakiyeFlat"
        ],
        [
            0.908,
            1.756,
            0.004,
            -0.7,
            "accidentalKomaFlat"
        ],
        [
            0.916,
            1.288,
            0.0,
            -1.348,
            "accidentalKomaSharp"
        ],
        [
            0.996,
            1.4,
            0.0,
            -1.392,
            "accidentalBakiyeSharp"
        ],
        [
            1.356,
            1.284,
            -0.004,
            -1.352,
            "accidentalKucukMucennebSharp"
        ],
        [
            1.364,
            1.392,
            0.0,
            -1.4,
            "accidentalBuyukMucennebSharp"
        ],
        [
            1.5,
            2.076,
            0.0,
            -1.392,
            "accidental1CommaSharp"
        ],
        [
            1.82,
            2.068,
            0.0,
            -1.392,
            "accidental2CommaSharp"
        ],
        [
            1.748,
            2.044,
            0.0,
            -1.392,
            "accidental3CommaSharp"
        ],
        [
            1.752,
            2.04,
            0.0,
            -1.392,
            "accidental5CommaSharp"
        ],
        [
            0.996,
            1.976,
            0.0,
            -0.7,
            "accidental1CommaFlat"
        ],
        [
            1.288,
            1.944,
            0.0,
            -0.7,
            "accidental2CommaFlat"
        ],
        [
            1.196,
            1.912,
            0.0,
            -0.7,
            "accidental3CommaFlat"
        ],
        [
            1.292,
            1.968,
            0.0,
            -0.7,
            "accidental4CommaFlat"
        ],
        [
            1.2,
            0.628,
            0.0,
            -1.888,
            "accidentalKoron"
        ],
        [
            1.684,
            1.312,
            0.0,
            -1.272,
            "accidentalSori"
        ],
        [
            0.984,
            1.384,
            0.0,
            -1.336,
            "accidentalXenakisOneThirdToneSharp"
        ],
        [
            1.224,
            1.384,
            0.0,
            -1.336,
            "accidentalXenakisTwoThirdTonesSharp"
        ],
        [
            0.668,
            1.22,
            0.0,
            -1.388,
            "accidentalQuarterToneSharpBusotti"
        ],
        [
            0.996,
            1.428,
            0.0,
            -1.388,
            "accidentalSharpOneHorizontalStroke"
        ],
        [
            1.472,
            1.66,
            0.0,
            -1.396,
            "accidentalThreeQuarterTonesSharpBusotti"
        ],
        [
            2.2,
            1.4,
            0.004,
            -1.392,
            "accidentalQuarterToneSharpWiggle"
        ],
        [
            2.22,
            1.396,
            0.0,
            -1.392,
            "accidentalTavenerSharp"
        ],
        [
            2.452,
            1.752,
            0.0,
            -0.704,
            "accidentalTavenerFlat"
        ],
        [
            0.908,
            1.748,
            0.008,
            -0.696,
            "accidentalQuarterToneFlatPenderecki"
        ],
        [
            1.2,
            0.512,
            0.0,
            -0.508,
            "accidentalCommaSlashUp"
        ],
        [
            1.2,
            0.512,
            0.0,
            -0.508,
            "accidentalCommaSlashDown"
        ],
        [
            1.124,
            0.812,
            0.0,
            -0.812,
            "accidentalWilsonPlus"
        ],
        [
            1.124,
            0.744,
            0.0,
            -0.744,
            "accidentalWilsonMinus"
        ],
        [
            1.376,
            0.688,
            0.0,
            -0.688,
            "accidentalLargeDoubleSharp"
        ],
        [
            1.576,
            2.416,
            0.0,
            -1.404,
            "accidentalQuarterToneSharp4"
        ],
        [
            1.672,
            2.5,
            0.0,
            -0.704,
            "accidentalQuarterToneFlat4"
        ],
        [
            0.908,
            1.748,
            0.008,
            -0.696,
            "accidentalQuarterToneFlatFilledReversed"
        ],
        [
            0.996,
            1.4,
            0.0,
            -1.392,
            "accidentalSharpReversed"
        ],
        [
            0.672,
            1.364,
            0.0,
            -1.34,
            "accidentalNaturalReversed"
        ],
        [
            1.644,
            1.748,
            0.0,
            -0.7,
            "accidentalDoubleFlatReversed"
        ],
        [
            0.908,
            0.704,
            0.004,
            -1.752,
            "accidentalFlatTurned"
        ],
        [
            1.644,
            0.724,
            0.0,
            -1.724,
            "accidentalDoubleFlatTurned"
        ],
        [
            0.9,
            1.748,
            0.0,
            -0.696,
            "accidentalThreeQuarterTonesFlatGrisey"
        ],
        [
            1.376,
            1.756,
            0.0,
            -0.7,
            "accidentalThreeQuarterTonesFlatTartini"
        ],
        [
            0.94,
            1.76,
            0.0,
            -0.696,
            "accidentalQuarterToneFlatVanBlankenburg"
        ],
        [
            1.64,
            1.764,
            0.0,
            -0.712,
            "accidentalThreeQuarterTonesFlatCouper"
        ],
        [
            0.764,
            2.16,
            0.0,
            -0.5,
            "accidentalOneThirdToneSharpFerneyhough"
        ],
        [
            0.752,
            0.508,
            0.0,
            -2.136,
            "accidentalOneThirdToneFlatFerneyhough"
        ],
        [
            0.784,
            2.16,
            0.0,
            -0.496,
            "accidentalTwoThirdTonesSharpFerneyhough"
        ],
        [
            0.796,
            0.504,
            0.0,
            -2.148,
            "accidentalTwoThirdTonesFlatFerneyhough"
        ],
        [
            1.356,
            0.98,
            0.0,
            0.004,
            "articAccentAbove"
        ],
        [
            1.356,
            0.0,
            0.0,
            -0.976,
            "articAccentBelow"
        ],
        [
            0.488,
            0.488,
            0.0,
            0.0,
            "articStaccatoAbove"
        ],
        [
            0.488,
            0.0,
            0.0,
            -0.488,
            "articStaccatoBelow"
        ],
        [
            1.352,
            0.192,
            -0.004,
            0.0,
            "articTenutoAbove"
        ],
        [
            1.352,
            0.0,
            -0.004,
            -0.192,
            "articTenutoBelow"
        ],
        [
            0.4,
            1.172,
            0.004,
            -0.008,
            "articStaccatissimoAbove"
        ],
        [
            0.4,
            0.0,
            0.004,
            -1.18,
            "articStaccatissimoBelow"
        ],
        [
            0.356,
            1.16,
            0.004,
            0.0,
            "articStaccatissimoWedgeAbove"
        ],
        [
            0.356,
            0.0,
            0.004,
            -1.16,
            "articStaccatissimoWedgeBelow"
        ],
        [
            0.192,
            1.16,
            0.0,
            0.0,
            "articStaccatissimoStrokeAbove"
        ],
        [
            0.192,
            0.0,
            0.0,
            -1.16,
            "articStaccatissimoStrokeBelow"
        ],
        [
            0.94,
            1.012,
            -0.004,
            -0.004,
            "articMarcatoAbove"
        ],
        [
            0.94,
            0.0,
            -0.004,
            -1.016,
            "articMarcatoBelow"
        ],
        [
            0.94,
            1.972,
            -0.004,
            0.0,
            "articMarcatoStaccatoAbove"
        ],
        [
            0.94,
            0.0,
            -0.004,
            -2.012,
            "articMarcatoStaccatoBelow"
        ],
        [
            1.356,
            1.68,
            0.0,
            0.0,
            "articAccentStaccatoAbove"
        ],
        [
            1.352,
            0.0,
            -0.004,
            -1.644,
            "articAccentStaccatoBelow"
        ],
        [
            1.352,
            0.96,
            -0.004,
            0.0,
            "articTenutoStaccatoAbove"
        ],
        [
            1.352,
            0.0,
            -0.004,
            -0.968,
            "articTenutoStaccatoBelow"
        ],
        [
            1.356,
            1.38,
            -0.004,
            0.0,
            "articTenutoAccentAbove"
        ],
        [
            1.356,
            0.0,
            -0.004,
            -1.38,
            "articTenutoAccentBelow"
        ],
        [
            0.932,
            0.948,
            0.0,
            0.02,
            "articStressAbove"
        ],
        [
            0.944,
            0.0,
            0.016,
            -0.936,
            "articStressBelow"
        ],
        [
            1.528,
            0.828,
            0.0,
            0.0,
            "articUnstressAbove"
        ],
        [
            1.532,
            0.0,
            0.004,
            -0.828,
            "articUnstressBelow"
        ],
        [
            1.468,
            0.576,
            0.004,
            0.004,
            "articLaissezVibrerAbove"
        ],
        [
            1.46,
            0.0,
            0.0,
            -0.572,
            "articLaissezVibrerBelow"
        ],
        [
            2.42,
            1.316,
            0.012,
            -0.012,
            "fermataAbove"
        ],
        [
            2.42,
            0.0,
            0.012,
            -1.328,
            "fermataBelow"
        ],
        [
            2.904,
            1.796,
            0.0,
            0.0,
            "fermataVeryShortAbove"
        ],
        [
            2.904,
            0.0,
            0.0,
            -1.796,
            "fermataVeryShortBelow"
        ],
        [
            2.416,
            1.364,
            0.0,
            0.0,
            "fermataShortAbove"
        ],
        [
            2.416,
            0.0,
            0.0,
            -1.364,
            "fermataShortBelow"
        ],
        [
            2.412,
            1.332,
            0.0,
            -0.004,
            "fermataLongAbove"
        ],
        [
            2.412,
            0.004,
            0.0,
            -1.332,
            "fermataLongBelow"
        ],
        [
            2.86,
            1.632,
            0.0,
            0.0,
            "fermataVeryLongAbove"
        ],
        [
            2.86,
            0.0,
            0.0,
            -1.632,
            "fermataVeryLongBelow"
        ],
        [
            2.944,
            1.62,
            0.004,
            0.0,
            "fermataLongHenzeAbove"
        ],
        [
            2.944,
            0.0,
            0.004,
            -1.62,
            "fermataLongHenzeBelow"
        ],
        [
            1.736,
            1.62,
            0.0,
            0.0,
            "fermataShortHenzeAbove"
        ],
        [
            1.736,
            0.0,
            0.0,
            -1.62,
            "fermataShortHenzeBelow"
        ],
        [
            0.608,
            1.004,
            0.004,
            0.008,
            "breathMarkComma"
        ],
        [
            2.0,
            2.008,
            0.0,
            0.0,
            "breathMarkTick"
        ],
        [
            0.996,
            1.98,
            0.004,
            0.004,
            "breathMarkUpbow"
        ],
        [
            1.536,
            2.128,
            0.0,
            -0.004,
            "caesura"
        ],
        [
            2.652,
            2.128,
            0.0,
            0.0,
            "caesuraThick"
        ],
        [
            0.744,
            2.132,
            0.0,
            0.0,
            "caesuraShort"
        ],
        [
            1.492,
            2.12,
            0.0,
            0.0,
            "caesuraCurved"
        ],
        [
            2.112,
            1.732,
            0.0,
            0.008,
            "breathMarkSalzedo"
        ],
        [
            2.808,
            0.792,
            0.0,
            0.0,
            "curlewSign"
        ],
        [
            1.524,
            1.0,
            0.0,
            -0.996,
            "restMaxima"
        ],
        [
            0.5,
            1.0,
            0.0,
            -0.996,
            "restLonga"
        ],
        [
            0.5,
            1.0,
            0.0,
            0.0,
            "restDoubleWhole"
        ],
        [
            1.128,
            0.036,
            0.0,
            -0.54,
            "restWhole"
        ],
        [
            1.128,
            0.568,
            0.0,
            -0.008,
            "restHalf"
        ],
        [
            1.08,
            1.492,
            0.004,
            -1.5,
            "restQuarter"
        ],
        [
            0.988,
            0.696,
            0.0,
            -1.004,
            "rest8th"
        ],
        [
            1.28,
            0.716,
            0.0,
            -2.0,
            "rest16th"
        ],
        [
            1.452,
            1.704,
            0.0,
            -2.0,
            "rest32nd"
        ],
        [
            1.692,
            1.72,
            0.0,
            -3.012,
            "rest64th"
        ],
        [
            1.94,
            2.756,
            0.0,
            -3.0,
            "rest128th"
        ],
        [
            2.164,
            2.784,
            0.0,
            -4.0,
            "rest256th"
        ],
        [
            2.416,
            3.776,
            0.0,
            -4.0,
            "rest512th"
        ],
        [
            2.672,
            4.788,
            0.0,
            -3.972,
            "rest1024th"
        ],
        [
            3.128,
            1.044,
            0.0,
            -1.084,
            "restHBar"
        ],
        [
            1.5,
            1.048,
            0.0,
            -1.08,
            "restHBarLeft"
        ],
        [
            1.42,
            0.384,
            -0.108,
            -0.416,
            "restHBarMiddle"
        ],
        [
            1.5,
            1.048,
            0.0,
            -1.08,
            "restHBarRight"
        ],
        [
            0.988,
            0.696,
            0.0,
            -1.004,
            "restQuarterOld"
        ],
        [
            1.176,
            1.056,
            0.0,
            -0.1,
            "restDoubleWholeLegerLine"
        ],
        [
            1.596,
            0.08,
            -0.468,
            -0.54,
            "restWholeLegerLine"
        ],
        [
            1.596,
            0.568,
            -0.468,
            -0.052,
            "restHalfLegerLine"
        ],
        [
            2.128,
            1.116,
            0.0,
            -1.0,
            "repeat1Bar"
        ],
        [
            3.048,
            1.116,
            0.0,
            -1.0,
            "repeat2Bars"
        ],
        [
            4.928,
            1.116,
            0.0,
            -1.0,
            "repeat4Bars"
        ],
        [
            1.544,
            1.86,
            0.0,
            0.0,
            "ottava"
        ],
        [
            3.504,
            1.86,
            0.0,
            0.0,
            "ottavaAlta"
        ],
        [
            3.316,
            2.212,
            0.0,
            0.0,
            "ottavaBassa"
        ],
        [
            3.48,
            2.212,
            0.0,
            0.0,
            "ottavaBassaBa"
        ],
        [
            2.676,
            1.908,
            0.0,
            -0.02,
            "quindicesima"
        ],
        [
            5.272,
            1.908,
            0.004,
            -0.02,
            "quindicesimaAlta"
        ],
        [
            5.084,
            2.208,
            0.004,
            -0.02,
            "quindicesimaBassa"
        ],
        [
            3.096,
            1.868,
            0.0,
            0.004,
            "ventiduesima"
        ],
        [
            5.792,
            1.868,
            0.0,
            0.004,
            "ventiduesimaAlta"
        ],
        [
            5.604,
            2.208,
            0.0,
            0.004,
            "ventiduesimaBassa"
        ],
        [
            0.652,
            1.936,
            0.0,
            -0.068,
            "octaveParensLeft"
        ],
        [
            0.548,
            1.936,
            -0.104,
            -0.068,
            "octaveParensRight"
        ],
        [
            1.552,
            1.12,
            -0.356,
            -0.536,
            "dynamicPiano"
        ],
        [
            1.724,
            1.092,
            -0.152,
            -0.044,
            "dynamicMezzo"
        ],
        [
            1.576,
            1.82,
            -0.568,
            -0.672,
            "dynamicForte"
        ],
        [
            1.224,
            1.148,
            -0.052,
            0.0,
            "dynamicRinforzando"
        ],
        [
            0.888,
            1.14,
            0.0,
            0.0,
            "dynamicSforzando"
        ],
        [
            1.0,
            1.12,
            -0.116,
            -0.02,
            "dynamicZ"
        ],
        [
            1.232,
            1.12,
            -0.152,
            -0.02,
            "dynamicNiente"
        ],
        [
            8.496,
            1.116,
            -0.356,
            -0.54,
            "dynamicPPPPPP"
        ],
        [
            7.108,
            1.12,
            -0.356,
            -0.536,
            "dynamicPPPPP"
        ],
        [
            5.716,
            1.12,
            -0.356,
            -0.536,
            "dynamicPPPP"
        ],
        [
            4.328,
            1.14,
            -0.356,
            -0.516,
            "dynamicPPP"
        ],
        [
            2.94,
            1.116,
            -0.356,
            -0.54,
            "dynamicPP"
        ],
        [
            3.18,
            1.108,
            -0.14,
            -0.548,
            "dynamicMP"
        ],
        [
            3.192,
            1.768,
            -0.152,
            -0.724,
            "dynamicMF"
        ],
        [
            3.088,
            1.82,
            -0.356,
            -0.672,
            "dynamicPF"
        ],
        [
            2.684,
            1.82,
            -0.568,
            -0.672,
            "dynamicFF"
        ],
        [
            3.776,
            1.82,
            -0.568,
            -0.672,
            "dynamicFFF"
        ],
        [
            4.868,
            1.82,
            -0.568,
            -0.672,
            "dynamicFFFF"
        ],
        [
            5.952,
            1.82,
            -0.568,
            -0.672,
            "dynamicFFFFF"
        ],
        [
            7.012,
            1.82,
            -0.568,
            -0.672,
            "dynamicFFFFFF"
        ],
        [
            2.644,
            1.82,
            -0.568,
            -0.672,
            "dynamicFortePiano"
        ],
        [
            2.16,
            1.82,
            -0.568,
            -0.672,
            "dynamicForzando"
        ],
        [
            2.456,
            1.82,
            0.0,
            -0.672,
            "dynamicSforzando1"
        ],
        [
            3.468,
            1.82,
            0.0,
            -0.672,
            "dynamicSforzandoPiano"
        ],
        [
            4.984,
            1.82,
            0.0,
            -0.672,
            "dynamicSforzandoPianissimo"
        ],
        [
            3.0,
            1.82,
            0.0,
            -0.672,
            "dynamicSforzato"
        ],
        [
            4.392,
            1.82,
            0.0,
            -0.672,
            "dynamicSforzatoPiano"
        ],
        [
            4.12,
            1.82,
            0.0,
            -0.672,
            "dynamicSforzatoFF"
        ],
        [
            2.82,
            1.82,
            -0.052,
            -0.672,
            "dynamicRinforzando1"
        ],
        [
            3.42,
            1.82,
            -0.052,
            -0.672,
            "dynamicRinforzando2"
        ],
        [
            2.944,
            1.424,
            0.016,
            0.372,
            "dynamicCrescendoHairpin"
        ],
        [
            2.944,
            1.424,
            0.016,
            0.372,
            "dynamicDiminuendoHairpin"
        ],
        [
            6.22,
            1.424,
            0.016,
            0.372,
            "dynamicMessaDiVoce"
        ],
        [
            0.536,
            1.172,
            0.0,
            0.636,
            "dynamicNienteForHairpin"
        ],
        [
            1.62,
            0.0,
            -0.16,
            -0.572,
            "lyricsElisionNarrow"
        ],
        [
            2.18,
            0.0,
            -0.32,
            -0.572,
            "lyricsElision"
        ],
        [
            2.98,
            0.0,
            -0.32,
            -0.572,
            "lyricsElisionWide"
        ],
        [
            1.168,
            0.14,
            0.16,
            -0.136,
            "lyricsHyphenBaseline"
        ],
        [
            1.168,
            0.14,
            0.16,
            -0.136,
            "lyricsHyphenBaselineNonBreaking"
        ],
        [
            1.428,
            2.096,
            0.0,
            -0.332,
            "graceNoteAcciaccaturaStemUp"
        ],
        [
            0.78,
            0.332,
            -0.336,
            -2.1,
            "graceNoteAcciaccaturaStemDown"
        ],
        [
            1.292,
            2.104,
            0.0,
            -0.324,
            "graceNoteAppoggiaturaStemUp"
        ],
        [
            0.78,
            0.32,
            0.0,
            -2.112,
            "graceNoteAppoggiaturaStemDown"
        ],
        [
            1.092,
            0.868,
            0.0,
            0.0,
            "graceNoteSlashStemUp"
        ],
        [
            1.092,
            0.868,
            0.0,
            0.0,
            "graceNoteSlashStemDown"
        ],
        [
            2.156,
            1.532,
            0.008,
            -0.008,
            "ornamentTrill"
        ],
        [
            1.828,
            0.86,
            0.0,
            0.0,
            "ornamentTurn"
        ],
        [
            1.828,
            0.86,
            0.0,
            0.0,
            "ornamentTurnInverted"
        ],
        [
            1.832,
            1.224,
            0.0,
            -0.36,
            "ornamentTurnSlash"
        ],
        [
            0.86,
            1.828,
            0.0,
            0.0,
            "ornamentTurnUp"
        ],
        [
            0.86,
            1.828,
            0.0,
            0.0,
            "ornamentTurnUpS"
        ],
        [
            2.9,
            0.98,
            0.0,
            0.0,
            "ornamentMordent"
        ],
        [
            2.916,
            1.276,
            0.004,
            -0.292,
            "ornamentMordentInverted"
        ],
        [
            3.94,
            0.976,
            0.004,
            0.0,
            "ornamentTremblement"
        ],
        [
            1.996,
            0.852,
            0.0,
            -0.16,
            "ornamentHaydn"
        ],
        [
            1.772,
            1.904,
            0.0,
            0.0,
            "ornamentPortDeVoixV"
        ],
        [
            0.64,
            1.892,
            0.004,
            0.004,
            "ornamentRightFacingHalfCircle"
        ],
        [
            0.632,
            1.892,
            -0.004,
            0.004,
            "ornamentLeftFacingHalfCircle"
        ],
        [
            0.868,
            1.896,
            0.004,
            0.008,
            "ornamentRightFacingHook"
        ],
        [
            0.88,
            1.9,
            0.016,
            0.012,
            "ornamentLeftFacingHook"
        ],
        [
            1.492,
            1.42,
            0.0,
            0.0,
            "ornamentHookBeforeNote"
        ],
        [
            1.996,
            1.34,
            0.004,
            0.024,
            "ornamentHookAfterNote"
        ],
        [
            1.568,
            0.5,
            0.0,
            0.0,
            "ornamentUpCurve"
        ],
        [
            1.568,
            0.5,
            0.0,
            0.0,
            "ornamentDownCurve"
        ],
        [
            0.792,
            1.2,
            0.004,
            -0.004,
            "ornamentShortObliqueLineBeforeNote"
        ],
        [
            0.792,
            1.204,
            0.0,
            -0.004,
            "ornamentShortObliqueLineAfterNote"
        ],
        [
            1.256,
            1.904,
            0.004,
            -0.004,
            "ornamentObliqueLineBeforeNote"
        ],
        [
            1.252,
            1.904,
            0.0,
            -0.004,
            "ornamentObliqueLineAfterNote"
        ],
        [
            2.072,
            1.9,
            -0.004,
            -0.004,
            "ornamentDoubleObliqueLinesBeforeNote"
        ],
        [
            2.076,
            1.9,
            0.0,
            0.004,
            "ornamentDoubleObliqueLinesAfterNote"
        ],
        [
            1.944,
            0.5,
            0.0,
            0.004,
            "ornamentObliqueLineHorizBeforeNote"
        ],
        [
            1.944,
            0.5,
            0.0,
            0.004,
            "ornamentObliqueLineHorizAfterNote"
        ],
        [
            0.568,
            0.936,
            0.004,
            0.004,
            "ornamentComma"
        ],
        [
            1.124,
            1.124,
            -0.004,
            -0.004,
            "ornamentShake3"
        ],
        [
            0.1,
            1.556,
            0.004,
            0.436,
            "ornamentVerticalLine"
        ],
        [
            0.872,
            1.892,
            0.0,
            0.256,
            "ornamentShakeMuffat1"
        ],
        [
            4.36,
            4.424,
            0.112,
            0.008,
            "glissandoUp"
        ],
        [
            4.304,
            4.428,
            0.056,
            0.012,
            "glissandoDown"
        ],
        [
            4.572,
            2.64,
            0.0,
            0.0,
            "ornamentSchleifer"
        ],
        [
            1.388,
            1.864,
            0.008,
            0.16,
            "ornamentTopLeftConcaveStroke"
        ],
        [
            1.18,
            1.552,
            0.0,
            0.084,
            "ornamentTopLeftConvexStroke"
        ],
        [
            1.724,
            1.156,
            0.0,
            0.16,
            "ornamentHighLeftConcaveStroke"
        ],
        [
            1.3,
            1.384,
            0.0,
            -0.02,
            "ornamentHighLeftConvexStroke"
        ],
        [
            0.68,
            1.92,
            0.0,
            -0.004,
            "ornamentLeftVerticalStroke"
        ],
        [
            1.252,
            2.0,
            -0.12,
            -0.004,
            "ornamentLeftVerticalStrokeWithCross"
        ],
        [
            1.188,
            1.936,
            0.0,
            -0.024,
            "ornamentLeftShakeT"
        ],
        [
            2.836,
            1.9,
            -0.004,
            -0.228,
            "ornamentLeftPlus"
        ],
        [
            1.524,
            1.08,
            0.004,
            -0.064,
            "ornamentLowLeftConcaveStroke"
        ],
        [
            1.596,
            0.812,
            -0.004,
            0.0,
            "ornamentLowLeftConvexStroke"
        ],
        [
            1.528,
            0.98,
            0.004,
            -1.468,
            "ornamentBottomLeftConcaveStroke"
        ],
        [
            2.004,
            0.956,
            0.004,
            -1.468,
            "ornamentBottomLeftConcaveStrokeLarge"
        ],
        [
            2.004,
            0.72,
            -0.14,
            -0.784,
            "ornamentBottomLeftConvexStroke"
        ],
        [
            1.14,
            0.98,
            -0.208,
            0.0,
            "ornamentZigZagLineNoRightEnd"
        ],
        [
            1.624,
            0.98,
            -0.216,
            0.0,
            "ornamentZigZagLineWithRightEnd"
        ],
        [
            0.064,
            1.324,
            -0.056,
            -0.244,
            "ornamentMiddleVerticalStroke"
        ],
        [
            1.744,
            2.02,
            -0.276,
            0.004,
            "ornamentTopRightConcaveStroke"
        ],
        [
            0.448,
            1.524,
            -0.388,
            0.236,
            "ornamentTopRightConvexStroke"
        ],
        [
            2.12,
            1.232,
            -0.288,
            0.004,
            "ornamentHighRightConcaveStroke"
        ],
        [
            1.604,
            1.016,
            -0.204,
            0.0,
            "ornamentHighRightConvexStroke"
        ],
        [
            0.656,
            2.472,
            -0.1,
            0.228,
            "ornamentRightVerticalStroke"
        ],
        [
            1.288,
            0.956,
            -0.224,
            -0.104,
            "ornamentLowRightConcaveStroke"
        ],
        [
            1.904,
            0.98,
            -0.212,
            -0.104,
            "ornamentLowRightConvexStroke"
        ],
        [
            1.108,
            0.972,
            -0.216,
            -0.88,
            "ornamentBottomRightConcaveStroke"
        ],
        [
            2.208,
            0.98,
            -0.212,
            -0.736,
            "ornamentBottomRightConvexStroke"
        ],
        [
            4.432,
            1.232,
            0.0,
            0.0,
            "ornamentPrecompSlide"
        ],
        [
            4.516,
            0.976,
            0.0,
            -0.74,
            "ornamentPrecompDescendingSlide"
        ],
        [
            4.476,
            1.924,
            0.0,
            0.0,
            "ornamentPrecompAppoggTrill"
        ],
        [
            3.504,
            2.476,
            0.0,
            0.0,
            "ornamentPrecompAppoggTrillSuffix"
        ],
        [
            5.976,
            2.04,
            0.0,
            0.0,
            "ornamentPrecompTurnTrillDAnglebert"
        ],
        [
            4.6,
            0.98,
            0.008,
            -1.468,
            "ornamentPrecompSlideTrillDAnglebert"
        ],
        [
            4.448,
            1.524,
            0.0,
            -1.468,
            "ornamentPrecompSlideTrillMarpurg"
        ],
        [
            5.896,
            1.38,
            0.0,
            -0.248,
            "ornamentPrecompTurnTrillBach"
        ],
        [
            4.192,
            1.324,
            0.0,
            -1.468,
            "ornamentPrecompSlideTrillBach"
        ],
        [
            5.644,
            2.016,
            0.016,
            -0.788,
            "ornamentPrecompSlideTrillMuffat"
        ],
        [
            4.328,
            1.524,
            0.0,
            -0.784,
            "ornamentPrecompSlideTrillSuffixMuffat"
        ],
        [
            3.796,
            1.524,
            0.0,
            0.0,
            "ornamentPrecompTrillSuffixDandrieu"
        ],
        [
            5.22,
            1.32,
            0.0,
            -0.248,
            "ornamentPrecompPortDeVoixMordent"
        ],
        [
            3.96,
            1.332,
            0.0,
            -0.248,
            "ornamentPrecompTrillWithMordent"
        ],
        [
            4.424,
            1.164,
            0.0,
            0.0,
            "ornamentPrecompCadence"
        ],
        [
            4.424,
            1.332,
            0.0,
            -0.248,
            "ornamentPrecompCadenceWithTurn "
        ],
        [
            5.476,
            1.164,
            0.0,
            0.0,
            "ornamentPrecompDoubleCadenceLowerPrefix"
        ],
        [
            4.052,
            0.988,
            0.0,
            0.0,
            "ornamentPrecompCadenceUpperPrefix "
        ],
        [
            4.052,
            1.332,
            0.0,
            -0.248,
            "ornamentPrecompCadenceUpperPrefixTurn"
        ],
        [
            5.112,
            0.988,
            0.0,
            0.0,
            "ornamentPrecompDoubleCadenceUpperPrefix "
        ],
        [
            5.108,
            1.332,
            0.0,
            -0.248,
            "ornamentPrecompDoubleCadenceUpperPrefixTurn"
        ],
        [
            2.772,
            1.536,
            0.0,
            0.0,
            "ornamentPrecompMordentRelease"
        ],
        [
            4.892,
            1.564,
            0.0,
            0.0,
            "ornamentPrecompMordentUpperPrefix"
        ],
        [
            4.888,
            1.56,
            0.0,
            -0.248,
            "ornamentPrecompInvertedMordentUpperPrefix"
        ],
        [
            3.436,
            0.984,
            0.0,
            -0.888,
            "ornamentPrecompTrillLowerSuffix"
        ],
        [
            1.28,
            1.532,
            0.004,
            -0.012,
            "brassScoop"
        ],
        [
            1.692,
            1.86,
            0.0,
            0.0,
            "brassLiftShort"
        ],
        [
            3.244,
            3.408,
            0.0,
            0.0,
            "brassLiftMedium"
        ],
        [
            4.78,
            4.944,
            0.0,
            0.0,
            "brassLiftLong"
        ],
        [
            1.28,
            1.532,
            0.004,
            -0.012,
            "brassDoitShort"
        ],
        [
            1.956,
            1.544,
            0.0,
            0.0,
            "brassDoitMedium"
        ],
        [
            4.596,
            1.552,
            0.0,
            0.0,
            "brassDoitLong"
        ],
        [
            1.172,
            1.528,
            0.004,
            -0.02,
            "brassFallLipShort"
        ],
        [
            1.956,
            1.544,
            0.0,
            0.0,
            "brassFallLipMedium"
        ],
        [
            4.596,
            1.552,
            0.0,
            0.0,
            "brassFallLipLong"
        ],
        [
            1.628,
            1.624,
            0.004,
            0.0,
            "brassFallSmoothShort"
        ],
        [
            3.588,
            3.588,
            0.0,
            0.0,
            "brassFallSmoothMedium"
        ],
        [
            5.456,
            5.448,
            0.004,
            0.0,
            "brassFallSmoothLong"
        ],
        [
            1.692,
            1.86,
            0.0,
            0.0,
            "brassFallRoughShort"
        ],
        [
            3.244,
            3.408,
            0.0,
            0.0,
            "brassFallRoughMedium"
        ],
        [
            4.78,
            4.944,
            0.0,
            0.0,
            "brassFallRoughLong"
        ],
        [
            1.172,
            1.528,
            0.004,
            -0.02,
            "brassPlop"
        ],
        [
            1.516,
            1.128,
            0.0,
            0.0,
            "brassFlip"
        ],
        [
            1.224,
            0.68,
            0.004,
            0.0,
            "brassSmear"
        ],
        [
            1.568,
            1.128,
            0.0,
            0.0,
            "brassBend"
        ],
        [
            2.48,
            0.98,
            0.0,
            0.0,
            "brassJazzTurn"
        ],
        [
            1.088,
            1.088,
            0.0,
            0.0,
            "brassMuteClosed"
        ],
        [
            1.22,
            1.216,
            0.004,
            0.0,
            "brassMuteHalfClosed"
        ],
        [
            1.216,
            1.216,
            0.0,
            0.0,
            "brassMuteOpen"
        ],
        [
            1.468,
            1.408,
            -0.296,
            -0.28,
            "brassHarmonMuteClosed"
        ],
        [
            1.428,
            1.436,
            -0.216,
            -0.256,
            "brassHarmonMuteStemHalfLeft"
        ],
        [
            1.432,
            1.436,
            -0.2,
            -0.256,
            "brassHarmonMuteStemHalfRight"
        ],
        [
            1.088,
            1.088,
            0.0,
            0.0,
            "brassHarmonMuteStemOpen"
        ],
        [
            1.78,
            0.956,
            -0.008,
            0.0,
            "doubleTongueAbove"
        ],
        [
            1.78,
            0.956,
            -0.008,
            0.0,
            "doubleTongueBelow"
        ],
        [
            2.3,
            0.956,
            -0.004,
            0.0,
            "tripleTongueAbove"
        ],
        [
            2.3,
            0.956,
            -0.004,
            0.0,
            "tripleTongueBelow"
        ],
        [
            1.216,
            1.216,
            0.0,
            0.0,
            "windClosedHole"
        ],
        [
            1.22,
            1.22,
            0.0,
            0.0,
            "windThreeQuartersClosedHole"
        ],
        [
            1.216,
            1.216,
            0.0,
            0.0,
            "windHalfClosedHole1"
        ],
        [
            1.22,
            1.216,
            0.004,
            0.0,
            "windHalfClosedHole2"
        ],
        [
            1.22,
            1.22,
            0.0,
            0.0,
            "windHalfClosedHole3"
        ],
        [
            1.216,
            1.216,
            0.0,
            0.0,
            "windOpenHole"
        ],
        [
            2.824,
            1.54,
            0.0,
            0.0,
            "windTrillKey"
        ],
        [
            1.488,
            1.572,
            0.0,
            0.0,
            "windFlatEmbouchure"
        ],
        [
            1.488,
            1.572,
            0.0,
            0.0,
            "windSharpEmbouchure"
        ],
        [
            1.888,
            1.892,
            0.0,
            0.0,
            "windRelaxedEmbouchure"
        ],
        [
            1.888,
            1.892,
            0.0,
            0.0,
            "windLessRelaxedEmbouchure"
        ],
        [
            1.748,
            1.748,
            0.0,
            0.0,
            "windTightEmbouchure"
        ],
        [
            1.888,
            1.892,
            0.0,
            0.0,
            "windLessTightEmbouchure"
        ],
        [
            1.888,
            1.884,
            0.0,
            -0.008,
            "windVeryTightEmbouchure"
        ],
        [
            2.348,
            1.34,
            0.0,
            0.0,
            "windWeakAirPressure"
        ],
        [
            2.212,
            1.2,
            0.0,
            0.0,
            "windStrongAirPressure"
        ],
        [
            0.796,
            1.688,
            0.0,
            0.0,
            "windReedPositionNormal"
        ],
        [
            0.792,
            1.688,
            0.0,
            0.0,
            "windReedPositionOut"
        ],
        [
            0.792,
            1.688,
            0.0,
            0.0,
            "windReedPositionIn"
        ],
        [
            1.112,
            1.948,
            -1.116,
            -0.416,
            "windMultiphonicsBlackStem"
        ],
        [
            1.196,
            2.196,
            -1.196,
            -0.528,
            "windMultiphonicsWhiteStem"
        ],
        [
            1.196,
            2.196,
            -1.196,
            -0.528,
            "windMultiphonicsBlackWhiteStem"
        ],
        [
            1.248,
            1.272,
            0.0,
            0.0,
            "stringsDownBow"
        ],
        [
            1.248,
            1.272,
            0.0,
            0.0,
            "stringsDownBowTurned"
        ],
        [
            0.996,
            1.98,
            0.004,
            0.004,
            "stringsUpBow"
        ],
        [
            0.996,
            1.98,
            0.004,
            0.004,
            "stringsUpBowTurned"
        ],
        [
            0.8,
            0.8,
            0.0,
            0.0,
            "stringsHarmonic"
        ],
        [
            0.8,
            0.8,
            0.0,
            0.0,
            "stringsHalfHarmonic"
        ],
        [
            1.552,
            0.78,
            0.0,
            -0.004,
            "stringsMuteOn"
        ],
        [
            1.552,
            0.784,
            0.0,
            0.0,
            "stringsMuteOff"
        ],
        [
            0.856,
            0.856,
            -0.856,
            0.0,
            "stringsBowBehindBridge"
        ],
        [
            0.788,
            0.352,
            -0.788,
            0.0,
            "stringsBowOnBridge"
        ],
        [
            0.792,
            0.36,
            -0.788,
            0.0,
            "stringsBowOnTailpiece"
        ],
        [
            1.252,
            1.272,
            0.0,
            0.0,
            "stringsOverpressureDownBow"
        ],
        [
            0.992,
            1.968,
            0.008,
            0.004,
            "stringsOverpressureUpBow"
        ],
        [
            1.252,
            1.272,
            0.0,
            0.0,
            "stringsOverpressurePossibileDownBow"
        ],
        [
            1.084,
            1.98,
            0.004,
            0.0,
            "stringsOverpressurePossibileUpBow"
        ],
        [
            1.252,
            0.908,
            0.0,
            0.0,
            "stringsOverpressureNoDirection"
        ],
        [
            2.844,
            0.956,
            0.0,
            0.0,
            "stringsJeteAbove"
        ],
        [
            2.844,
            0.956,
            0.0,
            0.0,
            "stringsJeteBelow"
        ],
        [
            0.64,
            1.648,
            0.0,
            0.0,
            "stringsFouette"
        ],
        [
            1.068,
            2.528,
            -1.068,
            0.0,
            "stringsVibratoPulse"
        ],
        [
            0.8,
            1.2,
            0.0,
            0.0,
            "stringsThumbPosition"
        ],
        [
            3.784,
            1.704,
            0.0,
            -0.3,
            "stringsChangeBowDirection"
        ],
        [
            0.8,
            1.2,
            0.0,
            0.0,
            "pluckedSnapPizzicatoBelow"
        ],
        [
            0.8,
            1.2,
            0.0,
            0.0,
            "pluckedSnapPizzicatoAbove"
        ],
        [
            1.2,
            0.8,
            0.0,
            0.0,
            "pluckedBuzzPizzicato"
        ],
        [
            1.088,
            1.088,
            0.0,
            0.0,
            "pluckedLeftHandPizzicato"
        ],
        [
            0.916,
            6.044,
            0.004,
            0.028,
            "arpeggiatoUp"
        ],
        [
            0.916,
            6.0,
            0.004,
            -0.016,
            "arpeggiatoDown"
        ],
        [
            1.592,
            1.0,
            0.004,
            -0.004,
            "pluckedWithFingernails"
        ],
        [
            1.0,
            1.596,
            -0.004,
            0.0,
            "pluckedFingernailFlick"
        ],
        [
            1.296,
            1.296,
            0.0,
            0.0,
            "pluckedDamp"
        ],
        [
            1.384,
            1.38,
            0.0,
            0.0,
            "pluckedDampAll"
        ],
        [
            1.764,
            2.0,
            0.0,
            0.0,
            "pluckedPlectrum"
        ],
        [
            1.464,
            1.216,
            -0.256,
            0.0,
            "pluckedDampOnStem"
        ],
        [
            1.5,
            0.404,
            0.0,
            0.0,
            "vocalMouthClosed"
        ],
        [
            1.5,
            0.724,
            0.0,
            0.0,
            "vocalMouthSlightlyOpen"
        ],
        [
            1.5,
            0.924,
            0.0,
            0.0,
            "vocalMouthOpen"
        ],
        [
            1.5,
            1.324,
            0.0,
            0.0,
            "vocalMouthWideOpen"
        ],
        [
            1.0,
            0.924,
            0.0,
            0.0,
            "vocalMouthPursed"
        ],
        [
            0.644,
            1.284,
            -0.644,
            -0.004,
            "vocalSprechgesang"
        ],
        [
            0.516,
            1.584,
            -0.516,
            0.0,
            "vocalsSussurando"
        ],
        [
            4.044,
            2.232,
            0.004,
            -0.008,
            "keyboardPedalPed"
        ],
        [
            2.14,
            2.224,
            0.004,
            -0.012,
            "keyboardPedalP"
        ],
        [
            0.972,
            1.264,
            0.0,
            0.0,
            "keyboardPedalE"
        ],
        [
            0.988,
            1.976,
            -0.596,
            0.032,
            "keyboardPedalD"
        ],
        [
            0.296,
            0.296,
            0.0,
            0.0,
            "keyboardPedalDot"
        ],
        [
            1.764,
            1.804,
            0.0,
            0.008,
            "keyboardPedalUp"
        ],
        [
            3.0,
            2.128,
            0.0,
            0.0,
            "keyboardPedalHalf"
        ],
        [
            1.16,
            2.128,
            0.0,
            0.0,
            "keyboardPedalUpNotch"
        ],
        [
            1.184,
            1.228,
            0.0,
            0.76,
            "keyboardPedalHyphen"
        ],
        [
            4.396,
            2.364,
            0.012,
            -0.056,
            "keyboardPedalSost"
        ],
        [
            1.66,
            2.364,
            0.004,
            -0.02,
            "keyboardPedalS"
        ],
        [
            1.896,
            1.0,
            0.004,
            -0.004,
            "keyboardPedalHalf2"
        ],
        [
            1.896,
            1.972,
            0.004,
            0.968,
            "keyboardPedalHalf3"
        ],
        [
            1.692,
            1.828,
            0.024,
            0.116,
            "keyboardPedalUpSpecial"
        ],
        [
            1.768,
            2.064,
            -0.064,
            -0.084,
            "keyboardLeftPedalPictogram"
        ],
        [
            1.768,
            2.064,
            -0.064,
            -0.084,
            "keyboardMiddlePedalPictogram"
        ],
        [
            1.768,
            2.064,
            -0.064,
            -0.084,
            "keyboardRightPedalPictogram"
        ],
        [
            1.704,
            2.124,
            0.0,
            0.0,
            "keyboardPedalHeel1"
        ],
        [
            1.704,
            2.124,
            0.0,
            0.0,
            "keyboardPedalHeel2"
        ],
        [
            2.0,
            2.0,
            0.0,
            0.0,
            "keyboardPedalHeel3"
        ],
        [
            1.752,
            2.128,
            0.0,
            0.0,
            "keyboardPedalToe1"
        ],
        [
            1.752,
            2.128,
            0.0,
            0.0,
            "keyboardPedalToe2"
        ],
        [
            1.704,
            3.252,
            0.0,
            0.0,
            "keyboardPedalHeelToe"
        ],
        [
            1.98,
            1.98,
            0.0,
            -1.136,
            "keyboardPluckInside"
        ],
        [
            1.78,
            0.956,
            -0.008,
            0.0,
            "keyboardBebung2DotsAbove"
        ],
        [
            1.78,
            0.956,
            -0.008,
            0.0,
            "keyboardBebung2DotsBelow"
        ],
        [
            2.3,
            0.956,
            -0.004,
            0.0,
            "keyboardBebung3DotsAbove"
        ],
        [
            2.3,
            0.956,
            -0.004,
            0.0,
            "keyboardBebung3DotsBelow"
        ],
        [
            2.844,
            0.956,
            0.0,
            0.0,
            "keyboardBebung4DotsAbove"
        ],
        [
            2.844,
            0.956,
            0.0,
            0.0,
            "keyboardBebung4DotsBelow"
        ],
        [
            1.564,
            4.064,
            0.0,
            0.0,
            "keyboardPlayWithRH"
        ],
        [
            1.564,
            4.064,
            0.0,
            0.0,
            "keyboardPlayWithRHEnd"
        ],
        [
            1.564,
            4.064,
            0.0,
            0.0,
            "keyboardPlayWithLH"
        ],
        [
            1.564,
            4.064,
            0.0,
            0.0,
            "keyboardPlayWithLHEnd"
        ],
        [
            1.004,
            2.624,
            0.004,
            1.44,
            "harpPedalRaised"
        ],
        [
            1.004,
            2.0,
            0.004,
            1.0,
            "harpPedalCentered"
        ],
        [
            1.0,
            1.56,
            0.0,
            0.368,
            "harpPedalLowered"
        ],
        [
            1.0,
            3.0,
            0.0,
            0.0,
            "harpPedalDivider"
        ],
        [
            2.288,
            3.124,
            -0.008,
            0.0,
            "harpSalzedoSlideWithSuppleness"
        ],
        [
            5.604,
            1.0,
            -0.08,
            0.0,
            "harpSalzedoOboicFlux"
        ],
        [
            3.2,
            3.14,
            0.0,
            -0.004,
            "harpSalzedoThunderEffect"
        ],
        [
            2.136,
            3.128,
            0.0,
            -0.004,
            "harpSalzedoWhistlingSounds"
        ],
        [
            1.644,
            2.068,
            0.0,
            -0.372,
            "harpSalzedoMetallicSounds"
        ],
        [
            2.256,
            2.256,
            0.0,
            0.0,
            "harpSalzedoTamTamSounds"
        ],
        [
            3.508,
            2.14,
            -0.056,
            0.004,
            "harpSalzedoPlayUpperEnd"
        ],
        [
            2.256,
            2.256,
            0.0,
            0.0,
            "harpSalzedoTimpanicSounds"
        ],
        [
            2.128,
            2.128,
            0.0,
            0.0,
            "harpSalzedoMuffleTotally"
        ],
        [
            0.9,
            0.984,
            0.0,
            0.0,
            "harpSalzedoFluidicSoundsLeft"
        ],
        [
            1.384,
            1.0,
            -0.004,
            0.0,
            "harpSalzedoFluidicSoundsRight"
        ],
        [
            2.808,
            2.264,
            0.0,
            0.0,
            "harpMetalRod"
        ],
        [
            3.004,
            2.984,
            0.004,
            0.0,
            "harpTuningKey"
        ],
        [
            3.86,
            1.972,
            0.0,
            0.148,
            "harpTuningKeyHandle"
        ],
        [
            2.9,
            1.972,
            0.0,
            0.0,
            "harpTuningKeyShank"
        ],
        [
            3.276,
            4.004,
            0.0,
            0.0,
            "harpTuningKeyGlissando"
        ],
        [
            0.724,
            2.848,
            -0.728,
            0.0,
            "harpStringNoiseStem"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictGlsp"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictXyl"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictXylTenor"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictXylBass"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictXylTrough"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictXylTenorTrough"
        ],
        [
            4.784,
            3.124,
            0.0,
            0.004,
            "pictMar"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictVib"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictVibMotorOff"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictEmptyTrap"
        ],
        [
            5.008,
            2.24,
            0.0,
            0.0,
            "pictGlspSmithBrindle"
        ],
        [
            5.864,
            2.24,
            0.0,
            0.0,
            "pictXylSmithBrindle"
        ],
        [
            6.284,
            2.24,
            0.0,
            0.0,
            "pictMarSmithBrindle"
        ],
        [
            5.864,
            2.24,
            0.0,
            0.0,
            "pictVibSmithBrindle"
        ],
        [
            4.704,
            1.412,
            0.0,
            0.0,
            "pictCrotales"
        ],
        [
            4.212,
            3.0,
            0.0,
            0.0,
            "pictSteelDrums"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictCelesta"
        ],
        [
            4.536,
            2.988,
            0.0,
            0.0,
            "pictLithophone"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictTubaphone"
        ],
        [
            3.74,
            3.104,
            -0.004,
            0.0,
            "pictTubularBells"
        ],
        [
            3.468,
            3.116,
            0.0,
            0.0,
            "pictWindChimesGlass"
        ],
        [
            4.188,
            3.448,
            0.0,
            0.0,
            "pictChimes"
        ],
        [
            4.08,
            3.492,
            0.0,
            0.0,
            "pictBambooChimes"
        ],
        [
            4.08,
            3.496,
            0.0,
            0.0,
            "pictShellChimes"
        ],
        [
            4.08,
            3.464,
            0.0,
            0.0,
            "pictGlassTubeChimes"
        ],
        [
            4.08,
            3.46,
            0.0,
            0.0,
            "pictGlassPlateChimes"
        ],
        [
            4.08,
            3.448,
            0.0,
            0.0,
            "pictMetalTubeChimes"
        ],
        [
            4.08,
            3.444,
            0.0,
            0.0,
            "pictMetalPlateChimes"
        ],
        [
            3.764,
            3.352,
            0.0,
            -0.036,
            "pictTimpani"
        ],
        [
            3.936,
            1.66,
            0.0,
            0.0,
            "pictSnareDrum"
        ],
        [
            3.936,
            1.66,
            0.0,
            0.0,
            "pictSnareDrumSnaresOff"
        ],
        [
            1.66,
            3.936,
            0.0,
            0.0,
            "pictSnareDrumMilitary"
        ],
        [
            1.528,
            3.104,
            0.004,
            0.0,
            "pictBassDrum"
        ],
        [
            3.104,
            1.52,
            0.0,
            0.0,
            "pictBassDrumOnSide"
        ],
        [
            1.66,
            4.144,
            0.0,
            0.0,
            "pictTenorDrum"
        ],
        [
            2.144,
            2.144,
            0.0,
            0.0,
            "pictTomTom"
        ],
        [
            5.1,
            2.196,
            0.0,
            0.0,
            "pictTomTomChinese"
        ],
        [
            5.1,
            2.196,
            0.0,
            0.0,
            "pictTomTomJapanese"
        ],
        [
            5.1,
            2.196,
            0.0,
            0.0,
            "pictTomTomIndoAmerican"
        ],
        [
            3.64,
            3.644,
            0.0,
            0.0,
            "pictTambourine"
        ],
        [
            4.444,
            3.148,
            0.004,
            0.004,
            "pictTimbales"
        ],
        [
            4.92,
            3.14,
            0.0,
            -0.004,
            "pictBongos"
        ],
        [
            2.356,
            3.144,
            0.004,
            0.0,
            "pictConga"
        ],
        [
            4.668,
            2.144,
            0.004,
            0.0,
            "pictLogDrum"
        ],
        [
            4.14,
            2.144,
            0.0,
            0.0,
            "pictSlitDrum"
        ],
        [
            3.148,
            3.144,
            0.004,
            0.0,
            "pictBrakeDrum"
        ],
        [
            2.92,
            3.144,
            0.004,
            0.0,
            "pictGobletDrum"
        ],
        [
            3.06,
            2.292,
            0.0,
            0.0,
            "pictTabla"
        ],
        [
            2.7,
            2.616,
            0.0,
            0.0,
            "pictCuica"
        ],
        [
            3.132,
            2.128,
            0.004,
            0.0,
            "pictWoodBlock"
        ],
        [
            3.728,
            2.132,
            0.0,
            0.004,
            "pictTempleBlocks"
        ],
        [
            2.48,
            2.988,
            0.004,
            0.0,
            "pictClaves"
        ],
        [
            3.992,
            1.532,
            0.0,
            0.0,
            "pictGuiro"
        ],
        [
            2.78,
            3.144,
            0.004,
            0.0,
            "pictRatchet"
        ],
        [
            4.8,
            2.736,
            0.0,
            0.0,
            "pictFootballRatchet"
        ],
        [
            2.792,
            3.416,
            -0.004,
            0.0,
            "pictWhip"
        ],
        [
            3.64,
            3.032,
            -0.004,
            -0.004,
            "pictBoardClapper"
        ],
        [
            2.132,
            2.144,
            0.0,
            0.0,
            "pictCastanets"
        ],
        [
            1.188,
            2.992,
            0.0,
            0.0,
            "pictCastanetsWithHandle"
        ],
        [
            4.312,
            1.332,
            0.004,
            0.0,
            "pictQuijada"
        ],
        [
            3.576,
            1.228,
            0.0,
            0.0,
            "pictBambooScraper"
        ],
        [
            4.004,
            0.592,
            0.0,
            0.0,
            "pictRecoReco"
        ],
        [
            4.148,
            3.144,
            0.0,
            0.0,
            "pictTriangle"
        ],
        [
            3.904,
            2.392,
            0.0,
            0.0,
            "pictAnvil"
        ],
        [
            5.356,
            1.948,
            0.0,
            0.0,
            "pictSleighBell"
        ],
        [
            1.796,
            2.564,
            -0.004,
            0.0,
            "pictCowBell"
        ],
        [
            1.836,
            2.532,
            0.004,
            0.0,
            "pictAlmglocken"
        ],
        [
            2.144,
            2.432,
            0.0,
            0.0,
            "pictBellPlate"
        ],
        [
            2.724,
            2.968,
            0.004,
            -0.004,
            "pictBell"
        ],
        [
            2.72,
            3.576,
            0.0,
            0.0,
            "pictHandbell"
        ],
        [
            1.004,
            2.988,
            0.0,
            0.0,
            "pictCencerro"
        ],
        [
            1.764,
            2.988,
            0.0,
            0.0,
            "pictAgogo"
        ],
        [
            2.0,
            2.0,
            0.0,
            0.0,
            "pictShellBells"
        ],
        [
            3.56,
            2.776,
            0.0,
            0.0,
            "pictJingleBells"
        ],
        [
            2.152,
            3.036,
            0.0,
            0.0,
            "pictBellTree"
        ],
        [
            0.848,
            3.128,
            0.004,
            0.0,
            "pictCrashCymbals"
        ],
        [
            3.128,
            0.332,
            0.0,
            0.0,
            "pictSuspendedCymbal"
        ],
        [
            3.132,
            0.844,
            0.004,
            0.0,
            "pictHiHat"
        ],
        [
            3.128,
            3.84,
            0.0,
            -0.004,
            "pictHiHatOnStand"
        ],
        [
            3.124,
            0.552,
            -0.004,
            -0.004,
            "pictSizzleCymbal"
        ],
        [
            3.864,
            2.564,
            0.0,
            0.0,
            "pictVietnameseHat"
        ],
        [
            5.048,
            1.208,
            0.0,
            0.0,
            "pictChineseCymbal"
        ],
        [
            0.984,
            2.128,
            0.004,
            0.0,
            "pictFingerCymbals"
        ],
        [
            3.184,
            1.14,
            -0.004,
            0.0,
            "pictCymbalTongs"
        ],
        [
            4.828,
            2.14,
            0.004,
            0.0,
            "pictBellOfCymbal"
        ],
        [
            3.488,
            2.324,
            0.0,
            0.0,
            "pictEdgeOfCymbal"
        ],
        [
            4.092,
            2.988,
            0.004,
            0.004,
            "pictTamTam"
        ],
        [
            3.936,
            2.972,
            0.004,
            0.0,
            "pictTamTamWithBeater"
        ],
        [
            2.744,
            3.204,
            0.0,
            0.0,
            "pictGong"
        ],
        [
            2.744,
            3.204,
            0.0,
            0.0,
            "pictGongWithButton"
        ],
        [
            3.384,
            1.14,
            0.0,
            -0.004,
            "pictSlideBrushOnGong"
        ],
        [
            1.448,
            3.112,
            0.0,
            -0.008,
            "pictFlexatone"
        ],
        [
            1.62,
            3.112,
            0.004,
            0.0,
            "pictMaraca"
        ],
        [
            4.116,
            2.916,
            0.0,
            0.0,
            "pictMaracas"
        ],
        [
            1.62,
            3.112,
            0.004,
            0.0,
            "pictCabasa"
        ],
        [
            4.092,
            2.984,
            0.004,
            0.0,
            "pictThundersheet"
        ],
        [
            2.94,
            2.088,
            0.0,
            0.0,
            "pictVibraslap"
        ],
        [
            2.888,
            3.176,
            0.0,
            -0.004,
            "pictSistrum"
        ],
        [
            1.028,
            3.112,
            0.0,
            0.0,
            "pictRainstick"
        ],
        [
            3.396,
            1.304,
            0.0,
            0.0,
            "pictChainRattle"
        ],
        [
            3.896,
            3.44,
            0.0,
            -0.008,
            "pictSlideWhistle"
        ],
        [
            2.848,
            3.144,
            0.0,
            0.0,
            "pictBirdWhistle"
        ],
        [
            3.956,
            2.16,
            0.0,
            0.0,
            "pictPoliceWhistle"
        ],
        [
            3.496,
            3.148,
            0.004,
            0.0,
            "pictSiren"
        ],
        [
            5.568,
            3.144,
            0.0,
            0.0,
            "pictWindMachine"
        ],
        [
            3.876,
            1.676,
            0.004,
            0.0,
            "pictCarHorn"
        ],
        [
            3.2,
            3.128,
            0.0,
            0.0,
            "pictKlaxonHorn"
        ],
        [
            4.448,
            1.612,
            0.0,
            0.0,
            "pictDuckCall"
        ],
        [
            4.892,
            1.644,
            0.0,
            0.0,
            "pictWindWhistle"
        ],
        [
            4.092,
            3.128,
            0.0,
            0.0,
            "pictMegaphone"
        ],
        [
            3.512,
            1.108,
            0.0,
            0.0,
            "pictLotusFlute"
        ],
        [
            5.08,
            2.348,
            0.0,
            0.0,
            "pictPistolShot"
        ],
        [
            3.38,
            3.12,
            0.0,
            0.0,
            "pictCannon"
        ],
        [
            3.74,
            2.96,
            0.0,
            0.004,
            "pictSandpaperBlocks"
        ],
        [
            2.852,
            2.58,
            -0.004,
            0.0,
            "pictLionsRoar"
        ],
        [
            2.66,
            1.636,
            0.0,
            0.0,
            "pictGlassHarp"
        ],
        [
            3.64,
            2.072,
            0.0,
            0.0,
            "pictGlassHarmonica"
        ],
        [
            3.448,
            1.36,
            0.0,
            -0.808,
            "pictMusicalSaw"
        ],
        [
            2.0,
            2.0,
            0.0,
            0.0,
            "pictJawHarp"
        ],
        [
            0.92,
            2.956,
            0.0,
            -0.016,
            "pictBeaterSoftXylophoneUp"
        ],
        [
            0.92,
            2.956,
            0.0,
            -0.016,
            "pictBeaterSoftXylophoneDown"
        ],
        [
            1.744,
            2.64,
            0.0,
            -0.004,
            "pictBeaterSoftXylophoneRight"
        ],
        [
            1.744,
            2.64,
            0.0,
            -0.004,
            "pictBeaterSoftXylophoneLeft"
        ],
        [
            0.924,
            2.968,
            0.004,
            -0.004,
            "pictBeaterMediumXylophoneUp"
        ],
        [
            0.924,
            2.968,
            0.004,
            -0.004,
            "pictBeaterMediumXylophoneDown"
        ],
        [
            1.748,
            2.644,
            0.004,
            0.0,
            "pictBeaterMediumXylophoneRight"
        ],
        [
            1.748,
            2.644,
            0.004,
            0.0,
            "pictBeaterMediumXylophoneLeft"
        ],
        [
            0.92,
            2.968,
            0.0,
            -0.004,
            "pictBeaterHardXylophoneUp"
        ],
        [
            0.92,
            2.968,
            0.0,
            -0.004,
            "pictBeaterHardXylophoneDown"
        ],
        [
            1.744,
            2.644,
            0.0,
            0.0,
            "pictBeaterHardXylophoneRight"
        ],
        [
            1.74,
            2.644,
            -0.008,
            0.0,
            "pictBeaterHardXylophoneLeft"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictBeaterWoodXylophoneUp"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictBeaterWoodXylophoneDown"
        ],
        [
            1.748,
            2.648,
            0.0,
            0.004,
            "pictBeaterWoodXylophoneRight"
        ],
        [
            1.748,
            2.648,
            0.0,
            0.004,
            "pictBeaterWoodXylophoneLeft"
        ],
        [
            0.552,
            2.972,
            0.0,
            0.0,
            "pictBeaterSoftGlockenspielUp"
        ],
        [
            0.552,
            2.972,
            0.0,
            0.0,
            "pictBeaterSoftGlockenspielDown"
        ],
        [
            1.652,
            2.62,
            0.004,
            0.0,
            "pictBeaterSoftGlockenspielRight"
        ],
        [
            1.652,
            2.62,
            0.004,
            0.0,
            "pictBeaterSoftGlockenspielLeft"
        ],
        [
            0.432,
            2.912,
            0.0,
            0.0,
            "pictBeaterHardGlockenspielUp"
        ],
        [
            0.432,
            2.912,
            0.0,
            0.0,
            "pictBeaterHardGlockenspielDown"
        ],
        [
            1.596,
            2.556,
            0.004,
            0.0,
            "pictBeaterHardGlockenspielRight"
        ],
        [
            1.596,
            2.556,
            0.004,
            0.0,
            "pictBeaterHardGlockenspielLeft"
        ],
        [
            0.868,
            3.052,
            0.0,
            0.0,
            "pictBeaterSoftTimpaniUp"
        ],
        [
            0.868,
            3.052,
            0.0,
            0.0,
            "pictBeaterSoftTimpaniDown"
        ],
        [
            1.896,
            2.828,
            0.004,
            0.0,
            "pictBeaterSoftTimpaniRight"
        ],
        [
            1.896,
            2.828,
            0.004,
            0.0,
            "pictBeaterSoftTimpaniLeft"
        ],
        [
            0.868,
            3.056,
            0.0,
            0.004,
            "pictBeaterMediumTimpaniUp"
        ],
        [
            0.868,
            3.056,
            0.0,
            0.004,
            "pictBeaterMediumTimpaniDown"
        ],
        [
            1.896,
            2.828,
            0.0,
            0.0,
            "pictBeaterMediumTimpaniRight"
        ],
        [
            1.896,
            2.828,
            0.0,
            0.0,
            "pictBeaterMediumTimpaniLeft"
        ],
        [
            0.868,
            3.048,
            0.0,
            -0.004,
            "pictBeaterHardTimpaniUp"
        ],
        [
            0.868,
            3.048,
            0.0,
            -0.004,
            "pictBeaterHardTimpaniDown"
        ],
        [
            1.892,
            2.824,
            0.0,
            -0.004,
            "pictBeaterHardTimpaniRight"
        ],
        [
            1.892,
            2.824,
            0.0,
            -0.004,
            "pictBeaterHardTimpaniLeft"
        ],
        [
            0.868,
            3.052,
            0.0,
            0.0,
            "pictBeaterWoodTimpaniUp"
        ],
        [
            0.868,
            3.052,
            0.0,
            0.0,
            "pictBeaterWoodTimpaniDown"
        ],
        [
            1.9,
            2.824,
            0.004,
            0.0,
            "pictBeaterWoodTimpaniRight"
        ],
        [
            1.9,
            2.824,
            0.004,
            0.0,
            "pictBeaterWoodTimpaniLeft"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterSoftBassDrumUp"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterSoftBassDrumDown"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterMediumBassDrumUp"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterMediumBassDrumDown"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterHardBassDrumUp"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterHardBassDrumDown"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterMetalBassDrumUp"
        ],
        [
            1.28,
            3.048,
            0.0,
            -0.004,
            "pictBeaterMetalBassDrumDown"
        ],
        [
            1.28,
            3.052,
            0.0,
            0.0,
            "pictBeaterDoubleBassDrumUp"
        ],
        [
            1.28,
            3.052,
            0.0,
            0.0,
            "pictBeaterDoubleBassDrumDown"
        ],
        [
            1.092,
            3.028,
            -0.004,
            -0.004,
            "pictBeaterSoftYarnUp"
        ],
        [
            1.092,
            3.028,
            -0.004,
            -0.004,
            "pictBeaterSoftYarnDown"
        ],
        [
            1.816,
            2.708,
            -0.004,
            -0.004,
            "pictBeaterSoftYarnRight"
        ],
        [
            1.816,
            2.708,
            -0.004,
            -0.004,
            "pictBeaterSoftYarnLeft"
        ],
        [
            1.096,
            3.032,
            0.0,
            0.0,
            "pictBeaterMediumYarnUp"
        ],
        [
            1.096,
            3.032,
            0.0,
            0.0,
            "pictBeaterMediumYarnDown"
        ],
        [
            1.824,
            2.712,
            0.0,
            0.0,
            "pictBeaterMediumYarnRight"
        ],
        [
            1.824,
            2.712,
            0.0,
            0.0,
            "pictBeaterMediumYarnLeft"
        ],
        [
            1.1,
            3.028,
            0.004,
            -0.004,
            "pictBeaterHardYarnUp"
        ],
        [
            1.1,
            3.028,
            0.004,
            -0.004,
            "pictBeaterHardYarnDown"
        ],
        [
            1.828,
            2.704,
            0.004,
            -0.004,
            "pictBeaterHardYarnRight"
        ],
        [
            1.828,
            2.704,
            0.004,
            -0.004,
            "pictBeaterHardYarnLeft"
        ],
        [
            0.92,
            2.52,
            0.0,
            0.0,
            "pictBeaterSuperballUp"
        ],
        [
            0.92,
            2.52,
            0.0,
            0.0,
            "pictBeaterSuperballDown"
        ],
        [
            1.524,
            2.256,
            0.004,
            0.0,
            "pictBeaterSuperballRight"
        ],
        [
            1.524,
            2.256,
            0.004,
            0.0,
            "pictBeaterSuperballLeft"
        ],
        [
            0.92,
            0.92,
            0.0,
            0.0,
            "pictSuperball"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictWoundHardUp"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictWoundHardDown"
        ],
        [
            1.748,
            2.644,
            0.004,
            0.0,
            "pictWoundHardRight"
        ],
        [
            1.748,
            2.644,
            0.004,
            0.0,
            "pictWoundHardLeft"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictWoundSoftUp"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictWoundSoftDown"
        ],
        [
            1.748,
            2.644,
            0.004,
            0.0,
            "pictWoundSoftRight"
        ],
        [
            1.748,
            2.644,
            0.004,
            0.0,
            "pictWoundSoftLeft"
        ],
        [
            1.008,
            3.044,
            0.0,
            0.0,
            "pictGumSoftUp"
        ],
        [
            1.008,
            3.044,
            0.0,
            0.0,
            "pictGumSoftDown"
        ],
        [
            1.972,
            2.876,
            0.0,
            0.0,
            "pictGumSoftRight"
        ],
        [
            1.972,
            2.876,
            0.0,
            0.0,
            "pictGumSoftLeft"
        ],
        [
            1.008,
            3.044,
            0.0,
            0.0,
            "pictGumMediumUp"
        ],
        [
            1.008,
            3.044,
            0.0,
            0.0,
            "pictGumMediumDown"
        ],
        [
            1.972,
            2.876,
            0.0,
            0.0,
            "pictGumMediumRight"
        ],
        [
            1.972,
            2.876,
            0.0,
            0.0,
            "pictGumMediumLeft"
        ],
        [
            1.008,
            3.044,
            0.0,
            0.0,
            "pictGumHardUp"
        ],
        [
            1.008,
            3.044,
            0.0,
            0.0,
            "pictGumHardDown"
        ],
        [
            1.972,
            2.876,
            0.0,
            0.0,
            "pictGumHardRight"
        ],
        [
            1.972,
            2.876,
            0.0,
            0.0,
            "pictGumHardLeft"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictBeaterMetalUp"
        ],
        [
            0.92,
            2.972,
            0.0,
            0.0,
            "pictBeaterMetalDown"
        ],
        [
            1.744,
            2.644,
            0.0,
            0.0,
            "pictBeaterMetalRight"
        ],
        [
            1.744,
            2.644,
            0.0,
            0.0,
            "pictBeaterMetalLeft"
        ],
        [
            2.24,
            3.052,
            0.0,
            0.0,
            "pictBeaterHammerWoodUp"
        ],
        [
            2.24,
            3.052,
            0.0,
            0.0,
            "pictBeaterHammerWoodDown"
        ],
        [
            2.24,
            3.052,
            0.0,
            0.0,
            "pictBeaterHammerPlasticUp"
        ],
        [
            2.24,
            3.052,
            0.0,
            0.0,
            "pictBeaterHammerPlasticDown"
        ],
        [
            2.24,
            3.052,
            0.0,
            0.0,
            "pictBeaterHammerMetalUp"
        ],
        [
            2.24,
            3.052,
            0.0,
            0.0,
            "pictBeaterHammerMetalDown"
        ],
        [
            0.564,
            2.928,
            0.004,
            0.0,
            "pictBeaterSnareSticksUp"
        ],
        [
            0.564,
            2.928,
            0.004,
            0.0,
            "pictBeaterSnareSticksDown"
        ],
        [
            0.56,
            3.236,
            0.0,
            0.0,
            "pictBeaterJazzSticksUp"
        ],
        [
            0.56,
            3.236,
            0.0,
            0.0,
            "pictBeaterJazzSticksDown"
        ],
        [
            1.636,
            3.144,
            0.004,
            0.0,
            "pictBeaterTriangleUp"
        ],
        [
            1.636,
            3.144,
            0.004,
            0.0,
            "pictBeaterTriangleDown"
        ],
        [
            1.632,
            3.14,
            0.004,
            -0.004,
            "pictBeaterWireBrushesUp"
        ],
        [
            1.632,
            3.14,
            0.004,
            -0.004,
            "pictBeaterWireBrushesDown"
        ],
        [
            1.184,
            3.152,
            0.0,
            -0.004,
            "pictBeaterBrassMalletsUp"
        ],
        [
            1.184,
            3.152,
            0.0,
            -0.004,
            "pictBeaterBrassMalletsDown"
        ],
        [
            2.18,
            2.644,
            0.004,
            0.0,
            "pictBeaterSoftXylophone"
        ],
        [
            1.764,
            2.716,
            0.0,
            0.0,
            "pictBeaterSpoonWoodenMallet"
        ],
        [
            1.584,
            3.14,
            0.0,
            -0.004,
            "pictBeaterGuiroScraper"
        ],
        [
            0.372,
            3.104,
            0.0,
            0.0,
            "pictBeaterBow"
        ],
        [
            1.612,
            2.98,
            0.0,
            0.0,
            "pictBeaterMallet"
        ],
        [
            1.588,
            2.98,
            0.004,
            0.0,
            "pictBeaterMetalHammer"
        ],
        [
            2.228,
            2.704,
            0.0,
            0.0,
            "pictBeaterHammer"
        ],
        [
            1.128,
            3.128,
            0.0,
            0.0,
            "pictBeaterKnittingNeedle"
        ],
        [
            2.068,
            2.976,
            0.0,
            0.0,
            "pictBeaterHand"
        ],
        [
            2.068,
            2.84,
            0.0,
            0.0,
            "pictBeaterFinger"
        ],
        [
            2.036,
            1.72,
            0.0,
            0.0,
            "pictBeaterFist"
        ],
        [
            1.216,
            0.768,
            0.0,
            0.0,
            "pictBeaterFingernails"
        ],
        [
            5.468,
            3.3,
            0.0,
            0.0,
            "pictCoins"
        ],
        [
            0.216,
            2.644,
            0.004,
            -0.004,
            "pictDrumStick"
        ],
        [
            1.4,
            3.168,
            -0.484,
            1.72,
            "pictBeaterCombiningParentheses"
        ],
        [
            1.276,
            3.28,
            -0.332,
            1.684,
            "pictBeaterCombiningDashedCircle"
        ],
        [
            1.764,
            1.804,
            0.0,
            0.008,
            "pictStickShot"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "pictScrapeCenterToEdge"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "pictScrapeEdgeToCenter"
        ],
        [
            3.132,
            3.128,
            0.004,
            0.0,
            "pictScrapeAroundRim"
        ],
        [
            2.016,
            2.016,
            0.0,
            0.0,
            "pictOnRim"
        ],
        [
            1.144,
            1.14,
            0.0,
            -0.004,
            "pictOpenRimShot"
        ],
        [
            1.144,
            1.144,
            0.0,
            0.0,
            "pictHalfOpen1"
        ],
        [
            1.148,
            1.38,
            0.004,
            -0.244,
            "pictHalfOpen2"
        ],
        [
            1.144,
            1.144,
            0.0,
            0.0,
            "pictOpen"
        ],
        [
            1.38,
            1.376,
            -0.244,
            -0.248,
            "pictDamp1"
        ],
        [
            2.828,
            3.16,
            0.0,
            -0.004,
            "pictDamp2"
        ],
        [
            2.828,
            3.16,
            0.0,
            -0.004,
            "pictDamp3"
        ],
        [
            2.828,
            3.16,
            0.0,
            -0.004,
            "pictDamp4"
        ],
        [
            0.492,
            1.008,
            -0.496,
            0.0,
            "pictRimShotOnStem"
        ],
        [
            2.136,
            2.136,
            0.0,
            0.0,
            "pictCenter1"
        ],
        [
            2.136,
            2.136,
            0.0,
            0.0,
            "pictCenter2"
        ],
        [
            2.14,
            2.136,
            0.004,
            0.0,
            "pictCenter3"
        ],
        [
            2.508,
            2.136,
            0.0,
            0.0,
            "pictRim1"
        ],
        [
            2.136,
            2.136,
            0.0,
            0.0,
            "pictRim2"
        ],
        [
            2.136,
            2.136,
            0.0,
            0.0,
            "pictRim3"
        ],
        [
            2.136,
            2.14,
            0.0,
            0.004,
            "pictNormalPosition"
        ],
        [
            0.608,
            1.004,
            0.004,
            0.008,
            "pictChokeCymbal"
        ],
        [
            1.128,
            1.128,
            0.0,
            0.0,
            "pictRightHandSquare"
        ],
        [
            0.5,
            0.748,
            0.0,
            0.248,
            "pictLeftHandCircle"
        ],
        [
            1.98,
            1.976,
            -0.004,
            -0.004,
            "pictSwishStem"
        ],
        [
            1.736,
            1.18,
            -1.736,
            0.132,
            "pictTurnRightStem"
        ],
        [
            1.736,
            1.18,
            -1.736,
            0.132,
            "pictTurnLeftStem"
        ],
        [
            1.708,
            1.136,
            -1.712,
            0.124,
            "pictTurnRightLeftStem"
        ],
        [
            1.012,
            0.648,
            -1.032,
            0.0,
            "pictCrushStem"
        ],
        [
            0.644,
            1.284,
            -0.644,
            -0.004,
            "pictDeadNoteStem"
        ],
        [
            1.028,
            1.516,
            0.0,
            0.388,
            "handbellsMartellato"
        ],
        [
            1.656,
            2.048,
            0.0,
            0.0,
            "handbellsMartellatoLift"
        ],
        [
            1.064,
            2.004,
            -0.064,
            0.388,
            "handbellsHandMartellato"
        ],
        [
            1.916,
            2.008,
            0.0,
            0.092,
            "handbellsMutedMartellato"
        ],
        [
            1.128,
            1.692,
            0.0,
            0.564,
            "handbellsMalletBellSuspended"
        ],
        [
            1.128,
            1.692,
            0.0,
            0.0,
            "handbellsMalletBellOnTable"
        ],
        [
            1.736,
            2.224,
            0.0,
            0.0,
            "handbellsMalletLft"
        ],
        [
            0.924,
            2.224,
            0.0,
            0.176,
            "handbellsPluckLift"
        ],
        [
            0.512,
            2.224,
            0.0,
            0.176,
            "handbellsSwingUp"
        ],
        [
            0.512,
            2.224,
            0.0,
            0.176,
            "handbellsSwingDown"
        ],
        [
            1.228,
            2.284,
            -0.004,
            0.172,
            "handbellsSwing"
        ],
        [
            1.316,
            2.508,
            0.0,
            0.0,
            "handbellsEcho1"
        ],
        [
            0.512,
            2.16,
            0.0,
            0.176,
            "handbellsEcho2"
        ],
        [
            3.132,
            3.128,
            0.004,
            0.0,
            "handbellsGyro"
        ],
        [
            2.568,
            2.568,
            0.0,
            0.0,
            "handbellsDamp3"
        ],
        [
            2.128,
            3.668,
            0.0,
            -0.004,
            "handbellsBelltree"
        ],
        [
            2.928,
            4.096,
            0.0,
            0.0,
            "handbellsTableSingleBell"
        ],
        [
            3.12,
            4.256,
            0.0,
            0.0,
            "handbellsTablePairBells"
        ],
        [
            2.016,
            2.104,
            0.0,
            0.004,
            "guitarVibratoBarScoop"
        ],
        [
            2.128,
            2.1,
            0.0,
            0.0,
            "guitarVibratoBarDip"
        ],
        [
            4.572,
            1.428,
            -0.004,
            0.0,
            "guitarShake"
        ],
        [
            2.164,
            2.156,
            0.004,
            0.0,
            "guitarString0"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString1"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString2"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString3"
        ],
        [
            2.164,
            2.156,
            0.004,
            0.0,
            "guitarString4"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString5"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString6"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString7"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString8"
        ],
        [
            2.16,
            2.156,
            0.0,
            0.0,
            "guitarString9"
        ],
        [
            1.144,
            1.144,
            0.0,
            0.0,
            "guitarOpenPedal"
        ],
        [
            1.144,
            1.144,
            0.0,
            0.0,
            "guitarHalfOpenPedal"
        ],
        [
            1.144,
            1.14,
            0.0,
            -0.004,
            "guitarClosePedal"
        ],
        [
            1.588,
            1.364,
            0.0,
            -0.224,
            "guitarLeftHandTapping"
        ],
        [
            0.788,
            1.008,
            0.0,
            0.0,
            "guitarRightHandTapping"
        ],
        [
            1.08,
            1.128,
            0.004,
            0.0,
            "guitarGolpe"
        ],
        [
            1.448,
            1.46,
            0.0,
            0.0,
            "guitarFadeIn"
        ],
        [
            1.448,
            1.46,
            0.0,
            0.0,
            "guitarFadeOut"
        ],
        [
            2.896,
            1.46,
            0.0,
            0.0,
            "guitarVolumeSwell"
        ],
        [
            1.44,
            4.096,
            0.0,
            0.0,
            "fretboard3String"
        ],
        [
            1.44,
            4.096,
            0.0,
            0.0,
            "fretboard3StringNut"
        ],
        [
            2.104,
            4.096,
            0.0,
            0.0,
            "fretboard4String"
        ],
        [
            2.104,
            4.096,
            0.0,
            0.0,
            "fretboard4StringNut"
        ],
        [
            2.776,
            4.096,
            0.0,
            0.0,
            "fretboard5String"
        ],
        [
            2.78,
            4.096,
            0.004,
            0.0,
            "fretboard5StringNut"
        ],
        [
            3.444,
            4.096,
            0.0,
            0.0,
            "fretboard6String"
        ],
        [
            3.444,
            4.096,
            0.0,
            0.0,
            "fretboard6StringNut"
        ],
        [
            0.564,
            0.564,
            0.0,
            0.0,
            "fretboardFilledCircle"
        ],
        [
            0.596,
            0.596,
            0.0,
            0.0,
            "fretboardX"
        ],
        [
            0.564,
            0.564,
            0.0,
            0.0,
            "fretboardO"
        ],
        [
            2.828,
            3.0,
            0.0,
            0.0,
            "analyticsHauptstimme"
        ],
        [
            2.828,
            3.004,
            0.0,
            -0.004,
            "analyticsNebenstimme"
        ],
        [
            1.192,
            3.0,
            0.0,
            2.0,
            "analyticsStartStimme"
        ],
        [
            1.192,
            3.0,
            0.0,
            2.0,
            "analyticsEndStimme"
        ],
        [
            2.972,
            2.048,
            0.0,
            0.0,
            "analyticsTheme"
        ],
        [
            2.972,
            2.048,
            0.0,
            0.0,
            "analyticsThemeRetrograde"
        ],
        [
            2.972,
            2.048,
            0.0,
            0.0,
            "analyticsThemeRetrogradeInversion"
        ],
        [
            2.972,
            2.048,
            0.0,
            0.0,
            "analyticsThemeInversion"
        ],
        [
            1.7,
            2.008,
            0.0,
            0.0,
            "analyticsTheme1"
        ],
        [
            1.7,
            2.008,
            0.0,
            0.0,
            "analyticsInversion1"
        ],
        [
            1.892,
            1.892,
            0.0,
            0.0,
            "csymDiminished"
        ],
        [
            1.948,
            1.94,
            -0.076,
            -0.06,
            "csymHalfDiminished"
        ],
        [
            1.9,
            1.9,
            0.0,
            0.0,
            "csymAugmented"
        ],
        [
            2.228,
            1.904,
            -0.004,
            0.0,
            "csymMajorSeventh"
        ],
        [
            1.9,
            1.076,
            0.0,
            0.82,
            "csymMinor"
        ],
        [
            1.484,
            7.976,
            0.012,
            0.0,
            "csymParensLeftTall"
        ],
        [
            1.484,
            7.976,
            0.012,
            0.0,
            "csymParensRightTall"
        ],
        [
            1.244,
            8.0,
            0.0,
            0.0,
            "csymBracketLeftTall"
        ],
        [
            1.244,
            8.0,
            0.0,
            0.0,
            "csymBracketRightTall"
        ],
        [
            1.272,
            1.5,
            0.0,
            0.0,
            "tuplet0"
        ],
        [
            1.116,
            1.488,
            0.0,
            0.004,
            "tuplet1"
        ],
        [
            1.312,
            1.516,
            0.0,
            0.004,
            "tuplet2"
        ],
        [
            1.28,
            1.5,
            0.0,
            0.0,
            "tuplet3"
        ],
        [
            1.288,
            1.492,
            0.004,
            0.0,
            "tuplet4"
        ],
        [
            1.264,
            1.476,
            0.0,
            0.0,
            "tuplet5"
        ],
        [
            1.156,
            1.524,
            0.004,
            0.0,
            "tuplet6"
        ],
        [
            1.256,
            1.492,
            0.004,
            -0.004,
            "tuplet7"
        ],
        [
            1.248,
            1.508,
            0.0,
            0.0,
            "tuplet8"
        ],
        [
            1.152,
            1.528,
            0.0,
            0.004,
            "tuplet9"
        ],
        [
            0.48,
            1.112,
            0.032,
            0.32,
            "tupletColon"
        ],
        [
            1.596,
            4.096,
            0.0,
            0.0,
            "conductorStrongBeat"
        ],
        [
            0.796,
            4.096,
            0.0,
            0.0,
            "conductorLeftBeat"
        ],
        [
            0.796,
            4.096,
            0.0,
            0.0,
            "conductorRightBeat"
        ],
        [
            1.6,
            4.1,
            0.0,
            0.0,
            "conductorWeakBeat"
        ],
        [
            2.868,
            2.012,
            -0.004,
            0.0,
            "conductorBeat2Simple"
        ],
        [
            2.44,
            2.008,
            0.0,
            0.0,
            "conductorBeat3Simple"
        ],
        [
            2.024,
            2.02,
            0.0,
            0.0,
            "conductorBeat4Simple"
        ],
        [
            2.876,
            2.012,
            0.0,
            0.0,
            "conductorBeat2Compound"
        ],
        [
            2.44,
            2.008,
            0.0,
            0.0,
            "conductorBeat3Compound"
        ],
        [
            2.02,
            2.02,
            0.0,
            0.0,
            "conductorBeat4Compound"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksPiccolo"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksClarinet"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksUpperTremolo8"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksLowerTremolo8"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksBassoon"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksOboe"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksViolin"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksImitationMusette"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksAuthenticMusette"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksOrgan"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksHarmonium"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksBandoneon"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksAccordion"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksMaster"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksTwoChoirs"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksTremoloLower8ve"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksTremoloUpper8ve"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksDoubleTremoloLower8ve"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksDoubleTremoloUpper8ve"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH3RanksFullFactory"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH4RanksSoprano"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH4RanksAlto"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH4RanksTenor"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH4RanksMaster"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH4RanksSoftBass"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH4RanksSoftTenor"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnRH4RanksBassAlto"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnLH2Ranks8Round"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnLH2Ranks16Round"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnLH2Ranks8Plus16Round"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnLH2RanksMasterRound"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnLH2RanksMasterPlus16Round"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnLH2RanksFullMasterRound"
        ],
        [
            2.552,
            3.136,
            0.0,
            0.0,
            "accdnLH3Ranks8Square"
        ],
        [
            2.552,
            3.136,
            0.0,
            0.0,
            "accdnLH3Ranks2Square"
        ],
        [
            2.552,
            3.136,
            0.0,
            0.0,
            "accdnLH3RanksDouble8Square"
        ],
        [
            2.552,
            3.136,
            0.0,
            0.0,
            "accdnLH3Ranks2Plus8Square"
        ],
        [
            2.552,
            3.136,
            0.0,
            0.0,
            "accdnLH3RanksTuttiSquare"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnCombRH3RanksEmpty"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnCombRH4RanksEmpty"
        ],
        [
            3.128,
            3.128,
            0.0,
            0.0,
            "accdnCombLH2RanksEmpty"
        ],
        [
            2.552,
            3.136,
            0.0,
            0.0,
            "accdnCombLH3RanksEmptySquare"
        ],
        [
            0.496,
            0.496,
            0.0,
            0.0,
            "accdnCombDot"
        ],
        [
            0.92,
            2.3,
            0.0,
            0.0,
            "accdnPush"
        ],
        [
            0.92,
            2.3,
            0.0,
            0.0,
            "accdnPull"
        ],
        [
            1.552,
            2.94,
            0.0,
            0.0,
            "accdnRicochet2"
        ],
        [
            1.832,
            2.94,
            0.0,
            0.0,
            "accdnRicochet3"
        ],
        [
            2.512,
            2.94,
            0.0,
            0.0,
            "accdnRicochet4"
        ],
        [
            3.072,
            2.94,
            0.0,
            0.0,
            "accdnRicochet5"
        ],
        [
            3.752,
            2.94,
            0.0,
            0.0,
            "accdnRicochet6"
        ],
        [
            1.512,
            1.132,
            0.0,
            0.0,
            "accdnRicochetStem2"
        ],
        [
            1.548,
            1.488,
            0.0,
            0.0,
            "accdnRicochetStem3"
        ],
        [
            1.548,
            1.936,
            0.0,
            0.0,
            "accdnRicochetStem4"
        ],
        [
            1.548,
            2.372,
            0.0,
            0.0,
            "accdnRicochetStem5"
        ],
        [
            1.548,
            2.824,
            0.0,
            0.0,
            "accdnRicochetStem6"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlBeginBeam"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlEndBeam"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlBeginTie"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlEndTie"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlBeginSlur"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlEndSlur"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlBeginPhrase"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "controlEndPhrase"
        ],
        [
            2.0,
            1.532,
            0.0,
            -1.532,
            "chantStaff"
        ],
        [
            3.0,
            1.532,
            0.0,
            -1.532,
            "chantStaffWide"
        ],
        [
            1.0,
            1.532,
            0.0,
            -1.532,
            "chantStaffNarrow"
        ],
        [
            0.064,
            2.0,
            0.0,
            1.0,
            "chantDivisioMinima"
        ],
        [
            0.064,
            1.0,
            0.0,
            -1.0,
            "chantDivisioMaior"
        ],
        [
            0.064,
            1.5,
            0.0,
            -1.5,
            "chantDivisioMaxima"
        ],
        [
            0.48,
            1.5,
            0.0,
            -1.5,
            "chantDivisioFinalis"
        ],
        [
            0.364,
            2.0,
            0.0,
            1.02,
            "chantVirgula"
        ],
        [
            0.572,
            2.0,
            0.0,
            1.04,
            "chantCaesura"
        ],
        [
            1.584,
            0.924,
            0.0,
            -0.928,
            "mensuralGclef"
        ],
        [
            1.356,
            3.688,
            0.0,
            -0.676,
            "mensuralGclefPetrucci"
        ],
        [
            1.056,
            0.884,
            0.0,
            -0.924,
            "chantFclef"
        ],
        [
            1.188,
            0.688,
            0.0,
            -0.688,
            "mensuralFclef"
        ],
        [
            1.952,
            2.364,
            0.0,
            -4.276,
            "mensuralFclefPetrucci"
        ],
        [
            2.6,
            2.0,
            0.0,
            -2.0,
            "mensuralCclef"
        ],
        [
            0.536,
            0.884,
            0.0,
            -0.884,
            "chantCclef"
        ],
        [
            0.976,
            3.2,
            0.0,
            -1.396,
            "mensuralCclefPetrucciPosLowest"
        ],
        [
            0.976,
            3.2,
            0.0,
            -2.4,
            "mensuralCclefPetrucciPosLow"
        ],
        [
            0.976,
            3.2,
            0.0,
            -3.2,
            "mensuralCclefPetrucciPosMiddle"
        ],
        [
            0.976,
            2.4,
            0.0,
            -3.2,
            "mensuralCclefPetrucciPosHigh"
        ],
        [
            0.976,
            1.416,
            0.0,
            -3.18,
            "mensuralCclefPetrucciPosHighest"
        ],
        [
            2.128,
            1.06,
            0.004,
            -1.064,
            "mensuralProlation1"
        ],
        [
            2.128,
            1.06,
            0.004,
            -1.064,
            "mensuralProlation2"
        ],
        [
            2.128,
            1.452,
            0.004,
            -1.52,
            "mensuralProlation3"
        ],
        [
            2.124,
            1.452,
            0.0,
            -1.52,
            "mensuralProlation4"
        ],
        [
            1.976,
            1.06,
            0.0,
            -1.064,
            "mensuralProlation5"
        ],
        [
            1.976,
            1.06,
            0.0,
            -1.064,
            "mensuralProlation6"
        ],
        [
            1.968,
            1.124,
            -0.012,
            -1.0,
            "mensuralProlation7"
        ],
        [
            1.98,
            1.452,
            0.004,
            -1.52,
            "mensuralProlation8"
        ],
        [
            1.98,
            1.452,
            0.004,
            -1.52,
            "mensuralProlation9"
        ],
        [
            1.98,
            1.452,
            0.0,
            -1.52,
            "mensuralProlation10"
        ],
        [
            1.98,
            1.056,
            0.0,
            -1.068,
            "mensuralProlation11"
        ],
        [
            2.188,
            1.1,
            0.0,
            -1.104,
            "mensuralProportionTempusPerfectum"
        ],
        [
            2.972,
            1.06,
            0.0,
            -1.064,
            "mensuralProportionProportioDupla1"
        ],
        [
            2.16,
            1.08,
            0.0,
            -1.076,
            "mensuralProportionProportioDupla2"
        ],
        [
            2.16,
            1.08,
            0.0,
            -1.076,
            "mensuralProportionProportioTripla"
        ],
        [
            2.156,
            1.076,
            0.0,
            -1.08,
            "mensuralProportionProportioQuadrupla"
        ],
        [
            0.5,
            0.248,
            0.0,
            -0.252,
            "mensuralProlationCombiningDot"
        ],
        [
            1.064,
            0.208,
            0.0,
            -0.208,
            "mensuralProlationCombiningTwoDots"
        ],
        [
            1.448,
            0.196,
            0.0,
            -0.196,
            "mensuralProlationCombiningThreeDots"
        ],
        [
            1.064,
            0.504,
            0.0,
            -0.5,
            "mensuralProlationCombiningThreeDotsTri"
        ],
        [
            1.296,
            0.648,
            0.0,
            -0.648,
            "mensuralProlationCombiningDotVoid"
        ],
        [
            0.192,
            1.488,
            0.0,
            -1.484,
            "mensuralProlationCombiningStroke"
        ],
        [
            0.996,
            1.012,
            0.0,
            -1.0,
            "mensuralProportion1"
        ],
        [
            1.324,
            1.012,
            0.0,
            -1.0,
            "mensuralProportion2"
        ],
        [
            1.176,
            1.012,
            0.0,
            -1.0,
            "mensuralProportion3"
        ],
        [
            1.516,
            1.0,
            0.0,
            -1.0,
            "mensuralProportion4"
        ],
        [
            0.888,
            1.484,
            0.0,
            -1.488,
            "mensuralProportionMinor"
        ],
        [
            0.888,
            1.484,
            0.0,
            -1.488,
            "mensuralProportionMajor"
        ],
        [
            4.192,
            1.344,
            0.0,
            -1.344,
            "mensuralModusPerfectumVert"
        ],
        [
            4.192,
            1.344,
            0.0,
            -1.344,
            "mensuralModusImperfectumVert"
        ],
        [
            4.192,
            1.344,
            0.0,
            -1.344,
            "mensuralTempusPerfectumHoriz"
        ],
        [
            4.192,
            1.344,
            0.0,
            -1.344,
            "mensuralTempusImperfectumHoriz"
        ],
        [
            3.128,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadMaximaBlack"
        ],
        [
            3.128,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadMaximaVoid"
        ],
        [
            3.132,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadMaximaBlackVoid"
        ],
        [
            2.5,
            0.684,
            0.0,
            -0.688,
            "mensuralNoteheadMaximaWhite"
        ],
        [
            1.328,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadLongaBlack"
        ],
        [
            1.328,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadLongaVoid"
        ],
        [
            1.328,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadLongaBlackVoid"
        ],
        [
            1.3,
            0.688,
            0.0,
            -0.684,
            "mensuralNoteheadLongaWhite"
        ],
        [
            1.128,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadSemibrevisBlack"
        ],
        [
            1.132,
            0.564,
            0.004,
            -0.564,
            "mensuralNoteheadSemibrevisVoid"
        ],
        [
            1.128,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadSemibrevisBlackVoid"
        ],
        [
            1.128,
            0.564,
            0.0,
            -0.564,
            "mensuralNoteheadSemibrevisBlackVoidTurned"
        ],
        [
            1.28,
            0.74,
            0.0,
            -0.736,
            "mensuralNoteheadMinimaWhite"
        ],
        [
            1.28,
            0.74,
            0.0,
            -0.736,
            "mensuralNoteheadSemiminimaWhite"
        ],
        [
            0.128,
            3.128,
            0.0,
            0.0,
            "mensuralCombStemUp"
        ],
        [
            0.128,
            0.0,
            0.0,
            -3.128,
            "mensuralCombStemDown"
        ],
        [
            0.768,
            0.768,
            -0.776,
            -0.772,
            "mensuralCombStemDiagonal"
        ],
        [
            0.88,
            3.128,
            0.0,
            0.0,
            "mensuralCombStemUpFlagRight"
        ],
        [
            0.88,
            0.0,
            0.0,
            -3.128,
            "mensuralCombStemDownFlagRight"
        ],
        [
            0.128,
            3.128,
            -0.752,
            0.0,
            "mensuralCombStemUpFlagLeft"
        ],
        [
            0.128,
            0.0,
            -0.752,
            -3.128,
            "mensuralCombStemDownFlagLeft"
        ],
        [
            0.924,
            3.128,
            0.0,
            0.0,
            "mensuralCombStemUpFlagFlared"
        ],
        [
            0.924,
            0.0,
            0.0,
            -3.128,
            "mensuralCombStemDownFlagFlared"
        ],
        [
            0.876,
            3.128,
            -0.496,
            0.0,
            "mensuralCombStemUpFlagExtended"
        ],
        [
            0.876,
            0.0,
            -0.496,
            -3.128,
            "mensuralCombStemDownFlagExtended"
        ],
        [
            0.876,
            3.128,
            0.0,
            0.0,
            "mensuralCombStemUpFlagSemiminima"
        ],
        [
            0.876,
            0.0,
            0.0,
            -3.128,
            "mensuralCombStemDownFlagSemiminima"
        ],
        [
            0.876,
            3.128,
            0.0,
            0.0,
            "mensuralCombStemUpFlagFusa"
        ],
        [
            0.876,
            0.0,
            0.0,
            -3.128,
            "mensuralCombStemDownFlagFusa"
        ],
        [
            3.128,
            0.564,
            0.0,
            -2.564,
            "mensuralBlackMaxima"
        ],
        [
            1.328,
            0.564,
            0.0,
            -2.564,
            "mensuralBlackLonga"
        ],
        [
            1.328,
            0.564,
            0.0,
            -0.564,
            "mensuralBlackBrevis"
        ],
        [
            1.128,
            0.564,
            0.0,
            -0.564,
            "mensuralBlackSemibrevis"
        ],
        [
            1.128,
            2.596,
            0.0,
            -0.564,
            "mensuralBlackMinima"
        ],
        [
            1.38,
            2.596,
            0.0,
            -0.564,
            "mensuralBlackSemiminima"
        ],
        [
            1.328,
            0.564,
            0.0,
            -0.564,
            "mensuralBlackBrevisVoid"
        ],
        [
            1.132,
            0.564,
            0.004,
            -0.564,
            "mensuralBlackSemibrevisVoid"
        ],
        [
            1.128,
            2.648,
            0.0,
            -0.564,
            "mensuralBlackMinimaVoid"
        ],
        [
            1.128,
            0.564,
            0.0,
            -2.596,
            "mensuralBlackSemibrevisCaudata"
        ],
        [
            1.128,
            2.592,
            0.0,
            -2.596,
            "mensuralBlackDragma"
        ],
        [
            2.044,
            0.564,
            0.0,
            -0.98,
            "mensuralBlackSemibrevisOblique"
        ],
        [
            2.5,
            0.684,
            0.0,
            -3.548,
            "mensuralWhiteMaxima"
        ],
        [
            1.3,
            0.684,
            0.0,
            -3.548,
            "mensuralWhiteLonga"
        ],
        [
            1.3,
            0.688,
            0.0,
            -0.684,
            "mensuralWhiteBrevis"
        ],
        [
            1.28,
            3.544,
            0.0,
            -0.736,
            "mensuralWhiteMinima"
        ],
        [
            1.28,
            3.544,
            0.0,
            -0.736,
            "mensuralWhiteSemiminima"
        ],
        [
            1.392,
            3.544,
            0.0,
            -0.744,
            "mensuralWhiteFusa"
        ],
        [
            3.128,
            1.056,
            0.0,
            -0.568,
            "mensuralObliqueAsc2ndBlack"
        ],
        [
            3.128,
            1.064,
            0.0,
            -0.568,
            "mensuralObliqueAsc2ndVoid"
        ],
        [
            3.132,
            1.056,
            0.0,
            -0.568,
            "mensuralObliqueAsc2ndBlackVoid"
        ],
        [
            3.124,
            1.16,
            0.0,
            -0.688,
            "mensuralObliqueAsc2ndWhite"
        ],
        [
            3.128,
            1.524,
            0.0,
            -0.568,
            "mensuralObliqueAsc3rdBlack"
        ],
        [
            3.128,
            1.54,
            0.0,
            -0.568,
            "mensuralObliqueAsc3rdVoid"
        ],
        [
            3.132,
            1.532,
            0.0,
            -0.568,
            "mensuralObliqueAsc3rdBlackVoid"
        ],
        [
            3.124,
            1.712,
            0.0,
            -0.688,
            "mensuralObliqueAsc3rdWhite"
        ],
        [
            3.128,
            2.172,
            0.0,
            -0.568,
            "mensuralObliqueAsc4thBlack"
        ],
        [
            3.128,
            2.1,
            0.0,
            -0.568,
            "mensuralObliqueAsc4thVoid"
        ],
        [
            3.132,
            2.052,
            0.0,
            -0.568,
            "mensuralObliqueAsc4thBlackVoid"
        ],
        [
            3.124,
            2.28,
            0.0,
            -0.688,
            "mensuralObliqueAsc4thWhite"
        ],
        [
            3.128,
            2.552,
            0.0,
            -0.568,
            "mensuralObliqueAsc5thBlack"
        ],
        [
            3.128,
            2.592,
            0.0,
            -0.568,
            "mensuralObliqueAsc5thVoid"
        ],
        [
            3.132,
            2.56,
            0.0,
            -0.568,
            "mensuralObliqueAsc5thBlackVoid"
        ],
        [
            3.124,
            2.76,
            0.0,
            -0.688,
            "mensuralObliqueAsc5thWhite"
        ],
        [
            3.128,
            0.528,
            0.0,
            -1.096,
            "mensuralObliqueDesc2ndBlack"
        ],
        [
            3.128,
            0.528,
            0.0,
            -1.104,
            "mensuralObliqueDesc2ndVoid"
        ],
        [
            3.132,
            0.528,
            0.0,
            -1.096,
            "mensuralObliqueDesc2ndBlackVoid"
        ],
        [
            3.124,
            0.688,
            0.0,
            -1.16,
            "mensuralObliqueDesc2ndWhite"
        ],
        [
            3.128,
            0.528,
            0.0,
            -1.564,
            "mensuralObliqueDesc3rdBlack"
        ],
        [
            3.128,
            0.528,
            0.0,
            -1.58,
            "mensuralObliqueDesc3rdVoid"
        ],
        [
            3.132,
            0.528,
            0.0,
            -1.572,
            "mensuralObliqueDesc3rdBlackVoid"
        ],
        [
            3.124,
            0.688,
            0.0,
            -1.712,
            "mensuralObliqueDesc3rdWhite"
        ],
        [
            3.128,
            0.528,
            0.0,
            -2.212,
            "mensuralObliqueDesc4thBlack"
        ],
        [
            3.128,
            0.528,
            0.0,
            -2.14,
            "mensuralObliqueDesc4thVoid"
        ],
        [
            3.132,
            0.528,
            0.0,
            -2.092,
            "mensuralObliqueDesc4thBlackVoid"
        ],
        [
            3.124,
            0.688,
            0.0,
            -2.28,
            "mensuralObliqueDesc4thWhite"
        ],
        [
            3.128,
            0.528,
            0.0,
            -2.592,
            "mensuralObliqueDesc5thBlack"
        ],
        [
            3.128,
            0.528,
            0.0,
            -2.632,
            "mensuralObliqueDesc5thVoid"
        ],
        [
            3.132,
            0.528,
            0.0,
            -2.6,
            "mensuralObliqueDesc5thBlackVoid"
        ],
        [
            3.124,
            0.688,
            0.0,
            -2.76,
            "mensuralObliqueDesc5thWhite"
        ],
        [
            0.64,
            0.408,
            0.0,
            -0.404,
            "chantPunctum"
        ],
        [
            0.6,
            0.452,
            0.0,
            -0.452,
            "chantPunctumInclinatum"
        ],
        [
            0.648,
            0.376,
            0.0,
            -0.456,
            "chantPunctumInclinatumAuctum"
        ],
        [
            0.36,
            0.272,
            0.0,
            -0.272,
            "chantPunctumInclinatumDeminutum"
        ],
        [
            0.616,
            0.468,
            0.0,
            -0.468,
            "chantAuctumAsc"
        ],
        [
            0.616,
            0.464,
            0.0,
            -0.464,
            "chantAuctumDesc"
        ],
        [
            0.64,
            0.408,
            0.0,
            -1.604,
            "chantPunctumVirga"
        ],
        [
            0.64,
            0.408,
            0.0,
            -1.604,
            "chantPunctumVirgaReversed"
        ],
        [
            0.64,
            0.388,
            0.0,
            -0.392,
            "chantPunctumCavum"
        ],
        [
            1.064,
            0.456,
            0.0,
            -0.456,
            "chantPunctumLinea"
        ],
        [
            1.064,
            0.456,
            0.0,
            -0.456,
            "chantPunctumLineaCavum"
        ],
        [
            0.616,
            0.46,
            0.0,
            -0.46,
            "chantQuilisma"
        ],
        [
            0.616,
            0.456,
            0.0,
            -0.46,
            "chantOriscusAscending"
        ],
        [
            0.616,
            0.456,
            0.0,
            -0.46,
            "chantOriscusDescending"
        ],
        [
            0.612,
            0.456,
            0.0,
            -0.984,
            "chantOriscusLiquescens"
        ],
        [
            0.496,
            0.372,
            0.0,
            -0.368,
            "chantStrophicus"
        ],
        [
            0.608,
            0.376,
            0.0,
            -0.468,
            "chantStrophicusAuctus"
        ],
        [
            0.616,
            0.656,
            0.0,
            0.0,
            "chantPodatusLower"
        ],
        [
            0.056,
            0.78,
            -0.508,
            -0.012,
            "chantPodatusUpper"
        ],
        [
            0.056,
            0.268,
            -0.248,
            -0.484,
            "chantDeminutumUpper"
        ],
        [
            0.056,
            0.5,
            -0.248,
            -0.256,
            "chantDeminutumLower"
        ],
        [
            0.056,
            0.6,
            0.0,
            -0.6,
            "chantEntryLineAsc2nd"
        ],
        [
            0.056,
            1.2,
            0.0,
            -0.6,
            "chantEntryLineAsc3rd"
        ],
        [
            0.056,
            1.8,
            0.0,
            -0.6,
            "chantEntryLineAsc4th"
        ],
        [
            0.056,
            2.4,
            0.0,
            -0.6,
            "chantEntryLineAsc5th"
        ],
        [
            0.056,
            3.0,
            0.0,
            -0.6,
            "chantEntryLineAsc6th"
        ],
        [
            1.86,
            0.416,
            0.0,
            -0.912,
            "chantLigaturaDesc2nd"
        ],
        [
            2.316,
            0.416,
            0.0,
            -1.6,
            "chantLigaturaDesc3rd"
        ],
        [
            2.316,
            0.416,
            0.0,
            -2.212,
            "chantLigaturaDesc4th"
        ],
        [
            2.316,
            0.416,
            0.0,
            -2.812,
            "chantLigaturaDesc5th"
        ],
        [
            0.056,
            0.6,
            0.0,
            -0.6,
            "chantConnectingLineAsc2nd"
        ],
        [
            0.056,
            1.2,
            0.0,
            -0.6,
            "chantConnectingLineAsc3rd"
        ],
        [
            0.056,
            1.8,
            0.0,
            -0.6,
            "chantConnectingLineAsc4th"
        ],
        [
            0.056,
            2.4,
            0.0,
            -0.6,
            "chantConnectingLineAsc5th"
        ],
        [
            0.056,
            3.0,
            0.0,
            -0.6,
            "chantConnectingLineAsc6th"
        ],
        [
            0.644,
            0.84,
            0.0,
            -0.148,
            "chantStrophicusLiquescens2nd"
        ],
        [
            0.652,
            1.332,
            0.0,
            -0.156,
            "chantStrophicusLiquescens3rd"
        ],
        [
            0.676,
            1.772,
            0.0,
            -0.148,
            "chantStrophicusLiquescens4th"
        ],
        [
            0.712,
            2.34,
            0.004,
            -0.16,
            "chantStrophicusLiquescens5th"
        ],
        [
            0.128,
            0.536,
            0.0,
            0.112,
            "chantIctusAbove"
        ],
        [
            0.128,
            -0.112,
            0.0,
            -0.536,
            "chantIctusBelow"
        ],
        [
            0.376,
            0.688,
            0.0,
            0.312,
            "chantCirculusAbove"
        ],
        [
            0.376,
            -0.308,
            0.0,
            -0.684,
            "chantCirculusBelow"
        ],
        [
            0.376,
            0.48,
            0.0,
            0.292,
            "chantSemicirculusAbove"
        ],
        [
            0.376,
            -0.288,
            0.0,
            -0.476,
            "chantSemicirculusBelow"
        ],
        [
            0.296,
            0.812,
            0.0,
            0.388,
            "chantAccentusAbove"
        ],
        [
            0.296,
            -0.388,
            0.0,
            -0.812,
            "chantAccentusBelow"
        ],
        [
            0.68,
            0.58,
            -0.024,
            0.5,
            "chantEpisema"
        ],
        [
            0.264,
            0.456,
            0.0,
            0.2,
            "chantAugmentum"
        ],
        [
            0.82,
            1.652,
            0.0,
            -0.604,
            "medRenFlatSoftB"
        ],
        [
            0.744,
            1.68,
            0.0,
            -0.564,
            "medRenFlatHardB"
        ],
        [
            0.408,
            1.012,
            0.0,
            -1.016,
            "medRenNatural"
        ],
        [
            1.72,
            0.568,
            0.0,
            -0.568,
            "medRenSharpCroix"
        ],
        [
            0.904,
            1.716,
            0.0,
            -0.74,
            "medRenFlatWithDot"
        ],
        [
            0.672,
            1.352,
            0.0,
            -1.352,
            "medRenNaturalWithCross"
        ],
        [
            0.588,
            2.0,
            0.0,
            -2.0,
            "mensuralRestMaxima"
        ],
        [
            0.192,
            2.0,
            0.0,
            -2.0,
            "mensuralRestLongaPerfecta"
        ],
        [
            0.192,
            1.0,
            0.0,
            -1.0,
            "mensuralRestLongaImperfecta"
        ],
        [
            0.192,
            1.0,
            0.0,
            0.0,
            "mensuralRestBrevis"
        ],
        [
            0.192,
            1.0,
            0.0,
            0.5,
            "mensuralRestSemibrevis"
        ],
        [
            0.192,
            0.5,
            0.0,
            0.0,
            "mensuralRestMinima"
        ],
        [
            0.556,
            0.66,
            0.0,
            0.0,
            "mensuralRestSemiminima"
        ],
        [
            0.556,
            0.66,
            0.0,
            0.0,
            "mensuralRestFusa"
        ],
        [
            0.552,
            0.66,
            0.0,
            0.0,
            "mensuralRestSemifusa"
        ],
        [
            1.14,
            1.884,
            0.0,
            0.0,
            "mensuralSignumUp"
        ],
        [
            1.14,
            1.884,
            0.0,
            0.0,
            "mensuralSignumDown"
        ],
        [
            2.456,
            1.644,
            0.004,
            0.0,
            "mensuralCustosUp"
        ],
        [
            2.456,
            0.988,
            0.004,
            -0.656,
            "mensuralCustosDown"
        ],
        [
            0.24,
            2.26,
            0.0,
            -0.404,
            "chantCustosStemUpPosLowest"
        ],
        [
            0.24,
            1.76,
            0.0,
            -0.404,
            "chantCustosStemUpPosLow"
        ],
        [
            0.24,
            1.26,
            0.0,
            -0.404,
            "chantCustosStemUpPosMiddle"
        ],
        [
            0.24,
            0.404,
            0.0,
            -1.26,
            "chantCustosStemDownPosMiddle"
        ],
        [
            0.24,
            0.404,
            0.0,
            -1.76,
            "chantCustosStemDownPosHigh"
        ],
        [
            0.24,
            0.404,
            0.0,
            -2.26,
            "chantCustosStemDownPosHighest"
        ],
        [
            2.232,
            1.816,
            0.0,
            0.0,
            "mensuralCustosCheckmark"
        ],
        [
            1.868,
            0.932,
            0.0,
            0.0,
            "mensuralCustosTurn"
        ],
        [
            0.728,
            0.728,
            0.0,
            0.0,
            "mensuralColorationStartSquare"
        ],
        [
            0.728,
            0.728,
            0.0,
            0.0,
            "mensuralColorationEndSquare"
        ],
        [
            0.728,
            0.728,
            0.0,
            0.0,
            "mensuralColorationStartRound"
        ],
        [
            0.728,
            0.728,
            0.0,
            0.0,
            "mensuralColorationEndRound"
        ],
        [
            1.204,
            0.992,
            0.0,
            0.004,
            "mensuralAlterationSign"
        ],
        [
            1.664,
            1.196,
            0.008,
            0.0,
            "ornamentQuilisma"
        ],
        [
            2.0,
            0.744,
            0.004,
            0.016,
            "ornamentOriscus"
        ],
        [
            1.32,
            0.56,
            0.0,
            -0.576,
            "medRenLiquescenceCMN"
        ],
        [
            1.2,
            0.748,
            0.0,
            0.0,
            "medRenPlicaCMN"
        ],
        [
            1.504,
            2.084,
            0.0,
            0.0,
            "medRenGClefCMN"
        ],
        [
            1.096,
            0.508,
            0.0,
            -0.504,
            "medRenPunctumCMN"
        ],
        [
            1.1,
            1.272,
            0.0,
            -0.508,
            "medRenLiquescentAscCMN"
        ],
        [
            1.1,
            0.508,
            0.0,
            -1.272,
            "medRenLiquescentDescCMN"
        ],
        [
            1.612,
            0.488,
            0.0,
            -0.488,
            "medRenQuilismaCMN"
        ],
        [
            0.736,
            0.544,
            0.0,
            -0.544,
            "medRenStrophicusCMN"
        ],
        [
            1.276,
            0.528,
            0.0,
            -0.524,
            "medRenOriscusCMN"
        ],
        [
            2.616,
            3.02,
            0.0,
            0.0,
            "daseianGraves1"
        ],
        [
            2.412,
            2.292,
            0.0,
            0.0,
            "daseianGraves2"
        ],
        [
            2.66,
            1.432,
            0.0,
            0.0,
            "daseianGraves3"
        ],
        [
            2.436,
            2.408,
            0.0,
            0.004,
            "daseianGraves4"
        ],
        [
            2.616,
            3.02,
            0.0,
            0.0,
            "daseianFinales1"
        ],
        [
            2.412,
            2.292,
            0.0,
            0.0,
            "daseianFinales2"
        ],
        [
            1.26,
            1.432,
            0.0,
            0.0,
            "daseianFinales3"
        ],
        [
            2.436,
            2.408,
            0.0,
            0.004,
            "daseianFinales4"
        ],
        [
            2.616,
            3.02,
            0.0,
            0.0,
            "daseianSuperiores1"
        ],
        [
            2.412,
            2.292,
            0.0,
            0.0,
            "daseianSuperiores2"
        ],
        [
            1.072,
            2.144,
            0.0,
            0.0,
            "daseianSuperiores3"
        ],
        [
            2.436,
            2.408,
            0.0,
            0.004,
            "daseianSuperiores4"
        ],
        [
            2.616,
            3.02,
            0.0,
            0.0,
            "daseianExcellentes1"
        ],
        [
            2.412,
            2.292,
            0.0,
            0.0,
            "daseianExcellentes2"
        ],
        [
            2.272,
            1.432,
            0.0,
            0.0,
            "daseianExcellentes3"
        ],
        [
            2.436,
            2.408,
            0.0,
            0.004,
            "daseianExcellentes4"
        ],
        [
            3.02,
            2.616,
            0.0,
            0.0,
            "daseianResidua1"
        ],
        [
            2.292,
            2.412,
            0.0,
            0.0,
            "daseianResidua2"
        ],
        [
            0.856,
            1.004,
            -0.004,
            -0.004,
            "figbass0"
        ],
        [
            0.468,
            1.016,
            0.0,
            0.0,
            "figbass1"
        ],
        [
            0.808,
            1.012,
            0.0,
            -0.012,
            "figbass2"
        ],
        [
            0.816,
            1.024,
            0.004,
            -0.192,
            "figbass2Raised"
        ],
        [
            0.74,
            1.008,
            0.0,
            0.0,
            "figbass3"
        ],
        [
            0.788,
            1.012,
            0.004,
            0.004,
            "figbass4"
        ],
        [
            0.944,
            1.004,
            0.0,
            0.0,
            "figbass4Raised"
        ],
        [
            0.744,
            1.032,
            0.004,
            0.0,
            "figbass5"
        ],
        [
            0.756,
            1.224,
            0.004,
            0.004,
            "figbass5Raised1"
        ],
        [
            0.756,
            1.22,
            0.004,
            0.0,
            "figbass5Raised2"
        ],
        [
            1.0,
            1.036,
            0.0,
            0.0,
            "figbass5Raised3"
        ],
        [
            0.788,
            1.004,
            0.004,
            0.004,
            "figbass6"
        ],
        [
            0.928,
            0.996,
            -0.144,
            0.0,
            "figbass6Raised"
        ],
        [
            0.788,
            0.98,
            0.0,
            0.0,
            "figbass7"
        ],
        [
            0.788,
            1.16,
            0.0,
            -0.004,
            "figbass7Raised"
        ],
        [
            0.768,
            1.004,
            0.0,
            0.0,
            "figbass8"
        ],
        [
            0.784,
            1.0,
            0.0,
            0.0,
            "figbass9"
        ],
        [
            0.944,
            1.0,
            -0.128,
            0.0,
            "figbass9Raised"
        ],
        [
            1.284,
            1.9,
            0.004,
            -0.008,
            "figbassDoubleFlat"
        ],
        [
            0.7,
            1.868,
            0.004,
            -0.012,
            "figbassFlat"
        ],
        [
            0.48,
            1.472,
            0.004,
            -0.44,
            "figbassNatural"
        ],
        [
            0.768,
            1.568,
            0.0,
            -0.584,
            "figbassSharp"
        ],
        [
            1.012,
            1.016,
            0.0,
            -0.02,
            "figbassDoubleSharp"
        ],
        [
            0.316,
            1.076,
            0.0,
            -0.08,
            "figbassBracketLeft"
        ],
        [
            0.272,
            1.076,
            -0.044,
            -0.08,
            "figbassBracketRight"
        ],
        [
            0.392,
            1.096,
            0.004,
            -0.084,
            "figbassParensLeft"
        ],
        [
            0.352,
            1.088,
            -0.036,
            -0.096,
            "figbassParensRight"
        ],
        [
            0.536,
            0.776,
            0.0,
            0.24,
            "figbassPlus"
        ],
        [
            1.648,
            0.78,
            0.0,
            0.148,
            "figbassCombiningRaising"
        ],
        [
            1.648,
            0.78,
            0.0,
            0.148,
            "figbassCombiningLowering"
        ],
        [
            1.868,
            2.836,
            0.012,
            -0.06,
            "functionZero"
        ],
        [
            0.988,
            2.836,
            0.008,
            0.0,
            "functionOne"
        ],
        [
            1.844,
            2.836,
            -0.064,
            0.0,
            "functionTwo"
        ],
        [
            1.9,
            2.836,
            0.004,
            -0.06,
            "functionThree"
        ],
        [
            1.968,
            2.836,
            0.0,
            0.0,
            "functionFour"
        ],
        [
            1.912,
            2.776,
            0.0,
            -0.06,
            "functionFive"
        ],
        [
            1.892,
            2.836,
            0.012,
            -0.06,
            "functionSix"
        ],
        [
            1.9,
            2.776,
            0.004,
            0.0,
            "functionSeven"
        ],
        [
            1.908,
            2.836,
            0.004,
            -0.06,
            "functionEight"
        ],
        [
            1.88,
            2.836,
            -0.004,
            -0.06,
            "functionNine"
        ],
        [
            1.992,
            2.276,
            0.004,
            -0.276,
            "functionLessThan"
        ],
        [
            0.952,
            1.248,
            0.0,
            0.96,
            "functionMinus"
        ],
        [
            1.996,
            2.276,
            0.004,
            -0.276,
            "functionGreaterThan"
        ],
        [
            3.088,
            3.06,
            0.0,
            -1.096,
            "functionSSUpper"
        ],
        [
            2.312,
            2.216,
            0.0,
            -0.892,
            "functionSSLower"
        ],
        [
            2.312,
            2.916,
            0.0,
            0.0,
            "functionDUpper"
        ],
        [
            1.888,
            2.916,
            0.012,
            -0.06,
            "functionDLower"
        ],
        [
            3.168,
            2.916,
            0.0,
            -1.024,
            "functionDD"
        ],
        [
            3.168,
            3.2,
            -0.208,
            -1.024,
            "functionSlashedDD"
        ],
        [
            2.668,
            2.988,
            0.008,
            -0.072,
            "functionGUpper"
        ],
        [
            1.836,
            2.156,
            -0.004,
            -0.872,
            "functionGLower"
        ],
        [
            2.288,
            2.916,
            0.008,
            0.0,
            "functionNUpper"
        ],
        [
            1.668,
            2.156,
            0.0,
            0.0,
            "functionNLower"
        ],
        [
            2.108,
            2.916,
            0.004,
            0.0,
            "functionPUpper"
        ],
        [
            1.876,
            2.156,
            0.004,
            -0.872,
            "functionPLower"
        ],
        [
            2.288,
            2.988,
            -0.004,
            -0.072,
            "functionSUpper"
        ],
        [
            1.708,
            2.156,
            0.008,
            -0.06,
            "functionSLower"
        ],
        [
            2.292,
            2.916,
            0.004,
            0.0,
            "functionTUpper"
        ],
        [
            0.964,
            2.672,
            0.004,
            -0.028,
            "functionTLower"
        ],
        [
            2.464,
            2.916,
            0.004,
            0.0,
            "functionVUpper"
        ],
        [
            1.904,
            2.096,
            0.0,
            0.0,
            "functionVLower"
        ],
        [
            0.752,
            2.916,
            0.008,
            -0.848,
            "functionBracketLeft"
        ],
        [
            0.756,
            2.916,
            0.012,
            -0.848,
            "functionBracketRight"
        ],
        [
            0.876,
            2.916,
            0.004,
            -0.848,
            "functionParensLeft"
        ],
        [
            0.884,
            2.916,
            0.012,
            -0.848,
            "functionParensRight"
        ],
        [
            1.76,
            3.12,
            0.0,
            -1.084,
            "functionAngleLeft"
        ],
        [
            1.76,
            3.12,
            0.0,
            -1.084,
            "functionAngleRight"
        ],
        [
            1.704,
            0.464,
            0.0,
            0.0,
            "functionRepetition1"
        ],
        [
            2.0,
            3.132,
            -0.004,
            0.0,
            "functionRepetition2"
        ],
        [
            1.376,
            3.012,
            0.0,
            1.636,
            "functionRing"
        ],
        [
            1.38,
            3.004,
            0.0,
            1.628,
            "functionPlus"
        ],
        [
            0.652,
            1.188,
            -0.136,
            0.724,
            "wiggleTrillFastest"
        ],
        [
            0.656,
            1.188,
            -0.172,
            0.724,
            "wiggleTrillFasterStill"
        ],
        [
            0.784,
            1.188,
            -0.168,
            0.72,
            "wiggleTrillFaster"
        ],
        [
            0.924,
            1.176,
            -0.14,
            0.732,
            "wiggleTrillFast"
        ],
        [
            1.08,
            1.176,
            -0.144,
            0.732,
            "wiggleTrill"
        ],
        [
            1.24,
            1.176,
            -0.172,
            0.732,
            "wiggleTrillSlow"
        ],
        [
            1.48,
            1.176,
            -0.16,
            0.712,
            "wiggleTrillSlower"
        ],
        [
            1.692,
            1.176,
            -0.228,
            0.692,
            "wiggleTrillSlowerStill"
        ],
        [
            2.104,
            1.176,
            -0.144,
            0.692,
            "wiggleTrillSlowest"
        ],
        [
            1.168,
            0.476,
            -0.132,
            0.0,
            "wiggleArpeggiatoUp"
        ],
        [
            1.168,
            0.476,
            -0.132,
            0.0,
            "wiggleArpeggiatoDown"
        ],
        [
            2.108,
            0.56,
            -0.2,
            0.0,
            "wiggleArpeggiatoUpSwash"
        ],
        [
            1.784,
            0.48,
            -0.172,
            -0.1,
            "wiggleArpeggiatoDownSwash"
        ],
        [
            2.064,
            0.62,
            -0.188,
            -0.32,
            "wiggleArpeggiatoUpArrow"
        ],
        [
            2.064,
            0.68,
            -0.188,
            -0.26,
            "wiggleArpeggiatoDownArrow"
        ],
        [
            1.14,
            1.176,
            -0.084,
            0.732,
            "wiggleGlissando"
        ],
        [
            0.668,
            0.476,
            -0.056,
            0.0,
            "wiggleVibrato"
        ],
        [
            0.908,
            0.896,
            -0.096,
            0.0,
            "wiggleVibratoWide"
        ],
        [
            0.668,
            0.476,
            -0.056,
            0.0,
            "guitarVibratoStroke"
        ],
        [
            0.908,
            0.896,
            -0.096,
            0.0,
            "guitarWideVibratoStroke"
        ],
        [
            2.064,
            1.064,
            -0.064,
            -1.064,
            "wiggleWavyNarrow"
        ],
        [
            3.064,
            1.064,
            -0.064,
            -1.064,
            "wiggleWavy"
        ],
        [
            4.064,
            1.064,
            -0.064,
            -1.064,
            "wiggleWavyWide"
        ],
        [
            2.064,
            0.564,
            -0.064,
            -0.564,
            "wiggleSquareWaveNarrow"
        ],
        [
            3.064,
            0.564,
            -0.064,
            -0.564,
            "wiggleSquareWave"
        ],
        [
            4.064,
            0.564,
            -0.064,
            -0.564,
            "wiggleSquareWaveWide"
        ],
        [
            2.06,
            1.064,
            -0.072,
            -1.064,
            "wiggleSawtoothNarrow"
        ],
        [
            3.06,
            1.06,
            -0.068,
            -1.068,
            "wiggleSawtooth"
        ],
        [
            4.06,
            1.064,
            -0.068,
            -1.064,
            "wiggleSawtoothWide"
        ],
        [
            1.3,
            2.444,
            -0.064,
            0.0,
            "wiggleGlissandoGroup1"
        ],
        [
            0.572,
            3.22,
            -0.076,
            0.0,
            "wiggleGlissandoGroup2"
        ],
        [
            0.576,
            4.232,
            -0.076,
            0.0,
            "wiggleGlissandoGroup3"
        ],
        [
            1.088,
            0.048,
            -0.012,
            -1.18,
            "wiggleCircularConstant"
        ],
        [
            1.088,
            1.18,
            -0.012,
            -0.048,
            "wiggleCircularConstantFlipped"
        ],
        [
            2.196,
            0.048,
            -0.012,
            -2.312,
            "wiggleCircularConstantLarge"
        ],
        [
            2.196,
            2.312,
            -0.012,
            -0.048,
            "wiggleCircularConstantFlippedLarge"
        ],
        [
            1.872,
            2.112,
            0.0,
            0.516,
            "wiggleCircularStart"
        ],
        [
            4.464,
            2.192,
            0.0,
            0.0,
            "wiggleCircularLargest"
        ],
        [
            2.956,
            1.924,
            -0.456,
            0.068,
            "wiggleCircularLargerStill"
        ],
        [
            2.3,
            1.764,
            -0.412,
            0.096,
            "wiggleCircularLarger"
        ],
        [
            1.688,
            1.756,
            -0.38,
            0.296,
            "wiggleCircularLarge"
        ],
        [
            1.792,
            1.688,
            -0.212,
            0.34,
            "wiggleCircular"
        ],
        [
            1.2,
            1.704,
            -0.396,
            0.384,
            "wiggleCircularSmall"
        ],
        [
            0.572,
            1.576,
            -0.468,
            1.136,
            "wiggleCircularEnd"
        ],
        [
            1.96,
            1.268,
            0.0,
            0.004,
            "wiggleVibratoStart"
        ],
        [
            0.556,
            0.368,
            -0.064,
            0.0,
            "wiggleVibratoSmallestFastest"
        ],
        [
            0.612,
            0.368,
            -0.084,
            0.0,
            "wiggleVibratoSmallestFasterStill"
        ],
        [
            0.664,
            0.368,
            -0.124,
            0.0,
            "wiggleVibratoSmallestFaster"
        ],
        [
            0.792,
            0.368,
            -0.104,
            0.0,
            "wiggleVibratoSmallestFast"
        ],
        [
            0.924,
            0.368,
            -0.1,
            0.0,
            "wiggleVibratoSmallestSlow"
        ],
        [
            1.092,
            0.368,
            -0.1,
            0.0,
            "wiggleVibratoSmallestSlower"
        ],
        [
            1.252,
            0.368,
            -0.12,
            0.0,
            "wiggleVibratoSmallestSlowest"
        ],
        [
            0.624,
            0.556,
            -0.092,
            -0.056,
            "wiggleVibratoSmallFastest"
        ],
        [
            0.716,
            0.556,
            -0.1,
            -0.056,
            "wiggleVibratoSmallFasterStill"
        ],
        [
            0.812,
            0.556,
            -0.112,
            -0.056,
            "wiggleVibratoSmallFaster"
        ],
        [
            0.952,
            0.556,
            -0.104,
            -0.056,
            "wiggleVibratoSmallFast"
        ],
        [
            1.096,
            0.556,
            -0.128,
            -0.056,
            "wiggleVibratoSmallSlow"
        ],
        [
            1.288,
            0.556,
            -0.14,
            -0.056,
            "wiggleVibratoSmallSlower"
        ],
        [
            1.604,
            0.556,
            -0.064,
            -0.056,
            "wiggleVibratoSmallSlowest"
        ],
        [
            0.828,
            0.8,
            -0.088,
            -0.164,
            "wiggleVibratoMediumFastest"
        ],
        [
            0.932,
            0.8,
            -0.108,
            -0.164,
            "wiggleVibratoMediumFasterStill"
        ],
        [
            1.088,
            0.8,
            -0.116,
            -0.164,
            "wiggleVibratoMediumFaster"
        ],
        [
            1.292,
            0.8,
            -0.104,
            -0.164,
            "wiggleVibratoMediumFast"
        ],
        [
            1.492,
            0.8,
            -0.124,
            -0.164,
            "wiggleVibratoMediumSlow"
        ],
        [
            1.784,
            0.8,
            -0.124,
            -0.164,
            "wiggleVIbratoMediumSlower"
        ],
        [
            2.104,
            0.8,
            -0.136,
            -0.164,
            "wiggleVibratoMediumSlowest"
        ],
        [
            1.164,
            1.272,
            -0.108,
            -0.508,
            "wiggleVibratoLargeFastest"
        ],
        [
            1.372,
            1.272,
            -0.108,
            -0.508,
            "wiggleVibratoLargeFasterStill"
        ],
        [
            1.6,
            1.272,
            -0.124,
            -0.508,
            "wiggleVibratoLargeFaster"
        ],
        [
            1.872,
            1.272,
            -0.14,
            -0.508,
            "wiggleVibratoLargeFast"
        ],
        [
            2.256,
            1.272,
            -0.12,
            -0.508,
            "wiggleVibratoLargeSlow"
        ],
        [
            2.696,
            1.272,
            -0.128,
            -0.508,
            "wiggleVibratoLargeSlower"
        ],
        [
            3.196,
            1.272,
            -0.136,
            -0.508,
            "wiggleVibratoLargeSlowest"
        ],
        [
            1.668,
            2.096,
            -0.12,
            -1.232,
            "wiggleVibratoLargestFastest"
        ],
        [
            2.004,
            2.096,
            -0.084,
            -1.232,
            "wiggleVibratoLargestFasterStill"
        ],
        [
            2.348,
            2.096,
            -0.096,
            -1.232,
            "wiggleVibratoLargestFaster"
        ],
        [
            2.748,
            2.096,
            -0.128,
            -1.232,
            "wiggleVibratoLargestFast"
        ],
        [
            3.284,
            2.096,
            -0.12,
            -1.232,
            "wiggleVibratoLargestSlow"
        ],
        [
            3.944,
            2.096,
            -0.116,
            -1.232,
            "wiggleVIbratoLargestSlower"
        ],
        [
            4.672,
            2.096,
            -0.148,
            -1.232,
            "wiggleVibratoLargestSlowest"
        ],
        [
            7.988,
            1.46,
            -0.012,
            -0.832,
            "wiggleRandom1"
        ],
        [
            7.988,
            1.6,
            -0.012,
            -0.884,
            "wiggleRandom2"
        ],
        [
            7.988,
            1.632,
            -0.012,
            -1.128,
            "wiggleRandom3"
        ],
        [
            7.988,
            2.432,
            -0.012,
            -1.496,
            "wiggleRandom4"
        ],
        [
            4.864,
            3.064,
            0.0,
            0.0,
            "beamAccelRit1"
        ],
        [
            4.564,
            3.064,
            0.0,
            0.0,
            "beamAccelRit2"
        ],
        [
            4.264,
            3.064,
            0.0,
            0.0,
            "beamAccelRit3"
        ],
        [
            4.044,
            3.064,
            0.0,
            0.0,
            "beamAccelRit4"
        ],
        [
            3.744,
            3.064,
            0.0,
            0.0,
            "beamAccelRit5"
        ],
        [
            3.444,
            3.064,
            0.0,
            0.0,
            "beamAccelRit6"
        ],
        [
            3.144,
            3.064,
            0.0,
            0.0,
            "beamAccelRit7"
        ],
        [
            2.844,
            3.064,
            0.0,
            0.0,
            "beamAccelRit8"
        ],
        [
            2.544,
            3.064,
            0.0,
            0.0,
            "beamAccelRit9"
        ],
        [
            2.244,
            3.064,
            0.0,
            0.0,
            "beamAccelRit10"
        ],
        [
            1.944,
            3.064,
            0.0,
            0.0,
            "beamAccelRit11"
        ],
        [
            1.644,
            3.064,
            0.0,
            0.0,
            "beamAccelRit12"
        ],
        [
            1.344,
            3.064,
            0.0,
            0.0,
            "beamAccelRit13"
        ],
        [
            1.044,
            3.064,
            0.0,
            0.0,
            "beamAccelRit14"
        ],
        [
            0.744,
            3.064,
            0.0,
            0.0,
            "beamAccelRit15"
        ],
        [
            0.128,
            3.064,
            -0.136,
            0.0,
            "beamAccelRitFinal"
        ],
        [
            2.192,
            3.964,
            0.0,
            0.0,
            "elecMicrophone"
        ],
        [
            3.528,
            3.244,
            0.0,
            0.0,
            "elecHeadphones"
        ],
        [
            3.528,
            3.996,
            0.0,
            0.0,
            "elecHeadset"
        ],
        [
            4.0,
            4.0,
            0.0,
            0.0,
            "elecDisc"
        ],
        [
            4.004,
            1.792,
            0.0,
            0.0,
            "elecTape"
        ],
        [
            3.448,
            4.0,
            0.0,
            0.0,
            "elecMixingConsole"
        ],
        [
            1.776,
            4.004,
            0.0,
            0.0,
            "elecUSB"
        ],
        [
            3.788,
            2.144,
            0.004,
            0.0,
            "elecVideoCamera"
        ],
        [
            4.012,
            3.036,
            0.0,
            0.0,
            "elecMonitor"
        ],
        [
            3.996,
            1.984,
            0.0,
            0.0,
            "elecProjector"
        ],
        [
            2.64,
            4.144,
            0.0,
            0.0,
            "elecLoudspeaker"
        ],
        [
            4.0,
            3.636,
            0.0,
            0.0,
            "elecCamera"
        ],
        [
            1.872,
            2.144,
            0.0,
            0.0,
            "elecPlay"
        ],
        [
            2.136,
            2.144,
            0.0,
            0.0,
            "elecStop"
        ],
        [
            1.98,
            2.144,
            0.0,
            0.0,
            "elecPause"
        ],
        [
            3.6,
            2.144,
            0.0,
            0.0,
            "elecFastForward"
        ],
        [
            3.6,
            2.144,
            0.0,
            0.0,
            "elecRewind"
        ],
        [
            3.928,
            2.144,
            0.0,
            0.0,
            "elecSkipForwards"
        ],
        [
            3.928,
            2.144,
            0.0,
            0.0,
            "elecSkipBackwards"
        ],
        [
            3.0,
            2.188,
            0.0,
            0.0,
            "elecLoop"
        ],
        [
            2.644,
            3.024,
            0.0,
            0.0,
            "elecReplay"
        ],
        [
            4.572,
            2.42,
            0.0,
            -0.476,
            "elecShuffle"
        ],
        [
            4.388,
            4.144,
            0.0,
            0.0,
            "elecMute"
        ],
        [
            3.836,
            4.144,
            0.0,
            0.0,
            "elecUnmute"
        ],
        [
            2.192,
            5.4,
            0.0,
            0.0,
            "elecMicrophoneMute"
        ],
        [
            2.288,
            4.98,
            0.0,
            0.0,
            "elecMicrophoneUnmute"
        ],
        [
            2.792,
            3.0,
            0.0,
            0.0,
            "elecPowerOnOff"
        ],
        [
            2.148,
            2.568,
            0.004,
            0.0,
            "elecEject"
        ],
        [
            0.948,
            4.08,
            0.0,
            0.0,
            "elecVolumeFader"
        ],
        [
            0.844,
            1.112,
            0.1,
            -0.032,
            "elecVolumeFaderThumb"
        ],
        [
            0.944,
            4.08,
            0.0,
            -0.032,
            "elecVolumeLevel0"
        ],
        [
            0.944,
            4.08,
            0.0,
            0.0,
            "elecVolumeLevel20"
        ],
        [
            0.944,
            4.08,
            0.0,
            0.0,
            "elecVolumeLevel40"
        ],
        [
            0.944,
            4.112,
            0.0,
            0.032,
            "elecVolumeLevel60"
        ],
        [
            0.944,
            4.112,
            0.0,
            0.032,
            "elecVolumeLevel80"
        ],
        [
            0.944,
            4.144,
            0.0,
            0.032,
            "elecVolumeLevel100"
        ],
        [
            2.16,
            3.62,
            0.0,
            0.0,
            "elecMIDIIn"
        ],
        [
            2.16,
            3.62,
            0.0,
            0.0,
            "elecMIDIOut"
        ],
        [
            2.192,
            2.192,
            0.0,
            0.0,
            "elecMIDIController0"
        ],
        [
            2.192,
            2.192,
            0.0,
            0.0,
            "elecMIDIController20"
        ],
        [
            2.196,
            2.192,
            0.0,
            0.0,
            "elecMIDIController40"
        ],
        [
            2.196,
            2.192,
            0.0,
            0.0,
            "elecMIDIController60"
        ],
        [
            2.192,
            2.192,
            0.0,
            0.0,
            "elecMIDIController80"
        ],
        [
            2.192,
            2.192,
            0.0,
            0.0,
            "elecMIDIController100"
        ],
        [
            2.692,
            2.692,
            0.0,
            0.0,
            "elecAudioMono"
        ],
        [
            3.996,
            2.692,
            0.0,
            0.0,
            "elecAudioStereo"
        ],
        [
            3.712,
            4.012,
            0.268,
            0.304,
            "elecAudioChannelsOne"
        ],
        [
            4.004,
            4.012,
            0.0,
            0.304,
            "elecAudioChannelsTwo"
        ],
        [
            4.004,
            4.012,
            0.0,
            0.304,
            "elecAudioChannelsThreeFrontal"
        ],
        [
            4.004,
            4.012,
            0.0,
            0.0,
            "elecAudioChannelsThreeSurround"
        ],
        [
            4.004,
            4.012,
            0.0,
            0.0,
            "elecAudioChannelsFour"
        ],
        [
            4.004,
            4.012,
            0.0,
            0.0,
            "elecAudioChannelsFive"
        ],
        [
            4.004,
            4.0,
            0.0,
            -0.012,
            "elecAudioChannelsSix"
        ],
        [
            4.004,
            4.0,
            0.0,
            -0.012,
            "elecAudioChannelsSeven"
        ],
        [
            4.004,
            4.012,
            0.0,
            0.0,
            "elecAudioChannelsEight"
        ],
        [
            3.284,
            3.996,
            0.0,
            -1.016,
            "elecLineIn"
        ],
        [
            3.284,
            3.996,
            0.0,
            -1.404,
            "elecLineOut"
        ],
        [
            4.008,
            3.116,
            0.0,
            0.0,
            "elecAudioIn"
        ],
        [
            4.008,
            3.116,
            0.0,
            0.0,
            "elecAudioOut"
        ],
        [
            3.268,
            4.004,
            0.0,
            0.0,
            "elecVideoIn"
        ],
        [
            3.268,
            4.004,
            0.0,
            0.0,
            "elecVideoOut"
        ],
        [
            4.252,
            3.984,
            0.0,
            0.0,
            "elecDataIn"
        ],
        [
            4.252,
            3.984,
            0.0,
            0.0,
            "elecDataOut"
        ],
        [
            2.172,
            3.46,
            0.0,
            0.0,
            "elecDownload"
        ],
        [
            2.172,
            3.46,
            0.0,
            0.0,
            "elecUpload"
        ],
        [
            0.912,
            2.108,
            0.0,
            0.0,
            "arrowBlackUp"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowBlackUpRight"
        ],
        [
            2.108,
            1.452,
            0.0,
            0.54,
            "arrowBlackRight"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowBlackDownRight"
        ],
        [
            0.912,
            2.108,
            0.0,
            0.0,
            "arrowBlackDown"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowBlackDownLeft"
        ],
        [
            2.108,
            1.452,
            0.0,
            0.54,
            "arrowBlackLeft"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowBlackUpLeft"
        ],
        [
            0.912,
            2.108,
            0.0,
            0.0,
            "arrowWhiteUp"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowWhiteUpRight"
        ],
        [
            2.108,
            1.508,
            0.0,
            0.596,
            "arrowWhiteRight"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowWhiteDownRight"
        ],
        [
            0.912,
            2.108,
            0.0,
            0.0,
            "arrowWhiteDown"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowWhiteDownLeft"
        ],
        [
            2.108,
            1.508,
            0.0,
            0.596,
            "arrowWhiteLeft"
        ],
        [
            1.536,
            1.796,
            0.0,
            0.264,
            "arrowWhiteUpLeft"
        ],
        [
            0.836,
            2.112,
            0.0,
            0.0,
            "arrowOpenUp"
        ],
        [
            1.544,
            1.804,
            0.0,
            0.264,
            "arrowOpenUpRight"
        ],
        [
            2.112,
            1.412,
            0.0,
            0.576,
            "arrowOpenRight"
        ],
        [
            1.544,
            1.804,
            0.0,
            0.264,
            "arrowOpenDownRight"
        ],
        [
            0.836,
            2.112,
            0.0,
            0.0,
            "arrowOpenDown"
        ],
        [
            1.544,
            1.804,
            0.0,
            0.264,
            "arrowOpenDownLeft"
        ],
        [
            2.112,
            1.412,
            0.0,
            0.576,
            "arrowOpenLeft"
        ],
        [
            1.544,
            1.804,
            0.0,
            0.264,
            "arrowOpenUpLeft"
        ],
        [
            0.912,
            1.196,
            0.0,
            0.0,
            "arrowheadBlackUp"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadBlackUpRight"
        ],
        [
            1.196,
            0.912,
            0.0,
            0.0,
            "arrowheadBlackRight"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadBlackDownRight"
        ],
        [
            0.912,
            1.196,
            0.0,
            0.0,
            "arrowheadBlackDown"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadBlackDownLeft"
        ],
        [
            1.196,
            0.912,
            0.0,
            0.0,
            "arrowheadBlackLeft"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadBlackUpLeft"
        ],
        [
            0.912,
            1.196,
            0.0,
            0.0,
            "arrowheadWhiteUp"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadWhiteUpRight"
        ],
        [
            1.196,
            0.912,
            0.0,
            0.0,
            "arrowheadWhiteRight"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadWhiteDownRight"
        ],
        [
            0.912,
            1.196,
            0.0,
            0.0,
            "arrowheadWhiteDown"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadWhiteDownLeft"
        ],
        [
            1.196,
            0.912,
            0.0,
            0.0,
            "arrowheadWhiteLeft"
        ],
        [
            1.152,
            1.148,
            0.004,
            0.004,
            "arrowheadWhiteUpLeft"
        ],
        [
            0.836,
            1.116,
            0.0,
            0.0,
            "arrowheadOpenUp"
        ],
        [
            1.044,
            1.048,
            0.0,
            0.0,
            "arrowheadOpenUpRight"
        ],
        [
            1.116,
            0.836,
            0.0,
            0.0,
            "arrowheadOpenRight"
        ],
        [
            1.044,
            1.048,
            0.0,
            0.0,
            "arrowheadOpenDownRight"
        ],
        [
            0.836,
            1.116,
            0.0,
            0.0,
            "arrowheadOpenDown"
        ],
        [
            1.044,
            1.048,
            0.0,
            0.0,
            "arrowheadOpenDownLeft"
        ],
        [
            1.116,
            0.836,
            0.0,
            0.0,
            "arrowheadOpenLeft"
        ],
        [
            1.044,
            1.048,
            0.0,
            0.0,
            "arrowheadOpenUpLeft"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise1"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise2"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise3"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise4"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise5"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise6"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise7"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosRaise8"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower1"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower2"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower3"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower4"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower5"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower6"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower7"
        ],
        [
            -131.068,
            -131.068,
            131.068,
            131.068,
            "staffPosLower8"
        ],
        [
            2.0,
            7.564,
            0.0,
            -0.064,
            "luteStaff6Lines"
        ],
        [
            3.0,
            7.564,
            0.0,
            -0.064,
            "luteStaff6LinesWide"
        ],
        [
            1.0,
            7.564,
            0.0,
            -0.064,
            "luteStaff6LinesNarrow"
        ],
        [
            1.5,
            7.5,
            0.0,
            0.0,
            "luteBarlineStartRepeat"
        ],
        [
            1.5,
            7.5,
            0.0,
            0.0,
            "luteBarlineEndRepeat"
        ],
        [
            0.912,
            7.5,
            0.0,
            0.0,
            "luteBarlineFinal"
        ],
        [
            0.592,
            3.144,
            0.0,
            0.0,
            "luteDurationDoubleWhole"
        ],
        [
            0.144,
            3.16,
            0.0,
            0.0,
            "luteDurationWhole"
        ],
        [
            0.912,
            3.144,
            0.0,
            0.0,
            "luteDurationHalf"
        ],
        [
            0.912,
            3.144,
            0.0,
            0.0,
            "luteDurationQuarter"
        ],
        [
            0.912,
            3.144,
            0.0,
            0.0,
            "luteDuration8th"
        ],
        [
            0.912,
            3.144,
            0.0,
            0.0,
            "luteDuration16th"
        ],
        [
            0.912,
            3.144,
            0.0,
            -0.036,
            "luteDuration32nd"
        ],
        [
            0.128,
            1.128,
            0.0,
            0.0,
            "luteFingeringRHThumb"
        ],
        [
            0.288,
            0.708,
            0.0,
            0.42,
            "luteFingeringRHFirst"
        ],
        [
            0.824,
            0.708,
            0.0,
            0.42,
            "luteFingeringRHSecond"
        ],
        [
            1.364,
            0.708,
            0.0,
            0.42,
            "luteFingeringRHThird"
        ],
        [
            1.104,
            0.968,
            0.0,
            0.0,
            "luteFrenchFretA"
        ],
        [
            0.876,
            1.2,
            0.0,
            0.0,
            "luteFrenchFretB"
        ],
        [
            1.168,
            1.064,
            0.004,
            0.004,
            "luteFrenchFretC"
        ],
        [
            1.716,
            0.98,
            0.0,
            0.0,
            "luteFrenchFretD"
        ],
        [
            1.252,
            0.952,
            0.0,
            0.0,
            "luteFrenchFretE"
        ],
        [
            1.004,
            1.056,
            0.0,
            0.0,
            "luteFrenchFretF"
        ],
        [
            1.616,
            1.132,
            0.0,
            0.0,
            "luteFrenchFretG"
        ],
        [
            0.936,
            1.16,
            0.0,
            0.0,
            "luteFrenchFretH"
        ],
        [
            0.496,
            1.224,
            0.0,
            0.004,
            "luteFrenchFretI"
        ],
        [
            0.856,
            1.2,
            0.004,
            0.004,
            "luteFrenchFretK"
        ],
        [
            0.524,
            1.184,
            0.0,
            0.0,
            "luteFrenchFretL"
        ],
        [
            1.644,
            1.1,
            0.0,
            0.0,
            "luteFrenchFretM"
        ],
        [
            1.284,
            1.208,
            0.0,
            0.0,
            "luteFrenchFretN"
        ],
        [
            1.104,
            0.968,
            0.0,
            0.0,
            "luteFrench7thCourse"
        ],
        [
            1.836,
            1.24,
            0.0,
            -0.136,
            "luteFrench8thCourse"
        ],
        [
            2.276,
            1.24,
            0.0,
            -0.136,
            "luteFrench9thCourse"
        ],
        [
            2.716,
            1.24,
            0.0,
            -0.136,
            "luteFrench10thCourse"
        ],
        [
            1.088,
            1.2,
            0.0,
            0.0,
            "luteFrenchMordentUpper"
        ],
        [
            1.588,
            1.2,
            0.0,
            0.0,
            "luteFrenchMordentLower"
        ],
        [
            0.748,
            1.2,
            0.0,
            0.0,
            "luteFrenchMordentInverted"
        ],
        [
            0.58,
            1.2,
            0.0,
            0.0,
            "luteFrenchAppoggiaturaBelow"
        ],
        [
            0.512,
            1.436,
            0.0,
            0.0,
            "luteFrenchAppoggiaturaAbove"
        ],
        [
            1.024,
            1.2,
            -0.004,
            -0.004,
            "luteItalianFret0"
        ],
        [
            0.552,
            1.2,
            0.0,
            0.0,
            "luteItalianFret1"
        ],
        [
            0.956,
            1.2,
            0.0,
            -0.012,
            "luteItalianFret2"
        ],
        [
            0.88,
            1.2,
            0.0,
            0.0,
            "luteItalianFret3"
        ],
        [
            0.936,
            1.204,
            0.004,
            0.004,
            "luteItalianFret4"
        ],
        [
            0.864,
            1.2,
            0.004,
            0.0,
            "luteItalianFret5"
        ],
        [
            0.944,
            1.204,
            0.004,
            0.004,
            "luteItalianFret6"
        ],
        [
            0.968,
            1.204,
            0.0,
            0.0,
            "luteItalianFret7"
        ],
        [
            0.92,
            1.204,
            0.0,
            0.0,
            "luteItalianFret8"
        ],
        [
            0.94,
            1.2,
            0.0,
            0.0,
            "luteItalianFret9"
        ],
        [
            4.5,
            3.0,
            0.0,
            -3.0,
            "luteItalianTempoFast"
        ],
        [
            4.5,
            3.0,
            0.0,
            -3.0,
            "luteItalianTempoSomewhatFast"
        ],
        [
            3.908,
            2.248,
            0.0,
            -2.252,
            "luteItalianTempoNeitherFastNorSlow"
        ],
        [
            3.916,
            3.0,
            0.008,
            -3.0,
            "luteItalianTempoSlow"
        ],
        [
            3.908,
            3.0,
            0.0,
            -3.0,
            "luteItalianTempoVerySlow"
        ],
        [
            2.652,
            2.248,
            -0.02,
            -2.252,
            "luteItalianTimeTriple"
        ],
        [
            3.156,
            1.4,
            0.0,
            -1.404,
            "luteItalianClefFFaUt"
        ],
        [
            1.904,
            1.792,
            0.0,
            -2.836,
            "luteItalianClefCSolFaUt"
        ],
        [
            0.824,
            0.288,
            0.0,
            0.0,
            "luteItalianTremolo"
        ],
        [
            1.228,
            1.228,
            0.0,
            0.0,
            "luteItalianHoldNote"
        ],
        [
            2.692,
            1.08,
            0.0,
            0.0,
            "luteItalianHoldFinger"
        ],
        [
            1.392,
            1.084,
            0.0,
            0.0,
            "luteItalianReleaseFinger"
        ],
        [
            1.588,
            1.2,
            0.0,
            0.0,
            "luteItalianVibrato"
        ],
        [
            1.112,
            1.388,
            0.0,
            -0.048,
            "luteGermanALower"
        ],
        [
            1.192,
            2.036,
            0.0,
            -0.044,
            "luteGermanBLower"
        ],
        [
            0.804,
            1.372,
            0.0,
            -0.048,
            "luteGermanCLower"
        ],
        [
            1.152,
            1.888,
            0.0,
            -0.048,
            "luteGermanDLower"
        ],
        [
            0.852,
            1.372,
            0.0,
            -0.048,
            "luteGermanELower"
        ],
        [
            0.984,
            1.956,
            0.0,
            -0.496,
            "luteGermanFLower"
        ],
        [
            1.38,
            1.436,
            0.0,
            -0.56,
            "luteGermanGLower"
        ],
        [
            1.216,
            2.064,
            0.0,
            -0.524,
            "luteGermanHLower"
        ],
        [
            0.536,
            1.924,
            0.0,
            -0.452,
            "luteGermanILower"
        ],
        [
            0.992,
            2.04,
            0.0,
            -0.036,
            "luteGermanKLower"
        ],
        [
            0.672,
            2.036,
            0.0,
            -0.04,
            "luteGermanLLower"
        ],
        [
            1.932,
            1.396,
            0.0,
            -0.036,
            "luteGermanMLower"
        ],
        [
            1.256,
            1.404,
            0.0,
            -0.036,
            "luteGermanNLower"
        ],
        [
            1.256,
            1.432,
            0.0,
            -0.048,
            "luteGermanOLower"
        ],
        [
            1.316,
            1.368,
            0.0,
            -0.52,
            "luteGermanPLower"
        ],
        [
            1.26,
            1.368,
            0.0,
            -0.52,
            "luteGermanQLower"
        ],
        [
            0.964,
            1.404,
            0.0,
            -0.032,
            "luteGermanRLower"
        ],
        [
            0.984,
            1.956,
            0.0,
            -0.496,
            "luteGermanSLower"
        ],
        [
            0.908,
            1.692,
            0.0,
            -0.032,
            "luteGermanTLower"
        ],
        [
            1.34,
            1.384,
            0.0,
            -0.032,
            "luteGermanVLower"
        ],
        [
            1.028,
            1.44,
            0.0,
            -0.472,
            "luteGermanXLower"
        ],
        [
            1.216,
            1.432,
            0.0,
            -0.548,
            "luteGermanYLower"
        ],
        [
            0.852,
            1.412,
            0.0,
            -0.528,
            "luteGermanZLower"
        ],
        [
            1.916,
            2.056,
            0.0,
            -0.036,
            "luteGermanAUpper"
        ],
        [
            2.244,
            2.068,
            0.0,
            -0.036,
            "luteGermanBUpper"
        ],
        [
            1.652,
            2.048,
            0.0,
            -0.052,
            "luteGermanCUpper"
        ],
        [
            2.24,
            2.064,
            0.0,
            -0.036,
            "luteGermanDUpper"
        ],
        [
            2.012,
            2.056,
            0.0,
            -0.044,
            "luteGermanEUpper"
        ],
        [
            1.608,
            2.076,
            0.0,
            -0.492,
            "luteGermanFUpper"
        ],
        [
            2.18,
            2.056,
            0.0,
            -0.04,
            "luteGermanGUpper"
        ],
        [
            1.892,
            2.072,
            0.0,
            -0.436,
            "luteGermanHUpper"
        ],
        [
            2.1,
            2.084,
            0.0,
            -0.5,
            "luteGermanIUpper"
        ],
        [
            2.096,
            2.028,
            -0.008,
            -0.048,
            "luteGermanKUpper"
        ],
        [
            1.688,
            2.032,
            0.0,
            -0.044,
            "luteGermanLUpper"
        ],
        [
            2.884,
            2.04,
            0.0,
            -0.04,
            "luteGermanMUpper"
        ],
        [
            2.428,
            2.048,
            0.0,
            -0.052,
            "luteGermanNUpper"
        ],
        [
            1.348,
            0.468,
            0.0,
            -2.108,
            "kievanCClef"
        ],
        [
            1.412,
            4.492,
            0.004,
            0.0,
            "kievanEndingSymbol"
        ],
        [
            4.644,
            0.832,
            0.0,
            -0.828,
            "kievanNoteReciting"
        ],
        [
            0.888,
            0.912,
            0.0,
            -0.888,
            "kievanNoteWhole"
        ],
        [
            1.196,
            1.38,
            0.0,
            -1.384,
            "kievanNoteWholeFinal"
        ],
        [
            0.964,
            0.848,
            0.0,
            -1.444,
            "kievanNoteHalfStaffLine"
        ],
        [
            1.064,
            1.412,
            0.004,
            -1.16,
            "kievanNoteHalfStaffSpace"
        ],
        [
            0.932,
            2.28,
            0.0,
            -0.328,
            "kievanNoteQuarterStemUp"
        ],
        [
            0.932,
            0.328,
            0.0,
            -2.28,
            "kievanNoteQuarterStemDown"
        ],
        [
            0.92,
            2.536,
            0.0,
            -0.388,
            "kievanNote8thStemUp"
        ],
        [
            1.136,
            0.38,
            0.0,
            -2.744,
            "kievanNote8thStemDown"
        ],
        [
            2.1,
            0.36,
            -0.128,
            -0.36,
            "kievanNoteBeam"
        ],
        [
            0.8,
            0.416,
            0.0,
            -0.388,
            "kievanAugmentationDot"
        ],
        [
            1.504,
            1.56,
            0.0,
            -1.556,
            "kievanAccidentalSharp"
        ],
        [
            0.808,
            1.748,
            0.0,
            -0.852,
            "kievanAccidentalFlat"
        ],
        [
            0.972,
            3.992,
            0.0,
            0.412,
            "fingeringFluteChart"
        ],
        [
            0.66,
            0.372,
            0.164,
            0.0,
            "fingeringFluteCFoot"
        ],
        [
            0.66,
            0.372,
            0.556,
            0.168,
            "fingeringFluteBFoot"
        ],
        [
            0.268,
            3.98,
            0.016,
            2.972,
            "fingeringFluteLHThumbBFlatClosed"
        ],
        [
            0.156,
            3.468,
            0.012,
            3.032,
            "fingeringFluteLHThumbBClosed"
        ],
        [
            0.712,
            3.972,
            0.336,
            3.6,
            "fingeringFluteLH1stFingerClosed"
        ],
        [
            0.712,
            3.492,
            0.336,
            3.12,
            "fingeringFluteLH2ndFingerClosed"
        ],
        [
            0.712,
            3.0,
            0.336,
            2.628,
            "fingeringFluteLH3rdFingerClosed"
        ],
        [
            0.96,
            2.792,
            0.528,
            2.516,
            "fluteFingeringLHGSharpClosed"
        ],
        [
            0.472,
            2.372,
            0.252,
            2.064,
            "fingeringFluteRHBFlatTrillClosed"
        ],
        [
            0.712,
            1.976,
            0.336,
            1.604,
            "fingeringFluteRH1stFingerClosed"
        ],
        [
            0.38,
            1.612,
            0.188,
            1.492,
            "fingeringFluteRHDTrillClosed"
        ],
        [
            0.712,
            1.488,
            0.336,
            1.116,
            "fingeringFluteRH2ndFingerClosed"
        ],
        [
            0.38,
            1.12,
            0.188,
            1.004,
            "fingeringFluteRHDSharpTrillClosed"
        ],
        [
            0.712,
            1.004,
            0.336,
            0.632,
            "fingeringFluteRH3rdFingerClosed"
        ],
        [
            0.648,
            0.624,
            0.176,
            0.424,
            "fingeringFluteRHEFlatPaddleClosed"
        ],
        [
            0.384,
            0.36,
            0.176,
            0.064,
            "fingeringFluteRHLowCSharpClosed"
        ],
        [
            0.516,
            0.36,
            0.436,
            0.18,
            "fingeringFluteRHLowCClosed"
        ],
        [
            0.648,
            0.36,
            0.568,
            0.18,
            "fingeringFluteRHLowBClosed"
        ],
        [
            0.648,
            0.124,
            0.504,
            0.012,
            "fingeringFluteRHGizmoClosed"
        ],
        [
            0.524,
            3.972,
            0.336,
            3.6,
            "fingeringFluteLH1stFingerHalfClosedLeft"
        ],
        [
            0.524,
            3.492,
            0.336,
            3.12,
            "fingeringFluteLH2ndFingerHalfClosedLeft"
        ],
        [
            0.524,
            3.0,
            0.336,
            2.628,
            "fingeringFluteLH3rdFingerHalfClosedLeft"
        ],
        [
            0.524,
            1.976,
            0.336,
            1.604,
            "fingeringFluteRH1stFingerHalfClosedLeft"
        ],
        [
            0.524,
            1.488,
            0.336,
            1.116,
            "fingeringFluteRH2ndFingerHalfClosedLeft"
        ],
        [
            0.524,
            1.004,
            0.336,
            0.632,
            "fingeringFluteRH3rdFingerHalfClosedLeft"
        ],
        [
            0.712,
            3.972,
            0.524,
            3.6,
            "fingeringFluteLH1stFingerHalfClosedRight"
        ],
        [
            0.712,
            3.492,
            0.524,
            3.12,
            "fingeringFluteLH2ndFingerHalfClosedRight"
        ],
        [
            0.712,
            3.0,
            0.524,
            2.628,
            "fingeringFluteLH3rdFingerHalfClosedRight"
        ],
        [
            0.712,
            1.976,
            0.524,
            1.604,
            "fingeringFluteRH1stFingerHalfClosedRight"
        ],
        [
            0.712,
            1.488,
            0.524,
            1.116,
            "fingeringFluteRH2ndFingerHalfClosedRight"
        ],
        [
            0.712,
            1.004,
            0.524,
            0.632,
            "fingeringFluteRH3rdFingerHalfClosedRight"
        ],
        [
            0.432,
            3.948,
            0.336,
            3.624,
            "fingeringFluteLH1stFingerQuarterClosedLeft"
        ],
        [
            0.432,
            3.468,
            0.336,
            3.144,
            "fingeringFluteLH2ndFingerQuarterClosedLeft"
        ],
        [
            0.432,
            2.976,
            0.336,
            2.652,
            "fingeringFluteLH3rdFingerQuarterClosedLeft"
        ],
        [
            0.432,
            1.948,
            0.336,
            1.624,
            "fingeringFluteRH1stFingerQuarterClosedLeft"
        ],
        [
            0.432,
            1.464,
            0.336,
            1.14,
            "fingeringFluteRH2ndFingerQuarterClosedLeft"
        ],
        [
            0.432,
            0.976,
            0.336,
            0.656,
            "fingeringFluteRH3rdFingerQuarterClosedLeft"
        ],
        [
            0.712,
            3.948,
            0.616,
            3.624,
            "fingeringFluteLH1stFingerQuarterClosedRight"
        ],
        [
            0.712,
            3.468,
            0.616,
            3.144,
            "fingeringFluteLH2ndFingerQuarterClosedRight"
        ],
        [
            0.712,
            2.972,
            0.616,
            2.648,
            "fingeringFluteLH3rdFingerQuarterClosedRight"
        ],
        [
            0.712,
            1.948,
            0.616,
            1.624,
            "fingeringFluteRH1stFingerQuarterClosedRight"
        ],
        [
            0.712,
            1.464,
            0.616,
            1.14,
            "fingeringFluteRH2ndFingerQuarterClosedRight"
        ],
        [
            0.712,
            0.976,
            0.616,
            0.656,
            "fingeringFluteRH3rdFingerQuarterClosedRight"
        ],
        [
            0.32,
            3.94,
            -0.052,
            3.564,
            "fingeringFluteLHThumbBFlatTrill"
        ],
        [
            0.196,
            3.384,
            -0.032,
            3.156,
            "fingeringFluteLHThumbBTrill"
        ],
        [
            0.728,
            4.0,
            0.312,
            3.584,
            "fingeringFluteLH1stFingerTrill"
        ],
        [
            0.728,
            3.516,
            0.312,
            3.1,
            "fingeringFluteLH2ndFingerTrill"
        ],
        [
            0.728,
            3.016,
            0.312,
            2.6,
            "fingeringFluteLH3rdFingerTrill"
        ],
        [
            0.996,
            2.824,
            0.636,
            2.464,
            "fluteFingeringLHGSharpTrill"
        ],
        [
            0.452,
            2.284,
            0.216,
            2.048,
            "fingeringFluteRHBFlatTrillTrill"
        ],
        [
            0.728,
            2.004,
            0.312,
            1.592,
            "fingeringFluteRH1stFingerTrill"
        ],
        [
            0.368,
            1.656,
            0.168,
            1.46,
            "fingeringFluteRHDTrillTrill"
        ],
        [
            0.728,
            1.5,
            0.312,
            1.088,
            "fingeringFluteRH2ndFingerTrill"
        ],
        [
            0.368,
            1.168,
            0.168,
            0.972,
            "fingeringFluteRHDSharpTrillTrill"
        ],
        [
            0.728,
            1.028,
            0.312,
            0.616,
            "fingeringFluteRH3rdFingerTrill"
        ],
        [
            0.46,
            0.632,
            0.212,
            0.384,
            "fingeringFluteRHEFlatPaddleTrill"
        ],
        [
            0.416,
            0.372,
            0.156,
            0.116,
            "fingeringFluteRHLowCSharpTrill"
        ],
        [
            0.544,
            0.348,
            0.404,
            0.208,
            "fingeringFluteRHLowCTrill"
        ],
        [
            0.676,
            0.348,
            0.536,
            0.208,
            "fingeringFluteRHLowBTrill"
        ],
        [
            0.652,
            0.144,
            0.476,
            -0.032,
            "fingeringFluteRHGizmoTrill"
        ],
        [
            0.672,
            3.996,
            0.0,
            0.076,
            "fingeringClarChart"
        ],
        [
            0.188,
            0.124,
            0.064,
            0.0,
            "fingeringClarBassEFlatOpen"
        ],
        [
            0.244,
            3.984,
            0.12,
            3.708,
            "fingeringClarRegisterClosed"
        ],
        [
            0.24,
            3.656,
            0.124,
            3.54,
            "fingeringClarLHThumbClosed"
        ],
        [
            0.408,
            3.612,
            0.284,
            3.336,
            "fingeringClarLHAClosed"
        ],
        [
            0.66,
            3.484,
            0.476,
            3.188,
            "fingeringClarLHGSharpClosed"
        ],
        [
            0.476,
            3.248,
            0.216,
            2.988,
            "fingeringClarLH1stFingerClosed"
        ],
        [
            0.476,
            2.9,
            0.216,
            2.64,
            "fingeringClarLH2ndFingerClosed"
        ],
        [
            0.556,
            2.636,
            0.34,
            2.548,
            "fingeringClarLHEFlatClosed"
        ],
        [
            0.476,
            2.488,
            0.216,
            2.228,
            "fingeringClarLH3rdFingerClosed"
        ],
        [
            0.464,
            2.176,
            0.228,
            2.1,
            "fingeringClarLHCSharpClosed"
        ],
        [
            0.612,
            2.092,
            0.508,
            2.016,
            "fingeringClarLHFClosed"
        ],
        [
            0.628,
            1.972,
            0.516,
            1.892,
            "fingeringClarLHGSharpAltClosed"
        ],
        [
            0.468,
            2.052,
            0.328,
            1.9,
            "fingeringClarLHEClosed"
        ],
        [
            0.164,
            1.736,
            0.076,
            1.676,
            "fingeringClarRH1stSideClosed"
        ],
        [
            0.164,
            1.644,
            0.076,
            1.584,
            "fingeringClarRH2ndSideClosed"
        ],
        [
            0.164,
            1.552,
            0.04,
            1.492,
            "fingeringClarRH3rdSideClosed"
        ],
        [
            0.164,
            1.46,
            0.012,
            1.396,
            "fingeringClarRH4thSideClosed"
        ],
        [
            0.476,
            1.464,
            0.216,
            1.204,
            "fingeringClarRH1stFingerClosed"
        ],
        [
            0.476,
            1.116,
            0.216,
            0.856,
            "fingeringClarRH2ndFingerClosed"
        ],
        [
            0.26,
            0.808,
            0.092,
            0.764,
            "fingeringClarRHBClosed"
        ],
        [
            0.476,
            0.7,
            0.216,
            0.44,
            "fingeringClarRH3rdFingerClosed"
        ],
        [
            0.176,
            0.388,
            0.076,
            0.288,
            "fingeringClarRHFSharpClosed"
        ],
        [
            0.308,
            0.324,
            0.212,
            0.224,
            "fingeringClarRHGSharpClosed"
        ],
        [
            0.176,
            0.248,
            0.076,
            0.148,
            "fingeringClarRHEClosed"
        ],
        [
            0.308,
            0.188,
            0.212,
            0.088,
            "fingeringClarRHFClosed"
        ],
        [
            0.176,
            0.112,
            0.076,
            0.012,
            "fingeringClarBassEFlatClosed"
        ],
        [
            0.476,
            3.248,
            0.216,
            2.988,
            "fingeringClarLH1stFingerRingOnly"
        ],
        [
            0.476,
            2.9,
            0.216,
            2.64,
            "fingeringClarLH2ndFingerRingOnly"
        ],
        [
            0.476,
            2.488,
            0.216,
            2.228,
            "fingeringClarLH3rdFingerRingOnly"
        ],
        [
            0.476,
            1.464,
            0.216,
            1.204,
            "fingeringClarRH1stFingerRingOnly"
        ],
        [
            0.476,
            1.116,
            0.216,
            0.856,
            "fingeringClarRH2ndFingerRingOnly"
        ],
        [
            0.476,
            0.7,
            0.216,
            0.44,
            "fingeringClarRH3rdFingerRingOnly"
        ],
        [
            0.348,
            3.248,
            0.216,
            2.988,
            "fingeringClarLH1stFingerHalfClosedLeft"
        ],
        [
            0.348,
            2.9,
            0.216,
            2.64,
            "fingeringClarLH2ndFingerHalfClosedLeft"
        ],
        [
            0.348,
            2.488,
            0.216,
            2.228,
            "fingeringClarLH3rdFingerHalfClosedLeft"
        ],
        [
            0.348,
            1.464,
            0.216,
            1.204,
            "fingeringClarRH1stFingerHalfClosedLeft"
        ],
        [
            0.348,
            1.116,
            0.216,
            0.856,
            "fingeringClarRH2ndFingerHalfClosedLeft"
        ],
        [
            0.348,
            0.7,
            0.216,
            0.44,
            "fingeringClarRH3rdFingerHalfClosedLeft"
        ],
        [
            0.476,
            3.248,
            0.348,
            2.988,
            "fingeringClarLH1stFingerHalfClosedRight"
        ],
        [
            0.476,
            2.9,
            0.348,
            2.644,
            "fingeringClarLH2ndFingerHalfClosedRight"
        ],
        [
            0.476,
            2.488,
            0.348,
            2.228,
            "fingeringClarLH3rdFingerHalfClosedRight"
        ],
        [
            0.476,
            1.464,
            0.348,
            1.204,
            "fingeringClarRH1stFingerHalfClosedRight"
        ],
        [
            0.476,
            1.116,
            0.348,
            0.86,
            "fingeringClarRH2ndFingerHalfClosedRight"
        ],
        [
            0.476,
            0.7,
            0.348,
            0.44,
            "fingeringClarRH3rdFingerHalfClosedRight"
        ],
        [
            0.28,
            3.232,
            0.216,
            3.008,
            "fingeringClarLH1stFingerQuarterClosedLeft"
        ],
        [
            0.28,
            2.884,
            0.216,
            2.66,
            "fingeringClarLH2ndFingerQuarterClosedLeft"
        ],
        [
            0.28,
            2.468,
            0.216,
            2.244,
            "fingeringClarLH3rdFingerQuarterClosedLeft"
        ],
        [
            0.28,
            1.444,
            0.216,
            1.22,
            "fingeringClarRH1stFingerQuarterClosedLeft"
        ],
        [
            0.28,
            1.096,
            0.216,
            0.872,
            "fingeringClarRH2ndFingerQuarterClosedLeft"
        ],
        [
            0.28,
            0.684,
            0.216,
            0.46,
            "fingeringClarRH3rdFingerQuarterClosedLeft"
        ],
        [
            0.476,
            3.232,
            0.412,
            3.008,
            "fingeringClarLH1stFingerQuarterClosedRight"
        ],
        [
            0.476,
            2.884,
            0.412,
            2.66,
            "fingeringClarLH2ndFingerQuarterClosedRight"
        ],
        [
            0.476,
            2.468,
            0.412,
            2.244,
            "fingeringClarLH3rdFingerQuarterClosedRight"
        ],
        [
            0.476,
            1.444,
            0.412,
            1.22,
            "fingeringClarRH1stFingerQuarterClosedRight"
        ],
        [
            0.476,
            1.1,
            0.412,
            0.876,
            "fingeringClarRH2ndFingerQuarterClosedRight"
        ],
        [
            0.476,
            0.684,
            0.412,
            0.46,
            "fingeringClarRH3rdFingerQuarterClosedRight"
        ],
        [
            0.268,
            3.924,
            0.08,
            3.732,
            "fingeringClarRegisterTrill"
        ],
        [
            0.276,
            3.692,
            0.084,
            3.5,
            "fingeringClarLHThumbTrill"
        ],
        [
            0.436,
            3.544,
            0.244,
            3.356,
            "fingeringClarLHATrill"
        ],
        [
            0.652,
            3.348,
            0.476,
            3.176,
            "fingeringClarLHGSharpTrill"
        ],
        [
            0.496,
            3.272,
            0.192,
            2.972,
            "fingeringClarLH1stFingerTrill"
        ],
        [
            0.496,
            2.928,
            0.192,
            2.628,
            "fingeringClarLH2ndFingerTrill"
        ],
        [
            0.548,
            2.692,
            0.356,
            2.5,
            "fingeringClarLHEFlatTrill"
        ],
        [
            0.496,
            2.508,
            0.192,
            2.208,
            "fingeringClarLH3rdFingerTrill"
        ],
        [
            0.372,
            2.208,
            0.2,
            2.036,
            "fingeringClarLHCSharpTrill"
        ],
        [
            0.632,
            2.12,
            0.496,
            1.984,
            "fingeringClarLHFTrill"
        ],
        [
            0.632,
            1.996,
            0.496,
            1.86,
            "fingeringClarLHGSharpAltTrill"
        ],
        [
            0.472,
            2.056,
            0.324,
            1.908,
            "fingeringClarLHETrill"
        ],
        [
            0.184,
            1.776,
            0.056,
            1.648,
            "fingeringClarRH1stSideTrill"
        ],
        [
            0.184,
            1.688,
            0.056,
            1.556,
            "fingeringClarRH2ndSideTrill"
        ],
        [
            0.172,
            1.596,
            0.04,
            1.464,
            "fingeringClarRH3rdSideTrill"
        ],
        [
            0.152,
            1.496,
            0.024,
            1.364,
            "fingeringClarRH4thSideTrill"
        ],
        [
            0.496,
            1.488,
            0.192,
            1.188,
            "fingeringClarRH1stFingerTrill"
        ],
        [
            0.496,
            1.148,
            0.192,
            0.848,
            "fingeringClarRH2ndFingerTrill"
        ],
        [
            0.24,
            0.848,
            0.112,
            0.716,
            "fingeringClarRHBTrill"
        ],
        [
            0.496,
            0.72,
            0.192,
            0.42,
            "fingeringClarRH3rdFingerTrill"
        ],
        [
            0.204,
            0.412,
            0.048,
            0.26,
            "fingeringClarRHFSharpTrill"
        ],
        [
            0.344,
            0.348,
            0.188,
            0.196,
            "fingeringClarRHGSharpTrill"
        ],
        [
            0.204,
            0.276,
            0.048,
            0.12,
            "fingeringClarRHETrill"
        ],
        [
            0.344,
            0.212,
            0.188,
            0.06,
            "fingeringClarRHFTrill"
        ],
        [
            0.2,
            0.132,
            0.048,
            -0.02,
            "fingeringClarBassEFlatTrill"
        ],
        [
            0.792,
            3.992,
            0.004,
            0.0,
            "fingeringOboeChart"
        ],
        [
            0.144,
            3.98,
            0.02,
            3.616,
            "fingeringOboeLH3rdOctaveClosed"
        ],
        [
            0.152,
            3.58,
            0.016,
            3.4,
            "fingeringOboeLH1stOctaveClosed"
        ],
        [
            0.528,
            3.68,
            0.216,
            3.224,
            "fingeringOboeLH1stFingerClosed"
        ],
        [
            0.708,
            3.856,
            0.588,
            3.368,
            "fingeringOboeLH2ndOctaveClosed"
        ],
        [
            0.216,
            3.3,
            0.128,
            3.096,
            "fingeringOboeLHBTrillClosed"
        ],
        [
            0.652,
            3.22,
            0.484,
            3.104,
            "fingeringOboeLHDTrillClosed"
        ],
        [
            0.528,
            3.104,
            0.216,
            2.792,
            "fingeringOboeLH2ndFingerClosed"
        ],
        [
            0.652,
            2.784,
            0.484,
            2.668,
            "fingeringOboeLHCSharpTrillClosed"
        ],
        [
            0.528,
            2.664,
            0.216,
            2.352,
            "fingeringOboeLH3rdFingerClosed"
        ],
        [
            0.628,
            2.332,
            0.392,
            2.232,
            "fingeringOboeLHGSharpClosed"
        ],
        [
            0.692,
            2.176,
            0.552,
            2.072,
            "fingeringOboeLHLowBClosed"
        ],
        [
            0.512,
            2.156,
            0.348,
            1.98,
            "fingeringOboeLHEFlatClosed"
        ],
        [
            0.624,
            2.024,
            0.552,
            1.872,
            "fingeringOboeLHFClosed"
        ],
        [
            0.78,
            2.016,
            0.668,
            1.916,
            "fingeringOboeLHLowBFlatClosed"
        ],
        [
            0.152,
            1.76,
            0.06,
            1.592,
            "fingeringOboeRHAClosed"
        ],
        [
            0.156,
            1.548,
            0.056,
            1.308,
            "fingeringOboeRHGSharpClosed"
        ],
        [
            0.528,
            1.712,
            0.216,
            1.4,
            "fingeringOboeRH1stFingerClosed"
        ],
        [
            0.652,
            1.4,
            0.484,
            1.284,
            "fingeringOboeRHDTrillClosed"
        ],
        [
            0.528,
            1.284,
            0.216,
            0.972,
            "fingeringOboeRH2ndFingerClosed"
        ],
        [
            0.364,
            0.896,
            0.16,
            0.808,
            "fingeringOboeRHFClosed"
        ],
        [
            0.528,
            0.736,
            0.216,
            0.424,
            "fingeringOboeRH3rdFingerClosed"
        ],
        [
            0.676,
            0.732,
            0.612,
            0.436,
            "fingeringOboeRHCBananaClosed"
        ],
        [
            0.364,
            0.348,
            0.056,
            0.216,
            "fingeringOboeRHLowCClosed"
        ],
        [
            0.364,
            0.224,
            0.228,
            0.14,
            "fingeringOboeRHLowCSharpClosed"
        ],
        [
            0.364,
            0.148,
            0.056,
            0.016,
            "fingeringOboeRHLowEFlatKeyClosed"
        ],
        [
            0.528,
            3.68,
            0.216,
            3.364,
            "fingeringOboeLH1stFingerRingOnly"
        ],
        [
            0.528,
            3.104,
            0.216,
            2.792,
            "fingeringOboeLH2ndFingerRingOnly"
        ],
        [
            0.528,
            2.664,
            0.216,
            2.352,
            "fingeringOboeLH3rdFingerRingOnly"
        ],
        [
            0.528,
            1.712,
            0.216,
            1.4,
            "fingeringOboeRH1stFingerRingOnly"
        ],
        [
            0.528,
            1.284,
            0.216,
            0.972,
            "fingeringOboeRH2ndFingerRingOnly"
        ],
        [
            0.528,
            0.736,
            0.216,
            0.424,
            "fingeringOboeRH3rdFingerRingOnly"
        ],
        [
            0.44,
            3.36,
            0.304,
            3.224,
            "fingeringOboeLH1stFingerHalfClosed"
        ],
        [
            0.372,
            3.104,
            0.216,
            2.792,
            "fingeringOboeLH2ndFingerHalfClosedLeft"
        ],
        [
            0.372,
            2.664,
            0.216,
            2.352,
            "fingeringOboeLH3rdFingerHalfClosedLeft"
        ],
        [
            0.372,
            1.712,
            0.216,
            1.4,
            "fingeringOboeRH1stFingerHalfClosedLeft"
        ],
        [
            0.372,
            1.28,
            0.216,
            0.968,
            "fingeringOboeRH2ndFingerHalfClosedLeft"
        ],
        [
            0.372,
            0.736,
            0.216,
            0.424,
            "fingeringOboeRH3rdFingerHalfClosedLeft"
        ],
        [
            0.528,
            3.104,
            0.372,
            2.792,
            "fingeringOboeLH2ndFingerHalfClosedRight"
        ],
        [
            0.528,
            2.664,
            0.372,
            2.352,
            "fingeringOboeLH3rdFingerHalfClosedRight"
        ],
        [
            0.528,
            1.712,
            0.372,
            1.4,
            "fingeringOboeRH1stFingerHalfClosedRight"
        ],
        [
            0.528,
            1.284,
            0.372,
            0.972,
            "fingeringOboeRH2ndFingerHalfClosedRight"
        ],
        [
            0.528,
            0.736,
            0.372,
            0.424,
            "fingeringOboeRH3rdFingerHalfClosedRight"
        ],
        [
            0.296,
            3.084,
            0.22,
            2.812,
            "fingeringOboeLH2ndFingerQuarterClosedLeft"
        ],
        [
            0.296,
            2.644,
            0.22,
            2.372,
            "fingeringOboeLH3rdFingerQuarterClosedLeft"
        ],
        [
            0.296,
            1.692,
            0.22,
            1.42,
            "fingeringOboeRH1stFingerQuarterClosedLeft"
        ],
        [
            0.296,
            1.264,
            0.22,
            0.992,
            "fingeringOboeRH2ndFingerQuarterClosedLeft"
        ],
        [
            0.296,
            0.716,
            0.22,
            0.444,
            "fingeringOboeRH3rdFingerQuarterClosedLeft"
        ],
        [
            0.528,
            3.084,
            0.452,
            2.816,
            "fingeringOboeLH2ndFingerQuarterClosedRight"
        ],
        [
            0.528,
            2.644,
            0.452,
            2.372,
            "fingeringOboeLH3rdFingerQuarterClosedRight"
        ],
        [
            0.528,
            1.688,
            0.452,
            1.416,
            "fingeringOboeRH1stFingerQuarterClosedRight"
        ],
        [
            0.528,
            1.26,
            0.452,
            0.992,
            "fingeringOboeRH2ndFingerQuarterClosedRight"
        ],
        [
            0.528,
            0.712,
            0.452,
            0.44,
            "fingeringOboeRH3rdFingerQuarterClosedRight"
        ],
        [
            0.188,
            3.892,
            -0.032,
            3.676,
            "fingeringOboeLH3rdOctaveTrill"
        ],
        [
            0.188,
            3.592,
            -0.028,
            3.376,
            "fingeringOboeLH1stOctaveTrill"
        ],
        [
            0.556,
            3.708,
            0.192,
            3.2,
            "fingeringOboeLH1stFingerTrill"
        ],
        [
            0.76,
            3.744,
            0.532,
            3.52,
            "fingeringOboeLH2ndOctaveTrill"
        ],
        [
            0.28,
            3.304,
            0.08,
            3.108,
            "fingeringOboeLHBTrillTrill"
        ],
        [
            0.652,
            3.252,
            0.468,
            3.068,
            "fingeringOboeLHDTrillTrill"
        ],
        [
            0.54,
            3.108,
            0.2,
            2.772,
            "fingeringOboeLH2ndFingerTrill"
        ],
        [
            0.652,
            2.812,
            0.468,
            2.628,
            "fingeringOboeLHCSharpTrillTrill"
        ],
        [
            0.54,
            2.668,
            0.2,
            2.332,
            "fingeringOboeLH3rdFingerTrill"
        ],
        [
            0.608,
            2.356,
            0.444,
            2.192,
            "fingeringOboeLHGSharpTrill"
        ],
        [
            0.72,
            2.22,
            0.532,
            2.036,
            "fingeringOboeLHLowBTrill"
        ],
        [
            0.516,
            2.168,
            0.34,
            1.992,
            "fingeringOboeLHEFlatTrill"
        ],
        [
            0.672,
            2.048,
            0.496,
            1.872,
            "fingeringOboeLHFTrill"
        ],
        [
            0.804,
            2.048,
            0.628,
            1.868,
            "fingeringOboeLHLowBFlatTrill"
        ],
        [
            0.192,
            1.752,
            0.012,
            1.576,
            "fingeringOboeRHATrill"
        ],
        [
            0.192,
            1.52,
            0.02,
            1.348,
            "fingeringOboeRHGSharpTrill"
        ],
        [
            0.54,
            1.724,
            0.2,
            1.388,
            "fingeringOboeRH1stFingerTrill"
        ],
        [
            0.652,
            1.432,
            0.468,
            1.248,
            "fingeringOboeRHDTrillTrill"
        ],
        [
            0.54,
            1.276,
            0.2,
            0.94,
            "fingeringOboeRH2ndFingerTrill"
        ],
        [
            0.352,
            0.944,
            0.164,
            0.76,
            "fingeringOboeRHFTrill"
        ],
        [
            0.54,
            0.744,
            0.2,
            0.408,
            "fingeringOboeRH3rdFingerTrill"
        ],
        [
            0.732,
            0.684,
            0.54,
            0.496,
            "fingeringOboeRHCBananaTrill"
        ],
        [
            0.256,
            0.38,
            0.048,
            0.172,
            "fingeringOboeRHLowCTrill"
        ],
        [
            0.392,
            0.272,
            0.22,
            0.104,
            "fingeringOboeRHLowCSharpTrill"
        ],
        [
            0.22,
            0.184,
            0.032,
            -0.004,
            "fingeringOboeRHLowEFlatKeyTrill"
        ],
        [
            2.428,
            3.964,
            0.008,
            0.024,
            "fingeringBsnChart"
        ],
        [
            2.528,
            4.024,
            -0.012,
            -0.008,
            "fingeringBsnChartThumbsHands"
        ],
        [
            1.872,
            3.928,
            1.452,
            3.788,
            "fingeringBsnLHHighEClosed"
        ],
        [
            1.848,
            3.712,
            1.62,
            3.488,
            "fingeringBsnLH1stFingerClosed"
        ],
        [
            1.9,
            3.424,
            1.54,
            3.296,
            "fingeringBsnLHHighEFlatClosed"
        ],
        [
            1.848,
            3.228,
            1.62,
            3.0,
            "fingeringBsnLH2ndFingerClosed"
        ],
        [
            1.872,
            2.912,
            1.384,
            2.568,
            "fingeringBsnLH3rdFingerRingClosed"
        ],
        [
            1.824,
            2.86,
            1.588,
            2.624,
            "fingeringBsnLH3rdFingerClosed"
        ],
        [
            2.28,
            2.688,
            1.9,
            2.424,
            "fingeringBsnLHLowEFlatClosed"
        ],
        [
            2.38,
            2.456,
            1.956,
            2.236,
            "fingeringBsnLHLowDFlatClosed"
        ],
        [
            1.94,
            2.084,
            1.516,
            1.832,
            "fingeringBsnRHCSharpTrillClosed"
        ],
        [
            2.228,
            1.852,
            2.0,
            1.628,
            "fingeringBsnRH1stFingerClosed"
        ],
        [
            2.416,
            1.54,
            1.924,
            1.2,
            "fingeringBsnRH2ndFingerRingClosed"
        ],
        [
            2.212,
            1.488,
            1.976,
            1.248,
            "fingeringBsnRH2ndFingerClosed"
        ],
        [
            2.296,
            1.128,
            1.848,
            0.968,
            "fingeringBsnRHBFlatTrillClosed"
        ],
        [
            2.276,
            0.92,
            1.716,
            0.708,
            "fingeringBsnRHLowGClosed"
        ],
        [
            1.648,
            0.724,
            1.396,
            0.532,
            "fingeringBsnRHLowFClosed"
        ],
        [
            1.972,
            0.648,
            1.624,
            0.036,
            "fingeringBsnRHFSharpClosed"
        ],
        [
            1.748,
            0.56,
            1.304,
            0.036,
            "fingeringBsnRHAFlatClosed"
        ],
        [
            0.824,
            3.932,
            0.688,
            3.404,
            "fingeringBsnLTHighDClosed"
        ],
        [
            0.984,
            3.932,
            0.752,
            3.22,
            "fingeringBsnLTHighBClosed"
        ],
        [
            1.168,
            3.932,
            0.72,
            2.98,
            "fingeringBsnLTHighAClosed"
        ],
        [
            0.948,
            2.916,
            0.716,
            2.304,
            "fingeringBsnLTCSharpClosed"
        ],
        [
            0.816,
            2.724,
            0.604,
            2.548,
            "fingeringBsnLTWhisperKeyClosed"
        ],
        [
            0.628,
            3.932,
            0.352,
            3.248,
            "fingeringBsnLTLowBFlatClosed"
        ],
        [
            0.428,
            3.932,
            0.204,
            3.208,
            "fingeringBsnLTLowBClosed"
        ],
        [
            0.216,
            3.364,
            0.04,
            3.152,
            "fingeringBsnLTLowCClosed"
        ],
        [
            0.276,
            3.084,
            0.096,
            2.492,
            "fingeringBsnLTLowDClosed"
        ],
        [
            0.68,
            1.92,
            0.028,
            1.216,
            "fingeringBsnRTBFlatClosed"
        ],
        [
            0.84,
            1.676,
            0.212,
            1.22,
            "fingeringBsnRTLowEClosed"
        ],
        [
            0.744,
            1.148,
            0.18,
            0.832,
            "fingeringBsnRTLowFSharpClosed"
        ],
        [
            0.86,
            0.908,
            0.352,
            0.596,
            "fingeringBsnRTAFlatClosed"
        ],
        [
            1.848,
            3.712,
            1.62,
            3.6,
            "fingeringBsnLH1stFingerHalfClosed"
        ],
        [
            1.848,
            3.228,
            1.62,
            3.116,
            "fingeringBsnLH2ndFingerHalfClosed"
        ],
        [
            1.824,
            2.86,
            1.588,
            2.74,
            "fingeringBsnLH3rdFingerHalfClosed"
        ],
        [
            2.228,
            1.852,
            2.0,
            1.74,
            "fingeringBsnRH1stFingerHalfClosed"
        ],
        [
            2.212,
            1.488,
            1.976,
            1.368,
            "fingeringBsnRH2ndFingerHalfClosed"
        ],
        [
            1.832,
            3.712,
            1.636,
            3.656,
            "fingeringBsnLH1stFingerQuarterClosed"
        ],
        [
            1.832,
            3.228,
            1.632,
            3.168,
            "fingeringBsnLH2ndFingerQuarterClosed"
        ],
        [
            1.804,
            2.86,
            1.608,
            2.804,
            "fingeringBsnLH3rdFingerQuarterClosed"
        ],
        [
            2.212,
            1.852,
            2.016,
            1.796,
            "fingeringBsnRH1stFingerQuarterClosed"
        ],
        [
            2.188,
            1.488,
            1.992,
            1.428,
            "fingeringBsnRH2ndFingerQuarterClosed"
        ],
        [
            1.848,
            3.716,
            1.62,
            3.548,
            "fingeringBsnLH1stFingerThreeQuartersClosed"
        ],
        [
            1.848,
            3.228,
            1.62,
            3.056,
            "fingeringBsnLH2ndFingerThreeQuartersClosed"
        ],
        [
            1.824,
            2.86,
            1.596,
            2.692,
            "fingeringBsnLH3rdFingerThreeQuartersClosed"
        ],
        [
            2.228,
            1.852,
            2.0,
            1.684,
            "fingeringBsnRH1stFingerThreeQuartersClosed"
        ],
        [
            2.208,
            1.488,
            1.98,
            1.316,
            "fingeringBsnRH2ndFingerThreeQuartersClosed"
        ],
        [
            1.812,
            4.0,
            1.568,
            3.76,
            "fingeringBsnLHHighETrill"
        ],
        [
            1.904,
            3.768,
            1.548,
            3.416,
            "fingeringBsnLH1stFingerTrill"
        ],
        [
            1.848,
            3.472,
            1.64,
            3.264,
            "fingeringBsnLHHighEFlatTrill"
        ],
        [
            1.904,
            3.28,
            1.548,
            2.928,
            "fingeringBsnLH2ndFingerTrill"
        ],
        [
            1.892,
            2.932,
            1.5,
            2.54,
            "fingeringBsnLH3rdFingerRingTrill"
        ],
        [
            2.252,
            2.756,
            1.86,
            2.368,
            "fingeringBsnLHLowEFlatTrill"
        ],
        [
            2.336,
            2.5,
            1.952,
            2.18,
            "fingeringBsnLHLowDFlatTrill"
        ],
        [
            1.972,
            2.128,
            1.616,
            1.776,
            "fingeringBsnRHCSharpTrillTrill"
        ],
        [
            2.284,
            1.912,
            1.928,
            1.56,
            "fingeringBsnRH1stFingerTrill"
        ],
        [
            2.292,
            1.572,
            1.904,
            1.184,
            "fingeringBsnRH2ndFingerTrill"
        ],
        [
            2.196,
            1.136,
            1.972,
            0.912,
            "fingeringBsnRHBFlatTrillTrill"
        ],
        [
            2.104,
            0.916,
            1.82,
            0.632,
            "fingeringBsnRHLowGTrill"
        ],
        [
            1.64,
            0.764,
            1.416,
            0.54,
            "fingeringBsnRHLowFTrill"
        ],
        [
            1.996,
            0.572,
            1.772,
            0.348,
            "fingeringBsnRHFSharpTrill"
        ],
        [
            1.724,
            0.44,
            1.496,
            0.216,
            "fingeringBsnRHAFlatTrill"
        ],
        [
            0.86,
            3.588,
            0.676,
            3.404,
            "fingeringBsnLTHighDTrill"
        ],
        [
            0.968,
            3.4,
            0.768,
            3.2,
            "fingeringBsnLTHighBTrill"
        ],
        [
            1.02,
            3.216,
            0.736,
            2.94,
            "fingeringBsnLTHighATrill"
        ],
        [
            0.968,
            2.912,
            0.772,
            2.712,
            "fingeringBsnLTCSharpTrill"
        ],
        [
            0.824,
            2.756,
            0.58,
            2.52,
            "fingeringBsnLTWhisperKeyTrill"
        ],
        [
            0.648,
            3.456,
            0.448,
            3.256,
            "fingeringBsnLTLowBFlatTrill"
        ],
        [
            0.448,
            3.4,
            0.248,
            3.2,
            "fingeringBsnLTLowBTrill"
        ],
        [
            0.248,
            3.376,
            0.0,
            3.136,
            "fingeringBsnLTLowCTrill"
        ],
        [
            0.328,
            3.076,
            0.044,
            2.784,
            "fingeringBsnLTLowDTrill"
        ],
        [
            0.436,
            1.948,
            0.184,
            1.7,
            "fingeringBsnRTBFlatTrill"
        ],
        [
            0.7,
            1.696,
            0.188,
            1.184,
            "fingeringBsnRTLowETrill"
        ],
        [
            0.748,
            1.212,
            0.392,
            0.86,
            "fingeringBsnRTLowFSharpTrill"
        ],
        [
            0.848,
            0.976,
            0.496,
            0.624,
            "fingeringBsnRTAFlatTrill"
        ],
        [
            0.852,
            3.976,
            0.0,
            0.004,
            "fingeringSaxChart"
        ],
        [
            0.228,
            3.584,
            0.0,
            3.404,
            "fingeringSaxBariLowAOpen"
        ],
        [
            0.208,
            3.96,
            0.072,
            3.636,
            "fingeringSaxLHOctaveClosed"
        ],
        [
            0.52,
            3.676,
            0.324,
            3.48,
            "fingeringSaxLHFrontFClosed"
        ],
        [
            0.564,
            3.364,
            0.268,
            3.068,
            "fingeringSaxLH1stFingerClosed"
        ],
        [
            0.656,
            3.008,
            0.484,
            2.836,
            "fingeringSaxLHBFlatClosed"
        ],
        [
            0.564,
            2.768,
            0.268,
            2.472,
            "fingeringSaxLH2ndFingerClosed"
        ],
        [
            0.564,
            2.36,
            0.268,
            2.064,
            "fingeringSaxLH3rdFingerClosed"
        ],
        [
            0.748,
            3.868,
            0.656,
            3.676,
            "fingeringSaxLHEFlatPalmClosed"
        ],
        [
            0.836,
            3.644,
            0.744,
            3.452,
            "fingeringSaxLHDPalmClosed"
        ],
        [
            0.7,
            3.536,
            0.608,
            3.344,
            "fingeringSaxLHFPalmClosed"
        ],
        [
            0.736,
            1.988,
            0.492,
            1.868,
            "fingeringSaxLHGSharpClosed"
        ],
        [
            0.74,
            1.82,
            0.64,
            1.676,
            "fingeringSaxLHLowCSharpClosed"
        ],
        [
            0.592,
            1.82,
            0.492,
            1.676,
            "fingeringSaxLHLowBClosed"
        ],
        [
            0.736,
            1.628,
            0.492,
            1.508,
            "fingeringSaxLHLowBFlatClosed"
        ],
        [
            0.108,
            1.46,
            0.016,
            1.268,
            "fingeringSaxRHESideClosed"
        ],
        [
            0.108,
            1.228,
            0.016,
            1.036,
            "fingeringSaxRHCSideClosed"
        ],
        [
            0.108,
            0.992,
            0.016,
            0.8,
            "fingeringSaxRHBFlatSideClosed"
        ],
        [
            0.22,
            1.108,
            0.16,
            0.8,
            "fingeringSaxRHHighFSharpClosed"
        ],
        [
            0.564,
            1.308,
            0.268,
            1.012,
            "fingeringSaxRH1stFingerClosed"
        ],
        [
            0.564,
            0.9,
            0.268,
            0.604,
            "fingeringSaxRH2ndFingerClosed"
        ],
        [
            0.336,
            0.636,
            0.164,
            0.456,
            "fingeringSaxRHFSharpAlternateClosed"
        ],
        [
            0.564,
            0.492,
            0.268,
            0.196,
            "fingeringSaxRH3rdFingerClosed"
        ],
        [
            0.272,
            0.248,
            0.104,
            0.076,
            "fingeringSaxRHLowEFlatClosed"
        ],
        [
            0.204,
            0.192,
            0.036,
            0.02,
            "fingeringSaxRHLowCClosed"
        ],
        [
            0.212,
            3.564,
            0.016,
            3.42,
            "fingeringSaxBariLowAClosed"
        ],
        [
            0.564,
            3.364,
            0.268,
            3.216,
            "fingeringSaxLH1stFingerHalfClosed"
        ],
        [
            0.564,
            2.768,
            0.268,
            2.62,
            "fingeringSaxLH2ndFingerHalfClosed"
        ],
        [
            0.564,
            2.36,
            0.268,
            2.212,
            "fingeringSaxLH3rdFingerHalfClosed"
        ],
        [
            0.564,
            1.312,
            0.268,
            1.164,
            "fingeringSaxRH1stFingerHalfClosed"
        ],
        [
            0.564,
            0.904,
            0.268,
            0.756,
            "fingeringSaxRH2ndFingerHalfClosed"
        ],
        [
            0.564,
            0.492,
            0.268,
            0.344,
            "fingeringSaxRH3rdFingerHalfClosed"
        ],
        [
            0.176,
            3.932,
            0.104,
            3.636,
            "fingeringSaxLHOctaveTrill"
        ],
        [
            0.488,
            3.676,
            0.356,
            3.48,
            "fingeringSaxLHFrontFTrill"
        ],
        [
            0.516,
            3.36,
            0.32,
            3.064,
            "fingeringSaxLH1stFingerTrill"
        ],
        [
            0.608,
            3.0,
            0.536,
            2.836,
            "fingeringSaxLHBFlatTrill"
        ],
        [
            0.516,
            2.764,
            0.32,
            2.468,
            "fingeringSaxLH2ndFingerTrill"
        ],
        [
            0.516,
            2.356,
            0.32,
            2.064,
            "fingeringSaxLH3rdFingerTrill"
        ],
        [
            0.712,
            3.868,
            0.696,
            3.676,
            "fingeringSaxLHEFlatPalmTrill"
        ],
        [
            0.8,
            3.644,
            0.784,
            3.452,
            "fingeringSaxLHDPalmTrill"
        ],
        [
            0.664,
            3.536,
            0.648,
            3.34,
            "fingeringSaxLHFPalmTrill"
        ],
        [
            0.68,
            1.988,
            0.548,
            1.868,
            "fingeringSaxLHGSharpTrill"
        ],
        [
            0.7,
            1.824,
            0.684,
            1.676,
            "fingeringSaxLHLowCSharpTrill"
        ],
        [
            0.552,
            1.824,
            0.536,
            1.676,
            "fingeringSaxLHLowBTrill"
        ],
        [
            0.68,
            1.632,
            0.548,
            1.512,
            "fingeringSaxLHLowBFlatTrill"
        ],
        [
            0.072,
            1.46,
            0.056,
            1.264,
            "fingeringSaxRHESideTrill"
        ],
        [
            0.072,
            1.224,
            0.056,
            1.028,
            "fingeringSaxRHCSideTrill"
        ],
        [
            0.072,
            0.992,
            0.056,
            0.796,
            "fingeringSaxRHBFlatSideTrill"
        ],
        [
            0.2,
            1.108,
            0.184,
            0.804,
            "fingeringSaxRHHighFSharpTrill"
        ],
        [
            0.516,
            1.304,
            0.32,
            1.012,
            "fingeringSaxRH1stFingerTrill"
        ],
        [
            0.516,
            0.896,
            0.32,
            0.604,
            "fingeringSaxRH2ndFingerTrill"
        ],
        [
            0.22,
            0.628,
            0.204,
            0.46,
            "fingeringSaxRHFSharpAlternateTrill"
        ],
        [
            0.516,
            0.488,
            0.32,
            0.196,
            "fingeringSaxRH3rdFingerTrill"
        ],
        [
            0.232,
            0.244,
            0.156,
            0.096,
            "fingeringSaxRHLowEFlatTrill"
        ],
        [
            0.144,
            0.18,
            0.068,
            0.028,
            "fingeringSaxRHLowCTrill"
        ],
        [
            0.184,
            3.564,
            0.048,
            3.416,
            "fingeringSaxBariLowATrill"
        ],
        [
            1.556,
            3.992,
            0.0,
            0.0,
            "fingeringRecChart"
        ],
        [
            0.512,
            3.972,
            0.02,
            3.48,
            "fingeringRecLHThumbClosed"
        ],
        [
            1.248,
            3.972,
            0.752,
            3.48,
            "fingeringRecLH1stFingerClosed"
        ],
        [
            1.248,
            3.272,
            0.752,
            2.78,
            "fingeringRecLH2ndFingerClosed"
        ],
        [
            1.248,
            2.568,
            0.752,
            2.076,
            "fingeringRecLH3rdFingerClosed"
        ],
        [
            1.248,
            1.648,
            0.752,
            1.156,
            "fingeringRecRH1stFingerClosed"
        ],
        [
            0.944,
            0.936,
            0.6,
            0.596,
            "fingeringRecRH1stDoubleHoleLeftClosed"
        ],
        [
            1.404,
            0.936,
            1.064,
            0.596,
            "fingeringRecRH1stDoubleHoleRightClosed"
        ],
        [
            0.944,
            0.36,
            0.6,
            0.02,
            "fingeringRecRH2ndDoubleHoleLeftClosed"
        ],
        [
            1.404,
            0.36,
            1.064,
            0.02,
            "fingeringRecRH2ndDoubleHoleRightClosed"
        ],
        [
            0.268,
            3.972,
            0.02,
            3.48,
            "fingeringRecLHThumbHalfClosedLeft"
        ],
        [
            1.0,
            3.972,
            0.752,
            3.48,
            "fingeringRecLH1stFingerHalfClosedLeft"
        ],
        [
            1.0,
            3.268,
            0.752,
            2.776,
            "fingeringRecLH2ndFingerHalfClosedLeft"
        ],
        [
            1.0,
            2.564,
            0.752,
            2.072,
            "fingeringRecLH3rdFingerHalfClosedLeft"
        ],
        [
            1.0,
            1.644,
            0.752,
            1.152,
            "fingeringRecRH1stFingerHalfClosedLeft"
        ],
        [
            0.772,
            0.936,
            0.6,
            0.596,
            "fingeringRecRH1stDoubleHoleLeftHalfClosedLeft"
        ],
        [
            1.236,
            0.936,
            1.064,
            0.596,
            "fingeringRecRH1stDoubleHoleRightHalfClosedLeft"
        ],
        [
            0.772,
            0.36,
            0.6,
            0.016,
            "fingeringRecRH2ndDoubleHoleLeftHalfClosedLeft"
        ],
        [
            1.236,
            0.36,
            1.064,
            0.02,
            "fingeringRecRH2ndDoubleHoleRightHalfClosedLeft"
        ],
        [
            0.512,
            3.972,
            0.268,
            3.48,
            "fingeringRecLHThumbHalfClosedRight"
        ],
        [
            1.244,
            3.972,
            1.0,
            3.48,
            "fingeringRecLH1stFingerHalfClosedRight"
        ],
        [
            1.244,
            3.264,
            1.0,
            2.772,
            "fingeringRecLH2ndFingerHalfClosedRight"
        ],
        [
            1.244,
            2.568,
            1.0,
            2.076,
            "fingeringRecLH3rdFingerHalfClosedRight"
        ],
        [
            1.244,
            1.644,
            1.0,
            1.152,
            "fingeringRecRH1stFingerHalfClosedRight"
        ],
        [
            0.944,
            0.936,
            0.772,
            0.596,
            "fingeringRecRH1stDoubleHoleLeftHalfClosedRight"
        ],
        [
            1.404,
            0.936,
            1.232,
            0.596,
            "fingeringRecRH1stDoubleHoleRightHalfClosedRight"
        ],
        [
            0.944,
            0.36,
            0.772,
            0.02,
            "fingeringRecRH2ndDoubleHoleLeftHalfClosedRight"
        ],
        [
            1.404,
            0.36,
            1.232,
            0.02,
            "fingeringRecRH2ndDoubleHoleRightHalfClosedRight"
        ],
        [
            0.14,
            3.94,
            0.016,
            3.512,
            "fingeringRecLHThumbQuarterClosedLeft"
        ],
        [
            0.876,
            3.94,
            0.752,
            3.512,
            "fingeringRecLH1stFingerQuarterClosedLeft"
        ],
        [
            0.876,
            3.236,
            0.752,
            2.808,
            "fingeringRecLH2ndFingerQuarterClosedLeft"
        ],
        [
            0.876,
            2.532,
            0.752,
            2.104,
            "fingeringRecLH3rdFingerQuarterClosedLeft"
        ],
        [
            0.876,
            1.616,
            0.752,
            1.188,
            "fingeringRecRH1stFingerQuarterClosedLeft"
        ],
        [
            0.688,
            0.912,
            0.6,
            0.62,
            "fingeringRecRH1stDoubleHoleLeftQuarterClosedLeft"
        ],
        [
            1.148,
            0.912,
            1.064,
            0.62,
            "fingeringRecRH1stDoubleHoleRightQuarterClosedLeft"
        ],
        [
            0.688,
            0.336,
            0.6,
            0.04,
            "fingeringRecRH2ndDoubleHoleLeftQuarterClosedLeft"
        ],
        [
            1.148,
            0.34,
            1.064,
            0.044,
            "fingeringRecRH2ndDoubleHoleRightQuarterClosedLeft"
        ],
        [
            0.512,
            3.94,
            0.388,
            3.512,
            "fingeringRecLHThumbQuarterClosedRight"
        ],
        [
            1.244,
            3.94,
            1.124,
            3.512,
            "fingeringRecLH1stFingerQuarterClosedRight"
        ],
        [
            1.244,
            3.24,
            1.124,
            2.812,
            "fingeringRecLH2ndFingerQuarterClosedRight"
        ],
        [
            1.244,
            2.532,
            1.124,
            2.104,
            "fingeringRecLH3rdFingerQuarterClosedRight"
        ],
        [
            1.244,
            1.612,
            1.124,
            1.184,
            "fingeringRecRH1stFingerQuarterClosedRight"
        ],
        [
            0.944,
            0.916,
            0.856,
            0.62,
            "fingeringRecRH1stDoubleHoleLeftQuarterClosedRight"
        ],
        [
            1.404,
            0.916,
            1.32,
            0.62,
            "fingeringRecRH1stDoubleHoleRightQuarterClosedRight"
        ],
        [
            0.944,
            0.336,
            0.856,
            0.044,
            "fingeringRecRH2ndDoubleHoleLeftQuarterClosedRight"
        ],
        [
            1.404,
            0.336,
            1.32,
            0.044,
            "fingeringRecRH2ndDoubleHoleRightQuarterClosedRight"
        ],
        [
            0.544,
            4.0,
            -0.004,
            3.452,
            "fingeringRecLHThumbTrill"
        ],
        [
            1.276,
            4.0,
            0.724,
            3.452,
            "fingeringRecLH1stFingerTrill"
        ],
        [
            1.276,
            3.292,
            0.724,
            2.744,
            "fingeringRecLH2ndFingerTrill"
        ],
        [
            1.276,
            2.58,
            0.724,
            2.032,
            "fingeringRecLH3rdFingerTrill"
        ],
        [
            1.276,
            1.68,
            0.724,
            1.132,
            "fingeringRecRH1stFingerTrill"
        ],
        [
            0.976,
            0.972,
            0.552,
            0.548,
            "fingeringRecRH1stDoubleHoleLeftTrill"
        ],
        [
            1.444,
            0.972,
            1.02,
            0.548,
            "fingeringRecRH1stDoubleHoleRightTrill"
        ],
        [
            0.976,
            0.412,
            0.552,
            -0.008,
            "fingeringRecRH2ndDoubleHoleLeftTrill"
        ],
        [
            1.444,
            0.412,
            1.02,
            -0.008,
            "fingeringRecRH2ndDoubleHoleRightTrill"
        ],
        [
            3.944,
            2.452,
            0.0,
            0.0,
            "kodalyHandDo"
        ],
        [
            4.444,
            3.184,
            0.004,
            0.0,
            "kodalyHandRe"
        ],
        [
            4.996,
            1.684,
            0.0,
            0.0,
            "kodalyHandMi"
        ],
        [
            4.144,
            2.828,
            0.004,
            0.0,
            "kodalyHandFa"
        ],
        [
            4.648,
            2.108,
            0.004,
            0.0,
            "kodalyHandSo"
        ],
        [
            4.428,
            2.256,
            0.0,
            0.0,
            "kodalyHandLa"
        ],
        [
            4.204,
            2.548,
            0.004,
            0.0,
            "kodalyHandTi"
        ],
        [
            1.548,
            0.548,
            0.0,
            -0.548,
            "smnSharp"
        ],
        [
            1.548,
            0.548,
            0.0,
            -0.548,
            "smnSharpWhite"
        ],
        [
            1.576,
            0.548,
            0.0,
            -0.548,
            "smnFlat"
        ],
        [
            1.576,
            0.548,
            0.0,
            -0.548,
            "smnFlatWhite"
        ],
        [
            1.28,
            0.448,
            0.004,
            -0.448,
            "smnHistorySharp"
        ],
        [
            1.764,
            0.448,
            0.0,
            -0.448,
            "smnHistoryDoubleSharp"
        ],
        [
            2.168,
            0.448,
            0.004,
            -0.448,
            "smnHistoryFlat"
        ],
        [
            2.168,
            0.448,
            0.004,
            -0.448,
            "smnHistoryDoubleFlat"
        ],
        [
            0.908,
            0.44,
            0.0,
            -0.44,
            "smnNatural"
        ],
        [
            4.34,
            4.024,
            -0.02,
            -0.036,
            "miscDoNotPhotocopy"
        ],
        [
            4.508,
            4.512,
            -0.004,
            0.0,
            "miscDoNotCopy"
        ],
        [
            4.652,
            2.0,
            0.0,
            0.0,
            "miscEyeglasses"
        ],
        [
            0.412,
            3.988,
            0.0,
            0.0,
            "braceSmall"
        ],
        [
            0.268,
            3.992,
            0.0,
            0.004,
            "braceLarge"
        ],
        [
            0.24,
            3.988,
            0.0,
            0.0,
            "braceLarger"
        ],
        [
            0.36,
            4.084,
            0.0,
            0.004,
            "braceFlat"
        ],
        [
            3.088,
            3.148,
            0.0,
            0.0,
            "segnoJapanese"
        ],
        [
            3.828,
            3.6,
            0.0,
            -0.612,
            "codaJapanese"
        ],
        [
            2.664,
            4.404,
            0.004,
            -3.6,
            "gClef8vbParens"
        ],
        [
            3.404,
            1.044,
            0.0,
            -2.34,
            "fClefFrench"
        ],
        [
            4.164,
            1.092,
            0.0,
            -2.328,
            "fClef19thCentury"
        ],
        [
            3.452,
            2.564,
            0.0,
            -3.116,
            "cClefFrench"
        ],
        [
            1.168,
            3.0,
            0.0,
            1.0,
            "unpitchedPercussionClef1Alt"
        ],
        [
            2.164,
            6.064,
            -0.024,
            -1.984,
            "6stringTabClefTall"
        ],
        [
            1.948,
            5.064,
            0.0,
            -0.972,
            "6stringTabClefSerif"
        ],
        [
            1.272,
            4.364,
            0.0,
            -0.324,
            "4stringTabClefTall"
        ],
        [
            1.296,
            4.004,
            0.0,
            -0.012,
            "4stringTabClefSerif"
        ],
        [
            2.152,
            1.392,
            0.036,
            0.04,
            "noteDoubleWholeAlt"
        ],
        [
            0.96,
            0.0,
            0.0,
            -1.42,
            "flag8thUpStraight"
        ],
        [
            1.068,
            0.032,
            0.0,
            -2.192,
            "flag8thUpShort"
        ],
        [
            0.96,
            1.42,
            0.0,
            0.0,
            "flag8thDownStraight"
        ],
        [
            0.96,
            0.0,
            0.0,
            -2.22,
            "flag16thUpStraight"
        ],
        [
            1.056,
            0.048,
            0.0,
            -2.496,
            "flag16thUpShort"
        ],
        [
            0.96,
            2.22,
            0.0,
            0.0,
            "flag16thDownStraight"
        ],
        [
            0.96,
            0.812,
            0.0,
            -2.208,
            "flag32ndUpStraight"
        ],
        [
            1.056,
            0.884,
            0.0,
            -2.452,
            "flag32ndUpShort"
        ],
        [
            0.96,
            2.22,
            0.0,
            -0.8,
            "flag32ndDownStraight"
        ],
        [
            0.96,
            1.612,
            0.0,
            -2.208,
            "flag64thUpStraight"
        ],
        [
            1.056,
            1.612,
            0.0,
            -2.496,
            "flag64thUpShort"
        ],
        [
            0.96,
            2.508,
            0.0,
            -1.312,
            "flag64thDownStraight"
        ],
        [
            0.96,
            2.4,
            0.0,
            -2.22,
            "flag128thUpStraight"
        ],
        [
            1.056,
            2.364,
            0.0,
            -2.492,
            "flag128thUpShort"
        ],
        [
            0.96,
            2.22,
            0.0,
            -2.4,
            "flag128thDownStraight"
        ],
        [
            0.96,
            3.2,
            0.0,
            -2.22,
            "flag256thUpStraight"
        ],
        [
            1.056,
            3.152,
            0.0,
            -2.456,
            "flag256thUpShort"
        ],
        [
            0.96,
            2.22,
            0.0,
            -3.2,
            "flag256thDownStraight"
        ],
        [
            0.96,
            4.0,
            0.0,
            -2.22,
            "flag512thUpStraight"
        ],
        [
            1.056,
            3.796,
            0.0,
            -2.464,
            "flag512thUpShort"
        ],
        [
            0.96,
            2.22,
            0.0,
            -4.0,
            "flag512thDownStraight"
        ],
        [
            0.96,
            4.8,
            0.0,
            -2.22,
            "flag1024thUpStraight"
        ],
        [
            1.056,
            4.464,
            0.0,
            -2.456,
            "flag1024thUpShort"
        ],
        [
            0.96,
            2.22,
            0.0,
            -4.8,
            "flag1024thDownStraight"
        ],
        [
            1.052,
            1.772,
            0.004,
            -0.708,
            "accidentalFlatSmall"
        ],
        [
            0.76,
            1.364,
            0.0,
            -1.336,
            "accidentalNaturalSmall"
        ],
        [
            1.044,
            1.404,
            0.0,
            -1.396,
            "accidentalSharpSmall"
        ],
        [
            1.716,
            1.22,
            0.0,
            0.004,
            "articAccentAboveLarge"
        ],
        [
            1.716,
            0.0,
            0.0,
            -1.216,
            "articAccentBelowLarge"
        ],
        [
            0.896,
            2.128,
            0.0,
            -0.004,
            "caesuraSingleStroke"
        ],
        [
            1.0,
            0.4,
            0.0,
            0.0,
            "doubleTongueAboveNoSlur"
        ],
        [
            1.0,
            0.4,
            0.0,
            0.0,
            "doubleTongueBelowNoSlur"
        ],
        [
            1.532,
            0.4,
            0.0,
            0.0,
            "tripleTongueAboveNoSlur"
        ],
        [
            1.532,
            0.4,
            0.0,
            0.0,
            "tripleTongueBelowNoSlur"
        ],
        [
            2.404,
            1.768,
            0.0,
            0.0,
            "stringsChangeBowDirectionLiga"
        ],
        [
            0.8,
            1.2,
            0.0,
            0.0,
            "pluckedSnapPizzicatoBelowGerman"
        ],
        [
            0.8,
            1.2,
            0.0,
            0.0,
            "pluckedSnapPizzicatoAboveGerman"
        ],
        [
            3.644,
            2.232,
            0.004,
            -0.008,
            "keyboardPedalPedNoDot"
        ],
        [
            3.976,
            2.364,
            0.012,
            -0.02,
            "keyboardPedalSostNoDot"
        ],
        [
            4.488,
            1.484,
            0.0,
            -0.004,
            "harpMetalRodAlt"
        ],
        [
            3.924,
            2.648,
            0.0,
            0.0,
            "harpTuningKeyAlt"
        ],
        [
            7.26,
            1.672,
            0.0,
            0.0,
            "pictTambourineStockhausen"
        ],
        [
            1.264,
            4.108,
            0.0,
            0.0,
            "pictCastanetsSmithBrindle"
        ],
        [
            3.38,
            2.416,
            0.004,
            0.0,
            "pictSleighBellSmithBrindle"
        ],
        [
            2.872,
            2.188,
            0.008,
            0.0,
            "pictCowBellBerio"
        ],
        [
            1.364,
            3.256,
            0.0,
            0.0,
            "pictMaracaSmithBrindle"
        ],
        [
            1.82,
            3.016,
            0.0,
            1.0,
            "mensuralProportion4Old"
        ],
        [
            1.488,
            1.976,
            0.0,
            0.0,
            "stringsChangeBowDirectionImposed"
        ],
        [
            2.152,
            0.676,
            0.036,
            -0.676,
            "noteheadDoubleWholeAlt"
        ],
        [
            1.868,
            4.064,
            0.012,
            -0.06,
            "timeSig0Large"
        ],
        [
            0.988,
            4.0,
            0.0,
            0.0,
            "timeSig1Large"
        ],
        [
            1.908,
            4.0,
            -0.004,
            0.0,
            "timeSig2Large"
        ],
        [
            1.9,
            4.0,
            0.0,
            -0.06,
            "timeSig3Large"
        ],
        [
            1.968,
            4.0,
            0.0,
            0.0,
            "timeSig4Large"
        ],
        [
            1.912,
            4.0,
            0.0,
            -0.06,
            "timeSig5Large"
        ],
        [
            1.892,
            4.0,
            0.0,
            -0.06,
            "timeSig6Large"
        ],
        [
            1.9,
            4.0,
            0.0,
            0.0,
            "timeSig7Large"
        ],
        [
            1.908,
            4.0,
            0.0,
            -0.06,
            "timeSig8Large"
        ],
        [
            1.88,
            4.068,
            0.0,
            -0.06,
            "timeSig9Large"
        ],
        [
            1.204,
            0.908,
            0.0,
            0.22,
            "luteFingeringRHThirdAlt"
        ],
        [
            2.096,
            0.968,
            0.0,
            0.0,
            "luteFrench7thCourseStrikethru"
        ],
        [
            1.448,
            0.968,
            -0.352,
            -0.4,
            "luteFrench7thCourseUnderline"
        ],
        [
            1.104,
            0.968,
            0.0,
            0.0,
            "luteFrench7thCourseRight"
        ],
        [
            2.804,
            1.26,
            0.0,
            -0.116,
            "luteFrench8thCourseStrikethru"
        ],
        [
            2.208,
            1.24,
            0.0,
            -0.4,
            "luteFrench8thCourseUnderline"
        ],
        [
            2.12,
            1.24,
            0.0,
            -0.136,
            "luteFrench8thCourseRight"
        ],
        [
            3.244,
            1.26,
            0.0,
            -0.116,
            "luteFrench9thCourseStrikethru"
        ],
        [
            2.648,
            1.24,
            0.0,
            -0.4,
            "luteFrench9thCourseUnderline"
        ],
        [
            2.56,
            1.24,
            0.0,
            -0.136,
            "luteFrench9thCourseRight"
        ],
        [
            3.68,
            1.26,
            -0.004,
            -0.116,
            "luteFrench10thCourseStrikethru"
        ],
        [
            3.048,
            1.24,
            0.0,
            -0.4,
            "luteFrench10thCourseUnderline"
        ],
        [
            3.012,
            1.24,
            0.0,
            -0.136,
            "luteFrench10thCourseRight"
        ],
        [
            1.164,
            1.076,
            0.0,
            0.0,
            "luteFrenchFretCAlt"
        ],
        [
            0.776,
            2.304,
            0.0,
            0.0,
            "accdnPushAlt"
        ],
        [
            2.432,
            4.0,
            0.004,
            0.0,
            "repeatRightLeftThick"
        ],
        [
            1.72,
            1.004,
            0.0,
            -1.0,
            "timeSig0Small"
        ],
        [
            1.284,
            1.0,
            0.0,
            -1.004,
            "timeSig1Small"
        ],
        [
            1.624,
            1.024,
            0.0,
            -1.02,
            "timeSig2Small"
        ],
        [
            1.524,
            1.0,
            0.0,
            -1.0,
            "timeSig3Small"
        ],
        [
            1.772,
            1.0,
            0.0,
            -1.004,
            "timeSig4Small"
        ],
        [
            1.452,
            0.996,
            0.0,
            -0.992,
            "timeSig5Small"
        ],
        [
            1.576,
            1.0,
            0.0,
            -1.0,
            "timeSig6Small"
        ],
        [
            1.604,
            0.996,
            0.0,
            -1.0,
            "timeSig7Small"
        ],
        [
            1.584,
            1.036,
            0.0,
            -1.036,
            "timeSig8Small"
        ],
        [
            1.576,
            1.0,
            0.0,
            -1.0,
            "timeSig9Small"
        ],
        [
            2.732,
            0.676,
            0.0,
            -0.676,
            "noteheadDoubleWholeSmall"
        ],
        [
            1.836,
            0.544,
            0.0,
            -0.548,
            "noteheadWholeSmall"
        ],
        [
            1.364,
            0.58,
            0.0,
            -0.58,
            "noteheadHalfSmall"
        ],
        [
            1.408,
            0.552,
            0.0,
            -0.576,
            "noteheadBlackSmall"
        ],
        [
            1.74,
            1.12,
            -0.344,
            -0.536,
            "dynamicPianoSmall"
        ],
        [
            2.168,
            1.092,
            0.0,
            -0.044,
            "dynamicMezzoSmall"
        ],
        [
            1.78,
            1.828,
            -0.56,
            -0.664,
            "dynamicForteSmall"
        ],
        [
            1.436,
            1.148,
            0.0,
            0.0,
            "dynamicRinforzandoSmall"
        ],
        [
            0.9,
            1.144,
            0.004,
            0.004,
            "dynamicSforzandoSmall"
        ],
        [
            1.168,
            1.124,
            0.0,
            -0.016,
            "dynamicZSmall"
        ],
        [
            1.336,
            1.116,
            -0.148,
            -0.024,
            "dynamicNienteSmall"
        ],
        [
            2.664,
            4.284,
            0.0,
            -2.756,
            "gClefSmall"
        ],
        [
            2.804,
            1.028,
            -0.092,
            -2.508,
            "cClefSmall"
        ],
        [
            3.064,
            2.012,
            0.0,
            -2.012,
            "fClefSmall"
        ],
        [
            1.332,
            0.976,
            0.0,
            0.0,
            "articAccentAboveSmall"
        ],
        [
            1.332,
            0.0,
            0.0,
            -0.976,
            "articAccentBelowSmall"
        ],
        [
            0.488,
            0.488,
            0.0,
            0.0,
            "articStaccatoAboveSmall"
        ],
        [
            0.488,
            0.0,
            0.0,
            -0.488,
            "articStaccatoBelowSmall"
        ],
        [
            1.356,
            0.256,
            0.0,
            0.0,
            "articTenutoAboveSmall"
        ],
        [
            1.356,
            0.0,
            0.0,
            -0.256,
            "articTenutoBelowSmall"
        ],
        [
            0.528,
            1.18,
            0.0,
            0.0,
            "articStaccatissimoAboveSmall"
        ],
        [
            0.528,
            0.0,
            0.0,
            -1.18,
            "articStaccatissimoBelowSmall"
        ],
        [
            0.468,
            1.16,
            0.0,
            0.0,
            "articStaccatissimoWedgeAboveSmall"
        ],
        [
            0.468,
            0.0,
            0.0,
            -1.16,
            "articStaccatissimoWedgeBelowSmall"
        ],
        [
            0.256,
            1.16,
            0.0,
            0.0,
            "articStaccatissimoStrokeAboveSmall"
        ],
        [
            0.256,
            0.0,
            0.0,
            -1.16,
            "articStaccatissimoStrokeBelowSmall"
        ],
        [
            0.944,
            1.012,
            0.0,
            -0.004,
            "articMarcatoAboveSmall"
        ],
        [
            0.944,
            0.0,
            0.0,
            -1.016,
            "articMarcatoBelowSmall"
        ],
        [
            0.944,
            1.896,
            0.0,
            0.0,
            "articMarcatoStaccatoAboveSmall"
        ],
        [
            0.944,
            -0.004,
            0.0,
            -2.036,
            "articMarcatoStaccatoBelowSmall"
        ],
        [
            1.332,
            1.856,
            0.0,
            0.0,
            "articAccentStaccatoAboveSmall"
        ],
        [
            1.332,
            0.0,
            0.0,
            -1.792,
            "articAccentStaccatoBelowSmall"
        ],
        [
            1.356,
            1.128,
            0.0,
            0.0,
            "articTenutoStaccatoAboveSmall"
        ],
        [
            1.356,
            0.0,
            0.0,
            -1.144,
            "articTenutoStaccatoBelowSmall"
        ],
        [
            1.356,
            1.536,
            0.0,
            0.0,
            "articTenutoAccentAboveSmall"
        ],
        [
            1.356,
            0.0,
            0.0,
            -1.576,
            "articTenutoAccentBelowSmall"
        ],
        [
            1.072,
            0.076,
            0.0,
            -2.716,
            "flag8thUpSmall"
        ],
        [
            1.056,
            2.856,
            0.0,
            -0.092,
            "flag8thDownSmall"
        ],
        [
            1.144,
            0.072,
            0.0,
            -3.232,
            "flag16thUpSmall"
        ],
        [
            1.268,
            3.288,
            0.0,
            -0.076,
            "flag16thDownSmall"
        ],
        [
            1.144,
            0.888,
            0.0,
            -3.16,
            "flag32ndUpSmall"
        ],
        [
            1.268,
            3.212,
            0.0,
            -0.928,
            "flag32ndDownSmall"
        ],
        [
            1.148,
            1.688,
            0.0,
            -3.14,
            "flag64thUpSmall"
        ],
        [
            1.272,
            3.116,
            0.0,
            -1.756,
            "flag64thDownSmall"
        ],
        [
            1.148,
            2.456,
            0.0,
            -3.192,
            "flag128thUpSmall"
        ],
        [
            1.268,
            3.148,
            0.0,
            -2.56,
            "flag128thDownSmall"
        ],
        [
            1.148,
            3.18,
            0.0,
            -3.136,
            "flag256thUpSmall"
        ],
        [
            1.268,
            3.096,
            0.0,
            -3.284,
            "flag256thDownSmall"
        ],
        [
            1.148,
            3.936,
            0.0,
            -3.116,
            "flag512thUpSmall"
        ],
        [
            1.268,
            3.116,
            0.0,
            -4.04,
            "flag512thDownSmall"
        ],
        [
            1.148,
            4.684,
            0.0,
            -3.08,
            "flag102thUpSmall"
        ],
        [
            1.272,
            3.168,
            0.0,
            -4.8,
            "flag1024thDownSmall"
        ],
        [
            1.136,
            2.2,
            0.0,
            -2.2,
            "mensuralCclefVoid"
        ],
        [
            1.136,
            2.2,
            0.0,
            -2.2,
            "mensuralCclefBlack"
        ],
        [
            1.156,
            0.64,
            0.004,
            -1.656,
            "chantFclefHufnagel"
        ],
        [
            1.144,
            0.76,
            0.0,
            -0.752,
            "chantCclefHufnagel"
        ],
        [
            0.58,
            1.864,
            0.0,
            -0.352,
            "medRenFlatSoftBOld"
        ],
        [
            0.672,
            1.856,
            0.0,
            -0.404,
            "medRenFlatSoftBHufnagel"
        ],
        [
            1.644,
            1.748,
            0.0,
            -0.7,
            "accidentalDoubleFlatJoinedStems"
        ],
        [
            2.384,
            1.756,
            0.0,
            -0.7,
            "accidentalTripleFlatJoinedStems"
        ],
        [
            3.464,
            3.12,
            0.0,
            0.0,
            "pictXylBassPeinkofer"
        ],
        [
            3.224,
            1.592,
            0.0,
            0.0,
            "pictXylTenorPeinkofer"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictVibPeinkofer"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictVibMotorOffPeinkofer"
        ],
        [
            4.536,
            2.988,
            0.0,
            0.0,
            "pictLithophonePeinkofer"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictTubaphonePeinkofer"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictXylPeinkofer"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictGlspPeinkofer"
        ],
        [
            4.784,
            3.12,
            0.0,
            0.0,
            "pictMarPeinkofer"
        ],
        [
            4.46,
            0.752,
            0.0,
            0.0,
            "pictLotusFlutePeinkofer"
        ],
        [
            2.996,
            1.996,
            0.004,
            0.004,
            "pictTomTomChinesePeinkofer"
        ],
        [
            2.472,
            1.976,
            0.0,
            0.0,
            "pictTimpaniPeinkofer"
        ],
        [
            3.352,
            3.016,
            0.0,
            0.0,
            "pictBassDrumPeinkofer"
        ],
        [
            3.792,
            1.392,
            0.0,
            0.0,
            "pictBongosPeinkofer"
        ],
        [
            1.592,
            3.144,
            0.0,
            0.0,
            "pictCongaPeinkofer"
        ],
        [
            5.748,
            1.656,
            0.0,
            0.0,
            "pictTomTomPeinkofer"
        ],
        [
            3.792,
            1.2,
            0.0,
            0.0,
            "pictTimbalesPeinkofer"
        ],
        [
            4.252,
            1.656,
            0.0,
            0.0,
            "pictGuiroSevsay"
        ],
        [
            5.448,
            1.988,
            0.0,
            0.0,
            "pictGuiroPeinkofer"
        ],
        [
            3.136,
            2.136,
            0.0,
            0.0,
            "pictFlexatonePeinkofer"
        ],
        [
            4.848,
            1.8,
            0.0,
            -0.48,
            "pictMusicalSawPeinkofer"
        ],
        [
            2.72,
            1.048,
            -0.084,
            -3.544,
            "fClef5Below"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClef0Below"
        ],
        [
            2.66,
            4.38,
            -0.072,
            -2.624,
            "gClef10Below"
        ],
        [
            2.66,
            4.376,
            0.0,
            -2.628,
            "gClef11Below"
        ],
        [
            2.66,
            4.38,
            -0.072,
            -2.628,
            "gClef12Below"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.628,
            "gClef13Below"
        ],
        [
            2.66,
            4.38,
            -0.152,
            -2.628,
            "gClef14Below"
        ],
        [
            2.664,
            4.384,
            -0.028,
            -2.62,
            "gClef15Below"
        ],
        [
            2.672,
            4.384,
            -0.012,
            -2.624,
            "gClef16Below"
        ],
        [
            2.656,
            4.392,
            -0.06,
            -2.62,
            "gClef17Below"
        ],
        [
            3.16,
            4.86,
            0.004,
            -2.62,
            "gClef2Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClef2Below"
        ],
        [
            3.196,
            4.876,
            0.004,
            -2.62,
            "gClef3Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClef3Below"
        ],
        [
            3.164,
            4.84,
            0.004,
            -2.62,
            "gClef4Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClef4Below"
        ],
        [
            3.116,
            4.848,
            0.004,
            -2.62,
            "gClef5Above"
        ],
        [
            2.664,
            4.384,
            0.004,
            -2.62,
            "gClef5Below"
        ],
        [
            3.172,
            4.872,
            0.004,
            -2.62,
            "gClef6Above"
        ],
        [
            2.672,
            4.384,
            0.012,
            -2.62,
            "gClef6Below"
        ],
        [
            3.252,
            4.844,
            0.0,
            -2.624,
            "gClef7Above"
        ],
        [
            2.656,
            4.392,
            -0.004,
            -2.616,
            "gClef7Below"
        ],
        [
            3.26,
            4.844,
            0.004,
            -2.62,
            "gClef8Above"
        ],
        [
            2.66,
            4.376,
            0.0,
            -2.66,
            "gClef8Below"
        ],
        [
            3.12,
            4.844,
            0.004,
            -2.62,
            "gClef9Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClef9Below"
        ],
        [
            2.66,
            4.38,
            -0.072,
            -2.624,
            "gClefFlat10Below"
        ],
        [
            2.66,
            4.376,
            -0.032,
            -2.628,
            "gClefFlat11Below"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.628,
            "gClefFlat13Below"
        ],
        [
            2.66,
            4.38,
            -0.152,
            -2.628,
            "gClefFlat14Below"
        ],
        [
            2.664,
            4.384,
            -0.028,
            -2.62,
            "gClefFlat15Below"
        ],
        [
            2.676,
            4.384,
            -0.012,
            -2.624,
            "gClefFlat16Below"
        ],
        [
            2.66,
            4.376,
            0.0,
            -2.628,
            "gClefFlat1Below"
        ],
        [
            3.712,
            4.856,
            0.0,
            -2.624,
            "gClefFlat2Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClefFlat2Below"
        ],
        [
            3.74,
            4.876,
            0.004,
            -2.62,
            "gClefFlat3Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClefFlat3Below"
        ],
        [
            2.66,
            4.38,
            -0.116,
            -2.624,
            "gClefFlat4Below"
        ],
        [
            3.676,
            4.848,
            0.004,
            -2.62,
            "gClefFlat5Above"
        ],
        [
            3.708,
            4.872,
            0.004,
            -2.62,
            "gClefFlat6Above"
        ],
        [
            2.672,
            4.384,
            0.012,
            -2.62,
            "gClefFlat6Below"
        ],
        [
            3.748,
            4.848,
            0.004,
            -2.62,
            "gClefFlat7Above"
        ],
        [
            2.66,
            4.392,
            0.0,
            -2.616,
            "gClefFlat7Below"
        ],
        [
            3.788,
            4.844,
            0.004,
            -2.62,
            "gClefFlat8Above"
        ],
        [
            3.668,
            4.844,
            0.004,
            -2.62,
            "gClefFlat9Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.624,
            "gClefFlat9Below"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.828,
            "gClefNat2Below"
        ],
        [
            2.66,
            4.38,
            -0.072,
            -2.824,
            "gClefNatural10Below"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.828,
            "gClefNatural13Below"
        ],
        [
            2.656,
            4.392,
            -0.06,
            -2.82,
            "gClefNatural17Below"
        ],
        [
            3.652,
            4.86,
            0.004,
            -2.62,
            "gClefNatural2Above"
        ],
        [
            3.652,
            4.876,
            0.004,
            -2.62,
            "gClefNatural3Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.828,
            "gClefNatural3Below"
        ],
        [
            3.612,
            4.872,
            0.004,
            -2.62,
            "gClefNatural6Above"
        ],
        [
            2.672,
            4.384,
            0.012,
            -2.824,
            "gClefNatural6Below"
        ],
        [
            3.692,
            4.848,
            0.004,
            -2.62,
            "gClefNatural7Above"
        ],
        [
            3.584,
            4.844,
            0.004,
            -2.62,
            "gClefNatural9Above"
        ],
        [
            2.66,
            4.38,
            0.0,
            -2.828,
            "gClefNatural9Below"
        ],
        [
            2.676,
            4.38,
            -0.072,
            -2.904,
            "gClefSharp12Below"
        ],
        [
            3.52,
            4.928,
            0.004,
            -2.62,
            "gClefSharp1Above"
        ],
        [
            3.716,
            4.924,
            0.0,
            -2.624,
            "gClefSharp4Above"
        ],
        [
            2.664,
            4.384,
            -0.036,
            -2.936,
            "gClefSharp5Below"
        ],
        [
            1.376,
            0.564,
            0.0,
            -2.596,
            "mensuralFusaBlackStemDown"
        ],
        [
            1.376,
            2.596,
            0.0,
            -0.564,
            "mensuralFusaBlackStemUp"
        ],
        [
            1.368,
            0.56,
            0.0,
            -2.632,
            "mensuralFusaBlackVoidStemDown"
        ],
        [
            1.38,
            2.648,
            0.004,
            -0.564,
            "mensuralFusaBlackVoidStemUp"
        ],
        [
            1.372,
            0.564,
            0.0,
            -2.592,
            "mensuralFusaVoidStemDown"
        ],
        [
            1.372,
            2.592,
            0.0,
            -0.564,
            "mensuralFusaVoidStemUp"
        ],
        [
            1.328,
            0.564,
            0.0,
            -2.564,
            "mensuralLongaBlackStemDownLeft"
        ],
        [
            1.328,
            0.564,
            0.0,
            -2.564,
            "mensuralLongaBlackStemDownRight"
        ],
        [
            1.328,
            2.564,
            0.0,
            -0.564,
            "mensuralLongaBlackStemUpLeft"
        ],
        [
            1.328,
            2.564,
            0.0,
            -0.564,
            "mensuralLongaBlackStemUpRight"
        ],
        [
            1.332,
            0.564,
            0.0,
            -2.564,
            "mensuralLongaBlackVoidStemDownLeft"
        ],
        [
            1.332,
            0.564,
            0.0,
            -2.564,
            "mensuralLongaBlackVoidStemDownRight"
        ],
        [
            1.332,
            2.564,
            0.0,
            -0.564,
            "mensuralLongaBlackVoidStemUpLeft"
        ],
        [
            1.332,
            2.564,
            0.0,
            -0.564,
            "mensuralLongaBlackVoidStemUpRight"
        ],
        [
            1.328,
            0.564,
            0.0,
            -2.564,
            "mensuralLongaVoidStemDownLeft"
        ],
        [
            1.328,
            0.564,
            0.0,
            -2.564,
            "mensuralLongaVoidStemDownRight"
        ],
        [
            1.328,
            2.564,
            0.0,
            -0.564,
            "mensuralLongaVoidStemUpLeft"
        ],
        [
            1.328,
            2.564,
            0.0,
            -0.564,
            "mensuralLongaVoidStemUpRight"
        ],
        [
            3.128,
            0.564,
            0.0,
            -2.564,
            "mensuralMaximaBlackStemDownLeft"
        ],
        [
            3.128,
            0.564,
            0.0,
            -2.564,
            "mensuralMaximaBlackStemDownRight"
        ],
        [
            3.128,
            2.564,
            0.0,
            -0.564,
            "mensuralMaximaBlackStemUpLeft"
        ],
        [
            3.128,
            2.564,
            0.0,
            -0.564,
            "mensuralMaximaBlackStemUpRight"
        ],
        [
            3.16,
            0.564,
            0.0,
            -2.564,
            "mensuralMaximaBlackVoidStemDownLeft"
        ],
        [
            3.132,
            0.564,
            0.0,
            -2.564,
            "mensuralMaximaBlackVoidStemDownRight"
        ],
        [
            3.132,
            2.564,
            0.0,
            -0.564,
            "mensuralMaximaBlackVoidStemUpLeft"
        ],
        [
            3.132,
            2.564,
            0.0,
            -0.564,
            "mensuralMaximaBlackVoidStemUpRight"
        ],
        [
            3.128,
            0.564,
            0.0,
            -2.564,
            "mensuralMaximaVoidStemDownLeft"
        ],
        [
            3.128,
            0.564,
            0.0,
            -2.564,
            "mensuralMaximaVoidStemDownRight"
        ],
        [
            3.128,
            2.564,
            0.0,
            -0.564,
            "mensuralMaximaVoidStemUpLeft"
        ],
        [
            3.128,
            2.564,
            0.0,
            -0.564,
            "mensuralMaximaVoidStemUpRight"
        ],
        [
            1.128,
            0.564,
            0.0,
            -2.596,
            "mensuralMinimaBlackStemDown"
        ],
        [
            1.38,
            0.564,
            0.0,
            -2.596,
            "mensuralMinimaBlackStemDownExtendedFlag"
        ],
        [
            1.128,
            0.56,
            -0.248,
            -2.6,
            "mensuralMinimaBlackStemDownFlagLeft"
        ],
        [
            1.38,
            0.564,
            0.0,
            -2.596,
            "mensuralMinimaBlackStemDownFlagRight"
        ],
        [
            1.424,
            0.56,
            0.0,
            -2.6,
            "mensuralMinimaBlackStemDownFlaredFlag"
        ],
        [
            1.128,
            2.596,
            0.0,
            -0.564,
            "mensuralMinimaBlackStemUp"
        ],
        [
            1.38,
            2.596,
            0.0,
            -0.564,
            "mensuralMinimaBlackStemUpExtendedFlag"
        ],
        [
            1.128,
            2.596,
            -0.248,
            -0.564,
            "mensuralMinimaBlackStemUpFlagLeft"
        ],
        [
            1.38,
            2.596,
            0.0,
            -0.564,
            "mensuralMinimaBlackStemUpFlagRight"
        ],
        [
            1.424,
            2.596,
            0.0,
            -0.564,
            "mensuralMinimaBlackStemUpFlaredFlag"
        ],
        [
            1.128,
            0.56,
            0.0,
            -2.664,
            "mensuralMinimaBlackVoidStemDown"
        ],
        [
            1.384,
            0.564,
            0.0,
            -2.644,
            "mensuralMinimaBlackVoidStemDownExtendedFlag"
        ],
        [
            1.128,
            0.564,
            -0.248,
            -2.636,
            "mensuralMinimaBlackVoidStemDownFlagLeft"
        ],
        [
            1.38,
            0.564,
            0.0,
            -2.636,
            "mensuralMinimaBlackVoidStemDownFlagRight"
        ],
        [
            1.428,
            0.564,
            0.0,
            -2.644,
            "mensuralMinimaBlackVoidStemDownFlaredFlag"
        ],
        [
            1.128,
            2.648,
            0.0,
            -0.564,
            "mensuralMinimaBlackVoidStemUp"
        ],
        [
            1.376,
            2.624,
            0.0,
            -0.564,
            "mensuralMinimaBlackVoidStemUpExtendedFlag"
        ],
        [
            1.128,
            2.648,
            -0.248,
            -0.564,
            "mensuralMinimaBlackVoidStemUpFlagLeft"
        ],
        [
            1.376,
            2.648,
            0.0,
            -0.564,
            "mensuralMinimaBlackVoidStemUpFlagRight"
        ],
        [
            1.428,
            2.624,
            0.0,
            -0.564,
            "mensuralMinimaBlackVoidStemUpFlaredFlag"
        ],
        [
            1.128,
            0.564,
            0.0,
            -2.648,
            "mensuralMinimaVoidStemDown"
        ],
        [
            1.372,
            0.56,
            0.0,
            -2.596,
            "mensuralMinimaVoidStemDownExtendedFlag"
        ],
        [
            1.128,
            0.564,
            -0.248,
            -2.592,
            "mensuralMinimaVoidStemDownFlagLeft"
        ],
        [
            1.376,
            0.564,
            0.0,
            -2.592,
            "mensuralMinimaVoidStemDownFlagRight"
        ],
        [
            1.428,
            0.564,
            0.0,
            -2.624,
            "mensuralMinimaVoidStemDownFlaredFlag"
        ],
        [
            1.372,
            2.592,
            0.0,
            -0.564,
            "mensuralMinimaVoidStemUpExtendedFlag"
        ],
        [
            1.128,
            2.648,
            0.0,
            -0.564,
            "mensuralMinimaVoidStemUp"
        ],
        [
            1.128,
            2.592,
            -0.248,
            -0.564,
            "mensuralMinimaVoidStemUpFlagLeft"
        ],
        [
            1.376,
            2.592,
            0.0,
            -0.564,
            "mensuralMinimaVoidStemUpFlagRight"
        ],
        [
            1.428,
            2.624,
            0.0,
            -0.564,
            "mensuralMinimaVoidStemUpFlaredFlag"
        ],
        [
            1.372,
            0.56,
            0.0,
            -2.6,
            "mensuralSemiminimaBlackStemDown"
        ],
        [
            1.372,
            2.596,
            0.0,
            -0.564,
            "mensuralSemiminimaBlackStemUp"
        ],
        [
            1.372,
            0.564,
            0.0,
            -2.636,
            "mensuralSemiminimaBlackVoidStemDown"
        ],
        [
            1.372,
            2.648,
            0.004,
            -0.564,
            "mensuralSemiminimaBlackVoidStemUp"
        ],
        [
            1.368,
            0.564,
            0.0,
            -2.592,
            "mensuralSemiminimaVoidStemDown"
        ],
        [
            1.368,
            2.592,
            0.0,
            -0.564,
            "mensuralSemiminimaVoidStemUp"
        ],
        [
            2.156,
            3.252,
            0.008,
            -0.008,
            "ornamentTrillFlatAbove"
        ],
        [
            2.156,
            3.384,
            0.008,
            -0.008,
            "ornamentTrillNaturalAbove"
        ],
        [
            2.156,
            3.524,
            0.008,
            -0.008,
            "ornamentTrillSharpAbove"
        ],
        [
            1.828,
            2.692,
            0.0,
            0.0,
            "ornamentTurnFlatAbove"
        ],
        [
            1.828,
            2.692,
            0.0,
            -1.98,
            "ornamentTurnFlatAboveSharpBelow"
        ],
        [
            1.828,
            0.86,
            0.0,
            -1.708,
            "ornamentTurnFlatBelow"
        ],
        [
            1.828,
            2.824,
            0.0,
            0.0,
            "ornamentTurnNaturalAbove"
        ],
        [
            1.828,
            0.86,
            0.0,
            -1.988,
            "ornamentTurnNaturalBelow"
        ],
        [
            1.828,
            2.808,
            0.0,
            0.0,
            "ornamentTurnSharpAbove"
        ],
        [
            1.828,
            2.808,
            0.0,
            -1.708,
            "ornamentTurnSharpAboveFlatBelow"
        ],
        [
            1.828,
            0.86,
            0.0,
            -1.98,
            "ornamentTurnSharpBelow"
        ],
        [
            1.72,
            2.004,
            0.0,
            0.0,
            "timeSig0Denominator"
        ],
        [
            1.72,
            4.004,
            0.0,
            2.0,
            "timeSig0Numerator"
        ],
        [
            1.172,
            2.004,
            -0.004,
            0.0,
            "timeSig1Denominator"
        ],
        [
            1.172,
            4.004,
            -0.004,
            2.0,
            "timeSig1Numerator"
        ],
        [
            1.656,
            2.016,
            0.032,
            -0.028,
            "timeSig2Denominator"
        ],
        [
            1.656,
            4.016,
            0.032,
            1.972,
            "timeSig2Numerator"
        ],
        [
            1.54,
            1.996,
            0.016,
            -0.004,
            "timeSig3Denominator"
        ],
        [
            1.54,
            3.996,
            0.016,
            1.996,
            "timeSig3Numerator"
        ],
        [
            1.728,
            2.004,
            0.008,
            0.0,
            "timeSig4Denominator"
        ],
        [
            1.728,
            4.004,
            0.008,
            2.0,
            "timeSig4Numerator"
        ],
        [
            1.452,
            1.984,
            0.0,
            -0.004,
            "timeSig5Denominator"
        ],
        [
            1.452,
            3.984,
            0.0,
            1.996,
            "timeSig5Numerator"
        ],
        [
            1.572,
            2.004,
            -0.004,
            0.004,
            "timeSig6Denominator"
        ],
        [
            1.572,
            4.004,
            -0.004,
            2.004,
            "timeSig6Numerator"
        ],
        [
            1.604,
            1.996,
            0.0,
            0.0,
            "timeSig7Denominator"
        ],
        [
            1.604,
            3.996,
            0.0,
            2.0,
            "timeSig7Numerator"
        ],
        [
            1.56,
            2.036,
            -0.024,
            -0.036,
            "timeSig8Denominator"
        ],
        [
            1.56,
            4.036,
            -0.024,
            1.964,
            "timeSig8Numerator"
        ],
        [
            1.576,
            2.0,
            0.0,
            0.0,
            "timeSig9Denominator"
        ],
        [
            1.576,
            4.0,
            0.0,
            2.0,
            "timeSig9Numerator"
        ],
        [
            2.06,
            0.724,
            0.0,
            -0.724,
            "noteheadBlackParens"
        ],
        [
            1.976,
            0.724,
            0.0,
            -0.724,
            "noteheadHalfParens"
        ],
        [
            2.416,
            0.724,
            0.0,
            -0.724,
            "noteheadWholeParens"
        ],
        [
            3.644,
            0.724,
            0.0,
            -0.724,
            "noteheadDoubleWholeParens"
        ],
        [
            2.184,
            1.756,
            0.0,
            -1.004,
            "accidentalFlatParens"
        ],
        [
            2.16,
            1.364,
            0.0,
            -1.34,
            "accidentalNaturalParens"
        ],
        [
            2.24,
            1.4,
            0.0,
            -1.392,
            "accidentalSharpParens"
        ],
        [
            1.992,
            1.0,
            0.0,
            -1.004,
            "accidentalDoubleSharpParens"
        ],
        [
            2.972,
            1.748,
            0.0,
            -1.004,
            "accidentalDoubleFlatParens"
        ]
    ],
    "glyphsWithAlternates": {
        "4stringTabClef": {
            "alternates": [
                {
                    "codepoint": "U+F40D",
                    "name": "4stringTabClefTall"
                },
                {
                    "codepoint": "U+F40E",
                    "name": "4stringTabClefSerif"
                }
            ]
        },
        "6stringTabClef": {
            "alternates": [
                {
                    "codepoint": "U+F40B",
                    "name": "6stringTabClefTall"
                },
                {
                    "codepoint": "U+F40C",
                    "name": "6stringTabClefSerif"
                }
            ]
        },
        "accdnPush": {
            "alternates": [
                {
                    "codepoint": "U+F459",
                    "name": "accdnPushAlt"
                }
            ]
        },
        "accidentalDoubleFlat": {
            "alternates": [
                {
                    "codepoint": "U+F49F",
                    "name": "accidentalDoubleFlatJoinedStems"
                }
            ]
        },
        "accidentalFlat": {
            "alternates": [
                {
                    "codepoint": "U+F428",
                    "name": "accidentalFlatSmall"
                }
            ]
        },
        "accidentalNatural": {
            "alternates": [
                {
                    "codepoint": "U+F429",
                    "name": "accidentalNaturalSmall"
                }
            ]
        },
        "accidentalSharp": {
            "alternates": [
                {
                    "codepoint": "U+F42A",
                    "name": "accidentalSharpSmall"
                }
            ]
        },
        "accidentalTripleFlat": {
            "alternates": [
                {
                    "codepoint": "U+F4A0",
                    "name": "accidentalTripleFlatJoinedStems"
                }
            ]
        },
        "articAccentAbove": {
            "alternates": [
                {
                    "codepoint": "U+F42B",
                    "name": "articAccentAboveLarge"
                },
                {
                    "codepoint": "U+F473",
                    "name": "articAccentAboveSmall"
                }
            ]
        },
        "articAccentBelow": {
            "alternates": [
                {
                    "codepoint": "U+F42C",
                    "name": "articAccentBelowLarge"
                },
                {
                    "codepoint": "U+F474",
                    "name": "articAccentBelowSmall"
                }
            ]
        },
        "articAccentStaccatoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F483",
                    "name": "articAccentStaccatoAboveSmall"
                }
            ]
        },
        "articAccentStaccatoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F484",
                    "name": "articAccentStaccatoBelowSmall"
                }
            ]
        },
        "articMarcatoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F47F",
                    "name": "articMarcatoAboveSmall"
                }
            ]
        },
        "articMarcatoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F480",
                    "name": "articMarcatoBelowSmall"
                }
            ]
        },
        "articMarcatoStaccatoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F481",
                    "name": "articMarcatoStaccatoAboveSmall"
                }
            ]
        },
        "articMarcatoStaccatoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F482",
                    "name": "articMarcatoStaccatoBelowSmall"
                }
            ]
        },
        "articStaccatissimoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F479",
                    "name": "articStaccatissimoAboveSmall"
                }
            ]
        },
        "articStaccatissimoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F47A",
                    "name": "articStaccatissimoBelowSmall"
                }
            ]
        },
        "articStaccatissimoStrokeAbove": {
            "alternates": [
                {
                    "codepoint": "U+F47D",
                    "name": "articStaccatissimoStrokeAboveSmall"
                }
            ]
        },
        "articStaccatissimoStrokeBelow": {
            "alternates": [
                {
                    "codepoint": "U+F47E",
                    "name": "articStaccatissimoStrokeBelowSmall"
                }
            ]
        },
        "articStaccatissimoWedgeAbove": {
            "alternates": [
                {
                    "codepoint": "U+F47B",
                    "name": "articStaccatissimoWedgeAboveSmall"
                }
            ]
        },
        "articStaccatissimoWedgeBelow": {
            "alternates": [
                {
                    "codepoint": "U+F47C",
                    "name": "articStaccatissimoWedgeBelowSmall"
                }
            ]
        },
        "articStaccatoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F475",
                    "name": "articStaccatoAboveSmall"
                }
            ]
        },
        "articStaccatoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F476",
                    "name": "articStaccatoBelowSmall"
                }
            ]
        },
        "articTenutoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F477",
                    "name": "articTenutoAboveSmall"
                }
            ]
        },
        "articTenutoAccentAbove": {
            "alternates": [
                {
                    "codepoint": "U+F487",
                    "name": "articTenutoAccentAboveSmall"
                }
            ]
        },
        "articTenutoAccentBelow": {
            "alternates": [
                {
                    "codepoint": "U+F488",
                    "name": "articTenutoAccentBelowSmall"
                }
            ]
        },
        "articTenutoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F478",
                    "name": "articTenutoBelowSmall"
                }
            ]
        },
        "articTenutoStaccatoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F485",
                    "name": "articTenutoStaccatoAboveSmall"
                }
            ]
        },
        "articTenutoStaccatoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F486",
                    "name": "articTenutoStaccatoBelowSmall"
                }
            ]
        },
        "brace": {
            "alternates": [
                {
                    "codepoint": "U+F400",
                    "name": "braceSmall"
                },
                {
                    "codepoint": "U+F401",
                    "name": "braceLarge"
                },
                {
                    "codepoint": "U+F402",
                    "name": "braceLarger"
                },
                {
                    "codepoint": "U+F403",
                    "name": "braceFlat"
                }
            ]
        },
        "cClef": {
            "alternates": [
                {
                    "codepoint": "U+F409",
                    "name": "cClefFrench"
                },
                {
                    "codepoint": "U+F471",
                    "name": "cClefSmall"
                }
            ]
        },
        "caesura": {
            "alternates": [
                {
                    "codepoint": "U+F42D",
                    "name": "caesuraSingleStroke"
                }
            ]
        },
        "chantCclef": {
            "alternates": [
                {
                    "codepoint": "U+F49C",
                    "name": "chantCclefHufnagel"
                }
            ]
        },
        "chantFclef": {
            "alternates": [
                {
                    "codepoint": "U+F49B",
                    "name": "chantFclefHufnagel"
                }
            ]
        },
        "coda": {
            "alternates": [
                {
                    "codepoint": "U+F405",
                    "name": "codaJapanese"
                }
            ]
        },
        "doubleTongueAbove": {
            "alternates": [
                {
                    "codepoint": "U+F42E",
                    "name": "doubleTongueAboveNoSlur"
                }
            ]
        },
        "doubleTongueBelow": {
            "alternates": [
                {
                    "codepoint": "U+F42F",
                    "name": "doubleTongueBelowNoSlur"
                }
            ]
        },
        "dynamicForte": {
            "alternates": [
                {
                    "codepoint": "U+F46B",
                    "name": "dynamicForteSmall"
                }
            ]
        },
        "dynamicMezzo": {
            "alternates": [
                {
                    "codepoint": "U+F46A",
                    "name": "dynamicMezzoSmall"
                }
            ]
        },
        "dynamicNiente": {
            "alternates": [
                {
                    "codepoint": "U+F46F",
                    "name": "dynamicNienteSmall"
                }
            ]
        },
        "dynamicPiano": {
            "alternates": [
                {
                    "codepoint": "U+F469",
                    "name": "dynamicPianoSmall"
                }
            ]
        },
        "dynamicRinforzando": {
            "alternates": [
                {
                    "codepoint": "U+F46C",
                    "name": "dynamicRinforzandoSmall"
                }
            ]
        },
        "dynamicSforzando": {
            "alternates": [
                {
                    "codepoint": "U+F46D",
                    "name": "dynamicSforzandoSmall"
                }
            ]
        },
        "dynamicZ": {
            "alternates": [
                {
                    "codepoint": "U+F46E",
                    "name": "dynamicZSmall"
                }
            ]
        },
        "fClef": {
            "alternates": [
                {
                    "codepoint": "U+F407",
                    "name": "fClefFrench"
                },
                {
                    "codepoint": "U+F408",
                    "name": "fClef19thCentury"
                },
                {
                    "codepoint": "U+F472",
                    "name": "fClefSmall"
                }
            ]
        },
        "flag1024thDown": {
            "alternates": [
                {
                    "codepoint": "U+F427",
                    "name": "flag1024thDownStraight"
                },
                {
                    "codepoint": "U+F498",
                    "name": "flag1024thDownSmall"
                }
            ]
        },
        "flag1024thUp": {
            "alternates": [
                {
                    "codepoint": "U+F425",
                    "name": "flag1024thUpStraight"
                },
                {
                    "codepoint": "U+F426",
                    "name": "flag1024thUpShort"
                },
                {
                    "codepoint": "U+F497",
                    "name": "flag102thUpSmall"
                }
            ]
        },
        "flag128thDown": {
            "alternates": [
                {
                    "codepoint": "U+F41E",
                    "name": "flag128thDownStraight"
                },
                {
                    "codepoint": "U+F492",
                    "name": "flag128thDownSmall"
                }
            ]
        },
        "flag128thUp": {
            "alternates": [
                {
                    "codepoint": "U+F41C",
                    "name": "flag128thUpStraight"
                },
                {
                    "codepoint": "U+F41D",
                    "name": "flag128thUpShort"
                },
                {
                    "codepoint": "U+F491",
                    "name": "flag128thUpSmall"
                }
            ]
        },
        "flag16thDown": {
            "alternates": [
                {
                    "codepoint": "U+F415",
                    "name": "flag16thDownStraight"
                },
                {
                    "codepoint": "U+F48C",
                    "name": "flag16thDownSmall"
                }
            ]
        },
        "flag16thUp": {
            "alternates": [
                {
                    "codepoint": "U+F413",
                    "name": "flag16thUpStraight"
                },
                {
                    "codepoint": "U+F414",
                    "name": "flag16thUpShort"
                },
                {
                    "codepoint": "U+F48B",
                    "name": "flag16thUpSmall"
                }
            ]
        },
        "flag256thDown": {
            "alternates": [
                {
                    "codepoint": "U+F421",
                    "name": "flag256thDownStraight"
                },
                {
                    "codepoint": "U+F494",
                    "name": "flag256thDownSmall"
                }
            ]
        },
        "flag256thUp": {
            "alternates": [
                {
                    "codepoint": "U+F41F",
                    "name": "flag256thUpStraight"
                },
                {
                    "codepoint": "U+F420",
                    "name": "flag256thUpShort"
                },
                {
                    "codepoint": "U+F493",
                    "name": "flag256thUpSmall"
                }
            ]
        },
        "flag32ndDown": {
            "alternates": [
                {
                    "codepoint": "U+F418",
                    "name": "flag32ndDownStraight"
                },
                {
                    "codepoint": "U+F48E",
                    "name": "flag32ndDownSmall"
                }
            ]
        },
        "flag32ndUp": {
            "alternates": [
                {
                    "codepoint": "U+F416",
                    "name": "flag32ndUpStraight"
                },
                {
                    "codepoint": "U+F417",
                    "name": "flag32ndUpShort"
                },
                {
                    "codepoint": "U+F48D",
                    "name": "flag32ndUpSmall"
                }
            ]
        },
        "flag512thDown": {
            "alternates": [
                {
                    "codepoint": "U+F424",
                    "name": "flag512thDownStraight"
                },
                {
                    "codepoint": "U+F496",
                    "name": "flag512thDownSmall"
                }
            ]
        },
        "flag512thUp": {
            "alternates": [
                {
                    "codepoint": "U+F422",
                    "name": "flag512thUpStraight"
                },
                {
                    "codepoint": "U+F423",
                    "name": "flag512thUpShort"
                },
                {
                    "codepoint": "U+F495",
                    "name": "flag512thUpSmall"
                }
            ]
        },
        "flag64thDown": {
            "alternates": [
                {
                    "codepoint": "U+F41B",
                    "name": "flag64thDownStraight"
                },
                {
                    "codepoint": "U+F490",
                    "name": "flag64thDownSmall"
                }
            ]
        },
        "flag64thUp": {
            "alternates": [
                {
                    "codepoint": "U+F419",
                    "name": "flag64thUpStraight"
                },
                {
                    "codepoint": "U+F41A",
                    "name": "flag64thUpShort"
                },
                {
                    "codepoint": "U+F48F",
                    "name": "flag64thUpSmall"
                }
            ]
        },
        "flag8thDown": {
            "alternates": [
                {
                    "codepoint": "U+F412",
                    "name": "flag8thDownStraight"
                },
                {
                    "codepoint": "U+F48A",
                    "name": "flag8thDownSmall"
                }
            ]
        },
        "flag8thUp": {
            "alternates": [
                {
                    "codepoint": "U+F410",
                    "name": "flag8thUpStraight"
                },
                {
                    "codepoint": "U+F411",
                    "name": "flag8thUpShort"
                },
                {
                    "codepoint": "U+F489",
                    "name": "flag8thUpSmall"
                }
            ]
        },
        "gClef": {
            "alternates": [
                {
                    "codepoint": "U+F470",
                    "name": "gClefSmall"
                }
            ]
        },
        "gClef8vb": {
            "alternates": [
                {
                    "codepoint": "U+F406",
                    "name": "gClef8vbParens"
                }
            ]
        },
        "harpMetalRod": {
            "alternates": [
                {
                    "codepoint": "U+F437",
                    "name": "harpMetalRodAlt"
                }
            ]
        },
        "harpTuningKey": {
            "alternates": [
                {
                    "codepoint": "U+F438",
                    "name": "harpTuningKeyAlt"
                }
            ]
        },
        "keyboardPedalPed": {
            "alternates": [
                {
                    "codepoint": "U+F435",
                    "name": "keyboardPedalPedNoDot"
                }
            ]
        },
        "keyboardPedalSost": {
            "alternates": [
                {
                    "codepoint": "U+F436",
                    "name": "keyboardPedalSostNoDot"
                }
            ]
        },
        "luteFingeringRHThird": {
            "alternates": [
                {
                    "codepoint": "U+F44B",
                    "name": "luteFingeringRHThirdAlt"
                }
            ]
        },
        "luteFrench10thCourse": {
            "alternates": [
                {
                    "codepoint": "U+F455",
                    "name": "luteFrench10thCourseStrikethru"
                },
                {
                    "codepoint": "U+F456",
                    "name": "luteFrench10thCourseUnderline"
                },
                {
                    "codepoint": "U+F457",
                    "name": "luteFrench10thCourseRight"
                }
            ]
        },
        "luteFrench7thCourse": {
            "alternates": [
                {
                    "codepoint": "U+F44C",
                    "name": "luteFrench7thCourseStrikethru"
                },
                {
                    "codepoint": "U+F44D",
                    "name": "luteFrench7thCourseUnderline"
                },
                {
                    "codepoint": "U+F44E",
                    "name": "luteFrench7thCourseRight"
                }
            ]
        },
        "luteFrench8thCourse": {
            "alternates": [
                {
                    "codepoint": "U+F44F",
                    "name": "luteFrench8thCourseStrikethru"
                },
                {
                    "codepoint": "U+F450",
                    "name": "luteFrench8thCourseUnderline"
                },
                {
                    "codepoint": "U+F451",
                    "name": "luteFrench8thCourseRight"
                }
            ]
        },
        "luteFrench9thCourse": {
            "alternates": [
                {
                    "codepoint": "U+F452",
                    "name": "luteFrench9thCourseStrikethru"
                },
                {
                    "codepoint": "U+F453",
                    "name": "luteFrench9thCourseUnderline"
                },
                {
                    "codepoint": "U+F454",
                    "name": "luteFrench9thCourseRight"
                }
            ]
        },
        "luteFrenchFretC": {
            "alternates": [
                {
                    "codepoint": "U+F458",
                    "name": "luteFrenchFretCAlt"
                }
            ]
        },
        "medRenFlatSoftB": {
            "alternates": [
                {
                    "codepoint": "U+F49D",
                    "name": "medRenFlatSoftBOld"
                },
                {
                    "codepoint": "U+F49E",
                    "name": "medRenFlatSoftBHufnagel"
                }
            ]
        },
        "mensuralCclef": {
            "alternates": [
                {
                    "codepoint": "U+F499",
                    "name": "mensuralCclefVoid"
                },
                {
                    "codepoint": "U+F49A",
                    "name": "mensuralCclefBlack"
                }
            ]
        },
        "mensuralProportion4": {
            "alternates": [
                {
                    "codepoint": "U+F43E",
                    "name": "mensuralProportion4Old"
                }
            ]
        },
        "noteDoubleWhole": {
            "alternates": [
                {
                    "codepoint": "U+F40F",
                    "name": "noteDoubleWholeAlt"
                }
            ]
        },
        "noteheadBlack": {
            "alternates": [
                {
                    "codepoint": "U+F468",
                    "name": "noteheadBlackSmall"
                }
            ]
        },
        "noteheadDoubleWhole": {
            "alternates": [
                {
                    "codepoint": "U+F440",
                    "name": "noteheadDoubleWholeAlt"
                },
                {
                    "codepoint": "U+F465",
                    "name": "noteheadDoubleWholeSmall"
                }
            ]
        },
        "noteheadHalf": {
            "alternates": [
                {
                    "codepoint": "U+F467",
                    "name": "noteheadHalfSmall"
                }
            ]
        },
        "noteheadWhole": {
            "alternates": [
                {
                    "codepoint": "U+F466",
                    "name": "noteheadWholeSmall"
                }
            ]
        },
        "pictBassDrum": {
            "alternates": [
                {
                    "codepoint": "U+F4AD",
                    "name": "pictBassDrumPeinkofer"
                }
            ]
        },
        "pictBongos": {
            "alternates": [
                {
                    "codepoint": "U+F4AE",
                    "name": "pictBongosPeinkofer"
                }
            ]
        },
        "pictCastanets": {
            "alternates": [
                {
                    "codepoint": "U+F43A",
                    "name": "pictCastanetsSmithBrindle"
                }
            ]
        },
        "pictConga": {
            "alternates": [
                {
                    "codepoint": "U+F4AF",
                    "name": "pictCongaPeinkofer"
                }
            ]
        },
        "pictCowBell": {
            "alternates": [
                {
                    "codepoint": "U+F43C",
                    "name": "pictCowBellBerio"
                }
            ]
        },
        "pictFlexatone": {
            "alternates": [
                {
                    "codepoint": "U+F4B4",
                    "name": "pictFlexatonePeinkofer"
                }
            ]
        },
        "pictGlsp": {
            "alternates": [
                {
                    "codepoint": "U+F4A8",
                    "name": "pictGlspPeinkofer"
                }
            ]
        },
        "pictGuiro": {
            "alternates": [
                {
                    "codepoint": "U+F4B2",
                    "name": "pictGuiroSevsay"
                },
                {
                    "codepoint": "U+F4B3",
                    "name": "pictGuiroPeinkofer"
                }
            ]
        },
        "pictLithophone": {
            "alternates": [
                {
                    "codepoint": "U+F4A5",
                    "name": "pictLithophonePeinkofer"
                }
            ]
        },
        "pictLotusFlute": {
            "alternates": [
                {
                    "codepoint": "U+F4AA",
                    "name": "pictLotusFlutePeinkofer"
                }
            ]
        },
        "pictMar": {
            "alternates": [
                {
                    "codepoint": "U+F4A9",
                    "name": "pictMarPeinkofer"
                }
            ]
        },
        "pictMaraca": {
            "alternates": [
                {
                    "codepoint": "U+F43D",
                    "name": "pictMaracaSmithBrindle"
                }
            ]
        },
        "pictMusicalSaw": {
            "alternates": [
                {
                    "codepoint": "U+F4B5",
                    "name": "pictMusicalSawPeinkofer"
                }
            ]
        },
        "pictSleighBell": {
            "alternates": [
                {
                    "codepoint": "U+F43B",
                    "name": "pictSleighBellSmithBrindle"
                }
            ]
        },
        "pictTambourine": {
            "alternates": [
                {
                    "codepoint": "U+F439",
                    "name": "pictTambourineStockhausen"
                }
            ]
        },
        "pictTimbales": {
            "alternates": [
                {
                    "codepoint": "U+F4B1",
                    "name": "pictTimbalesPeinkofer"
                }
            ]
        },
        "pictTimpani": {
            "alternates": [
                {
                    "codepoint": "U+F4AC",
                    "name": "pictTimpaniPeinkofer"
                }
            ]
        },
        "pictTomTom": {
            "alternates": [
                {
                    "codepoint": "U+F4B0",
                    "name": "pictTomTomPeinkofer"
                }
            ]
        },
        "pictTomTomChinese": {
            "alternates": [
                {
                    "codepoint": "U+F4AB",
                    "name": "pictTomTomChinesePeinkofer"
                }
            ]
        },
        "pictTubaphone": {
            "alternates": [
                {
                    "codepoint": "U+F4A6",
                    "name": "pictTubaphonePeinkofer"
                }
            ]
        },
        "pictVib": {
            "alternates": [
                {
                    "codepoint": "U+F4A3",
                    "name": "pictVibPeinkofer"
                }
            ]
        },
        "pictVibMotorOff": {
            "alternates": [
                {
                    "codepoint": "U+F4A4",
                    "name": "pictVibMotorOffPeinkofer"
                }
            ]
        },
        "pictXyl": {
            "alternates": [
                {
                    "codepoint": "U+F4A7",
                    "name": "pictXylPeinkofer"
                }
            ]
        },
        "pictXylBass": {
            "alternates": [
                {
                    "codepoint": "U+F4A1",
                    "name": "pictXylBassPeinkofer"
                }
            ]
        },
        "pictXylTenor": {
            "alternates": [
                {
                    "codepoint": "U+F4A2",
                    "name": "pictXylTenorPeinkofer"
                }
            ]
        },
        "pluckedSnapPizzicatoAbove": {
            "alternates": [
                {
                    "codepoint": "U+F434",
                    "name": "pluckedSnapPizzicatoAboveGerman"
                }
            ]
        },
        "pluckedSnapPizzicatoBelow": {
            "alternates": [
                {
                    "codepoint": "U+F433",
                    "name": "pluckedSnapPizzicatoBelowGerman"
                }
            ]
        },
        "repeatRightLeft": {
            "alternates": [
                {
                    "codepoint": "U+F45A",
                    "name": "repeatRightLeftThick"
                }
            ]
        },
        "segno": {
            "alternates": [
                {
                    "codepoint": "U+F404",
                    "name": "segnoJapanese"
                }
            ]
        },
        "stringsChangeBowDirection": {
            "alternates": [
                {
                    "codepoint": "U+F432",
                    "name": "stringsChangeBowDirectionLiga"
                },
                {
                    "codepoint": "U+F43F",
                    "name": "stringsChangeBowDirectionImposed"
                }
            ]
        },
        "timeSig0": {
            "alternates": [
                {
                    "codepoint": "U+F441",
                    "name": "timeSig0Large"
                },
                {
                    "codepoint": "U+F45B",
                    "name": "timeSig0Small"
                }
            ]
        },
        "timeSig1": {
            "alternates": [
                {
                    "codepoint": "U+F442",
                    "name": "timeSig1Large"
                },
                {
                    "codepoint": "U+F45C",
                    "name": "timeSig1Small"
                }
            ]
        },
        "timeSig2": {
            "alternates": [
                {
                    "codepoint": "U+F443",
                    "name": "timeSig2Large"
                },
                {
                    "codepoint": "U+F45D",
                    "name": "timeSig2Small"
                }
            ]
        },
        "timeSig3": {
            "alternates": [
                {
                    "codepoint": "U+F444",
                    "name": "timeSig3Large"
                },
                {
                    "codepoint": "U+F45E",
                    "name": "timeSig3Small"
                }
            ]
        },
        "timeSig4": {
            "alternates": [
                {
                    "codepoint": "U+F445",
                    "name": "timeSig4Large"
                },
                {
                    "codepoint": "U+F45F",
                    "name": "timeSig4Small"
                }
            ]
        },
        "timeSig5": {
            "alternates": [
                {
                    "codepoint": "U+F446",
                    "name": "timeSig5Large"
                },
                {
                    "codepoint": "U+F460",
                    "name": "timeSig5Small"
                }
            ]
        },
        "timeSig6": {
            "alternates": [
                {
                    "codepoint": "U+F447",
                    "name": "timeSig6Large"
                },
                {
                    "codepoint": "U+F461",
                    "name": "timeSig6Small"
                }
            ]
        },
        "timeSig7": {
            "alternates": [
                {
                    "codepoint": "U+F448",
                    "name": "timeSig7Large"
                },
                {
                    "codepoint": "U+F462",
                    "name": "timeSig7Small"
                }
            ]
        },
        "timeSig8": {
            "alternates": [
                {
                    "codepoint": "U+F449",
                    "name": "timeSig8Large"
                },
                {
                    "codepoint": "U+F463",
                    "name": "timeSig8Small"
                }
            ]
        },
        "timeSig9": {
            "alternates": [
                {
                    "codepoint": "U+F44A",
                    "name": "timeSig9Large"
                },
                {
                    "codepoint": "U+F464",
                    "name": "timeSig9Small"
                }
            ]
        },
        "tripleTongueAbove": {
            "alternates": [
                {
                    "codepoint": "U+F430",
                    "name": "tripleTongueAboveNoSlur"
                }
            ]
        },
        "tripleTongueBelow": {
            "alternates": [
                {
                    "codepoint": "U+F431",
                    "name": "tripleTongueBelowNoSlur"
                }
            ]
        },
        "unpitchedPercussionClef1": {
            "alternates": [
                {
                    "codepoint": "U+F40A",
                    "name": "unpitchedPercussionClef1Alt"
                }
            ]
        }
    },
    "glyphsWithAnchors": {
        "flag1024thDown": {
            "stemDownSW": [
                0.0,
                -4.684
            ]
        },
        "flag1024thUp": {
            "stemUpNW": [
                0.0,
                4.448
            ]
        },
        "flag1024thUpShort": {
            "stemUpNW": [
                0.0,
                4.256
            ]
        },
        "flag128thDown": {
            "stemDownSW": [
                0.0,
                -2.332
            ]
        },
        "flag128thDownStraight": {
            "stemDownSW": [
                0.0,
                -2.4
            ]
        },
        "flag128thUp": {
            "stemUpNW": [
                0.0,
                2.216
            ]
        },
        "flag128thUpShort": {
            "stemUpNW": [
                0.0,
                2.076
            ]
        },
        "flag128thUpStraight": {
            "stemUpNW": [
                0.0,
                2.4
            ]
        },
        "flag16thDown": {
            "stemDownSW": [
                0.0,
                0.128
            ]
        },
        "flag16thUp": {
            "stemUpNW": [
                0.0,
                -0.088
            ]
        },
        "flag256thDown": {
            "stemDownSW": [
                0.0,
                -3.152
            ]
        },
        "flag256thDownStraight": {
            "stemDownSW": [
                0.0,
                -3.192
            ]
        },
        "flag256thUp": {
            "stemUpNW": [
                0.0,
                2.94
            ]
        },
        "flag256thUpShort": {
            "stemUpNW": [
                0.0,
                2.836
            ]
        },
        "flag256thUpStraight": {
            "stemUpNW": [
                0.0,
                3.192
            ]
        },
        "flag32ndDown": {
            "stemDownSW": [
                0.0,
                -0.708
            ]
        },
        "flag32ndDownStraight": {
            "stemDownSW": [
                0.0,
                -0.8
            ]
        },
        "flag32ndUp": {
            "stemUpNW": [
                0.0,
                0.66
            ]
        },
        "flag32ndUpShort": {
            "stemUpNW": [
                0.0,
                0.704
            ]
        },
        "flag32ndUpStraight": {
            "stemUpNW": [
                0.0,
                0.8
            ]
        },
        "flag512thDown": {
            "stemDownSW": [
                0.0,
                -3.912
            ]
        },
        "flag512thDownStraight": {
            "stemDownSW": [
                0.0,
                -4.004
            ]
        },
        "flag512thUp": {
            "stemUpNW": [
                0.0,
                3.7
            ]
        },
        "flag512thUpShort": {
            "stemUpNW": [
                0.0,
                3.54
            ]
        },
        "flag512thUpStraight": {
            "stemUpNW": [
                0.0,
                4.0
            ]
        },
        "flag64thDown": {
            "stemDownSW": [
                0.0,
                -1.532
            ]
        },
        "flag64thDownStraight": {
            "stemDownSW": [
                0.0,
                -1.32
            ]
        },
        "flag64thUp": {
            "stemUpNW": [
                0.0,
                1.456
            ]
        },
        "flag64thUpShort": {
            "stemUpNW": [
                0.0,
                1.392
            ]
        },
        "flag64thUpStraight": {
            "stemUpNW": [
                0.0,
                1.604
            ]
        },
        "flag8thDown": {
            "stemDownSW": [
                0.0,
                0.132
            ]
        },
        "flag8thUp": {
            "stemUpNW": [
                0.0,
                -0.048
            ]
        },
        "gClefLigatedNumberAbove": {
            "numeralBottom": [
                2.224,
                3.468
            ]
        },
        "gClefLigatedNumberBelow": {
            "numeralBottom": [
                1.052,
                -2.616
            ]
        },
        "noteABlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.432,
                0.188
            ]
        },
        "noteAFlatBlack": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.432,
                0.184
            ]
        },
        "noteAFlatHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteAHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteASharpBlack": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.432,
                0.184
            ]
        },
        "noteASharpHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteBBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteBFlatBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteBFlatHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteBHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteBSharpBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.428,
                0.192
            ]
        },
        "noteBSharpHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteCBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.432,
                0.192
            ]
        },
        "noteCFlatBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteCFlatHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteCHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteCSharpBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.428,
                0.192
            ]
        },
        "noteCSharpHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteDBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteDFlatBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteDFlatHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteDHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteDSharpBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteDSharpHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteDoBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.432,
                0.192
            ]
        },
        "noteDoHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteEBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.432,
                0.188
            ]
        },
        "noteEFlatBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteEFlatHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteEHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteESharpBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteESharpHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteEmptyBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.432,
                0.188
            ]
        },
        "noteEmptyHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteFBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.432,
                0.188
            ]
        },
        "noteFFlatBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.428,
                0.192
            ]
        },
        "noteFFlatHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteFHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteFSharpBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteFSharpHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteFaBlack": {
            "stemDownNW": [
                0.0,
                -0.18
            ],
            "stemUpSE": [
                1.432,
                0.196
            ]
        },
        "noteFaHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteGBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.432,
                0.192
            ]
        },
        "noteGFlatBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.432,
                0.192
            ]
        },
        "noteGFlatHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.44,
                0.192
            ]
        },
        "noteGHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteGSharpBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.428,
                0.188
            ]
        },
        "noteGSharpHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteHBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.432,
                0.192
            ]
        },
        "noteHHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteHSharpBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.432,
                0.192
            ]
        },
        "noteHSharpHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteLaBlack": {
            "stemDownNW": [
                0.0,
                -0.18
            ],
            "stemUpSE": [
                1.432,
                0.196
            ]
        },
        "noteLaHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteMiBlack": {
            "stemDownNW": [
                0.0,
                -0.18
            ],
            "stemUpSE": [
                1.432,
                0.196
            ]
        },
        "noteMiHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteReBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.432,
                0.192
            ]
        },
        "noteReHalf": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteShapeDiamondBlack": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.54,
                0.0
            ]
        },
        "noteShapeDiamondWhite": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.544,
                0.0
            ]
        },
        "noteShapeMoonBlack": {
            "stemDownNW": [
                0.0,
                0.068
            ],
            "stemUpSE": [
                1.596,
                0.068
            ]
        },
        "noteShapeMoonWhite": {
            "stemDownNW": [
                0.0,
                0.072
            ],
            "stemUpSE": [
                1.596,
                0.072
            ]
        },
        "noteShapeRoundBlack": {
            "stemDownNW": [
                0.0,
                -0.188
            ],
            "stemUpSE": [
                1.328,
                0.188
            ]
        },
        "noteShapeRoundWhite": {
            "stemDownNW": [
                0.0,
                -0.196
            ],
            "stemUpSE": [
                1.364,
                0.192
            ]
        },
        "noteShapeSquareBlack": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.616,
                0.56
            ]
        },
        "noteShapeSquareWhite": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.616,
                0.56
            ]
        },
        "noteShapeTriangleLeftBlack": {
            "stemDownNW": [
                0.0,
                0.56
            ],
            "stemUpSE": [
                1.62,
                0.56
            ]
        },
        "noteShapeTriangleLeftWhite": {
            "stemDownNW": [
                0.0,
                0.556
            ],
            "stemUpSE": [
                1.624,
                0.552
            ]
        },
        "noteShapeTriangleRightBlack": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.62,
                -0.56
            ]
        },
        "noteShapeTriangleRightWhite": {
            "stemDownNW": [
                0.0,
                -0.564
            ],
            "stemUpSE": [
                1.62,
                -0.564
            ]
        },
        "noteShapeTriangleRoundBlack": {
            "stemDownNW": [
                0.0,
                0.192
            ],
            "stemUpSE": [
                1.584,
                0.192
            ]
        },
        "noteShapeTriangleRoundWhite": {
            "stemDownNW": [
                0.004,
                0.184
            ],
            "stemUpSE": [
                1.588,
                0.184
            ]
        },
        "noteShapeTriangleUpBlack": {
            "stemDownNW": [
                0.0,
                -0.568
            ],
            "stemUpSE": [
                1.62,
                -0.568
            ]
        },
        "noteShapeTriangleUpWhite": {
            "stemDownNW": [
                0.0,
                -0.568
            ],
            "stemUpSE": [
                1.62,
                -0.568
            ]
        },
        "noteSiBlack": {
            "stemDownNW": [
                0.0,
                -0.18
            ],
            "stemUpSE": [
                1.432,
                0.196
            ]
        },
        "noteSiHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.44,
                0.196
            ]
        },
        "noteSoBlack": {
            "stemDownNW": [
                0.0,
                -0.18
            ],
            "stemUpSE": [
                1.432,
                0.196
            ]
        },
        "noteSoHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteTiBlack": {
            "stemDownNW": [
                0.0,
                -0.18
            ],
            "stemUpSE": [
                1.432,
                0.196
            ]
        },
        "noteTiHalf": {
            "stemDownNW": [
                0.0,
                -0.192
            ],
            "stemUpSE": [
                1.444,
                0.196
            ]
        },
        "noteheadBlack": {
            "stemDownNW": [
                0.0,
                -0.184
            ],
            "stemUpSE": [
                1.328,
                0.184
            ]
        },
        "noteheadCircleSlash": {
            "stemDownNW": [
                0.004,
                0.0
            ],
            "stemUpSE": [
                1.128,
                0.0
            ]
        },
        "noteheadCircleX": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.128,
                0.0
            ]
        },
        "noteheadCircleXHalf": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.144,
                0.0
            ]
        },
        "noteheadCircledBlack": {
            "stemDownNW": [
                0.088,
                -0.176
            ],
            "stemUpSE": [
                1.416,
                0.2
            ]
        },
        "noteheadCircledHalf": {
            "stemDownNW": [
                0.084,
                -0.176
            ],
            "stemUpSE": [
                1.448,
                0.172
            ]
        },
        "noteheadClusterHalf2nd": {
            "stemDownNW": [
                0.0,
                0.388
            ],
            "stemUpSE": [
                1.376,
                1.284
            ]
        },
        "noteheadClusterHalf3rd": {
            "stemDownNW": [
                0.0,
                0.388
            ],
            "stemUpSE": [
                1.376,
                1.784
            ]
        },
        "noteheadClusterHalfBottom": {
            "stemDownNW": [
                0.0,
                -0.208
            ]
        },
        "noteheadClusterHalfTop": {
            "stemUpSE": [
                1.376,
                0.18
            ]
        },
        "noteheadClusterQuarter2nd": {
            "stemDownNW": [
                0.0,
                0.624
            ],
            "stemUpSE": [
                1.42,
                1.028
            ]
        },
        "noteheadClusterQuarter3rd": {
            "stemDownNW": [
                0.0,
                0.824
            ],
            "stemUpSE": [
                1.544,
                1.328
            ]
        },
        "noteheadClusterQuarterBottom": {
            "stemDownNW": [
                0.0,
                -0.2
            ]
        },
        "noteheadClusterQuarterTop": {
            "stemUpSE": [
                1.34,
                0.18
            ]
        },
        "noteheadClusterRoundBlack": {
            "stemDownNW": [
                0.0,
                0.344
            ],
            "stemUpSE": [
                1.328,
                2.748
            ]
        },
        "noteheadClusterRoundWhite": {
            "stemDownNW": [
                0.008,
                0.304
            ],
            "stemUpSE": [
                1.496,
                2.676
            ]
        },
        "noteheadClusterSquareBlack": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.328,
                3.112
            ]
        },
        "noteheadClusterSquareWhite": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.328,
                3.112
            ]
        },
        "noteheadDiamondBlack": {
            "stemDownNW": [
                0.0,
                0.004
            ],
            "stemUpSE": [
                1.124,
                0.004
            ]
        },
        "noteheadDiamondBlackOld": {
            "stemDownNW": [
                0.0,
                -0.008
            ],
            "stemUpSE": [
                1.316,
                -0.02
            ]
        },
        "noteheadDiamondBlackWide": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.572,
                0.004
            ]
        },
        "noteheadDiamondClusterBlack2nd": {
            "stemDownNW": [
                0.0,
                0.576
            ],
            "stemUpSE": [
                1.18,
                1.092
            ]
        },
        "noteheadDiamondClusterBlack3rd": {
            "stemDownNW": [
                0.0,
                0.54
            ],
            "stemUpSE": [
                1.18,
                1.556
            ]
        },
        "noteheadDiamondClusterBlackBottom": {
            "stemDownNW": [
                0.0,
                0.216
            ]
        },
        "noteheadDiamondClusterBlackTop": {
            "stemUpSE": [
                1.372,
                -0.212
            ]
        },
        "noteheadDiamondClusterWhite2nd": {
            "stemDownNW": [
                0.0,
                0.576
            ],
            "stemUpSE": [
                1.18,
                1.092
            ]
        },
        "noteheadDiamondClusterWhite3rd": {
            "stemDownNW": [
                0.0,
                0.544
            ],
            "stemUpSE": [
                1.18,
                1.56
            ]
        },
        "noteheadDiamondClusterWhiteBottom": {
            "stemDownNW": [
                0.0,
                0.208
            ]
        },
        "noteheadDiamondClusterWhiteTop": {
            "stemUpSE": [
                1.38,
                -0.212
            ]
        },
        "noteheadDiamondHalf": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.136,
                0.0
            ]
        },
        "noteheadDiamondHalfFilled": {
            "stemDownNW": [
                -0.004,
                -0.004
            ],
            "stemUpSE": [
                1.308,
                -0.016
            ]
        },
        "noteheadDiamondHalfOld": {
            "stemDownNW": [
                0.0,
                -0.008
            ],
            "stemUpSE": [
                1.324,
                -0.016
            ]
        },
        "noteheadDiamondHalfWide": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.576,
                0.0
            ]
        },
        "noteheadDiamondOpen": {
            "stemDownNW": [
                0.0,
                0.028
            ],
            "stemUpSE": [
                1.296,
                -0.024
            ]
        },
        "noteheadDiamondWhite": {
            "stemDownNW": [
                0.0,
                0.004
            ],
            "stemUpSE": [
                1.124,
                0.004
            ]
        },
        "noteheadDiamondWhiteWide": {
            "stemDownNW": [
                0.0,
                0.004
            ],
            "stemUpSE": [
                1.572,
                0.004
            ]
        },
        "noteheadHalf": {
            "stemDownNW": [
                0.0,
                -0.196
            ],
            "stemUpSE": [
                1.364,
                0.192
            ]
        },
        "noteheadHalfWithX": {
            "stemDownNW": [
                0.0,
                -0.2
            ],
            "stemUpSE": [
                1.376,
                0.188
            ]
        },
        "noteheadHeavyX": {
            "stemDownNW": [
                0.0,
                -0.5
            ],
            "stemUpSE": [
                1.736,
                0.496
            ]
        },
        "noteheadHeavyXHat": {
            "stemDownNW": [
                0.0,
                -0.5
            ],
            "stemUpSE": [
                1.744,
                0.52
            ]
        },
        "noteheadLargeArrowDownBlack": {
            "stemDownNW": [
                0.0,
                1.0
            ],
            "stemUpSE": [
                1.328,
                1.0
            ]
        },
        "noteheadLargeArrowDownHalf": {
            "stemDownNW": [
                0.0,
                0.948
            ],
            "stemUpSE": [
                1.256,
                0.948
            ]
        },
        "noteheadLargeArrowUpBlack": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.328,
                -0.56
            ]
        },
        "noteheadLargeArrowUpHalf": {
            "stemDownNW": [
                -0.004,
                -0.496
            ],
            "stemUpSE": [
                1.256,
                -0.496
            ]
        },
        "noteheadMoonBlack": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.416,
                0.0
            ]
        },
        "noteheadMoonWhite": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.416,
                0.0
            ]
        },
        "noteheadPlusBlack": {
            "stemDownNW": [
                -0.004,
                0.0
            ],
            "stemUpSE": [
                1.124,
                0.0
            ]
        },
        "noteheadPlusHalf": {
            "stemDownNW": [
                0.0,
                -0.112
            ],
            "stemUpSE": [
                1.188,
                0.104
            ]
        },
        "noteheadRoundBlack": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.12,
                0.0
            ]
        },
        "noteheadRoundBlackLarge": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                2.12,
                0.064
            ]
        },
        "noteheadRoundBlackSlashed": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.12,
                0.0
            ]
        },
        "noteheadRoundBlackSlashedLarge": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                2.12,
                0.0
            ]
        },
        "noteheadRoundWhite": {
            "stemDownNW": [
                0.004,
                0.0
            ],
            "stemup": [
                1.124,
                0.0
            ]
        },
        "noteheadRoundWhiteLarge": {
            "stemDownNW": [
                0.004,
                0.06
            ],
            "stemUpSE": [
                2.124,
                0.06
            ]
        },
        "noteheadRoundWhiteSlashed": {
            "stemDownNW": [
                0.004,
                0.0
            ],
            "stemUpSE": [
                1.124,
                0.0
            ]
        },
        "noteheadRoundWhiteSlashedLarge": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                2.12,
                0.0
            ]
        },
        "noteheadRoundWhiteWithDot": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                1.12,
                0.0
            ]
        },
        "noteheadRoundWhiteWithDotLarge": {
            "stemDownNW": [
                0.0,
                0.06
            ],
            "stemUpSE": [
                2.12,
                0.06
            ]
        },
        "noteheadSlashDiamondWhite": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                2.0,
                0.0
            ]
        },
        "noteheadSlashHorizontalEnds": {
            "stemDownNW": [
                0.0,
                -1.0
            ],
            "stemUpSE": [
                2.12,
                1.0
            ]
        },
        "noteheadSlashHorizontalEndsMuted": {
            "stemDownNW": [
                0.0,
                -1.0
            ],
            "stemUpSE": [
                2.12,
                1.0
            ]
        },
        "noteheadSlashVerticalEnds": {
            "stemDownNW": [
                0.0,
                -0.664
            ],
            "stemUpSE": [
                1.46,
                0.656
            ]
        },
        "noteheadSlashVerticalEndsMuted": {
            "stemDownNW": [
                0.0,
                -0.664
            ],
            "stemUpSE": [
                1.46,
                0.656
            ]
        },
        "noteheadSlashVerticalEndsSmall": {
            "stemDownNW": [
                0.0,
                -0.256
            ],
            "stemUpSE": [
                0.732,
                0.244
            ]
        },
        "noteheadSlashWhiteHalf": {
            "stemDownNW": [
                0.0,
                -1.0
            ],
            "stemUpSE": [
                3.12,
                1.0
            ]
        },
        "noteheadSlashWhiteMuted": {
            "stemDownNW": [
                0.0,
                -1.0
            ],
            "stemUpSE": [
                3.12,
                1.0
            ]
        },
        "noteheadSlashX": {
            "stemDownNW": [
                0.0,
                -1.0
            ],
            "stemUpSE": [
                2.12,
                1.0
            ]
        },
        "noteheadSlashedBlack1": {
            "stemDownNW": [
                0.0,
                -0.2
            ],
            "stemUpSE": [
                1.328,
                0.176
            ]
        },
        "noteheadSlashedBlack2": {
            "stemDownNW": [
                0.0,
                -0.2
            ],
            "stemUpSE": [
                1.328,
                0.176
            ]
        },
        "noteheadSlashedHalf1": {
            "stemDownNW": [
                0.004,
                -0.24
            ],
            "stemUpSE": [
                1.364,
                0.144
            ]
        },
        "noteheadSlashedHalf2": {
            "stemDownNW": [
                0.004,
                -0.276
            ],
            "stemUpSE": [
                1.368,
                0.112
            ]
        },
        "noteheadSquareBlack": {
            "stemDownNW": [
                0.0,
                -0.564
            ],
            "stemUpSE": [
                1.416,
                0.564
            ]
        },
        "noteheadSquareBlackLarge": {
            "stemDownNW": [
                0.0,
                0.0
            ],
            "stemUpSE": [
                2.148,
                0.0
            ]
        },
        "noteheadSquareBlackWhite": {
            "stemDownNW": [
                0.0,
                -1.048
            ],
            "stemUpSE": [
                2.144,
                1.056
            ]
        },
        "noteheadSquareWhite": {
            "stemDownNW": [
                0.0,
                -0.568
            ],
            "stemUpSE": [
                1.416,
                0.56
            ]
        },
        "noteheadTriangleDownBlack": {
            "stemDownNW": [
                0.0,
                0.568
            ],
            "stemUpSE": [
                1.312,
                0.568
            ]
        },
        "noteheadTriangleDownHalf": {
            "stemDownNW": [
                0.0,
                0.5
            ],
            "stemUpSE": [
                1.26,
                0.5
            ]
        },
        "noteheadTriangleDownWhite": {
            "stemDownNW": [
                0.0,
                0.564
            ],
            "stemUpSE": [
                1.316,
                0.564
            ]
        },
        "noteheadTriangleLeftBlack": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.524,
                -0.56
            ]
        },
        "noteheadTriangleLeftWhite": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.524,
                -0.56
            ]
        },
        "noteheadTriangleRightBlack": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.524,
                0.572
            ]
        },
        "noteheadTriangleRightWhite": {
            "stemDownNW": [
                0.004,
                -0.56
            ],
            "stemUpSE": [
                1.528,
                0.572
            ]
        },
        "noteheadTriangleRoundDownBlack": {
            "stemDownNW": [
                0.0,
                0.36
            ],
            "stemUpSE": [
                1.272,
                0.36
            ]
        },
        "noteheadTriangleRoundDownWhite": {
            "stemDownNW": [
                0.0,
                0.356
            ],
            "stemUpSE": [
                1.272,
                0.356
            ]
        },
        "noteheadTriangleUpBlack": {
            "stemDownNW": [
                0.0,
                -0.56
            ],
            "stemUpSE": [
                1.312,
                -0.56
            ]
        },
        "noteheadTriangleUpHalf": {
            "stemDownNW": [
                -0.004,
                -0.512
            ],
            "stemUpSE": [
                1.256,
                -0.512
            ]
        },
        "noteheadTriangleUpRightBlack": {
            "stemDownNW": [
                0.0,
                0.568
            ],
            "stemUpSE": [
                1.524,
                0.568
            ]
        },
        "noteheadTriangleUpRightWhite": {
            "stemDownNW": [
                0.0,
                0.568
            ],
            "stemUpSE": [
                1.524,
                0.568
            ]
        },
        "noteheadTriangleUpWhite": {
            "stemDownNW": [
                0.0,
                -0.564
            ],
            "stemUpSE": [
                1.316,
                -0.564
            ]
        },
        "noteheadVoidWithX": {
            "stemDownNW": [
                -0.004,
                -0.192
            ],
            "stemUpSE": [
                1.484,
                0.192
            ]
        },
        "noteheadXBlack": {
            "stemDownNW": [
                0.0,
                -0.516
            ],
            "stemUpSE": [
                1.32,
                0.496
            ]
        },
        "noteheadXHalf": {
            "stemDownNW": [
                0.004,
                -0.464
            ],
            "stemUpSE": [
                1.516,
                0.464
            ]
        },
        "noteheadXOrnate": {
            "stemDownNW": [
                0.0,
                -0.312
            ],
            "stemUpSE": [
                0.988,
                0.316
            ]
        }
    },
    "ligatures": {
        "accidentalDoubleFlatParens": {
            "codepoint": "U+F55D",
            "componentGlyphs": [
                "accidentalParensLeft",
                "accidentalDoubleFlat",
                "accidentalParensRight"
            ]
        },
        "accidentalDoubleSharpParens": {
            "codepoint": "U+F55C",
            "componentGlyphs": [
                "accidentalParensLeft",
                "accidentalDoubleSharp",
                "accidentalParensRight"
            ]
        },
        "accidentalFlatParens": {
            "codepoint": "U+F559",
            "componentGlyphs": [
                "accidentalParensLeft",
                "accidentalFlat",
                "accidentalParensRight"
            ]
        },
        "accidentalNaturalParens": {
            "codepoint": "U+F55A",
            "componentGlyphs": [
                "accidentalParensLeft",
                "accidentalNatural",
                "accidentalParensRight"
            ]
        },
        "accidentalSharpParens": {
            "codepoint": "U+F55B",
            "componentGlyphs": [
                "accidentalParensLeft",
                "accidentalSharp",
                "accidentalParensRight"
            ]
        },
        "fClef5Below": {
            "codepoint": "U+F4B6",
            "componentGlyphs": [
                "fClef",
                "tuplet5"
            ]
        },
        "gClef0Below": {
            "codepoint": "U+F4B7",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet0"
            ]
        },
        "gClef10Below": {
            "codepoint": "U+F4B8",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet0"
            ]
        },
        "gClef11Below": {
            "codepoint": "U+F4B9",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet1"
            ]
        },
        "gClef12Below": {
            "codepoint": "U+F4BA",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet2"
            ]
        },
        "gClef13Below": {
            "codepoint": "U+F4BB",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet3"
            ]
        },
        "gClef14Below": {
            "codepoint": "U+F4BC",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet4"
            ]
        },
        "gClef15Below": {
            "codepoint": "U+F4BD",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet5"
            ]
        },
        "gClef16Below": {
            "codepoint": "U+F4BE",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet6"
            ]
        },
        "gClef17Below": {
            "codepoint": "U+F4BF",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet7"
            ]
        },
        "gClef2Above": {
            "codepoint": "U+F4C0",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet2"
            ]
        },
        "gClef2Below": {
            "codepoint": "U+F4C1",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet2"
            ]
        },
        "gClef3Above": {
            "codepoint": "U+F4C2",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet3"
            ]
        },
        "gClef3Below": {
            "codepoint": "U+F4C3",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet3"
            ]
        },
        "gClef4Above": {
            "codepoint": "U+F4C4",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet4"
            ]
        },
        "gClef4Below": {
            "codepoint": "U+F4C5",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet4"
            ]
        },
        "gClef5Above": {
            "codepoint": "U+F4C6",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet5"
            ]
        },
        "gClef5Below": {
            "codepoint": "U+F4C7",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet5"
            ]
        },
        "gClef6Above": {
            "codepoint": "U+F4C8",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet6"
            ]
        },
        "gClef6Below": {
            "codepoint": "U+F4C9",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet6"
            ]
        },
        "gClef7Above": {
            "codepoint": "U+F4CA",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet7"
            ]
        },
        "gClef7Below": {
            "codepoint": "U+F4CB",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet7"
            ]
        },
        "gClef8Above": {
            "codepoint": "U+F4CC",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet8"
            ]
        },
        "gClef8Below": {
            "codepoint": "U+F4CD",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet8"
            ]
        },
        "gClef9Above": {
            "codepoint": "U+F4CE",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet9"
            ]
        },
        "gClef9Below": {
            "codepoint": "U+F4CF",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet9"
            ]
        },
        "gClefFlat10Below": {
            "codepoint": "U+F4D0",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet0",
                "accidentalFlat"
            ]
        },
        "gClefFlat11Below": {
            "codepoint": "U+F4D1",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet1",
                "accidentalFlat"
            ]
        },
        "gClefFlat13Below": {
            "codepoint": "U+F4D2",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet3",
                "accidentalFlat"
            ]
        },
        "gClefFlat14Below": {
            "codepoint": "U+F4D3",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet4",
                "accidentalFlat"
            ]
        },
        "gClefFlat15Below": {
            "codepoint": "U+F4D4",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet5",
                "accidentalFlat"
            ]
        },
        "gClefFlat16Below": {
            "codepoint": "U+F4D5",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet6",
                "accidentalFlat"
            ]
        },
        "gClefFlat1Below": {
            "codepoint": "U+F4D6",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalFlat",
                "tuplet1"
            ]
        },
        "gClefFlat2Above": {
            "codepoint": "U+F4D7",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet2",
                "accidentalFlat"
            ]
        },
        "gClefFlat2Below": {
            "codepoint": "U+F4D8",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalFlat",
                "tuplet2"
            ]
        },
        "gClefFlat3Above": {
            "codepoint": "U+F4D9",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet3",
                "accidentalFlat"
            ]
        },
        "gClefFlat3Below": {
            "codepoint": "U+F4DA",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalFlat",
                "tuplet3"
            ]
        },
        "gClefFlat4Below": {
            "codepoint": "U+F4DB",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalFlat",
                "tuplet4"
            ]
        },
        "gClefFlat5Above": {
            "codepoint": "U+F4DC",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet5",
                "accidentalFlat"
            ]
        },
        "gClefFlat6Above": {
            "codepoint": "U+F4DD",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet6",
                "accidentalFlat"
            ]
        },
        "gClefFlat6Below": {
            "codepoint": "U+F4DE",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalFlat",
                "tuplet6"
            ]
        },
        "gClefFlat7Above": {
            "codepoint": "U+F4DF",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet7",
                "accidentalFlat"
            ]
        },
        "gClefFlat7Below": {
            "codepoint": "U+F4E0",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalFlat",
                "tuplet7"
            ]
        },
        "gClefFlat8Above": {
            "codepoint": "U+F4E1",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet8",
                "accidentalFlat"
            ]
        },
        "gClefFlat9Above": {
            "codepoint": "U+F4E2",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet9",
                "accidentalFlat"
            ]
        },
        "gClefFlat9Below": {
            "codepoint": "U+F4E3",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalFlat",
                "tuplet9"
            ]
        },
        "gClefNat2Below": {
            "codepoint": "U+F4E4",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalNatural",
                "tuplet2"
            ]
        },
        "gClefNatural10Below": {
            "codepoint": "U+F4E5",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet0",
                "accidentalNatural"
            ]
        },
        "gClefNatural13Below": {
            "codepoint": "U+F4E6",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet3",
                "accidentalNatural"
            ]
        },
        "gClefNatural17Below": {
            "codepoint": "U+F4E7",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet7",
                "accidentalNatural"
            ]
        },
        "gClefNatural2Above": {
            "codepoint": "U+F4E8",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet2",
                "accidentalNatural"
            ]
        },
        "gClefNatural3Above": {
            "codepoint": "U+F4E9",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet3",
                "accidentalNatural"
            ]
        },
        "gClefNatural3Below": {
            "codepoint": "U+F4EA",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalNatural",
                "tuplet3"
            ]
        },
        "gClefNatural6Above": {
            "codepoint": "U+F4EB",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet6",
                "accidentalNatural"
            ]
        },
        "gClefNatural6Below": {
            "codepoint": "U+F4EC",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalNatural",
                "tuplet6"
            ]
        },
        "gClefNatural7Above": {
            "codepoint": "U+F4ED",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet7",
                "accidentalNatural"
            ]
        },
        "gClefNatural9Above": {
            "codepoint": "U+F4EE",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet9",
                "accidentalNatural"
            ]
        },
        "gClefNatural9Below": {
            "codepoint": "U+F4EF",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalNatural",
                "tuplet9"
            ]
        },
        "gClefSharp12Below": {
            "codepoint": "U+F4F0",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "tuplet1",
                "tuplet2",
                "accidentalSharp"
            ]
        },
        "gClefSharp1Above": {
            "codepoint": "U+F4F1",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet1",
                "accidentalSharp"
            ]
        },
        "gClefSharp4Above": {
            "codepoint": "U+F4F2",
            "componentGlyphs": [
                "gClefLigatedNumberAbove",
                "tuplet4",
                "accidentalSharp"
            ]
        },
        "gClefSharp5Below": {
            "codepoint": "U+F4F3",
            "componentGlyphs": [
                "gClefLigatedNumberBelow",
                "accidentalSharp",
                "tuplet5"
            ]
        },
        "mensuralFusaBlackStemDown": {
            "codepoint": "U+F4F4",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemDownFlagFusa"
            ]
        },
        "mensuralFusaBlackStemUp": {
            "codepoint": "U+F4F5",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemUpFlagFusa"
            ]
        },
        "mensuralFusaBlackVoidStemDown": {
            "codepoint": "U+F4F6",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemDownFlagFusa"
            ]
        },
        "mensuralFusaBlackVoidStemUp": {
            "codepoint": "U+F4F7",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemUpFlagFusa"
            ]
        },
        "mensuralFusaVoidStemDown": {
            "codepoint": "U+F4F8",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemDownFlagFusa"
            ]
        },
        "mensuralFusaVoidStemUp": {
            "codepoint": "U+F4F9",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemUpFlagFusa"
            ]
        },
        "mensuralLongaBlackStemDownLeft": {
            "codepoint": "U+F4FA",
            "componentGlyphs": [
                "mensuralCombStemDown",
                "mensuralNoteheadLongaBlack"
            ]
        },
        "mensuralLongaBlackStemDownRight": {
            "codepoint": "U+F4FB",
            "componentGlyphs": [
                "mensuralNoteheadLongaBlack",
                "mensuralCombStemDown"
            ]
        },
        "mensuralLongaBlackStemUpLeft": {
            "codepoint": "U+F4FC",
            "componentGlyphs": [
                "mensuralCombStemUp",
                "mensuralNoteheadLongaBlack"
            ]
        },
        "mensuralLongaBlackStemUpRight": {
            "codepoint": "U+F4FD",
            "componentGlyphs": [
                "mensuralNoteheadLongaBlack",
                "mensuralCombStemUp"
            ]
        },
        "mensuralLongaBlackVoidStemDownLeft": {
            "codepoint": "U+F4FE",
            "componentGlyphs": [
                "mensuralCombStemDown",
                "mensuralNoteheadLongaBlackVoid"
            ]
        },
        "mensuralLongaBlackVoidStemDownRight": {
            "codepoint": "U+F4FF",
            "componentGlyphs": [
                "mensuralNoteheadLongaBlackVoid",
                "mensuralCombStemDown"
            ]
        },
        "mensuralLongaBlackVoidStemUpLeft": {
            "codepoint": "U+F500",
            "componentGlyphs": [
                "mensuralCombStemUp",
                "mensuralNoteheadLongaBlackVoid"
            ]
        },
        "mensuralLongaBlackVoidStemUpRight": {
            "codepoint": "U+F501",
            "componentGlyphs": [
                "mensuralNoteheadLongaBlackVoid",
                "mensuralCombStemUp"
            ]
        },
        "mensuralLongaVoidStemDownLeft": {
            "codepoint": "U+F502",
            "componentGlyphs": [
                "mensuralCombStemDown",
                "mensuralNoteheadLongaVoid"
            ]
        },
        "mensuralLongaVoidStemDownRight": {
            "codepoint": "U+F503",
            "componentGlyphs": [
                "mensuralNoteheadLongaVoid",
                "mensuralCombStemDown"
            ]
        },
        "mensuralLongaVoidStemUpLeft": {
            "codepoint": "U+F504",
            "componentGlyphs": [
                "mensuralCombStemUp",
                "mensuralNoteheadLongaVoid"
            ]
        },
        "mensuralLongaVoidStemUpRight": {
            "codepoint": "U+F505",
            "componentGlyphs": [
                "mensuralNoteheadLongaVoid",
                "mensuralCombStemUp"
            ]
        },
        "mensuralMaximaBlackStemDownLeft": {
            "codepoint": "U+F506",
            "componentGlyphs": [
                "mensuralCombStemDown",
                "mensuralNoteheadMaximaBlack"
            ]
        },
        "mensuralMaximaBlackStemDownRight": {
            "codepoint": "U+F507",
            "componentGlyphs": [
                "mensuralNoteheadMaximaBlack",
                "mensuralCombStemDown"
            ]
        },
        "mensuralMaximaBlackStemUpLeft": {
            "codepoint": "U+F508",
            "componentGlyphs": [
                "mensuralCombStemUp",
                "mensuralNoteheadMaximaBlack"
            ]
        },
        "mensuralMaximaBlackStemUpRight": {
            "codepoint": "U+F509",
            "componentGlyphs": [
                "mensuralNoteheadMaximaBlack",
                "mensuralCombStemUp"
            ]
        },
        "mensuralMaximaBlackVoidStemDownLeft": {
            "codepoint": "U+F50A",
            "componentGlyphs": [
                "mensuralCombStemDown",
                "mensuralNoteheadMaximaBlackVoid"
            ]
        },
        "mensuralMaximaBlackVoidStemDownRight": {
            "codepoint": "U+F50B",
            "componentGlyphs": [
                "mensuralNoteheadMaximaBlackVoid",
                "mensuralCombStemDown"
            ]
        },
        "mensuralMaximaBlackVoidStemUpLeft": {
            "codepoint": "U+F50C",
            "componentGlyphs": [
                "mensuralCombStemUp",
                "mensuralNoteheadMaximaBlackVoid"
            ]
        },
        "mensuralMaximaBlackVoidStemUpRight": {
            "codepoint": "U+F50D",
            "componentGlyphs": [
                "mensuralNoteheadMaximaBlackVoid",
                "mensuralCombStemUp"
            ]
        },
        "mensuralMaximaVoidStemDownLeft": {
            "codepoint": "U+F50E",
            "componentGlyphs": [
                "mensuralCombStemDown",
                "mensuralNoteheadMaximaVoid"
            ]
        },
        "mensuralMaximaVoidStemDownRight": {
            "codepoint": "U+F50F",
            "componentGlyphs": [
                "mensuralNoteheadMaximaVoid",
                "mensuralCombStemDown"
            ]
        },
        "mensuralMaximaVoidStemUpLeft": {
            "codepoint": "U+F510",
            "componentGlyphs": [
                "mensuralCombStemUp",
                "mensuralNoteheadMaximaVoid"
            ]
        },
        "mensuralMaximaVoidStemUpRight": {
            "codepoint": "U+F511",
            "componentGlyphs": [
                "mensuralNoteheadMaximaVoid",
                "mensuralCombStemUp"
            ]
        },
        "mensuralMinimaBlackStemDown": {
            "codepoint": "U+F512",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemDown"
            ]
        },
        "mensuralMinimaBlackStemDownExtendedFlag": {
            "codepoint": "U+F513",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemDownFlagExtended"
            ]
        },
        "mensuralMinimaBlackStemDownFlagLeft": {
            "codepoint": "U+F514",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemDownFlagLeft"
            ]
        },
        "mensuralMinimaBlackStemDownFlagRight": {
            "codepoint": "U+F515",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemDownFlagRight"
            ]
        },
        "mensuralMinimaBlackStemDownFlaredFlag": {
            "codepoint": "U+F516",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemDownFlagFlared"
            ]
        },
        "mensuralMinimaBlackStemUp": {
            "codepoint": "U+F517",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemUp"
            ]
        },
        "mensuralMinimaBlackStemUpExtendedFlag": {
            "codepoint": "U+F518",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemUpFlagExtended"
            ]
        },
        "mensuralMinimaBlackStemUpFlagLeft": {
            "codepoint": "U+F519",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemUpFlagLeft"
            ]
        },
        "mensuralMinimaBlackStemUpFlagRight": {
            "codepoint": "U+F51A",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemUpFlagRight"
            ]
        },
        "mensuralMinimaBlackStemUpFlaredFlag": {
            "codepoint": "U+F51B",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemUpFlagFlared"
            ]
        },
        "mensuralMinimaBlackVoidStemDown": {
            "codepoint": "U+F51C",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemDown"
            ]
        },
        "mensuralMinimaBlackVoidStemDownExtendedFlag": {
            "codepoint": "U+F51D",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemDownFlagExtended"
            ]
        },
        "mensuralMinimaBlackVoidStemDownFlagLeft": {
            "codepoint": "U+F51E",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemDownFlagLeft"
            ]
        },
        "mensuralMinimaBlackVoidStemDownFlagRight": {
            "codepoint": "U+F51F",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemDownFlagRight"
            ]
        },
        "mensuralMinimaBlackVoidStemDownFlaredFlag": {
            "codepoint": "U+F520",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemDownFlagFlared"
            ]
        },
        "mensuralMinimaBlackVoidStemUp": {
            "codepoint": "U+F521",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemUp"
            ]
        },
        "mensuralMinimaBlackVoidStemUpExtendedFlag": {
            "codepoint": "U+F522",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemUpFlagExtended"
            ]
        },
        "mensuralMinimaBlackVoidStemUpFlagLeft": {
            "codepoint": "U+F523",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemUpFlagLeft"
            ]
        },
        "mensuralMinimaBlackVoidStemUpFlagRight": {
            "codepoint": "U+F524",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemUpFlagRight"
            ]
        },
        "mensuralMinimaBlackVoidStemUpFlaredFlag": {
            "codepoint": "U+F525",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemUpFlagFlared"
            ]
        },
        "mensuralMinimaVoidStemDown": {
            "codepoint": "U+F526",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemDown"
            ]
        },
        "mensuralMinimaVoidStemDownExtendedFlag": {
            "codepoint": "U+F527",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemDownFlagExtended"
            ]
        },
        "mensuralMinimaVoidStemDownFlagLeft": {
            "codepoint": "U+F528",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemDownFlagLeft"
            ]
        },
        "mensuralMinimaVoidStemDownFlagRight": {
            "codepoint": "U+F529",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemDownFlagRight"
            ]
        },
        "mensuralMinimaVoidStemDownFlaredFlag": {
            "codepoint": "U+F52A",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemDownFlagFlared"
            ]
        },
        "mensuralMinimaVoidStemUp": {
            "codepoint": "U+F52C",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemUp"
            ]
        },
        "mensuralMinimaVoidStemUpExtendedFlag": {
            "codepoint": "U+F52B",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemUpFlagExtended"
            ]
        },
        "mensuralMinimaVoidStemUpFlagLeft": {
            "codepoint": "U+F52D",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemUpFlagLeft"
            ]
        },
        "mensuralMinimaVoidStemUpFlagRight": {
            "codepoint": "U+F52E",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemUpFlagRight"
            ]
        },
        "mensuralMinimaVoidStemUpFlaredFlag": {
            "codepoint": "U+F52F",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemUpFlagFlared"
            ]
        },
        "mensuralSemiminimaBlackStemDown": {
            "codepoint": "U+F530",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemDownFlagSemiminima"
            ]
        },
        "mensuralSemiminimaBlackStemUp": {
            "codepoint": "U+F531",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlack",
                "mensuralCombStemUpFlagSemiminima"
            ]
        },
        "mensuralSemiminimaBlackVoidStemDown": {
            "codepoint": "U+F532",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemDownFlagSemiminima"
            ]
        },
        "mensuralSemiminimaBlackVoidStemUp": {
            "codepoint": "U+F533",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisBlackVoid",
                "mensuralCombStemUpFlagSemiminima"
            ]
        },
        "mensuralSemiminimaVoidStemDown": {
            "codepoint": "U+F534",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemDownFlagSemiminima"
            ]
        },
        "mensuralSemiminimaVoidStemUp": {
            "codepoint": "U+F535",
            "componentGlyphs": [
                "mensuralNoteheadSemibrevisVoid",
                "mensuralCombStemUpFlagSemiminima"
            ]
        },
        "noteheadBlackParens": {
            "codepoint": "U+F555",
            "componentGlyphs": [
                "noteheadParenthesisLeft",
                "noteheadBlack",
                "noteheadParenthesisRight"
            ]
        },
        "noteheadDoubleWholeParens": {
            "codepoint": "U+F558",
            "componentGlyphs": [
                "noteheadParenthesisLeft",
                "noteheadDoubleWhole",
                "noteheadParenthesisRight"
            ]
        },
        "noteheadHalfParens": {
            "codepoint": "U+F556",
            "componentGlyphs": [
                "noteheadParenthesisLeft",
                "noteheadHalf",
                "noteheadParenthesisRight"
            ]
        },
        "noteheadWholeParens": {
            "codepoint": "U+F557",
            "componentGlyphs": [
                "noteheadParenthesisLeft",
                "noteheadWhole",
                "noteheadParenthesisRight"
            ]
        },
        "ornamentTrillFlatAbove": {
            "codepoint": "U+F536",
            "componentGlyphs": [
                "accidentalFlat",
                "ornamentTrill"
            ]
        },
        "ornamentTrillNaturalAbove": {
            "codepoint": "U+F537",
            "componentGlyphs": [
                "accidentalNatural",
                "ornamentTrill"
            ]
        },
        "ornamentTrillSharpAbove": {
            "codepoint": "U+F538",
            "componentGlyphs": [
                "accidentalSharp",
                "ornamentTrill"
            ]
        },
        "ornamentTurnFlatAbove": {
            "codepoint": "U+F539",
            "componentGlyphs": [
                "accidentalFlat",
                "ornamentTurn"
            ]
        },
        "ornamentTurnFlatAboveSharpBelow": {
            "codepoint": "U+F53A",
            "componentGlyphs": [
                "accidentalFlat",
                "ornamentTurn",
                "accidentalSharp"
            ]
        },
        "ornamentTurnFlatBelow": {
            "codepoint": "U+F53B",
            "componentGlyphs": [
                "ornamentTurn",
                "accidentalFlat"
            ]
        },
        "ornamentTurnNaturalAbove": {
            "codepoint": "U+F53C",
            "componentGlyphs": [
                "accidentalNatural",
                "ornamentTurn"
            ]
        },
        "ornamentTurnNaturalBelow": {
            "codepoint": "U+F53D",
            "componentGlyphs": [
                "ornamentTurn",
                "accidentalNatural"
            ]
        },
        "ornamentTurnSharpAbove": {
            "codepoint": "U+F53E",
            "componentGlyphs": [
                "accidentalSharp",
                "ornamentTurn"
            ]
        },
        "ornamentTurnSharpAboveFlatBelow": {
            "codepoint": "U+F53F",
            "componentGlyphs": [
                "accidentalSharp",
                "ornamentTurn",
                "accidentalFlat"
            ]
        },
        "ornamentTurnSharpBelow": {
            "codepoint": "U+F540",
            "componentGlyphs": [
                "ornamentTurn",
                "accidentalSharp"
            ]
        },
        "timeSig0Denominator": {
            "codepoint": "U+F541",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig0"
            ]
        },
        "timeSig0Numerator": {
            "codepoint": "U+F542",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig0"
            ]
        },
        "timeSig1Denominator": {
            "codepoint": "U+F543",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig1"
            ]
        },
        "timeSig1Numerator": {
            "codepoint": "U+F544",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig1"
            ]
        },
        "timeSig2Denominator": {
            "codepoint": "U+F545",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig2"
            ]
        },
        "timeSig2Numerator": {
            "codepoint": "U+F546",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig2"
            ]
        },
        "timeSig3Denominator": {
            "codepoint": "U+F547",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig3"
            ]
        },
        "timeSig3Numerator": {
            "codepoint": "U+F548",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig3"
            ]
        },
        "timeSig4Denominator": {
            "codepoint": "U+F549",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig4"
            ]
        },
        "timeSig4Numerator": {
            "codepoint": "U+F54A",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig4"
            ]
        },
        "timeSig5Denominator": {
            "codepoint": "U+F54B",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig5"
            ]
        },
        "timeSig5Numerator": {
            "codepoint": "U+F54C",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig5"
            ]
        },
        "timeSig6Denominator": {
            "codepoint": "U+F54D",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig6"
            ]
        },
        "timeSig6Numerator": {
            "codepoint": "U+F54E",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig6"
            ]
        },
        "timeSig7Denominator": {
            "codepoint": "U+F54F",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig7"
            ]
        },
        "timeSig7Numerator": {
            "codepoint": "U+F550",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig7"
            ]
        },
        "timeSig8Denominator": {
            "codepoint": "U+F551",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig8"
            ]
        },
        "timeSig8Numerator": {
            "codepoint": "U+F552",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig8"
            ]
        },
        "timeSig9Denominator": {
            "codepoint": "U+F553",
            "componentGlyphs": [
                "timeSigCombDenominator",
                "timeSig9"
            ]
        },
        "timeSig9Numerator": {
            "codepoint": "U+F554",
            "componentGlyphs": [
                "timeSigCombNumerator",
                "timeSig9"
            ]
        }
    },
    "sets": {
        "ss01": {
            "glyphs": [
                {
                    "codepoint": "U+F428",
                    "name": "accidentalFlatSmall"
                },
                {
                    "codepoint": "U+F429",
                    "name": "accidentalNaturalSmall"
                },
                {
                    "codepoint": "U+F42A",
                    "name": "accidentalSharpSmall"
                },
                {
                    "codepoint": "U+F45B",
                    "name": "timeSig0Small"
                },
                {
                    "codepoint": "U+F45C",
                    "name": "timeSig1Small"
                },
                {
                    "codepoint": "U+F45D",
                    "name": "timeSig2Small"
                },
                {
                    "codepoint": "U+F45E",
                    "name": "timeSig3Small"
                },
                {
                    "codepoint": "U+F45F",
                    "name": "timeSig4Small"
                },
                {
                    "codepoint": "U+F460",
                    "name": "timeSig5Small"
                },
                {
                    "codepoint": "U+F461",
                    "name": "timeSig6Small"
                },
                {
                    "codepoint": "U+F462",
                    "name": "timeSig7Small"
                },
                {
                    "codepoint": "U+F463",
                    "name": "timeSig8Small"
                },
                {
                    "codepoint": "U+F464",
                    "name": "timeSig9Small"
                },
                {
                    "codepoint": "U+F465",
                    "name": "noteheadDoubleWholeSmall"
                },
                {
                    "codepoint": "U+F466",
                    "name": "noteheadWholeSmall"
                },
                {
                    "codepoint": "U+F467",
                    "name": "noteheadHalfSmall"
                },
                {
                    "codepoint": "U+F468",
                    "name": "noteheadBlackSmall"
                },
                {
                    "codepoint": "U+F469",
                    "name": "dynamicPianoSmall"
                },
                {
                    "codepoint": "U+F46A",
                    "name": "dynamicMezzoSmall"
                },
                {
                    "codepoint": "U+F46B",
                    "name": "dynamicForteSmall"
                },
                {
                    "codepoint": "U+F46C",
                    "name": "dynamicRinforzandoSmall"
                },
                {
                    "codepoint": "U+F46D",
                    "name": "dynamicSforzandoSmall"
                },
                {
                    "codepoint": "U+F46E",
                    "name": "dynamicZSmall"
                },
                {
                    "codepoint": "U+F46F",
                    "name": "dynamicNienteSmall"
                },
                {
                    "codepoint": "U+F470",
                    "name": "gClefSmall"
                },
                {
                    "codepoint": "U+F471",
                    "name": "cClefSmall"
                },
                {
                    "codepoint": "U+F472",
                    "name": "fClefSmall"
                },
                {
                    "codepoint": "U+F473",
                    "name": "articAccentAboveSmall"
                },
                {
                    "codepoint": "U+F474",
                    "name": "articAccentBelowSmall"
                },
                {
                    "codepoint": "U+F475",
                    "name": "articStaccatoAboveSmall"
                },
                {
                    "codepoint": "U+F476",
                    "name": "articStaccatoBelowSmall"
                },
                {
                    "codepoint": "U+F477",
                    "name": "articTenutoAboveSmall"
                },
                {
                    "codepoint": "U+F478",
                    "name": "articTenutoBelowSmall"
                },
                {
                    "codepoint": "U+F479",
                    "name": "articStaccatissimoAboveSmall"
                },
                {
                    "codepoint": "U+F47A",
                    "name": "articStaccatissimoBelowSmall"
                },
                {
                    "codepoint": "U+F47B",
                    "name": "articStaccatissimoWedgeAboveSmall"
                },
                {
                    "codepoint": "U+F47C",
                    "name": "articStaccatissimoWedgeBelowSmall"
                },
                {
                    "codepoint": "U+F47D",
                    "name": "articStaccatissimoStrokeAboveSmall"
                },
                {
                    "codepoint": "U+F47E",
                    "name": "articStaccatissimoStrokeBelowSmall"
                },
                {
                    "codepoint": "U+F47F",
                    "name": "articMarcatoAboveSmall"
                },
                {
                    "codepoint": "U+F480",
                    "name": "articMarcatoBelowSmall"
                },
                {
                    "codepoint": "U+F481",
                    "name": "articMarcatoStaccatoAboveSmall"
                },
                {
                    "codepoint": "U+F482",
                    "name": "articMarcatoStaccatoBelowSmall"
                },
                {
                    "codepoint": "U+F483",
                    "name": "articAccentStaccatoAboveSmall"
                },
                {
                    "codepoint": "U+F484",
                    "name": "articAccentStaccatoBelowSmall"
                },
                {
                    "codepoint": "U+F485",
                    "name": "articTenutoStaccatoAboveSmall"
                },
                {
                    "codepoint": "U+F486",
                    "name": "articTenutoStaccatoBelowSmall"
                },
                {
                    "codepoint": "U+F487",
                    "name": "articTenutoAccentAboveSmall"
                },
                {
                    "codepoint": "U+F488",
                    "name": "articTenutoAccentBelowSmall"
                }
            ],
            "type": ""
        },
        "ss02": {
            "glyphs": [
                {
                    "codepoint": "U+F411",
                    "name": "flag8thUpShort"
                },
                {
                    "codepoint": "U+F414",
                    "name": "flag16thUpShort"
                },
                {
                    "codepoint": "U+F417",
                    "name": "flag32ndUpShort"
                },
                {
                    "codepoint": "U+F41A",
                    "name": "flag64thUpShort"
                },
                {
                    "codepoint": "U+F41D",
                    "name": "flag128thUpShort"
                },
                {
                    "codepoint": "U+F420",
                    "name": "flag256thUpShort"
                },
                {
                    "codepoint": "U+F423",
                    "name": "flag512thUpShort"
                },
                {
                    "codepoint": "U+F426",
                    "name": "flag1024thUpShort"
                }
            ],
            "type": ""
        },
        "ss03": {
            "glyphs": [
                {
                    "codepoint": "U+F410",
                    "name": "flag8thUpStraight"
                },
                {
                    "codepoint": "U+F412",
                    "name": "flag8thDownStraight"
                },
                {
                    "codepoint": "U+F413",
                    "name": "flag16thUpStraight"
                },
                {
                    "codepoint": "U+F415",
                    "name": "flag16thDownStraight"
                },
                {
                    "codepoint": "U+F416",
                    "name": "flag32ndUpStraight"
                },
                {
                    "codepoint": "U+F418",
                    "name": "flag32ndDownStraight"
                },
                {
                    "codepoint": "U+F419",
                    "name": "flag64thUpStraight"
                },
                {
                    "codepoint": "U+F41B",
                    "name": "flag64thDownStraight"
                },
                {
                    "codepoint": "U+F41C",
                    "name": "flag128thUpStraight"
                },
                {
                    "codepoint": "U+F41E",
                    "name": "flag128thDownStraight"
                },
                {
                    "codepoint": "U+F41F",
                    "name": "flag256thUpStraight"
                },
                {
                    "codepoint": "U+F421",
                    "name": "flag256thDownStraight"
                },
                {
                    "codepoint": "U+F422",
                    "name": "flag512thUpStraight"
                },
                {
                    "codepoint": "U+F424",
                    "name": "flag512thDownStraight"
                },
                {
                    "codepoint": "U+F425",
                    "name": "flag1024thUpStraight"
                },
                {
                    "codepoint": "U+F427",
                    "name": "flag1024thDownStraight"
                }
            ],
            "type": ""
        }
    }
};
module.exports = Bravura;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/classes.json":[function(require,module,exports){
module.exports={
    "accidentals": [
        "accidentalFlat", 
        "accidentalNatural", 
        "accidentalSharp", 
        "accidentalDoubleSharp", 
        "accidentalDoubleFlat", 
        "accidentalTripleSharp", 
        "accidentalTripleFlat", 
        "accidentalNaturalFlat", 
        "accidentalNaturalSharp", 
        "accidentalSharpSharp", 
        "accidentalParensLeft", 
        "accidentalParensRight", 
        "accidentalQuarterToneFlatArrowUp", 
        "accidentalThreeQuarterTonesFlatArrowDown", 
        "accidentalQuarterToneSharpNaturalArrowUp", 
        "accidentalQuarterToneFlatNaturalArrowDown", 
        "accidentalThreeQuarterTonesSharpArrowUp", 
        "accidentalQuarterToneSharpArrowDown", 
        "accidentalFiveQuarterTonesSharpArrowUp", 
        "accidentalThreeQuarterTonesSharpArrowDown", 
        "accidentalThreeQuarterTonesFlatArrowUp", 
        "accidentalFiveQuarterTonesFlatArrowDown", 
        "accidentalArrowUp", 
        "accidentalArrowDown", 
        "accidentalQuarterToneFlatStein", 
        "accidentalThreeQuarterTonesFlatZimmermann", 
        "accidentalQuarterToneSharpStein", 
        "accidentalThreeQuarterTonesSharpStein", 
        "accidentalNarrowReversedFlat", 
        "accidentalNarrowReversedFlatAndFlat", 
        "accidentalReversedFlatArrowUp", 
        "accidentalReversedFlatArrowDown", 
        "accidentalFilledReversedFlatArrowUp", 
        "accidentalFilledReversedFlatArrowDown", 
        "accidentalReversedFlatAndFlatArrowUp", 
        "accidentalReversedFlatAndFlatArrowDown", 
        "accidentalFilledReversedFlatAndFlat", 
        "accidentalFilledReversedFlatAndFlatArrowUp", 
        "accidentalFilledReversedFlatAndFlatArrowDown", 
        "accidentalHalfSharpArrowUp", 
        "accidentalHalfSharpArrowDown", 
        "accidentalOneAndAHalfSharpsArrowUp", 
        "accidentalOneAndAHalfSharpsArrowDown", 
        "accidentalSims12Down", 
        "accidentalSims6Down", 
        "accidentalSims4Down", 
        "accidentalSims12Up", 
        "accidentalSims6Up", 
        "accidentalSims4Up", 
        "accidentalJohnstonPlus", 
        "accidentalJohnstonMinus", 
        "accidentalJohnstonEl", 
        "accidentalJohnstonSeven", 
        "accidentalJohnstonUp", 
        "accidentalJohnstonDown", 
        "accidentalJohnston13", 
        "accidentalJohnston31", 
        "accidentalDoubleFlatOneArrowDown", 
        "accidentalFlatOneArrowDown", 
        "accidentalNaturalOneArrowDown", 
        "accidentalSharpOneArrowDown", 
        "accidentalDoubleSharpOneArrowDown", 
        "accidentalDoubleFlatOneArrowUp", 
        "accidentalFlatOneArrowUp", 
        "accidentalNaturalOneArrowUp", 
        "accidentalSharpOneArrowUp", 
        "accidentalDoubleSharpOneArrowUp", 
        "accidentalDoubleFlatTwoArrowsDown", 
        "accidentalFlatTwoArrowsDown", 
        "accidentalNaturalTwoArrowsDown", 
        "accidentalSharpTwoArrowsDown", 
        "accidentalDoubleSharpTwoArrowsDown", 
        "accidentalDoubleFlatTwoArrowsUp", 
        "accidentalFlatTwoArrowsUp", 
        "accidentalNaturalTwoArrowsUp", 
        "accidentalSharpTwoArrowsUp", 
        "accidentalDoubleSharpTwoArrowsUp", 
        "accidentalDoubleFlatThreeArrowsDown", 
        "accidentalFlatThreeArrowsDown", 
        "accidentalNaturalThreeArrowsDown", 
        "accidentalSharpThreeArrowsDown", 
        "accidentalDoubleSharpThreeArrowsDown", 
        "accidentalDoubleFlatThreeArrowsUp", 
        "accidentalFlatThreeArrowsUp", 
        "accidentalNaturalThreeArrowsUp", 
        "accidentalSharpThreeArrowsUp", 
        "accidentalDoubleSharpThreeArrowsUp", 
        "accidentalLowerOneSeptimalComma", 
        "accidentalRaiseOneSeptimalComma", 
        "accidentalLowerTwoSeptimalCommas", 
        "accidentalRaiseTwoSeptimalCommas", 
        "accidentalLowerOneUndecimalQuartertone", 
        "accidentalRaiseOneUndecimalQuartertone", 
        "accidentalLowerOneTridecimalQuartertone", 
        "accidentalRaiseOneTridecimalQuartertone", 
        "accidentalCombiningLower17Schisma", 
        "accidentalCombiningRaise17Schisma", 
        "accidentalCombiningLower19Schisma", 
        "accidentalCombiningRaise19Schisma", 
        "accidentalCombiningLower23Limit29LimitComma", 
        "accidentalCombiningRaise23Limit29LimitComma", 
        "accidentalCombiningLower31Schisma", 
        "accidentalCombiningRaise31Schisma", 
        "accidentalCombiningOpenCurlyBrace", 
        "accidentalCombiningCloseCurlyBrace", 
        "accidentalDoubleFlatEqualTempered", 
        "accidentalFlatEqualTempered", 
        "accidentalNaturalEqualTempered", 
        "accidentalSharpEqualTempered", 
        "accidentalDoubleSharpEqualTempered", 
        "accSagittal5v7KleismaUp", 
        "accSagittal5v7KleismaDown", 
        "accSagittal5CommaUp", 
        "accSagittal5CommaDown", 
        "accSagittal7CommaUp", 
        "accSagittal7CommaDown", 
        "accSagittal25SmallDiesisUp", 
        "accSagittal25SmallDiesisDown", 
        "accSagittal35MediumDiesisUp", 
        "accSagittal35MediumDiesisDown", 
        "accSagittal11MediumDiesisUp", 
        "accSagittal11MediumDiesisDown", 
        "accSagittal11LargeDiesisUp", 
        "accSagittal11LargeDiesisDown", 
        "accSagittal35LargeDiesisUp", 
        "accSagittal35LargeDiesisDown", 
        "accSagittalSharp25SDown", 
        "accSagittalFlat25SUp", 
        "accSagittalSharp7CDown", 
        "accSagittalFlat7CUp", 
        "accSagittalSharp5CDown", 
        "accSagittalFlat5CUp", 
        "accSagittalSharp5v7kDown", 
        "accSagittalFlat5v7kUp", 
        "accSagittalSharp", 
        "accSagittalFlat", 
        "accSagittalUnused1", 
        "accSagittalUnused2", 
        "accSagittalSharp5v7kUp", 
        "accSagittalFlat5v7kDown", 
        "accSagittalSharp5CUp", 
        "accSagittalFlat5CDown", 
        "accSagittalSharp7CUp", 
        "accSagittalFlat7CDown", 
        "accSagittalSharp25SUp", 
        "accSagittalFlat25SDown", 
        "accSagittalSharp35MUp", 
        "accSagittalFlat35MDown", 
        "accSagittalSharp11MUp", 
        "accSagittalFlat11MDown", 
        "accSagittalSharp11LUp", 
        "accSagittalFlat11LDown", 
        "accSagittalSharp35LUp", 
        "accSagittalFlat35LDown", 
        "accSagittalDoubleSharp25SDown", 
        "accSagittalDoubleFlat25SUp", 
        "accSagittalDoubleSharp7CDown", 
        "accSagittalDoubleFlat7CUp", 
        "accSagittalDoubleSharp5CDown", 
        "accSagittalDoubleFlat5CUp", 
        "accSagittalDoubleSharp5v7kDown", 
        "accSagittalDoubleFlat5v7kUp", 
        "accSagittalDoubleSharp", 
        "accSagittalDoubleFlat", 
        "accSagittal7v11KleismaUp", 
        "accSagittal7v11KleismaDown", 
        "accSagittal17CommaUp", 
        "accSagittal17CommaDown", 
        "accSagittal55CommaUp", 
        "accSagittal55CommaDown", 
        "accSagittal7v11CommaUp", 
        "accSagittal7v11CommaDown", 
        "accSagittal5v11SmallDiesisUp", 
        "accSagittal5v11SmallDiesisDown", 
        "accSagittalSharp5v11SDown", 
        "accSagittalFlat5v11SUp", 
        "accSagittalSharp7v11CDown", 
        "accSagittalFlat7v11CUp", 
        "accSagittalSharp55CDown", 
        "accSagittalFlat55CUp", 
        "accSagittalSharp17CDown", 
        "accSagittalFlat17CUp", 
        "accSagittalSharp7v11kDown", 
        "accSagittalFlat7v11kUp", 
        "accSagittalSharp7v11kUp", 
        "accSagittalFlat7v11kDown", 
        "accSagittalSharp17CUp", 
        "accSagittalFlat17CDown", 
        "accSagittalSharp55CUp", 
        "accSagittalFlat55CDown", 
        "accSagittalSharp7v11CUp", 
        "accSagittalFlat7v11CDown", 
        "accSagittalSharp5v11SUp", 
        "accSagittalFlat5v11SDown", 
        "accSagittalDoubleSharp5v11SDown", 
        "accSagittalDoubleFlat5v11SUp", 
        "accSagittalDoubleSharp7v11CDown", 
        "accSagittalDoubleFlat7v11CUp", 
        "accSagittalDoubleSharp55CDown", 
        "accSagittalDoubleFlat55CUp", 
        "accSagittalDoubleSharp17CDown", 
        "accSagittalDoubleFlat17CUp", 
        "accSagittalDoubleSharp7v11kDown", 
        "accSagittalDoubleFlat7v11kUp", 
        "accSagittal23CommaUp", 
        "accSagittal23CommaDown", 
        "accSagittal5v19CommaUp", 
        "accSagittal5v19CommaDown", 
        "accSagittal5v23SmallDiesisUp", 
        "accSagittal5v23SmallDiesisDown", 
        "accSagittalSharp5v23SDown", 
        "accSagittalFlat5v23SUp", 
        "accSagittalSharp5v19CDown", 
        "accSagittalFlat5v19CUp", 
        "accSagittalSharp23CDown", 
        "accSagittalFlat23CUp", 
        "accSagittalSharp23CUp", 
        "accSagittalFlat23CDown", 
        "accSagittalSharp5v19CUp", 
        "accSagittalFlat5v19CDown", 
        "accSagittalSharp5v23SUp", 
        "accSagittalFlat5v23SDown", 
        "accSagittalDoubleSharp5v23SDown", 
        "accSagittalDoubleFlat5v23SUp", 
        "accSagittalDoubleSharp5v19CDown", 
        "accSagittalDoubleFlat5v19CUp", 
        "accSagittalDoubleSharp23CDown", 
        "accSagittalDoubleFlat23CUp", 
        "accSagittal19SchismaUp", 
        "accSagittal19SchismaDown", 
        "accSagittal17KleismaUp", 
        "accSagittal17KleismaDown", 
        "accSagittal143CommaUp", 
        "accSagittal143CommaDown", 
        "accSagittal11v49CommaUp", 
        "accSagittal11v49CommaDown", 
        "accSagittal19CommaUp", 
        "accSagittal19CommaDown", 
        "accSagittal7v19CommaUp", 
        "accSagittal7v19CommaDown", 
        "accSagittal49SmallDiesisUp", 
        "accSagittal49SmallDiesisDown", 
        "accSagittal23SmallDiesisUp", 
        "accSagittal23SmallDiesisDown", 
        "accSagittal5v13MediumDiesisUp", 
        "accSagittal5v13MediumDiesisDown", 
        "accSagittal11v19MediumDiesisUp", 
        "accSagittal11v19MediumDiesisDown", 
        "accSagittal49MediumDiesisUp", 
        "accSagittal49MediumDiesisDown", 
        "accSagittal5v49MediumDiesisUp", 
        "accSagittal5v49MediumDiesisDown", 
        "accSagittal49LargeDiesisUp", 
        "accSagittal49LargeDiesisDown", 
        "accSagittal11v19LargeDiesisUp", 
        "accSagittal11v19LargeDiesisDown", 
        "accSagittal5v13LargeDiesisUp", 
        "accSagittal5v13LargeDiesisDown", 
        "accSagittalSharp23SDown", 
        "accSagittalFlat23SUp", 
        "accSagittalSharp49SDown", 
        "accSagittalFlat49SUp", 
        "accSagittalSharp7v19CDown", 
        "accSagittalFlat7v19CUp", 
        "accSagittalSharp19CDown", 
        "accSagittalFlat19CUp", 
        "accSagittalSharp11v49CDown", 
        "accSagittalFlat11v49CUp", 
        "accSagittalSharp143CDown", 
        "accSagittalFlat143CUp", 
        "accSagittalSharp17kDown", 
        "accSagittalFlat17kUp", 
        "accSagittalSharp19sDown", 
        "accSagittalFlat19sUp", 
        "accSagittalSharp19sUp", 
        "accSagittalFlat19sDown", 
        "accSagittalSharp17kUp", 
        "accSagittalFlat17kDown", 
        "accSagittalSharp143CUp", 
        "accSagittalFlat143CDown", 
        "accSagittalSharp11v49CUp", 
        "accSagittalFlat11v49CDown", 
        "accSagittalSharp19CUp", 
        "accSagittalFlat19CDown", 
        "accSagittalSharp7v19CUp", 
        "accSagittalFlat7v19CDown", 
        "accSagittalSharp49SUp", 
        "accSagittalFlat49SDown", 
        "accSagittalSharp23SUp", 
        "accSagittalFlat23SDown", 
        "accSagittalSharp5v13MUp", 
        "accSagittalFlat5v13MDown", 
        "accSagittalSharp11v19MUp", 
        "accSagittalFlat11v19MDown", 
        "accSagittalSharp49MUp", 
        "accSagittalFlat49MDown", 
        "accSagittalSharp5v49MUp", 
        "accSagittalFlat5v49MDown", 
        "accSagittalSharp49LUp", 
        "accSagittalFlat49LDown", 
        "accSagittalSharp11v19LUp", 
        "accSagittalFlat11v19LDown", 
        "accSagittalSharp5v13LUp", 
        "accSagittalFlat5v13LDown", 
        "accSagittalUnused3", 
        "accSagittalUnused4", 
        "accSagittalDoubleSharp23SDown", 
        "accSagittalDoubleFlat23SUp", 
        "accSagittalDoubleSharp49SDown", 
        "accSagittalDoubleFlat49SUp", 
        "accSagittalDoubleSharp7v19CDown", 
        "accSagittalDoubleFlat7v19CUp", 
        "accSagittalDoubleSharp19CDown", 
        "accSagittalDoubleFlat19CUp", 
        "accSagittalDoubleSharp11v49CDown", 
        "accSagittalDoubleFlat11v49CUp", 
        "accSagittalDoubleSharp143CDown", 
        "accSagittalDoubleFlat143CUp", 
        "accSagittalDoubleSharp17kDown", 
        "accSagittalDoubleFlat17kUp", 
        "accSagittalDoubleSharp19sDown", 
        "accSagittalDoubleFlat19sUp", 
        "accSagittalShaftUp", 
        "accSagittalShaftDown", 
        "accSagittalAcute", 
        "accSagittalGrave", 
        "accidentalWyschnegradsky1TwelfthsSharp", 
        "accidentalWyschnegradsky2TwelfthsSharp", 
        "accidentalWyschnegradsky3TwelfthsSharp", 
        "accidentalWyschnegradsky4TwelfthsSharp", 
        "accidentalWyschnegradsky5TwelfthsSharp", 
        "accidentalWyschnegradsky6TwelfthsSharp", 
        "accidentalWyschnegradsky7TwelfthsSharp", 
        "accidentalWyschnegradsky8TwelfthsSharp", 
        "accidentalWyschnegradsky9TwelfthsSharp", 
        "accidentalWyschnegradsky10TwelfthsSharp", 
        "accidentalWyschnegradsky11TwelfthsSharp", 
        "accidentalWyschnegradsky1TwelfthsFlat", 
        "accidentalWyschnegradsky2TwelfthsFlat", 
        "accidentalWyschnegradsky3TwelfthsFlat", 
        "accidentalWyschnegradsky4TwelfthsFlat", 
        "accidentalWyschnegradsky5TwelfthsFlat", 
        "accidentalWyschnegradsky6TwelfthsFlat", 
        "accidentalWyschnegradsky7TwelfthsFlat", 
        "accidentalWyschnegradsky8TwelfthsFlat", 
        "accidentalWyschnegradsky9TwelfthsFlat", 
        "accidentalWyschnegradsky10TwelfthsFlat", 
        "accidentalWyschnegradsky11TwelfthsFlat", 
        "accidentalBuyukMucennebFlat", 
        "accidentalKucukMucennebFlat", 
        "accidentalBakiyeFlat", 
        "accidentalKomaFlat", 
        "accidentalKomaSharp", 
        "accidentalBakiyeSharp", 
        "accidentalKucukMucennebSharp", 
        "accidentalBuyukMucennebSharp", 
        "accidental1CommaSharp", 
        "accidental2CommaSharp", 
        "accidental3CommaSharp", 
        "accidental5CommaSharp", 
        "accidental1CommaFlat", 
        "accidental2CommaFlat", 
        "accidental3CommaFlat", 
        "accidental4CommaFlat", 
        "accidentalKoron", 
        "accidentalSori", 
        "accidentalXenakisOneThirdToneSharp", 
        "accidentalXenakisTwoThirdTonesSharp", 
        "accidentalQuarterToneSharpBusotti", 
        "accidentalSharpOneHorizontalStroke", 
        "accidentalThreeQuarterTonesSharpBusotti", 
        "accidentalQuarterToneSharpWiggle", 
        "accidentalTavenerSharp", 
        "accidentalTavenerFlat", 
        "accidentalQuarterToneFlatPenderecki", 
        "accidentalCommaSlashUp", 
        "accidentalCommaSlashDown", 
        "accidentalWilsonPlus", 
        "accidentalWilsonMinus", 
        "accidentalLargeDoubleSharp", 
        "accidentalQuarterToneSharp4", 
        "accidentalQuarterToneFlat4", 
        "accidentalQuarterToneFlatFilledReversed", 
        "accidentalSharpReversed", 
        "accidentalNaturalReversed", 
        "accidentalDoubleFlatReversed", 
        "accidentalFlatTurned", 
        "accidentalDoubleFlatTurned", 
        "accidentalThreeQuarterTonesFlatGrisey", 
        "accidentalThreeQuarterTonesFlatTartini", 
        "accidentalQuarterToneFlatVanBlankenburg", 
        "accidentalThreeQuarterTonesFlatCouper", 
        "accidentalOneThirdToneSharpFerneyhough", 
        "accidentalOneThirdToneFlatFerneyhough", 
        "accidentalTwoThirdTonesSharpFerneyhough", 
        "accidentalTwoThirdTonesFlatFerneyhough"
    ], 
    "accidentals24EDOArrows": [
        "accidentalQuarterToneFlatArrowUp", 
        "accidentalThreeQuarterTonesFlatArrowDown", 
        "accidentalQuarterToneSharpNaturalArrowUp", 
        "accidentalQuarterToneFlatNaturalArrowDown", 
        "accidentalThreeQuarterTonesSharpArrowUp", 
        "accidentalQuarterToneSharpArrowDown", 
        "accidentalFiveQuarterTonesSharpArrowUp", 
        "accidentalThreeQuarterTonesSharpArrowDown", 
        "accidentalThreeQuarterTonesFlatArrowUp", 
        "accidentalFiveQuarterTonesFlatArrowDown", 
        "accidentalArrowUp", 
        "accidentalArrowDown"
    ], 
    "accidentals53EDOTurkish": [
        "accidental1CommaSharp", 
        "accidental2CommaSharp", 
        "accidental3CommaSharp", 
        "accidental5CommaSharp", 
        "accidental1CommaFlat", 
        "accidental2CommaFlat", 
        "accidental3CommaFlat", 
        "accidental4CommaFlat"
    ], 
    "accidentals72EDOWyschnegradsky": [
        "accidentalWyschnegradsky1TwelfthsSharp", 
        "accidentalWyschnegradsky2TwelfthsSharp", 
        "accidentalWyschnegradsky3TwelfthsSharp", 
        "accidentalWyschnegradsky4TwelfthsSharp", 
        "accidentalWyschnegradsky5TwelfthsSharp", 
        "accidentalWyschnegradsky6TwelfthsSharp", 
        "accidentalWyschnegradsky7TwelfthsSharp", 
        "accidentalWyschnegradsky8TwelfthsSharp", 
        "accidentalWyschnegradsky9TwelfthsSharp", 
        "accidentalWyschnegradsky10TwelfthsSharp", 
        "accidentalWyschnegradsky11TwelfthsSharp", 
        "accidentalWyschnegradsky1TwelfthsFlat", 
        "accidentalWyschnegradsky2TwelfthsFlat", 
        "accidentalWyschnegradsky3TwelfthsFlat", 
        "accidentalWyschnegradsky4TwelfthsFlat", 
        "accidentalWyschnegradsky5TwelfthsFlat", 
        "accidentalWyschnegradsky6TwelfthsFlat", 
        "accidentalWyschnegradsky7TwelfthsFlat", 
        "accidentalWyschnegradsky8TwelfthsFlat", 
        "accidentalWyschnegradsky9TwelfthsFlat", 
        "accidentalWyschnegradsky10TwelfthsFlat", 
        "accidentalWyschnegradsky11TwelfthsFlat"
    ], 
    "accidentalsAEU": [
        "accidentalBuyukMucennebFlat", 
        "accidentalKucukMucennebFlat", 
        "accidentalBakiyeFlat", 
        "accidentalKomaFlat", 
        "accidentalKomaSharp", 
        "accidentalBakiyeSharp", 
        "accidentalKucukMucennebSharp", 
        "accidentalBuyukMucennebSharp"
    ], 
    "accidentalsHelmholtzEllis": [
        "accidentalDoubleFlatOneArrowDown", 
        "accidentalFlatOneArrowDown", 
        "accidentalNaturalOneArrowDown", 
        "accidentalSharpOneArrowDown", 
        "accidentalDoubleSharpOneArrowDown", 
        "accidentalDoubleFlatOneArrowUp", 
        "accidentalFlatOneArrowUp", 
        "accidentalNaturalOneArrowUp", 
        "accidentalSharpOneArrowUp", 
        "accidentalDoubleSharpOneArrowUp", 
        "accidentalDoubleFlatTwoArrowsDown", 
        "accidentalFlatTwoArrowsDown", 
        "accidentalNaturalTwoArrowsDown", 
        "accidentalSharpTwoArrowsDown", 
        "accidentalDoubleSharpTwoArrowsDown", 
        "accidentalDoubleFlatTwoArrowsUp", 
        "accidentalFlatTwoArrowsUp", 
        "accidentalNaturalTwoArrowsUp", 
        "accidentalSharpTwoArrowsUp", 
        "accidentalDoubleSharpTwoArrowsUp", 
        "accidentalDoubleFlatThreeArrowsDown", 
        "accidentalFlatThreeArrowsDown", 
        "accidentalNaturalThreeArrowsDown", 
        "accidentalSharpThreeArrowsDown", 
        "accidentalDoubleSharpThreeArrowsDown", 
        "accidentalDoubleFlatThreeArrowsUp", 
        "accidentalFlatThreeArrowsUp", 
        "accidentalNaturalThreeArrowsUp", 
        "accidentalSharpThreeArrowsUp", 
        "accidentalDoubleSharpThreeArrowsUp", 
        "accidentalLowerOneSeptimalComma", 
        "accidentalRaiseOneSeptimalComma", 
        "accidentalLowerTwoSeptimalCommas", 
        "accidentalRaiseTwoSeptimalCommas", 
        "accidentalLowerOneUndecimalQuartertone", 
        "accidentalRaiseOneUndecimalQuartertone", 
        "accidentalLowerOneTridecimalQuartertone", 
        "accidentalRaiseOneTridecimalQuartertone", 
        "accidentalCombiningLower17Schisma", 
        "accidentalCombiningRaise17Schisma", 
        "accidentalCombiningLower19Schisma", 
        "accidentalCombiningRaise19Schisma", 
        "accidentalCombiningLower23Limit29LimitComma", 
        "accidentalCombiningRaise23Limit29LimitComma", 
        "accidentalCombiningLower31Schisma", 
        "accidentalCombiningRaise31Schisma", 
        "accidentalCombiningOpenCurlyBrace", 
        "accidentalCombiningCloseCurlyBrace", 
        "accidentalDoubleFlatEqualTempered", 
        "accidentalFlatEqualTempered", 
        "accidentalNaturalEqualTempered", 
        "accidentalSharpEqualTempered", 
        "accidentalDoubleSharpEqualTempered"
    ], 
    "accidentalsJohnston": [
        "accidentalJohnstonPlus", 
        "accidentalJohnstonMinus", 
        "accidentalJohnstonEl", 
        "accidentalJohnstonSeven", 
        "accidentalJohnstonUp", 
        "accidentalJohnstonDown", 
        "accidentalJohnston13", 
        "accidentalJohnston31"
    ], 
    "accidentalsPersian": [
        "accidentalKoron", 
        "accidentalSori"
    ], 
    "accidentalsSagittalAthenian": [
        "accSagittal7v11KleismaUp", 
        "accSagittal7v11KleismaDown", 
        "accSagittal17CommaUp", 
        "accSagittal17CommaDown", 
        "accSagittal55CommaUp", 
        "accSagittal55CommaDown", 
        "accSagittal7v11CommaUp", 
        "accSagittal7v11CommaDown", 
        "accSagittal5v11SmallDiesisUp", 
        "accSagittal5v11SmallDiesisDown", 
        "accSagittalSharp5v11SDown", 
        "accSagittalFlat5v11SUp", 
        "accSagittalSharp7v11CDown", 
        "accSagittalFlat7v11CUp", 
        "accSagittalSharp55CDown", 
        "accSagittalFlat55CUp", 
        "accSagittalSharp17CDown", 
        "accSagittalFlat17CUp", 
        "accSagittalSharp7v11kDown", 
        "accSagittalFlat7v11kUp", 
        "accSagittalSharp7v11kUp", 
        "accSagittalFlat7v11kDown", 
        "accSagittalSharp17CUp", 
        "accSagittalFlat17CDown", 
        "accSagittalSharp55CUp", 
        "accSagittalFlat55CDown", 
        "accSagittalSharp7v11CUp", 
        "accSagittalFlat7v11CDown", 
        "accSagittalSharp5v11SUp", 
        "accSagittalFlat5v11SDown", 
        "accSagittalDoubleSharp5v11SDown", 
        "accSagittalDoubleFlat5v11SUp", 
        "accSagittalDoubleSharp7v11CDown", 
        "accSagittalDoubleFlat7v11CUp", 
        "accSagittalDoubleSharp55CDown", 
        "accSagittalDoubleFlat55CUp", 
        "accSagittalDoubleSharp17CDown", 
        "accSagittalDoubleFlat17CUp", 
        "accSagittalDoubleSharp7v11kDown", 
        "accSagittalDoubleFlat7v11kUp"
    ], 
    "accidentalsSagittalDiacritics": [
        "accSagittalShaftUp", 
        "accSagittalShaftDown", 
        "accSagittalAcute", 
        "accSagittalGrave"
    ], 
    "accidentalsSagittalMixed": [
        "accidentalFlat", 
        "accidentalNatural", 
        "accidentalSharp", 
        "accidentalDoubleFlat", 
        "accSagittal5v7KleismaUp", 
        "accSagittal5v7KleismaDown", 
        "accSagittal5CommaUp", 
        "accSagittal5CommaDown", 
        "accSagittal7CommaUp", 
        "accSagittal7CommaDown", 
        "accSagittal25SmallDiesisUp", 
        "accSagittal25SmallDiesisDown", 
        "accSagittal35MediumDiesisUp", 
        "accSagittal35MediumDiesisDown", 
        "accSagittal11MediumDiesisUp", 
        "accSagittal11MediumDiesisDown", 
        "accSagittal11LargeDiesisUp", 
        "accSagittal11LargeDiesisDown", 
        "accSagittal35LargeDiesisUp", 
        "accSagittal35LargeDiesisDown", 
        "accidentalLargeDoubleSharp"
    ], 
    "accidentalsSagittalPromethean": [
        "accSagittal19SchismaUp", 
        "accSagittal19SchismaDown", 
        "accSagittal17KleismaUp", 
        "accSagittal17KleismaDown", 
        "accSagittal143CommaUp", 
        "accSagittal143CommaDown", 
        "accSagittal11v49CommaUp", 
        "accSagittal11v49CommaDown", 
        "accSagittal19CommaUp", 
        "accSagittal19CommaDown", 
        "accSagittal7v19CommaUp", 
        "accSagittal7v19CommaDown", 
        "accSagittal49SmallDiesisUp", 
        "accSagittal49SmallDiesisDown", 
        "accSagittal23SmallDiesisUp", 
        "accSagittal23SmallDiesisDown", 
        "accSagittal5v13MediumDiesisUp", 
        "accSagittal5v13MediumDiesisDown", 
        "accSagittal11v19MediumDiesisUp", 
        "accSagittal11v19MediumDiesisDown", 
        "accSagittal49MediumDiesisUp", 
        "accSagittal49MediumDiesisDown", 
        "accSagittal5v49MediumDiesisUp", 
        "accSagittal5v49MediumDiesisDown", 
        "accSagittal49LargeDiesisUp", 
        "accSagittal49LargeDiesisDown", 
        "accSagittal11v19LargeDiesisUp", 
        "accSagittal11v19LargeDiesisDown", 
        "accSagittal5v13LargeDiesisUp", 
        "accSagittal5v13LargeDiesisDown", 
        "accSagittalSharp23SDown", 
        "accSagittalFlat23SUp", 
        "accSagittalSharp49SDown", 
        "accSagittalFlat49SUp", 
        "accSagittalSharp7v19CDown", 
        "accSagittalFlat7v19CUp", 
        "accSagittalSharp19CDown", 
        "accSagittalFlat19CUp", 
        "accSagittalSharp11v49CDown", 
        "accSagittalFlat11v49CUp", 
        "accSagittalSharp143CDown", 
        "accSagittalFlat143CUp", 
        "accSagittalSharp17kDown", 
        "accSagittalFlat17kUp", 
        "accSagittalSharp19sDown", 
        "accSagittalFlat19sUp", 
        "accSagittalSharp19sUp", 
        "accSagittalFlat19sDown", 
        "accSagittalSharp17kUp", 
        "accSagittalFlat17kDown", 
        "accSagittalSharp143CUp", 
        "accSagittalFlat143CDown", 
        "accSagittalSharp11v49CUp", 
        "accSagittalFlat11v49CDown", 
        "accSagittalSharp19CUp", 
        "accSagittalFlat19CDown", 
        "accSagittalSharp7v19CUp", 
        "accSagittalFlat7v19CDown", 
        "accSagittalSharp49SUp", 
        "accSagittalFlat49SDown", 
        "accSagittalSharp23SUp", 
        "accSagittalFlat23SDown", 
        "accSagittalSharp5v13MUp", 
        "accSagittalFlat5v13MDown", 
        "accSagittalSharp11v19MUp", 
        "accSagittalFlat11v19MDown", 
        "accSagittalSharp49MUp", 
        "accSagittalFlat49MDown", 
        "accSagittalSharp5v49MUp", 
        "accSagittalFlat5v49MDown", 
        "accSagittalSharp49LUp", 
        "accSagittalFlat49LDown", 
        "accSagittalSharp11v19LUp", 
        "accSagittalFlat11v19LDown", 
        "accSagittalSharp5v13LUp", 
        "accSagittalFlat5v13LDown", 
        "accSagittalUnused3", 
        "accSagittalUnused4", 
        "accSagittalDoubleSharp23SDown", 
        "accSagittalDoubleFlat23SUp", 
        "accSagittalDoubleSharp49SDown", 
        "accSagittalDoubleFlat49SUp", 
        "accSagittalDoubleSharp7v19CDown", 
        "accSagittalDoubleFlat7v19CUp", 
        "accSagittalDoubleSharp19CDown", 
        "accSagittalDoubleFlat19CUp", 
        "accSagittalDoubleSharp11v49CDown", 
        "accSagittalDoubleFlat11v49CUp", 
        "accSagittalDoubleSharp143CDown", 
        "accSagittalDoubleFlat143CUp", 
        "accSagittalDoubleSharp17kDown", 
        "accSagittalDoubleFlat17kUp", 
        "accSagittalDoubleSharp19sDown", 
        "accSagittalDoubleFlat19sUp"
    ], 
    "accidentalsSagittalPure": [
        "accidentalNatural", 
        "accSagittalSharp25SDown", 
        "accSagittalFlat25SUp", 
        "accSagittalSharp7CDown", 
        "accSagittalFlat7CUp", 
        "accSagittalSharp5CDown", 
        "accSagittalFlat5CUp", 
        "accSagittalSharp5v7kDown", 
        "accSagittalFlat5v7kUp", 
        "accSagittalSharp", 
        "accSagittalFlat", 
        "accSagittalUnused1", 
        "accSagittalUnused2", 
        "accSagittalSharp5v7kUp", 
        "accSagittalFlat5v7kDown", 
        "accSagittalSharp5CUp", 
        "accSagittalFlat5CDown", 
        "accSagittalSharp7CUp", 
        "accSagittalFlat7CDown", 
        "accSagittalSharp25SUp", 
        "accSagittalFlat25SDown", 
        "accSagittalSharp35MUp", 
        "accSagittalFlat35MDown", 
        "accSagittalSharp11MUp", 
        "accSagittalFlat11MDown", 
        "accSagittalSharp11LUp", 
        "accSagittalFlat11LDown", 
        "accSagittalSharp35LUp", 
        "accSagittalFlat35LDown", 
        "accSagittalDoubleSharp25SDown", 
        "accSagittalDoubleFlat25SUp", 
        "accSagittalDoubleSharp7CDown", 
        "accSagittalDoubleFlat7CUp", 
        "accSagittalDoubleSharp5CDown", 
        "accSagittalDoubleFlat5CUp", 
        "accSagittalDoubleSharp5v7kDown", 
        "accSagittalDoubleFlat5v7kUp", 
        "accSagittalDoubleSharp", 
        "accSagittalDoubleFlat"
    ], 
    "accidentalsSagittalTrojan": [
        "accSagittal23CommaUp", 
        "accSagittal23CommaDown", 
        "accSagittal5v19CommaUp", 
        "accSagittal5v19CommaDown", 
        "accSagittal5v23SmallDiesisUp", 
        "accSagittal5v23SmallDiesisDown", 
        "accSagittalSharp5v23SDown", 
        "accSagittalFlat5v23SUp", 
        "accSagittalSharp5v19CDown", 
        "accSagittalFlat5v19CUp", 
        "accSagittalSharp23CDown", 
        "accSagittalFlat23CUp", 
        "accSagittalSharp23CUp", 
        "accSagittalFlat23CDown", 
        "accSagittalSharp5v19CUp", 
        "accSagittalFlat5v19CDown", 
        "accSagittalSharp5v23SUp", 
        "accSagittalFlat5v23SDown", 
        "accSagittalDoubleSharp5v23SDown", 
        "accSagittalDoubleFlat5v23SUp", 
        "accSagittalDoubleSharp5v19CDown", 
        "accSagittalDoubleFlat5v19CUp", 
        "accSagittalDoubleSharp23CDown", 
        "accSagittalDoubleFlat23CUp"
    ], 
    "accidentalsSims": [
        "accidentalSims12Down", 
        "accidentalSims6Down", 
        "accidentalSims4Down", 
        "accidentalSims12Up", 
        "accidentalSims6Up", 
        "accidentalSims4Up"
    ], 
    "accidentalsStandard": [
        "accidentalFlat", 
        "accidentalNatural", 
        "accidentalSharp", 
        "accidentalDoubleSharp", 
        "accidentalDoubleFlat", 
        "accidentalTripleSharp", 
        "accidentalTripleFlat", 
        "accidentalNaturalFlat", 
        "accidentalNaturalSharp", 
        "accidentalSharpSharp", 
        "accidentalParensLeft", 
        "accidentalParensRight"
    ], 
    "accidentalsSteinZimmermann": [
        "accidentalQuarterToneFlatStein", 
        "accidentalThreeQuarterTonesFlatZimmermann", 
        "accidentalQuarterToneSharpStein", 
        "accidentalThreeQuarterTonesSharpStein", 
        "accidentalNarrowReversedFlat", 
        "accidentalNarrowReversedFlatAndFlat", 
        "accidentalReversedFlatArrowUp", 
        "accidentalReversedFlatArrowDown", 
        "accidentalFilledReversedFlatArrowUp", 
        "accidentalFilledReversedFlatArrowDown", 
        "accidentalReversedFlatAndFlatArrowUp", 
        "accidentalReversedFlatAndFlatArrowDown", 
        "accidentalFilledReversedFlatAndFlat", 
        "accidentalFilledReversedFlatAndFlatArrowUp", 
        "accidentalFilledReversedFlatAndFlatArrowDown", 
        "accidentalHalfSharpArrowUp", 
        "accidentalHalfSharpArrowDown", 
        "accidentalOneAndAHalfSharpsArrowUp", 
        "accidentalOneAndAHalfSharpsArrowDown"
    ], 
    "articulations": [
        "articAccentAbove", 
        "articAccentBelow", 
        "articStaccatoAbove", 
        "articStaccatoBelow", 
        "articTenutoAbove", 
        "articTenutoBelow", 
        "articStaccatissimoAbove", 
        "articStaccatissimoBelow", 
        "articStaccatissimoWedgeAbove", 
        "articStaccatissimoWedgeBelow", 
        "articStaccatissimoStrokeAbove", 
        "articStaccatissimoStrokeBelow", 
        "articMarcatoAbove", 
        "articMarcatoBelow", 
        "articMarcatoStaccatoAbove", 
        "articMarcatoStaccatoBelow", 
        "articAccentStaccatoAbove", 
        "articAccentStaccatoBelow", 
        "articTenutoStaccatoAbove", 
        "articTenutoStaccatoBelow", 
        "articTenutoAccentAbove", 
        "articTenutoAccentBelow", 
        "articStressAbove", 
        "articStressBelow", 
        "articUnstressAbove", 
        "articUnstressBelow", 
        "articLaissezVibrerAbove", 
        "articLaissezVibrerBelow"
    ], 
    "articulationsAbove": [
        "articAccentAbove", 
        "articStaccatoAbove", 
        "articTenutoAbove", 
        "articStaccatissimoAbove", 
        "articStaccatissimoWedgeAbove", 
        "articStaccatissimoStrokeAbove", 
        "articMarcatoAbove", 
        "articMarcatoStaccatoAbove", 
        "articAccentStaccatoAbove", 
        "articTenutoStaccatoAbove", 
        "articTenutoAccentAbove", 
        "articStressAbove", 
        "articUnstressAbove", 
        "articLaissezVibrerAbove"
    ], 
    "articulationsBelow": [
        "articAccentBelow", 
        "articStaccatoBelow", 
        "articTenutoBelow", 
        "articStaccatissimoBelow", 
        "articStaccatissimoWedgeBelow", 
        "articStaccatissimoStrokeBelow", 
        "articMarcatoBelow", 
        "articMarcatoStaccatoBelow", 
        "articAccentStaccatoBelow", 
        "articTenutoStaccatoBelow", 
        "articTenutoAccentBelow", 
        "articStressBelow", 
        "articUnstressBelow", 
        "articLaissezVibrerBelow"
    ], 
    "clefs": [
        "gClef", 
        "gClef15mb", 
        "gClef8vb", 
        "gClef8va", 
        "gClef15ma", 
        "gClef8vbOld", 
        "gClef8vbCClef", 
        "gClef8vbParens", 
        "gClefLigatedNumberBelow", 
        "gClefLigatedNumberAbove", 
        "gClefArrowUp", 
        "gClefArrowDown", 
        "cClef", 
        "cClef8vb", 
        "cClefArrowUp", 
        "cClefArrowDown", 
        "cClefSquare", 
        "cClefCombining", 
        "fClef", 
        "fClef15mb", 
        "fClef8vb", 
        "fClef8va", 
        "fClef15ma", 
        "fClefArrowUp", 
        "fClefArrowDown", 
        "unpitchedPercussionClef1", 
        "unpitchedPercussionClef2", 
        "semipitchedPercussionClef1", 
        "semipitchedPercussionClef2", 
        "6stringTabClef", 
        "4stringTabClef", 
        "cClefTriangular", 
        "fClefTriangular", 
        "cClefTriangularToFClef", 
        "fClefTriangularToCClef", 
        "gClefReversed", 
        "gClefTurned", 
        "cClefReversed", 
        "fClefReversed", 
        "fClefTurned", 
        "bridgeClef", 
        "accdnDiatonicClef", 
        "gClefChange", 
        "cClefChange", 
        "fClefChange", 
        "clef8", 
        "clef15", 
        "clefChangeCombining"
    ], 
    "clefsC": [
        "cClef", 
        "cClef8vb", 
        "cClefArrowUp", 
        "cClefArrowDown", 
        "cClefSquare", 
        "cClefCombining", 
        "cClefReversed"
    ], 
    "clefsF": [
        "fClef", 
        "fClef15mb", 
        "fClef8vb", 
        "fClef8va", 
        "fClef15ma", 
        "fClefArrowUp", 
        "fClefArrowDown", 
        "fClefReversed"
    ], 
    "clefsG": [
        "gClef", 
        "gClef15mb", 
        "gClef8vb", 
        "gClef8va", 
        "gClef15ma", 
        "gClef8vbOld", 
        "gClef8vbCClef", 
        "gClef8vbParens", 
        "gClefLigatedNumberBelow", 
        "gClefLigatedNumberAbove", 
        "gClefArrowUp", 
        "gClefArrowDown", 
        "gClefReversed"
    ], 
    "combiningStaffPositions": [
        "legerLine", 
        "legerLineWide", 
        "legerLineNarrow", 
        "gClefTurned", 
        "fClefTurned", 
        "noteheadDoubleWhole", 
        "noteheadDoubleWholeSquare", 
        "noteheadWhole", 
        "noteheadHalf", 
        "noteheadBlack", 
        "noteheadNull", 
        "noteheadXDoubleWhole", 
        "noteheadXWhole", 
        "noteheadXHalf", 
        "noteheadXBlack", 
        "noteheadXOrnate", 
        "noteheadPlusDoubleWhole", 
        "noteheadPlusWhole", 
        "noteheadPlusHalf", 
        "noteheadPlusBlack", 
        "noteheadCircleXDoubleWhole", 
        "noteheadCircleXWhole", 
        "noteheadCircleXHalf", 
        "noteheadCircleX", 
        "noteheadDoubleWholeWithX", 
        "noteheadWholeWithX", 
        "noteheadHalfWithX", 
        "noteheadVoidWithX", 
        "noteheadSquareWhite", 
        "noteheadSquareBlack", 
        "noteheadTriangleUpDoubleWhole", 
        "noteheadTriangleUpWhole", 
        "noteheadTriangleUpHalf", 
        "noteheadTriangleUpWhite", 
        "noteheadTriangleUpBlack", 
        "noteheadTriangleLeftWhite", 
        "noteheadTriangleLeftBlack", 
        "noteheadTriangleRightWhite", 
        "noteheadTriangleRightBlack", 
        "noteheadTriangleDownDoubleWhole", 
        "noteheadTriangleDownWhole", 
        "noteheadTriangleDownHalf", 
        "noteheadTriangleDownWhite", 
        "noteheadTriangleDownBlack", 
        "noteheadTriangleUpRightWhite", 
        "noteheadTriangleUpRightBlack", 
        "noteheadMoonWhite", 
        "noteheadMoonBlack", 
        "noteheadTriangleRoundDownWhite", 
        "noteheadTriangleRoundDownBlack", 
        "noteheadParenthesis", 
        "noteheadSlashedBlack1", 
        "noteheadSlashedBlack2", 
        "noteheadSlashedHalf1", 
        "noteheadSlashedHalf2", 
        "noteheadSlashedWhole1", 
        "noteheadSlashedWhole2", 
        "noteheadSlashedDoubleWhole1", 
        "noteheadSlashedDoubleWhole2", 
        "noteheadDiamondDoubleWhole", 
        "noteheadDiamondWhole", 
        "noteheadDiamondHalf", 
        "noteheadDiamondBlack", 
        "noteheadDiamondWhite", 
        "noteheadDiamondWhiteWide", 
        "noteheadDiamondDoubleWholeOld", 
        "noteheadDiamondWholeOld", 
        "noteheadDiamondHalfOld", 
        "noteheadDiamondBlackOld", 
        "noteheadDiamondHalfFilled", 
        "noteheadCircledBlack", 
        "noteheadCircledHalf", 
        "noteheadCircledWhole", 
        "noteheadCircledDoubleWhole", 
        "noteheadLargeArrowUpDoubleWhole", 
        "noteheadLargeArrowUpWhole", 
        "noteheadLargeArrowUpHalf", 
        "noteheadLargeArrowUpBlack", 
        "noteheadLargeArrowDownDoubleWhole", 
        "noteheadLargeArrowDownWhole", 
        "noteheadLargeArrowDownHalf", 
        "noteheadLargeArrowDownBlack", 
        "noteheadParenthesisLeft", 
        "noteheadParenthesisRight", 
        "noteheadCircleSlash", 
        "noteheadHeavyX", 
        "noteheadHeavyXHat", 
        "noteheadWholeFilled", 
        "noteheadHalfFilled", 
        "noteheadDiamondOpen", 
        "noteheadSlashVerticalEnds", 
        "noteheadSlashHorizontalEnds", 
        "noteheadSlashWhiteWhole", 
        "noteheadSlashWhiteHalf", 
        "noteheadSlashDiamondWhite", 
        "noteheadSlashVerticalEndsSmall", 
        "noteheadSlashX", 
        "noteheadSlashVerticalEndsMuted", 
        "noteheadSlashHorizontalEndsMuted", 
        "noteheadSlashWhiteMuted", 
        "noteheadRoundBlackLarge", 
        "noteheadRoundWhiteLarge", 
        "noteheadRoundWhiteWithDotLarge", 
        "noteheadRoundBlack", 
        "noteheadRoundWhite", 
        "noteheadRoundWhiteWithDot", 
        "noteheadRoundBlackSlashedLarge", 
        "noteheadRoundWhiteSlashedLarge", 
        "noteheadRoundBlackSlashed", 
        "noteheadRoundWhiteSlashed", 
        "noteheadSquareBlackLarge", 
        "noteheadSquareBlackWhite", 
        "noteheadClusterSquareWhite", 
        "noteheadClusterSquareBlack", 
        "noteheadClusterRoundWhite", 
        "noteheadClusterRoundBlack", 
        "noteheadClusterDoubleWhole2nd", 
        "noteheadClusterWhole2nd", 
        "noteheadClusterHalf2nd", 
        "noteheadClusterQuarter2nd", 
        "noteheadClusterDoubleWhole3rd", 
        "noteheadClusterWhole3rd", 
        "noteheadClusterHalf3rd", 
        "noteheadClusterQuarter3rd", 
        "noteheadClusterDoubleWholeTop", 
        "noteheadClusterDoubleWholeMiddle", 
        "noteheadClusterDoubleWholeBottom", 
        "noteheadClusterWholeTop", 
        "noteheadClusterWholeMiddle", 
        "noteheadClusterWholeBottom", 
        "noteheadClusterHalfTop", 
        "noteheadClusterHalfMiddle", 
        "noteheadClusterHalfBottom", 
        "noteheadClusterQuarterTop", 
        "noteheadClusterQuarterMiddle", 
        "noteheadClusterQuarterBottom", 
        "noteheadDiamondClusterWhite2nd", 
        "noteheadDiamondClusterBlack2nd", 
        "noteheadDiamondClusterWhite3rd", 
        "noteheadDiamondClusterBlack3rd", 
        "noteheadDiamondClusterWhiteTop", 
        "noteheadDiamondClusterWhiteMiddle", 
        "noteheadDiamondClusterWhiteBottom", 
        "noteheadDiamondClusterBlackTop", 
        "noteheadDiamondClusterBlackMiddle", 
        "noteheadDiamondClusterBlackBottom", 
        "noteheadRectangularClusterBlackTop", 
        "noteheadRectangularClusterBlackMiddle", 
        "noteheadRectangularClusterBlackBottom", 
        "noteheadRectangularClusterWhiteTop", 
        "noteheadRectangularClusterWhiteMiddle", 
        "noteheadRectangularClusterWhiteBottom", 
        "noteDoWhole", 
        "noteReWhole", 
        "noteMiWhole", 
        "noteFaWhole", 
        "noteSoWhole", 
        "noteLaWhole", 
        "noteTiWhole", 
        "noteSiWhole", 
        "noteDoHalf", 
        "noteReHalf", 
        "noteMiHalf", 
        "noteFaHalf", 
        "noteSoHalf", 
        "noteLaHalf", 
        "noteTiHalf", 
        "noteSiHalf", 
        "noteDoBlack", 
        "noteReBlack", 
        "noteMiBlack", 
        "noteFaBlack", 
        "noteSoBlack", 
        "noteLaBlack", 
        "noteTiBlack", 
        "noteSiBlack", 
        "noteAFlatWhole", 
        "noteAWhole", 
        "noteASharpWhole", 
        "noteBFlatWhole", 
        "noteBWhole", 
        "noteBSharpWhole", 
        "noteCFlatWhole", 
        "noteCWhole", 
        "noteCSharpWhole", 
        "noteDFlatWhole", 
        "noteDWhole", 
        "noteDSharpWhole", 
        "noteEFlatWhole", 
        "noteEWhole", 
        "noteESharpWhole", 
        "noteFFlatWhole", 
        "noteFWhole", 
        "noteFSharpWhole", 
        "noteGFlatWhole", 
        "noteGWhole", 
        "noteGSharpWhole", 
        "noteHWhole", 
        "noteHSharpWhole", 
        "noteAFlatHalf", 
        "noteAHalf", 
        "noteASharpHalf", 
        "noteBFlatHalf", 
        "noteBHalf", 
        "noteBSharpHalf", 
        "noteCFlatHalf", 
        "noteCHalf", 
        "noteCSharpHalf", 
        "noteDFlatHalf", 
        "noteDHalf", 
        "noteDSharpHalf", 
        "noteEFlatHalf", 
        "noteEHalf", 
        "noteESharpHalf", 
        "noteFFlatHalf", 
        "noteFHalf", 
        "noteFSharpHalf", 
        "noteGFlatHalf", 
        "noteGHalf", 
        "noteGSharpHalf", 
        "noteHHalf", 
        "noteHSharpHalf", 
        "noteAFlatBlack", 
        "noteABlack", 
        "noteASharpBlack", 
        "noteBFlatBlack", 
        "noteBBlack", 
        "noteBSharpBlack", 
        "noteCFlatBlack", 
        "noteCBlack", 
        "noteCSharpBlack", 
        "noteDFlatBlack", 
        "noteDBlack", 
        "noteDSharpBlack", 
        "noteEFlatBlack", 
        "noteEBlack", 
        "noteESharpBlack", 
        "noteFFlatBlack", 
        "noteFBlack", 
        "noteFSharpBlack", 
        "noteGFlatBlack", 
        "noteGBlack", 
        "noteGSharpBlack", 
        "noteHBlack", 
        "noteHSharpBlack", 
        "noteEmptyWhole", 
        "noteEmptyHalf", 
        "noteEmptyBlack", 
        "noteShapeRoundWhite", 
        "noteShapeRoundBlack", 
        "noteShapeSquareWhite", 
        "noteShapeSquareBlack", 
        "noteShapeTriangleRightWhite", 
        "noteShapeTriangleRightBlack", 
        "noteShapeTriangleLeftWhite", 
        "noteShapeTriangleLeftBlack", 
        "noteShapeDiamondWhite", 
        "noteShapeDiamondBlack", 
        "noteShapeTriangleUpWhite", 
        "noteShapeTriangleUpBlack", 
        "noteShapeMoonWhite", 
        "noteShapeMoonBlack", 
        "noteShapeTriangleRoundWhite", 
        "noteShapeTriangleRoundBlack", 
        "noteDoubleWhole", 
        "noteDoubleWholeSquare", 
        "noteWhole", 
        "noteHalfUp", 
        "noteHalfDown", 
        "noteQuarterUp", 
        "noteQuarterDown", 
        "note8thUp", 
        "note8thDown", 
        "note16thUp", 
        "note16thDown", 
        "note32ndUp", 
        "note32ndDown", 
        "note64thUp", 
        "note64thDown", 
        "note128thUp", 
        "note128thDown", 
        "note256thUp", 
        "note256thDown", 
        "note512thUp", 
        "note512thDown", 
        "note1024thUp", 
        "note1024thDown", 
        "augmentationDot", 
        "textBlackNoteShortStem", 
        "textBlackNoteLongStem", 
        "textBlackNoteFrac8thShortStem", 
        "textBlackNoteFrac8thLongStem", 
        "textBlackNoteFrac16thShortStem", 
        "textBlackNoteFrac16thLongStem", 
        "textBlackNoteFrac32ndLongStem", 
        "textCont8thBeamShortStem", 
        "textCont8thBeamLongStem", 
        "textCont16thBeamShortStem", 
        "textCont16thBeamLongStem", 
        "textCont32ndBeamLongStem", 
        "textAugmentationDot", 
        "textTie", 
        "textTupletBracketStartShortStem", 
        "textTuplet3ShortStem", 
        "textTupletBracketEndShortStem", 
        "textTupletBracketStartLongStem", 
        "textTuplet3LongStem", 
        "textTupletBracketEndLongStem", 
        "stem", 
        "stemSprechgesang", 
        "stemSwished", 
        "stemPendereckiTremolo", 
        "stemSulPonticello", 
        "stemBowOnBridge", 
        "stemBowOnTailpiece", 
        "stemBuzzRoll", 
        "stemDamp", 
        "stemVibratoPulse", 
        "stemMultiphonicsBlack", 
        "stemMultiphonicsWhite", 
        "stemMultiphonicsBlackWhite", 
        "stemSussurando", 
        "stemRimShot", 
        "stemHarpStringNoise", 
        "flag8thUp", 
        "flag8thDown", 
        "flag16thUp", 
        "flag16thDown", 
        "flag32ndUp", 
        "flag32ndDown", 
        "flag64thUp", 
        "flag64thDown", 
        "flag128thUp", 
        "flag128thDown", 
        "flag256thUp", 
        "flag256thDown", 
        "flag512thUp", 
        "flag512thDown", 
        "flag1024thUp", 
        "flag1024thDown", 
        "flagInternalUp", 
        "flagInternalDown", 
        "accidentalFlat", 
        "accidentalNatural", 
        "accidentalSharp", 
        "accidentalDoubleSharp", 
        "accidentalDoubleFlat", 
        "accidentalTripleSharp", 
        "accidentalTripleFlat", 
        "accidentalNaturalFlat", 
        "accidentalNaturalSharp", 
        "accidentalSharpSharp", 
        "accidentalParensLeft", 
        "accidentalParensRight", 
        "accidentalQuarterToneFlatArrowUp", 
        "accidentalThreeQuarterTonesFlatArrowDown", 
        "accidentalQuarterToneSharpNaturalArrowUp", 
        "accidentalQuarterToneFlatNaturalArrowDown", 
        "accidentalThreeQuarterTonesSharpArrowUp", 
        "accidentalQuarterToneSharpArrowDown", 
        "accidentalFiveQuarterTonesSharpArrowUp", 
        "accidentalThreeQuarterTonesSharpArrowDown", 
        "accidentalThreeQuarterTonesFlatArrowUp", 
        "accidentalFiveQuarterTonesFlatArrowDown", 
        "accidentalArrowUp", 
        "accidentalArrowDown", 
        "accidentalQuarterToneFlatStein", 
        "accidentalThreeQuarterTonesFlatZimmermann", 
        "accidentalQuarterToneSharpStein", 
        "accidentalThreeQuarterTonesSharpStein", 
        "accidentalNarrowReversedFlat", 
        "accidentalNarrowReversedFlatAndFlat", 
        "accidentalReversedFlatArrowUp", 
        "accidentalReversedFlatArrowDown", 
        "accidentalFilledReversedFlatArrowUp", 
        "accidentalFilledReversedFlatArrowDown", 
        "accidentalReversedFlatAndFlatArrowUp", 
        "accidentalReversedFlatAndFlatArrowDown", 
        "accidentalFilledReversedFlatAndFlat", 
        "accidentalFilledReversedFlatAndFlatArrowUp", 
        "accidentalFilledReversedFlatAndFlatArrowDown", 
        "accidentalHalfSharpArrowUp", 
        "accidentalHalfSharpArrowDown", 
        "accidentalOneAndAHalfSharpsArrowUp", 
        "accidentalOneAndAHalfSharpsArrowDown", 
        "accidentalSims12Down", 
        "accidentalSims6Down", 
        "accidentalSims4Down", 
        "accidentalSims12Up", 
        "accidentalSims6Up", 
        "accidentalSims4Up", 
        "accidentalJohnstonPlus", 
        "accidentalJohnstonMinus", 
        "accidentalJohnstonEl", 
        "accidentalJohnstonSeven", 
        "accidentalJohnstonUp", 
        "accidentalJohnstonDown", 
        "accidentalJohnston13", 
        "accidentalJohnston31", 
        "accidentalDoubleFlatOneArrowDown", 
        "accidentalFlatOneArrowDown", 
        "accidentalNaturalOneArrowDown", 
        "accidentalSharpOneArrowDown", 
        "accidentalDoubleSharpOneArrowDown", 
        "accidentalDoubleFlatOneArrowUp", 
        "accidentalFlatOneArrowUp", 
        "accidentalNaturalOneArrowUp", 
        "accidentalSharpOneArrowUp", 
        "accidentalDoubleSharpOneArrowUp", 
        "accidentalDoubleFlatTwoArrowsDown", 
        "accidentalFlatTwoArrowsDown", 
        "accidentalNaturalTwoArrowsDown", 
        "accidentalSharpTwoArrowsDown", 
        "accidentalDoubleSharpTwoArrowsDown", 
        "accidentalDoubleFlatTwoArrowsUp", 
        "accidentalFlatTwoArrowsUp", 
        "accidentalNaturalTwoArrowsUp", 
        "accidentalSharpTwoArrowsUp", 
        "accidentalDoubleSharpTwoArrowsUp", 
        "accidentalDoubleFlatThreeArrowsDown", 
        "accidentalFlatThreeArrowsDown", 
        "accidentalNaturalThreeArrowsDown", 
        "accidentalSharpThreeArrowsDown", 
        "accidentalDoubleSharpThreeArrowsDown", 
        "accidentalDoubleFlatThreeArrowsUp", 
        "accidentalFlatThreeArrowsUp", 
        "accidentalNaturalThreeArrowsUp", 
        "accidentalSharpThreeArrowsUp", 
        "accidentalDoubleSharpThreeArrowsUp", 
        "accidentalLowerOneSeptimalComma", 
        "accidentalRaiseOneSeptimalComma", 
        "accidentalLowerTwoSeptimalCommas", 
        "accidentalRaiseTwoSeptimalCommas", 
        "accidentalLowerOneUndecimalQuartertone", 
        "accidentalRaiseOneUndecimalQuartertone", 
        "accidentalLowerOneTridecimalQuartertone", 
        "accidentalRaiseOneTridecimalQuartertone", 
        "accidentalCombiningLower17Schisma", 
        "accidentalCombiningRaise17Schisma", 
        "accidentalCombiningLower19Schisma", 
        "accidentalCombiningRaise19Schisma", 
        "accidentalCombiningLower23Limit29LimitComma", 
        "accidentalCombiningRaise23Limit29LimitComma", 
        "accidentalCombiningLower31Schisma", 
        "accidentalCombiningRaise31Schisma", 
        "accidentalCombiningOpenCurlyBrace", 
        "accidentalCombiningCloseCurlyBrace", 
        "accidentalDoubleFlatEqualTempered", 
        "accidentalFlatEqualTempered", 
        "accidentalNaturalEqualTempered", 
        "accidentalSharpEqualTempered", 
        "accidentalDoubleSharpEqualTempered", 
        "accSagittal5v7KleismaUp", 
        "accSagittal5v7KleismaDown", 
        "accSagittal5CommaUp", 
        "accSagittal5CommaDown", 
        "accSagittal7CommaUp", 
        "accSagittal7CommaDown", 
        "accSagittal25SmallDiesisUp", 
        "accSagittal25SmallDiesisDown", 
        "accSagittal35MediumDiesisUp", 
        "accSagittal35MediumDiesisDown", 
        "accSagittal11MediumDiesisUp", 
        "accSagittal11MediumDiesisDown", 
        "accSagittal11LargeDiesisUp", 
        "accSagittal11LargeDiesisDown", 
        "accSagittal35LargeDiesisUp", 
        "accSagittal35LargeDiesisDown", 
        "accSagittalSharp25SDown", 
        "accSagittalFlat25SUp", 
        "accSagittalSharp7CDown", 
        "accSagittalFlat7CUp", 
        "accSagittalSharp5CDown", 
        "accSagittalFlat5CUp", 
        "accSagittalSharp5v7kDown", 
        "accSagittalFlat5v7kUp", 
        "accSagittalSharp", 
        "accSagittalFlat", 
        "accSagittalUnused1", 
        "accSagittalUnused2", 
        "accSagittalSharp5v7kUp", 
        "accSagittalFlat5v7kDown", 
        "accSagittalSharp5CUp", 
        "accSagittalFlat5CDown", 
        "accSagittalSharp7CUp", 
        "accSagittalFlat7CDown", 
        "accSagittalSharp25SUp", 
        "accSagittalFlat25SDown", 
        "accSagittalSharp35MUp", 
        "accSagittalFlat35MDown", 
        "accSagittalSharp11MUp", 
        "accSagittalFlat11MDown", 
        "accSagittalSharp11LUp", 
        "accSagittalFlat11LDown", 
        "accSagittalSharp35LUp", 
        "accSagittalFlat35LDown", 
        "accSagittalDoubleSharp25SDown", 
        "accSagittalDoubleFlat25SUp", 
        "accSagittalDoubleSharp7CDown", 
        "accSagittalDoubleFlat7CUp", 
        "accSagittalDoubleSharp5CDown", 
        "accSagittalDoubleFlat5CUp", 
        "accSagittalDoubleSharp5v7kDown", 
        "accSagittalDoubleFlat5v7kUp", 
        "accSagittalDoubleSharp", 
        "accSagittalDoubleFlat", 
        "accSagittal7v11KleismaUp", 
        "accSagittal7v11KleismaDown", 
        "accSagittal17CommaUp", 
        "accSagittal17CommaDown", 
        "accSagittal55CommaUp", 
        "accSagittal55CommaDown", 
        "accSagittal7v11CommaUp", 
        "accSagittal7v11CommaDown", 
        "accSagittal5v11SmallDiesisUp", 
        "accSagittal5v11SmallDiesisDown", 
        "accSagittalSharp5v11SDown", 
        "accSagittalFlat5v11SUp", 
        "accSagittalSharp7v11CDown", 
        "accSagittalFlat7v11CUp", 
        "accSagittalSharp55CDown", 
        "accSagittalFlat55CUp", 
        "accSagittalSharp17CDown", 
        "accSagittalFlat17CUp", 
        "accSagittalSharp7v11kDown", 
        "accSagittalFlat7v11kUp", 
        "accSagittalSharp7v11kUp", 
        "accSagittalFlat7v11kDown", 
        "accSagittalSharp17CUp", 
        "accSagittalFlat17CDown", 
        "accSagittalSharp55CUp", 
        "accSagittalFlat55CDown", 
        "accSagittalSharp7v11CUp", 
        "accSagittalFlat7v11CDown", 
        "accSagittalSharp5v11SUp", 
        "accSagittalFlat5v11SDown", 
        "accSagittalDoubleSharp5v11SDown", 
        "accSagittalDoubleFlat5v11SUp", 
        "accSagittalDoubleSharp7v11CDown", 
        "accSagittalDoubleFlat7v11CUp", 
        "accSagittalDoubleSharp55CDown", 
        "accSagittalDoubleFlat55CUp", 
        "accSagittalDoubleSharp17CDown", 
        "accSagittalDoubleFlat17CUp", 
        "accSagittalDoubleSharp7v11kDown", 
        "accSagittalDoubleFlat7v11kUp", 
        "accSagittal23CommaUp", 
        "accSagittal23CommaDown", 
        "accSagittal5v19CommaUp", 
        "accSagittal5v19CommaDown", 
        "accSagittal5v23SmallDiesisUp", 
        "accSagittal5v23SmallDiesisDown", 
        "accSagittalSharp5v23SDown", 
        "accSagittalFlat5v23SUp", 
        "accSagittalSharp5v19CDown", 
        "accSagittalFlat5v19CUp", 
        "accSagittalSharp23CDown", 
        "accSagittalFlat23CUp", 
        "accSagittalSharp23CUp", 
        "accSagittalFlat23CDown", 
        "accSagittalSharp5v19CUp", 
        "accSagittalFlat5v19CDown", 
        "accSagittalSharp5v23SUp", 
        "accSagittalFlat5v23SDown", 
        "accSagittalDoubleSharp5v23SDown", 
        "accSagittalDoubleFlat5v23SUp", 
        "accSagittalDoubleSharp5v19CDown", 
        "accSagittalDoubleFlat5v19CUp", 
        "accSagittalDoubleSharp23CDown", 
        "accSagittalDoubleFlat23CUp", 
        "accSagittal19SchismaUp", 
        "accSagittal19SchismaDown", 
        "accSagittal17KleismaUp", 
        "accSagittal17KleismaDown", 
        "accSagittal143CommaUp", 
        "accSagittal143CommaDown", 
        "accSagittal11v49CommaUp", 
        "accSagittal11v49CommaDown", 
        "accSagittal19CommaUp", 
        "accSagittal19CommaDown", 
        "accSagittal7v19CommaUp", 
        "accSagittal7v19CommaDown", 
        "accSagittal49SmallDiesisUp", 
        "accSagittal49SmallDiesisDown", 
        "accSagittal23SmallDiesisUp", 
        "accSagittal23SmallDiesisDown", 
        "accSagittal5v13MediumDiesisUp", 
        "accSagittal5v13MediumDiesisDown", 
        "accSagittal11v19MediumDiesisUp", 
        "accSagittal11v19MediumDiesisDown", 
        "accSagittal49MediumDiesisUp", 
        "accSagittal49MediumDiesisDown", 
        "accSagittal5v49MediumDiesisUp", 
        "accSagittal5v49MediumDiesisDown", 
        "accSagittal49LargeDiesisUp", 
        "accSagittal49LargeDiesisDown", 
        "accSagittal11v19LargeDiesisUp", 
        "accSagittal11v19LargeDiesisDown", 
        "accSagittal5v13LargeDiesisUp", 
        "accSagittal5v13LargeDiesisDown", 
        "accSagittalSharp23SDown", 
        "accSagittalFlat23SUp", 
        "accSagittalSharp49SDown", 
        "accSagittalFlat49SUp", 
        "accSagittalSharp7v19CDown", 
        "accSagittalFlat7v19CUp", 
        "accSagittalSharp19CDown", 
        "accSagittalFlat19CUp", 
        "accSagittalSharp11v49CDown", 
        "accSagittalFlat11v49CUp", 
        "accSagittalSharp143CDown", 
        "accSagittalFlat143CUp", 
        "accSagittalSharp17kDown", 
        "accSagittalFlat17kUp", 
        "accSagittalSharp19sDown", 
        "accSagittalFlat19sUp", 
        "accSagittalSharp19sUp", 
        "accSagittalFlat19sDown", 
        "accSagittalSharp17kUp", 
        "accSagittalFlat17kDown", 
        "accSagittalSharp143CUp", 
        "accSagittalFlat143CDown", 
        "accSagittalSharp11v49CUp", 
        "accSagittalFlat11v49CDown", 
        "accSagittalSharp19CUp", 
        "accSagittalFlat19CDown", 
        "accSagittalSharp7v19CUp", 
        "accSagittalFlat7v19CDown", 
        "accSagittalSharp49SUp", 
        "accSagittalFlat49SDown", 
        "accSagittalSharp23SUp", 
        "accSagittalFlat23SDown", 
        "accSagittalSharp5v13MUp", 
        "accSagittalFlat5v13MDown", 
        "accSagittalSharp11v19MUp", 
        "accSagittalFlat11v19MDown", 
        "accSagittalSharp49MUp", 
        "accSagittalFlat49MDown", 
        "accSagittalSharp5v49MUp", 
        "accSagittalFlat5v49MDown", 
        "accSagittalSharp49LUp", 
        "accSagittalFlat49LDown", 
        "accSagittalSharp11v19LUp", 
        "accSagittalFlat11v19LDown", 
        "accSagittalSharp5v13LUp", 
        "accSagittalFlat5v13LDown", 
        "accSagittalUnused3", 
        "accSagittalUnused4", 
        "accSagittalDoubleSharp23SDown", 
        "accSagittalDoubleFlat23SUp", 
        "accSagittalDoubleSharp49SDown", 
        "accSagittalDoubleFlat49SUp", 
        "accSagittalDoubleSharp7v19CDown", 
        "accSagittalDoubleFlat7v19CUp", 
        "accSagittalDoubleSharp19CDown", 
        "accSagittalDoubleFlat19CUp", 
        "accSagittalDoubleSharp11v49CDown", 
        "accSagittalDoubleFlat11v49CUp", 
        "accSagittalDoubleSharp143CDown", 
        "accSagittalDoubleFlat143CUp", 
        "accSagittalDoubleSharp17kDown", 
        "accSagittalDoubleFlat17kUp", 
        "accSagittalDoubleSharp19sDown", 
        "accSagittalDoubleFlat19sUp", 
        "accSagittalShaftUp", 
        "accSagittalShaftDown", 
        "accSagittalAcute", 
        "accSagittalGrave", 
        "accidentalWyschnegradsky1TwelfthsSharp", 
        "accidentalWyschnegradsky2TwelfthsSharp", 
        "accidentalWyschnegradsky3TwelfthsSharp", 
        "accidentalWyschnegradsky4TwelfthsSharp", 
        "accidentalWyschnegradsky5TwelfthsSharp", 
        "accidentalWyschnegradsky6TwelfthsSharp", 
        "accidentalWyschnegradsky7TwelfthsSharp", 
        "accidentalWyschnegradsky8TwelfthsSharp", 
        "accidentalWyschnegradsky9TwelfthsSharp", 
        "accidentalWyschnegradsky10TwelfthsSharp", 
        "accidentalWyschnegradsky11TwelfthsSharp", 
        "accidentalWyschnegradsky1TwelfthsFlat", 
        "accidentalWyschnegradsky2TwelfthsFlat", 
        "accidentalWyschnegradsky3TwelfthsFlat", 
        "accidentalWyschnegradsky4TwelfthsFlat", 
        "accidentalWyschnegradsky5TwelfthsFlat", 
        "accidentalWyschnegradsky6TwelfthsFlat", 
        "accidentalWyschnegradsky7TwelfthsFlat", 
        "accidentalWyschnegradsky8TwelfthsFlat", 
        "accidentalWyschnegradsky9TwelfthsFlat", 
        "accidentalWyschnegradsky10TwelfthsFlat", 
        "accidentalWyschnegradsky11TwelfthsFlat", 
        "accidentalBuyukMucennebFlat", 
        "accidentalKucukMucennebFlat", 
        "accidentalBakiyeFlat", 
        "accidentalKomaFlat", 
        "accidentalKomaSharp", 
        "accidentalBakiyeSharp", 
        "accidentalKucukMucennebSharp", 
        "accidentalBuyukMucennebSharp", 
        "accidental1CommaSharp", 
        "accidental2CommaSharp", 
        "accidental3CommaSharp", 
        "accidental5CommaSharp", 
        "accidental1CommaFlat", 
        "accidental2CommaFlat", 
        "accidental3CommaFlat", 
        "accidental4CommaFlat", 
        "accidentalKoron", 
        "accidentalSori", 
        "accidentalXenakisOneThirdToneSharp", 
        "accidentalXenakisTwoThirdTonesSharp", 
        "accidentalQuarterToneSharpBusotti", 
        "accidentalSharpOneHorizontalStroke", 
        "accidentalThreeQuarterTonesSharpBusotti", 
        "accidentalQuarterToneSharpWiggle", 
        "accidentalTavenerSharp", 
        "accidentalTavenerFlat", 
        "accidentalQuarterToneFlatPenderecki", 
        "accidentalCommaSlashUp", 
        "accidentalCommaSlashDown", 
        "accidentalWilsonPlus", 
        "accidentalWilsonMinus", 
        "accidentalLargeDoubleSharp", 
        "accidentalQuarterToneSharp4", 
        "accidentalQuarterToneFlat4", 
        "accidentalQuarterToneFlatFilledReversed", 
        "accidentalSharpReversed", 
        "accidentalNaturalReversed", 
        "accidentalDoubleFlatReversed", 
        "accidentalFlatTurned", 
        "accidentalDoubleFlatTurned", 
        "accidentalThreeQuarterTonesFlatGrisey", 
        "accidentalThreeQuarterTonesFlatTartini", 
        "accidentalQuarterToneFlatVanBlankenburg", 
        "accidentalThreeQuarterTonesFlatCouper", 
        "accidentalOneThirdToneSharpFerneyhough", 
        "accidentalOneThirdToneFlatFerneyhough", 
        "accidentalTwoThirdTonesSharpFerneyhough", 
        "accidentalTwoThirdTonesFlatFerneyhough", 
        "articAccentAbove", 
        "articAccentBelow", 
        "articStaccatoAbove", 
        "articStaccatoBelow", 
        "articTenutoAbove", 
        "articTenutoBelow", 
        "articStaccatissimoAbove", 
        "articStaccatissimoBelow", 
        "articStaccatissimoWedgeAbove", 
        "articStaccatissimoWedgeBelow", 
        "articStaccatissimoStrokeAbove", 
        "articStaccatissimoStrokeBelow", 
        "articMarcatoAbove", 
        "articMarcatoBelow", 
        "articMarcatoStaccatoAbove", 
        "articMarcatoStaccatoBelow", 
        "articAccentStaccatoAbove", 
        "articAccentStaccatoBelow", 
        "articTenutoStaccatoAbove", 
        "articTenutoStaccatoBelow", 
        "articTenutoAccentAbove", 
        "articTenutoAccentBelow", 
        "articStressAbove", 
        "articStressBelow", 
        "articUnstressAbove", 
        "articUnstressBelow", 
        "articLaissezVibrerAbove", 
        "articLaissezVibrerBelow", 
        "fermataAbove", 
        "fermataBelow", 
        "fermataVeryShortAbove", 
        "fermataVeryShortBelow", 
        "fermataShortAbove", 
        "fermataShortBelow", 
        "fermataLongAbove", 
        "fermataLongBelow", 
        "fermataVeryLongAbove", 
        "fermataVeryLongBelow", 
        "fermataLongHenzeAbove", 
        "fermataLongHenzeBelow", 
        "fermataShortHenzeAbove", 
        "fermataShortHenzeBelow", 
        "breathMarkComma", 
        "caesura", 
        "caesuraThick", 
        "caesuraShort", 
        "breathMarkSalzedo", 
        "curlewSign", 
        "restLonga", 
        "restDoubleWhole", 
        "restWhole", 
        "restHalf", 
        "restQuarter", 
        "rest8th", 
        "rest16th", 
        "rest32nd", 
        "rest64th", 
        "rest128th", 
        "rest256th", 
        "rest512th", 
        "rest1024th", 
        "restHBar", 
        "restHBarLeft", 
        "restHBarRight", 
        "restQuarterOld", 
        "restWholeLegerLine", 
        "restHalfLegerLine", 
        "repeat1Bar", 
        "repeat2Bars", 
        "repeat4Bars", 
        "mensuralGclef", 
        "mensuralGclefPetrucci", 
        "chantFclef", 
        "mensuralFclef", 
        "mensuralFclefPetrucci", 
        "chantCclef", 
        "mensuralCclefPetrucciPosMiddle", 
        "mensuralProlation1", 
        "mensuralProlation2", 
        "mensuralProlation3", 
        "mensuralProlation4", 
        "mensuralProlation5", 
        "mensuralProlation6", 
        "mensuralProlation7", 
        "mensuralProlation8", 
        "mensuralProlation9", 
        "mensuralProlation10", 
        "mensuralProlation11", 
        "mensuralProportionTempusPerfectum", 
        "mensuralProportionProportioDupla1", 
        "mensuralProportionProportioDupla2", 
        "mensuralProportionProportioTripla", 
        "mensuralProportionProportioQuadrupla", 
        "mensuralProlationCombiningDot", 
        "mensuralProlationCombiningTwoDots", 
        "mensuralProlationCombiningThreeDots", 
        "mensuralProlationCombiningThreeDotsTri", 
        "mensuralProlationCombiningDotVoid", 
        "mensuralProlationCombiningStroke", 
        "mensuralProportion1", 
        "mensuralProportion2", 
        "mensuralProportion3", 
        "mensuralProportion4", 
        "mensuralNoteheadMaximaBlack", 
        "mensuralNoteheadMaximaVoid", 
        "mensuralNoteheadMaximaBlackVoid", 
        "mensuralNoteheadMaximaWhite", 
        "mensuralNoteheadLongaBlack", 
        "mensuralNoteheadLongaVoid", 
        "mensuralNoteheadLongaBlackVoid", 
        "mensuralNoteheadLongaWhite", 
        "mensuralNoteheadSemibrevisBlack", 
        "mensuralNoteheadSemibrevisVoid", 
        "mensuralNoteheadSemibrevisBlackVoid", 
        "mensuralNoteheadSemibrevisBlackVoidTurned", 
        "mensuralNoteheadMinimaWhite", 
        "mensuralNoteheadSemiminimaWhite", 
        "mensuralCombStemUp", 
        "mensuralCombStemDown", 
        "mensuralCombStemDiagonal", 
        "mensuralCombStemUpFlagRight", 
        "mensuralCombStemDownFlagRight", 
        "mensuralCombStemUpFlagLeft", 
        "mensuralCombStemDownFlagLeft", 
        "mensuralCombStemUpFlagFlared", 
        "mensuralCombStemDownFlagFlared", 
        "mensuralCombStemUpFlagExtended", 
        "mensuralCombStemDownFlagExtended", 
        "mensuralCombStemUpFlagSemiminima", 
        "mensuralCombStemDownFlagSemiminima", 
        "mensuralCombStemUpFlagFusa", 
        "mensuralCombStemDownFlagFusa", 
        "mensuralBlackMaxima", 
        "mensuralBlackLonga", 
        "mensuralBlackBrevis", 
        "mensuralBlackSemibrevis", 
        "mensuralBlackMinima", 
        "mensuralBlackSemiminima", 
        "mensuralBlackBrevisVoid", 
        "mensuralBlackSemibrevisVoid", 
        "mensuralBlackMinimaVoid", 
        "mensuralBlackSemibrevisCaudata", 
        "mensuralBlackDragma", 
        "mensuralBlackSemibrevisOblique", 
        "mensuralWhiteMaxima", 
        "mensuralWhiteLonga", 
        "mensuralWhiteBrevis", 
        "mensuralWhiteMinima", 
        "mensuralWhiteSemiminima", 
        "mensuralWhiteFusa", 
        "chantPunctum", 
        "chantPunctumInclinatum", 
        "chantPunctumInclinatumAuctum", 
        "chantPunctumInclinatumDeminutum", 
        "chantAuctumAsc", 
        "chantAuctumDesc", 
        "chantPunctumVirga", 
        "chantPunctumVirgaReversed", 
        "chantPunctumCavum", 
        "chantPunctumLinea", 
        "chantPunctumLineaCavum", 
        "chantQuilisma", 
        "chantOriscusAscending", 
        "chantOriscusDescending", 
        "chantStrophicus", 
        "chantStrophicusAuctus", 
        "chantPodatusLower", 
        "chantPodatusUpper", 
        "chantDeminutumUpper", 
        "chantDeminutumLower", 
        "chantEntryLineAsc2nd", 
        "chantEntryLineAsc3rd", 
        "chantEntryLineAsc4th", 
        "chantEntryLineAsc5th", 
        "chantEntryLineAsc6th", 
        "chantLigaturaDesc2nd", 
        "chantLigaturaDesc3rd", 
        "chantLigaturaDesc4th", 
        "chantLigaturaDesc5th", 
        "chantConnectingLineAsc2nd", 
        "chantConnectingLineAsc3rd", 
        "chantConnectingLineAsc4th", 
        "chantConnectingLineAsc5th", 
        "chantConnectingLineAsc6th", 
        "chantIctusAbove", 
        "chantIctusBelow", 
        "chantCirculusAbove", 
        "chantCirculusBelow", 
        "chantSemicirculusAbove", 
        "chantSemicirculusBelow", 
        "chantAccentusAbove", 
        "chantAccentusBelow", 
        "chantEpisema", 
        "chantAugmentum", 
        "medRenFlatSoftB", 
        "medRenFlatHardB", 
        "medRenNatural", 
        "medRenSharpCroix", 
        "medRenFlatWithDot", 
        "medRenNaturalWithCross", 
        "mensuralSignumUp", 
        "mensuralSignumDown", 
        "mensuralCustosUp", 
        "mensuralCustosDown", 
        "chantCustosStemUpPosMiddle", 
        "chantCustosStemDownPosMiddle", 
        "mensuralCustosCheckmark", 
        "mensuralCustosTurn", 
        "mensuralColorationStartSquare", 
        "mensuralColorationEndSquare", 
        "mensuralColorationStartRound", 
        "mensuralColorationEndRound", 
        "mensuralAlterationSign", 
        "kievanCClef", 
        "kievanEndingSymbol", 
        "kievanNoteReciting", 
        "kievanNoteWhole", 
        "kievanNoteWholeFinal", 
        "kievanNoteHalfStaffLine", 
        "kievanNoteQuarterStemUp", 
        "kievanNoteQuarterStemDown", 
        "kievanNote8thStemUp", 
        "kievanNote8thStemDown", 
        "kievanAugmentationDot", 
        "kievanAccidentalSharp", 
        "kievanAccidentalFlat"
    ], 
    "dynamics": [
        "dynamicPiano", 
        "dynamicMezzo", 
        "dynamicForte", 
        "dynamicRinforzando", 
        "dynamicSforzando", 
        "dynamicZ", 
        "dynamicNiente", 
        "dynamicPPPPPP", 
        "dynamicPPPPP", 
        "dynamicPPPP", 
        "dynamicPPP", 
        "dynamicPP", 
        "dynamicMP", 
        "dynamicMF", 
        "dynamicPF", 
        "dynamicFF", 
        "dynamicFFF", 
        "dynamicFFFF", 
        "dynamicFFFFF", 
        "dynamicFFFFFF", 
        "dynamicFortePiano", 
        "dynamicForzando", 
        "dynamicSforzando1", 
        "dynamicSforzandoPiano", 
        "dynamicSforzandoPianissimo", 
        "dynamicSforzato", 
        "dynamicSforzatoPiano", 
        "dynamicSforzatoFF", 
        "dynamicRinforzando1", 
        "dynamicRinforzando2", 
        "dynamicCrescendoHairpin", 
        "dynamicDiminuendoHairpin", 
        "dynamicMessaDiVoce", 
        "dynamicNienteForHairpin"
    ], 
    "forTextBasedApplications": [
        "bracket", 
        "staff1Line", 
        "staff2Lines", 
        "staff3Lines", 
        "staff4Lines", 
        "staff5Lines", 
        "staff6Lines", 
        "staff1LineWide", 
        "staff2LinesWide", 
        "staff3LinesWide", 
        "staff4LinesWide", 
        "staff5LinesWide", 
        "staff6LinesWide", 
        "staff1LineNarrow", 
        "staff2LinesNarrow", 
        "staff3LinesNarrow", 
        "staff4LinesNarrow", 
        "staff5LinesNarrow", 
        "staff6LinesNarrow", 
        "barlineSingle", 
        "barlineDouble", 
        "barlineFinal", 
        "barlineReverseFinal", 
        "barlineHeavy", 
        "barlineHeavyHeavy", 
        "barlineDashed", 
        "barlineDotted", 
        "barlineShort", 
        "barlineTick", 
        "repeatLeft", 
        "repeatRight", 
        "repeatRightLeft", 
        "dalSegno", 
        "daCapo", 
        "leftRepeatSmall", 
        "rightRepeatSmall", 
        "timeSigCombNumerator", 
        "timeSigCombDenominator", 
        "noteDoubleWhole", 
        "noteDoubleWholeSquare", 
        "noteWhole", 
        "noteHalfUp", 
        "noteHalfDown", 
        "noteQuarterUp", 
        "noteQuarterDown", 
        "note8thUp", 
        "note8thDown", 
        "note16thUp", 
        "note16thDown", 
        "note32ndUp", 
        "note32ndDown", 
        "note64thUp", 
        "note64thDown", 
        "note128thUp", 
        "note128thDown", 
        "note256thUp", 
        "note256thDown", 
        "note512thUp", 
        "note512thDown", 
        "note1024thUp", 
        "note1024thDown", 
        "augmentationDot", 
        "textBlackNoteShortStem", 
        "textBlackNoteLongStem", 
        "textBlackNoteFrac8thShortStem", 
        "textBlackNoteFrac8thLongStem", 
        "textBlackNoteFrac16thShortStem", 
        "textBlackNoteFrac16thLongStem", 
        "textBlackNoteFrac32ndLongStem", 
        "textCont8thBeamShortStem", 
        "textCont8thBeamLongStem", 
        "textCont16thBeamShortStem", 
        "textCont16thBeamLongStem", 
        "textCont32ndBeamLongStem", 
        "textAugmentationDot", 
        "textTie", 
        "textTupletBracketStartShortStem", 
        "textTuplet3ShortStem", 
        "textTupletBracketEndShortStem", 
        "textTupletBracketStartLongStem", 
        "textTuplet3LongStem", 
        "textTupletBracketEndLongStem", 
        "stem", 
        "stemSprechgesang", 
        "stemSwished", 
        "stemPendereckiTremolo", 
        "stemSulPonticello", 
        "stemBowOnBridge", 
        "stemBowOnTailpiece", 
        "stemBuzzRoll", 
        "stemDamp", 
        "stemVibratoPulse", 
        "stemMultiphonicsBlack", 
        "stemMultiphonicsWhite", 
        "stemMultiphonicsBlackWhite", 
        "stemSussurando", 
        "stemRimShot", 
        "stemHarpStringNoise", 
        "restHBarMiddle", 
        "chantStaff", 
        "chantStaffWide", 
        "chantStaffNarrow", 
        "chantDivisioMinima", 
        "chantDivisioMaior", 
        "chantDivisioMaxima", 
        "chantDivisioFinalis", 
        "chantVirgula", 
        "chantCaesura", 
        "staffPosRaise1", 
        "staffPosRaise2", 
        "staffPosRaise3", 
        "staffPosRaise4", 
        "staffPosRaise5", 
        "staffPosRaise6", 
        "staffPosRaise7", 
        "staffPosRaise8", 
        "staffPosLower1", 
        "staffPosLower2", 
        "staffPosLower3", 
        "staffPosLower4", 
        "staffPosLower5", 
        "staffPosLower6", 
        "staffPosLower7", 
        "staffPosLower8", 
        "luteStaff6Lines", 
        "luteStaff6LinesWide", 
        "luteStaff6LinesNarrow", 
        "luteBarlineStartRepeat", 
        "luteBarlineEndRepeat", 
        "luteBarlineFinal", 
        "metricModulationArrowLeft", 
        "metricModulationArrowRight"
    ], 
    "multiGlyphForms": [
        "ornamentTopLeftConcaveStroke", 
        "ornamentTopLeftConvexStroke", 
        "ornamentHighLeftConcaveStroke", 
        "ornamentHighLeftConvexStroke", 
        "ornamentLeftVerticalStroke", 
        "ornamentLeftVerticalStrokeWithCross", 
        "ornamentLeftShakeT", 
        "ornamentLeftPlus", 
        "ornamentLowLeftConcaveStroke", 
        "ornamentLowLeftConvexStroke", 
        "ornamentBottomLeftConcaveStroke", 
        "ornamentBottomLeftConcaveStrokeLarge", 
        "ornamentBottomLeftConvexStroke", 
        "ornamentZigZagLineNoRightEnd", 
        "ornamentZigZagLineWithRightEnd", 
        "ornamentMiddleVerticalStroke", 
        "ornamentTopRightConcaveStroke", 
        "ornamentTopRightConvexStroke", 
        "ornamentHighRightConcaveStroke", 
        "ornamentHighRightConvexStroke", 
        "ornamentRightVerticalStroke", 
        "ornamentLowRightConcaveStroke", 
        "ornamentLowRightConvexStroke", 
        "ornamentBottomRightConcaveStroke", 
        "ornamentBottomRightConvexStroke", 
        "wiggleTrillFastest", 
        "wiggleTrillFasterStill", 
        "wiggleTrillFaster", 
        "wiggleTrillFast", 
        "wiggleTrill", 
        "wiggleTrillSlow", 
        "wiggleTrillSlower", 
        "wiggleTrillSlowerStill", 
        "wiggleTrillSlowest", 
        "wiggleArpeggiatoUp", 
        "wiggleArpeggiatoDown", 
        "wiggleArpeggiatoUpSwash", 
        "wiggleArpeggiatoDownSwash", 
        "wiggleArpeggiatoUpArrow", 
        "wiggleArpeggiatoDownArrow", 
        "wiggleGlissando", 
        "wiggleVibrato", 
        "wiggleVibratoWide", 
        "guitarVibratoStroke", 
        "guitarWideVibratoStroke", 
        "wiggleWavy", 
        "wiggleSquareWave", 
        "wiggleSawtooth", 
        "wiggleGlissandoGroup1", 
        "wiggleGlissandoGroup2", 
        "wiggleGlissandoGroup3", 
        "wiggleCircularConstant", 
        "wiggleCircularConstantFlipped", 
        "wiggleCircularConstantLarge", 
        "wiggleCircularConstantFlippedLarge", 
        "wiggleCircularStart", 
        "wiggleCircularLargest", 
        "wiggleCircularLargerStill", 
        "wiggleCircularLarger", 
        "wiggleCircularLarge", 
        "wiggleCircular", 
        "wiggleCircularSmall", 
        "wiggleCircularEnd", 
        "wiggleVibratoStart", 
        "wiggleVibratoSmallestFastest", 
        "wiggleVibratoSmallestFasterStill", 
        "wiggleVibratoSmallestFaster", 
        "wiggleVibratoSmallestFast", 
        "wiggleVibratoSmallestSlow", 
        "wiggleVibratoSmallestSlower", 
        "wiggleVibratoSmallestSlowest", 
        "wiggleVibratoSmallFastest", 
        "wiggleVibratoSmallFasterStill", 
        "wiggleVibratoSmallFaster", 
        "wiggleVibratoSmallFast", 
        "wiggleVibratoSmallSlow", 
        "wiggleVibratoSmallSlower", 
        "wiggleVibratoSmallSlowest", 
        "wiggleVibratoMediumFastest", 
        "wiggleVibratoMediumFasterStill", 
        "wiggleVibratoMediumFaster", 
        "wiggleVibratoMediumFast", 
        "wiggleVibratoMediumSlow", 
        "wiggleVIbratoMediumSlower", 
        "wiggleVibratoMediumSlowest", 
        "wiggleVibratoLargeFastest", 
        "wiggleVibratoLargeFasterStill", 
        "wiggleVibratoLargeFaster", 
        "wiggleVibratoLargeFast", 
        "wiggleVibratoLargeSlow", 
        "wiggleVibratoLargeSlower", 
        "wiggleVibratoLargeSlowest", 
        "wiggleVibratoLargestFastest", 
        "wiggleVibratoLargestFasterStill", 
        "wiggleVibratoLargestFaster", 
        "wiggleVibratoLargestFast", 
        "wiggleVibratoLargestSlow", 
        "wiggleVIbratoLargestSlower", 
        "wiggleVibratoLargestSlowest", 
        "wiggleRandom1", 
        "wiggleRandom2", 
        "wiggleRandom3", 
        "wiggleRandom4"
    ], 
    "noteheadSetCircleX": [
        "noteheadCircleXDoubleWhole", 
        "noteheadCircleXWhole", 
        "noteheadCircleXHalf", 
        "noteheadCircleX", 
        "noteheadDoubleWholeWithX"
    ], 
    "noteheadSetCircled": [
        "noteheadCircledBlack", 
        "noteheadCircledHalf", 
        "noteheadCircledWhole", 
        "noteheadCircledDoubleWhole", 
        "noteheadCircledBlackLarge", 
        "noteheadCircledHalfLarge", 
        "noteheadCircledWholeLarge", 
        "noteheadCircledDoubleWholeLarge", 
        "noteheadCircledXLarge"
    ], 
    "noteheadSetDefault": [
        "noteheadDoubleWhole", 
        "noteheadDoubleWholeSquare", 
        "noteheadWhole", 
        "noteheadHalf", 
        "noteheadBlack", 
        "noteheadClusterDoubleWhole2nd", 
        "noteheadClusterWhole2nd", 
        "noteheadClusterHalf2nd", 
        "noteheadClusterQuarter2nd", 
        "noteheadClusterDoubleWhole3rd", 
        "noteheadClusterWhole3rd", 
        "noteheadClusterHalf3rd", 
        "noteheadClusterQuarter3rd", 
        "noteheadClusterDoubleWholeTop", 
        "noteheadClusterDoubleWholeMiddle", 
        "noteheadClusterDoubleWholeBottom", 
        "noteheadClusterWholeTop", 
        "noteheadClusterWholeMiddle", 
        "noteheadClusterWholeBottom", 
        "noteheadClusterHalfTop", 
        "noteheadClusterHalfMiddle", 
        "noteheadClusterHalfBottom", 
        "noteheadClusterQuarterTop", 
        "noteheadClusterQuarterMiddle", 
        "noteheadClusterQuarterBottom"
    ], 
    "noteheadSetDiamond": [
        "noteheadDiamondDoubleWhole", 
        "noteheadDiamondWhole", 
        "noteheadDiamondHalf", 
        "noteheadDiamondBlack", 
        "noteheadDiamondClusterWhite2nd", 
        "noteheadDiamondClusterBlack2nd", 
        "noteheadDiamondClusterWhite3rd", 
        "noteheadDiamondClusterBlack3rd", 
        "noteheadDiamondClusterWhiteTop", 
        "noteheadDiamondClusterWhiteMiddle", 
        "noteheadDiamondClusterWhiteBottom", 
        "noteheadDiamondClusterBlackTop", 
        "noteheadDiamondClusterBlackMiddle", 
        "noteheadDiamondClusterBlackBottom"
    ], 
    "noteheadSetDiamondOld": [
        "noteheadDiamondDoubleWholeOld", 
        "noteheadDiamondWholeOld", 
        "noteheadDiamondHalfOld", 
        "noteheadDiamondBlackOld", 
        "noteheadDiamondHalfFilled"
    ], 
    "noteheadSetHeavyX": [
        "noteheadHeavyX", 
        "noteheadHeavyXHat"
    ], 
    "noteheadSetLargeArrowDown": [
        "noteheadLargeArrowDownDoubleWhole", 
        "noteheadLargeArrowDownWhole", 
        "noteheadLargeArrowDownHalf", 
        "noteheadLargeArrowDownBlack"
    ], 
    "noteheadSetLargeArrowUp": [
        "noteheadLargeArrowUpDoubleWhole", 
        "noteheadLargeArrowUpWhole", 
        "noteheadLargeArrowUpHalf", 
        "noteheadLargeArrowUpBlack"
    ], 
    "noteheadSetNamesPitch": [
        "noteAFlatWhole", 
        "noteAWhole", 
        "noteASharpWhole", 
        "noteBFlatWhole", 
        "noteBWhole", 
        "noteBSharpWhole", 
        "noteCFlatWhole", 
        "noteCWhole", 
        "noteCSharpWhole", 
        "noteDFlatWhole", 
        "noteDWhole", 
        "noteDSharpWhole", 
        "noteEFlatWhole", 
        "noteEWhole", 
        "noteESharpWhole", 
        "noteFFlatWhole", 
        "noteFWhole", 
        "noteFSharpWhole", 
        "noteGFlatWhole", 
        "noteGWhole", 
        "noteGSharpWhole", 
        "noteHWhole", 
        "noteHSharpWhole", 
        "noteAFlatHalf", 
        "noteAHalf", 
        "noteASharpHalf", 
        "noteBFlatHalf", 
        "noteBHalf", 
        "noteBSharpHalf", 
        "noteCFlatHalf", 
        "noteCHalf", 
        "noteCSharpHalf", 
        "noteDFlatHalf", 
        "noteDHalf", 
        "noteDSharpHalf", 
        "noteEFlatHalf", 
        "noteEHalf", 
        "noteESharpHalf", 
        "noteFFlatHalf", 
        "noteFHalf", 
        "noteFSharpHalf", 
        "noteGFlatHalf", 
        "noteGHalf", 
        "noteGSharpHalf", 
        "noteHHalf", 
        "noteHSharpHalf", 
        "noteAFlatBlack", 
        "noteABlack", 
        "noteASharpBlack", 
        "noteBFlatBlack", 
        "noteBBlack", 
        "noteBSharpBlack", 
        "noteCFlatBlack", 
        "noteCBlack", 
        "noteCSharpBlack", 
        "noteDFlatBlack", 
        "noteDBlack", 
        "noteDSharpBlack", 
        "noteEFlatBlack", 
        "noteEBlack", 
        "noteESharpBlack", 
        "noteFFlatBlack", 
        "noteFBlack", 
        "noteFSharpBlack", 
        "noteGFlatBlack", 
        "noteGBlack", 
        "noteGSharpBlack", 
        "noteHBlack", 
        "noteHSharpBlack"
    ], 
    "noteheadSetNamesSolfege": [
        "noteDoWhole", 
        "noteReWhole", 
        "noteMiWhole", 
        "noteFaWhole", 
        "noteSoWhole", 
        "noteLaWhole", 
        "noteTiWhole", 
        "noteSiWhole", 
        "noteDoHalf", 
        "noteReHalf", 
        "noteMiHalf", 
        "noteFaHalf", 
        "noteSoHalf", 
        "noteLaHalf", 
        "noteTiHalf", 
        "noteSiHalf", 
        "noteDoBlack", 
        "noteReBlack", 
        "noteMiBlack", 
        "noteFaBlack", 
        "noteSoBlack", 
        "noteLaBlack", 
        "noteTiBlack", 
        "noteSiBlack"
    ], 
    "noteheadSetPlus": [
        "noteheadPlusDoubleWhole", 
        "noteheadPlusWhole", 
        "noteheadPlusHalf", 
        "noteheadPlusBlack", 
        "noteheadCircleXDoubleWhole"
    ], 
    "noteheadSetRoundLarge": [
        "noteheadRoundBlackLarge", 
        "noteheadRoundWhiteLarge", 
        "noteheadRoundWhiteWithDotLarge", 
        "noteheadRoundBlackSlashedLarge", 
        "noteheadRoundWhiteSlashedLarge"
    ], 
    "noteheadSetRoundSmall": [
        "noteheadRoundBlack", 
        "noteheadRoundWhite", 
        "noteheadRoundWhiteWithDot", 
        "noteheadRoundBlackSlashed", 
        "noteheadRoundWhiteSlashed"
    ], 
    "noteheadSetSacredHarp": [
        "noteShapeRoundWhite", 
        "noteShapeRoundBlack", 
        "noteShapeSquareWhite", 
        "noteShapeSquareBlack", 
        "noteShapeTriangleRightWhite", 
        "noteShapeTriangleRightBlack", 
        "noteShapeTriangleLeftWhite", 
        "noteShapeTriangleLeftBlack", 
        "noteShapeDiamondWhite", 
        "noteShapeDiamondBlack", 
        "noteShapeTriangleUpWhite", 
        "noteShapeTriangleUpBlack", 
        "noteShapeMoonWhite", 
        "noteShapeMoonBlack", 
        "noteShapeTriangleRoundWhite", 
        "noteShapeTriangleRoundBlack"
    ], 
    "noteheadSetSlashHorizontalEnds": [
        "noteheadSlashHorizontalEnds", 
        "noteheadSlashWhiteHalf", 
        "noteheadSlashDiamondWhite", 
        "noteheadSlashX", 
        "noteheadSlashHorizontalEndsMuted", 
        "noteheadSlashWhiteMuted"
    ], 
    "noteheadSetSlashVerticalEnds": [
        "noteheadSlashVerticalEnds", 
        "noteheadSlashWhiteHalf", 
        "noteheadSlashDiamondWhite", 
        "noteheadSlashVerticalEndsSmall", 
        "noteheadSlashVerticalEndsMuted", 
        "noteheadSlashWhiteMuted"
    ], 
    "noteheadSetSlashed1": [
        "noteheadSlashedBlack1", 
        "noteheadSlashedHalf1", 
        "noteheadSlashedWhole1", 
        "noteheadSlashedDoubleWhole1"
    ], 
    "noteheadSetSlashed2": [
        "noteheadSlashedBlack2", 
        "noteheadSlashedHalf2", 
        "noteheadSlashedWhole2", 
        "noteheadSlashedDoubleWhole2"
    ], 
    "noteheadSetSquare": [
        "noteheadSquareBlackLarge", 
        "noteheadSquareBlackWhite", 
        "noteheadRectangularClusterBlackTop", 
        "noteheadRectangularClusterBlackMiddle", 
        "noteheadRectangularClusterBlackBottom", 
        "noteheadRectangularClusterWhiteTop", 
        "noteheadRectangularClusterWhiteMiddle", 
        "noteheadRectangularClusterWhiteBottom"
    ], 
    "noteheadSetTriangleDown": [
        "noteheadTriangleDownDoubleWhole", 
        "noteheadTriangleDownWhole", 
        "noteheadTriangleDownHalf", 
        "noteheadTriangleDownWhite", 
        "noteheadTriangleDownBlack"
    ], 
    "noteheadSetTriangleLeft": [
        "noteheadTriangleLeftWhite", 
        "noteheadTriangleLeftBlack"
    ], 
    "noteheadSetTriangleRight": [
        "noteheadTriangleRightWhite", 
        "noteheadTriangleRightBlack"
    ], 
    "noteheadSetTriangleUp": [
        "noteheadTriangleUpDoubleWhole", 
        "noteheadTriangleUpWhole", 
        "noteheadTriangleUpHalf", 
        "noteheadTriangleUpWhite", 
        "noteheadTriangleUpBlack"
    ], 
    "noteheadSetWithX": [
        "noteheadDoubleWholeWithX", 
        "noteheadWholeWithX", 
        "noteheadHalfWithX", 
        "noteheadVoidWithX"
    ], 
    "noteheadSetX": [
        "noteheadXDoubleWhole", 
        "noteheadXWhole", 
        "noteheadXHalf", 
        "noteheadXBlack", 
        "noteheadXOrnate", 
        "noteheadXOrnateEllipse"
    ], 
    "noteheads": [
        "noteheadDoubleWhole", 
        "noteheadDoubleWholeSquare", 
        "noteheadWhole", 
        "noteheadHalf", 
        "noteheadBlack", 
        "noteheadNull", 
        "noteheadXDoubleWhole", 
        "noteheadXWhole", 
        "noteheadXHalf", 
        "noteheadXBlack", 
        "noteheadXOrnate", 
        "noteheadXOrnateEllipse", 
        "noteheadPlusDoubleWhole", 
        "noteheadPlusWhole", 
        "noteheadPlusHalf", 
        "noteheadPlusBlack", 
        "noteheadCircleXDoubleWhole", 
        "noteheadCircleXWhole", 
        "noteheadCircleXHalf", 
        "noteheadCircleX", 
        "noteheadDoubleWholeWithX", 
        "noteheadWholeWithX", 
        "noteheadHalfWithX", 
        "noteheadVoidWithX", 
        "noteheadSquareWhite", 
        "noteheadSquareBlack", 
        "noteheadTriangleUpDoubleWhole", 
        "noteheadTriangleUpWhole", 
        "noteheadTriangleUpHalf", 
        "noteheadTriangleUpWhite", 
        "noteheadTriangleUpBlack", 
        "noteheadTriangleLeftWhite", 
        "noteheadTriangleLeftBlack", 
        "noteheadTriangleRightWhite", 
        "noteheadTriangleRightBlack", 
        "noteheadTriangleDownDoubleWhole", 
        "noteheadTriangleDownWhole", 
        "noteheadTriangleDownHalf", 
        "noteheadTriangleDownWhite", 
        "noteheadTriangleDownBlack", 
        "noteheadTriangleUpRightWhite", 
        "noteheadTriangleUpRightBlack", 
        "noteheadMoonWhite", 
        "noteheadMoonBlack", 
        "noteheadTriangleRoundDownWhite", 
        "noteheadTriangleRoundDownBlack", 
        "noteheadParenthesis", 
        "noteheadSlashedBlack1", 
        "noteheadSlashedBlack2", 
        "noteheadSlashedHalf1", 
        "noteheadSlashedHalf2", 
        "noteheadSlashedWhole1", 
        "noteheadSlashedWhole2", 
        "noteheadSlashedDoubleWhole1", 
        "noteheadSlashedDoubleWhole2", 
        "noteheadDiamondDoubleWhole", 
        "noteheadDiamondWhole", 
        "noteheadDiamondHalf", 
        "noteheadDiamondBlack", 
        "noteheadDiamondWhite", 
        "noteheadDiamondWhiteWide", 
        "noteheadDiamondDoubleWholeOld", 
        "noteheadDiamondWholeOld", 
        "noteheadDiamondHalfOld", 
        "noteheadDiamondBlackOld", 
        "noteheadDiamondHalfFilled", 
        "noteheadCircledBlack", 
        "noteheadCircledHalf", 
        "noteheadCircledWhole", 
        "noteheadCircledDoubleWhole", 
        "noteheadCircledBlackLarge", 
        "noteheadCircledHalfLarge", 
        "noteheadCircledWholeLarge", 
        "noteheadCircledDoubleWholeLarge", 
        "noteheadCircledXLarge", 
        "noteheadLargeArrowUpDoubleWhole", 
        "noteheadLargeArrowUpWhole", 
        "noteheadLargeArrowUpHalf", 
        "noteheadLargeArrowUpBlack", 
        "noteheadLargeArrowDownDoubleWhole", 
        "noteheadLargeArrowDownWhole", 
        "noteheadLargeArrowDownHalf", 
        "noteheadLargeArrowDownBlack", 
        "noteheadParenthesisLeft", 
        "noteheadParenthesisRight", 
        "noteheadCircleSlash", 
        "noteheadHeavyX", 
        "noteheadHeavyXHat", 
        "noteheadWholeFilled", 
        "noteheadHalfFilled", 
        "noteheadDiamondOpen", 
        "noteheadSlashVerticalEnds", 
        "noteheadSlashHorizontalEnds", 
        "noteheadSlashWhiteWhole", 
        "noteheadSlashWhiteHalf", 
        "noteheadSlashDiamondWhite", 
        "noteheadSlashVerticalEndsSmall", 
        "noteheadSlashX", 
        "noteheadSlashVerticalEndsMuted", 
        "noteheadSlashHorizontalEndsMuted", 
        "noteheadSlashWhiteMuted", 
        "noteheadRoundBlackLarge", 
        "noteheadRoundWhiteLarge", 
        "noteheadRoundWhiteWithDotLarge", 
        "noteheadRoundBlack", 
        "noteheadRoundWhite", 
        "noteheadRoundWhiteWithDot", 
        "noteheadRoundBlackSlashedLarge", 
        "noteheadRoundWhiteSlashedLarge", 
        "noteheadRoundBlackSlashed", 
        "noteheadRoundWhiteSlashed", 
        "noteheadSquareBlackLarge", 
        "noteheadSquareBlackWhite", 
        "noteheadClusterSquareWhite", 
        "noteheadClusterSquareBlack", 
        "noteheadClusterRoundWhite", 
        "noteheadClusterRoundBlack", 
        "noteheadClusterDoubleWhole2nd", 
        "noteheadClusterWhole2nd", 
        "noteheadClusterHalf2nd", 
        "noteheadClusterQuarter2nd", 
        "noteheadClusterDoubleWhole3rd", 
        "noteheadClusterWhole3rd", 
        "noteheadClusterHalf3rd", 
        "noteheadClusterQuarter3rd", 
        "noteheadClusterDoubleWholeTop", 
        "noteheadClusterDoubleWholeMiddle", 
        "noteheadClusterDoubleWholeBottom", 
        "noteheadClusterWholeTop", 
        "noteheadClusterWholeMiddle", 
        "noteheadClusterWholeBottom", 
        "noteheadClusterHalfTop", 
        "noteheadClusterHalfMiddle", 
        "noteheadClusterHalfBottom", 
        "noteheadClusterQuarterTop", 
        "noteheadClusterQuarterMiddle", 
        "noteheadClusterQuarterBottom", 
        "noteheadDiamondClusterWhite2nd", 
        "noteheadDiamondClusterBlack2nd", 
        "noteheadDiamondClusterWhite3rd", 
        "noteheadDiamondClusterBlack3rd", 
        "noteheadDiamondClusterWhiteTop", 
        "noteheadDiamondClusterWhiteMiddle", 
        "noteheadDiamondClusterWhiteBottom", 
        "noteheadDiamondClusterBlackTop", 
        "noteheadDiamondClusterBlackMiddle", 
        "noteheadDiamondClusterBlackBottom", 
        "noteheadRectangularClusterBlackTop", 
        "noteheadRectangularClusterBlackMiddle", 
        "noteheadRectangularClusterBlackBottom", 
        "noteheadRectangularClusterWhiteTop", 
        "noteheadRectangularClusterWhiteMiddle", 
        "noteheadRectangularClusterWhiteBottom", 
        "noteDoWhole", 
        "noteReWhole", 
        "noteMiWhole", 
        "noteFaWhole", 
        "noteSoWhole", 
        "noteLaWhole", 
        "noteTiWhole", 
        "noteSiWhole", 
        "noteDoHalf", 
        "noteReHalf", 
        "noteMiHalf", 
        "noteFaHalf", 
        "noteSoHalf", 
        "noteLaHalf", 
        "noteTiHalf", 
        "noteSiHalf", 
        "noteDoBlack", 
        "noteReBlack", 
        "noteMiBlack", 
        "noteFaBlack", 
        "noteSoBlack", 
        "noteLaBlack", 
        "noteTiBlack", 
        "noteSiBlack", 
        "noteAFlatWhole", 
        "noteAWhole", 
        "noteASharpWhole", 
        "noteBFlatWhole", 
        "noteBWhole", 
        "noteBSharpWhole", 
        "noteCFlatWhole", 
        "noteCWhole", 
        "noteCSharpWhole", 
        "noteDFlatWhole", 
        "noteDWhole", 
        "noteDSharpWhole", 
        "noteEFlatWhole", 
        "noteEWhole", 
        "noteESharpWhole", 
        "noteFFlatWhole", 
        "noteFWhole", 
        "noteFSharpWhole", 
        "noteGFlatWhole", 
        "noteGWhole", 
        "noteGSharpWhole", 
        "noteHWhole", 
        "noteHSharpWhole", 
        "noteAFlatHalf", 
        "noteAHalf", 
        "noteASharpHalf", 
        "noteBFlatHalf", 
        "noteBHalf", 
        "noteBSharpHalf", 
        "noteCFlatHalf", 
        "noteCHalf", 
        "noteCSharpHalf", 
        "noteDFlatHalf", 
        "noteDHalf", 
        "noteDSharpHalf", 
        "noteEFlatHalf", 
        "noteEHalf", 
        "noteESharpHalf", 
        "noteFFlatHalf", 
        "noteFHalf", 
        "noteFSharpHalf", 
        "noteGFlatHalf", 
        "noteGHalf", 
        "noteGSharpHalf", 
        "noteHHalf", 
        "noteHSharpHalf", 
        "noteAFlatBlack", 
        "noteABlack", 
        "noteASharpBlack", 
        "noteBFlatBlack", 
        "noteBBlack", 
        "noteBSharpBlack", 
        "noteCFlatBlack", 
        "noteCBlack", 
        "noteCSharpBlack", 
        "noteDFlatBlack", 
        "noteDBlack", 
        "noteDSharpBlack", 
        "noteEFlatBlack", 
        "noteEBlack", 
        "noteESharpBlack", 
        "noteFFlatBlack", 
        "noteFBlack", 
        "noteFSharpBlack", 
        "noteGFlatBlack", 
        "noteGBlack", 
        "noteGSharpBlack", 
        "noteHBlack", 
        "noteHSharpBlack", 
        "noteEmptyWhole", 
        "noteEmptyHalf", 
        "noteEmptyBlack"
    ], 
    "ornaments": [
        "graceNoteAcciaccaturaStemUp", 
        "graceNoteAcciaccaturaStemDown", 
        "graceNoteAppoggiaturaStemUp", 
        "graceNoteAppoggiaturaStemDown", 
        "graceNoteSlashStemUp", 
        "graceNoteSlashStemDown", 
        "ornamentTrill", 
        "ornamentTurn", 
        "ornamentTurnInverted", 
        "ornamentTurnSlash", 
        "ornamentTurnUp", 
        "ornamentTurnUpS", 
        "ornamentMordent", 
        "ornamentMordentInverted", 
        "ornamentTremblement", 
        "ornamentHaydn", 
        "ornamentPortDeVoixV", 
        "ornamentRightFacingHalfCircle", 
        "ornamentLeftFacingHalfCircle", 
        "ornamentRightFacingHook", 
        "ornamentLeftFacingHook", 
        "ornamentHookBeforeNote", 
        "ornamentHookAfterNote", 
        "ornamentUpCurve", 
        "ornamentDownCurve", 
        "ornamentShortObliqueLineBeforeNote", 
        "ornamentShortObliqueLineAfterNote", 
        "ornamentObliqueLineBeforeNote", 
        "ornamentObliqueLineAfterNote", 
        "ornamentDoubleObliqueLinesBeforeNote", 
        "ornamentDoubleObliqueLinesAfterNote", 
        "ornamentObliqueLineHorizBeforeNote", 
        "ornamentObliqueLineHorizAfterNote", 
        "ornamentComma", 
        "ornamentShake3", 
        "ornamentVerticalLine", 
        "ornamentShakeMuffat1", 
        "glissandoUp", 
        "glissandoDown", 
        "ornamentSchleifer", 
        "ornamentPinceCouperin", 
        "ornamentTremblementCouperin", 
        "ornamentPrecompSlide", 
        "ornamentPrecompDescendingSlide", 
        "ornamentPrecompAppoggTrill", 
        "ornamentPrecompAppoggTrillSuffix", 
        "ornamentPrecompTurnTrillDAnglebert", 
        "ornamentPrecompSlideTrillDAnglebert", 
        "ornamentPrecompSlideTrillMarpurg", 
        "ornamentPrecompTurnTrillBach", 
        "ornamentPrecompSlideTrillBach", 
        "ornamentPrecompSlideTrillMuffat", 
        "ornamentPrecompSlideTrillSuffixMuffat", 
        "ornamentPrecompTrillSuffixDandrieu", 
        "ornamentPrecompPortDeVoixMordent"
    ], 
    "parenthesesNotehead": [
        "noteheadParenthesisLeft", 
        "noteheadParenthesisRight"
    ], 
    "pauses": [
        "fermataAbove", 
        "fermataBelow", 
        "fermataVeryShortAbove", 
        "fermataVeryShortBelow", 
        "fermataShortAbove", 
        "fermataShortBelow", 
        "fermataLongAbove", 
        "fermataLongBelow", 
        "fermataVeryLongAbove", 
        "fermataVeryLongBelow", 
        "fermataLongHenzeAbove", 
        "fermataLongHenzeBelow", 
        "fermataShortHenzeAbove", 
        "fermataShortHenzeBelow", 
        "breathMarkComma", 
        "caesura", 
        "caesuraThick", 
        "caesuraShort", 
        "breathMarkSalzedo", 
        "curlewSign"
    ], 
    "pausesAbove": [
        "fermataAbove", 
        "fermataVeryShortAbove", 
        "fermataShortAbove", 
        "fermataLongAbove", 
        "fermataVeryLongAbove", 
        "fermataLongHenzeAbove", 
        "fermataShortHenzeAbove"
    ], 
    "pausesBelow": [
        "fermataBelow", 
        "fermataVeryShortBelow", 
        "fermataShortBelow", 
        "fermataLongBelow", 
        "fermataVeryLongBelow", 
        "fermataLongHenzeBelow", 
        "fermataShortHenzeBelow"
    ], 
    "rests": [
        "restMaxima", 
        "restLonga", 
        "restDoubleWhole", 
        "restWhole", 
        "restHalf", 
        "restQuarter", 
        "rest8th", 
        "rest16th", 
        "rest32nd", 
        "rest64th", 
        "rest128th", 
        "rest256th", 
        "rest512th", 
        "rest1024th", 
        "restHBar", 
        "restHBarLeft", 
        "restHBarRight", 
        "restQuarterOld", 
        "restDoubleWholeLegerLine", 
        "restWholeLegerLine", 
        "restHalfLegerLine"
    ], 
    "stemDecorations": [
        "tremolo1", 
        "tremolo2", 
        "tremolo3", 
        "tremolo4", 
        "tremolo5", 
        "buzzRoll", 
        "pendereckiTremolo", 
        "unmeasuredTremolo", 
        "unmeasuredTremoloSimple", 
        "windMultiphonicsBlackStem", 
        "windMultiphonicsWhiteStem", 
        "windMultiphonicsBlackWhiteStem", 
        "stringsBowBehindBridge", 
        "stringsBowOnBridge", 
        "stringsBowOnTailpiece", 
        "stringsVibratoPulse", 
        "pluckedDampOnStem", 
        "vocalSprechgesang", 
        "vocalsSussurando", 
        "harpStringNoiseStem", 
        "pictRimShotOnStem", 
        "pictSwishStem", 
        "pictTurnRightStem", 
        "pictTurnLeftStem", 
        "pictTurnRightLeftStem", 
        "pictCrushStem", 
        "pictDeadNoteStem", 
        "accdnRicochetStem2", 
        "accdnRicochetStem3", 
        "accdnRicochetStem4", 
        "accdnRicochetStem5", 
        "accdnRicochetStem6"
    ], 
    "tf_chordSymbols": [
        "csymDiminished", 
        "csymHalfDiminished", 
        "csymAugmented", 
        "csymMajorSeventh"
    ], 
    "tf_daseianNotation": [
        "daseianGraves1", 
        "daseianGraves2", 
        "daseianGraves3", 
        "daseianGraves4", 
        "daseianFinales1", 
        "daseianFinales2", 
        "daseianFinales3", 
        "daseianFinales4", 
        "daseianSuperiores1", 
        "daseianSuperiores2", 
        "daseianSuperiores3", 
        "daseianSuperiores4", 
        "daseianExcellentes1", 
        "daseianExcellentes2", 
        "daseianExcellentes3", 
        "daseianExcellentes4", 
        "daseianResidua1", 
        "daseianResidua2"
    ], 
    "tf_figuredBass": [
        "figbass0", 
        "figbass1", 
        "figbass2", 
        "figbass2Raised", 
        "figbass3", 
        "figbass4", 
        "figbass4Raised", 
        "figbass5", 
        "figbass5Raised1", 
        "figbass5Raised2", 
        "figbass5Raised3", 
        "figbass6", 
        "figbass6Raised", 
        "figbass7", 
        "figbass7Raised1", 
        "figbass7Raised2", 
        "figbass8", 
        "figbass9", 
        "figbass9Raised", 
        "figbassDoubleFlat", 
        "figbassFlat", 
        "figbassNatural", 
        "figbassSharp", 
        "figbassDoubleSharp", 
        "figbassBracketLeft", 
        "figbassBracketRight", 
        "figbassParensLeft", 
        "figbassParensRight", 
        "figbassPlus", 
        "figbassCombiningRaising", 
        "figbassCombiningLowering"
    ], 
    "tf_hairpins": [
        "dynamicCrescendoHairpin", 
        "dynamicDiminuendoHairpin", 
        "dynamicMessaDiVoce"
    ], 
    "tf_harpPedals": [
        "harpPedalRaised", 
        "harpPedalCentered", 
        "harpPedalLowered", 
        "harpPedalDivider"
    ], 
    "tf_ornaments": [
        "graceNoteAcciaccaturaStemUp", 
        "graceNoteAcciaccaturaStemDown", 
        "graceNoteAppoggiaturaStemUp", 
        "graceNoteAppoggiaturaStemDown", 
        "graceNoteSlashStemUp", 
        "graceNoteSlashStemDown", 
        "ornamentTrill", 
        "ornamentTurn", 
        "ornamentTurnInverted", 
        "ornamentTurnSlash", 
        "ornamentTurnUp", 
        "ornamentTurnUpS", 
        "ornamentMordent", 
        "ornamentMordentInverted", 
        "ornamentTremblement", 
        "ornamentHaydn", 
        "ornamentPortDeVoixV", 
        "ornamentRightFacingHalfCircle", 
        "ornamentLeftFacingHalfCircle", 
        "ornamentRightFacingHook", 
        "ornamentLeftFacingHook", 
        "ornamentHookBeforeNote", 
        "ornamentHookAfterNote", 
        "ornamentUpCurve", 
        "ornamentDownCurve", 
        "ornamentShortObliqueLineBeforeNote", 
        "ornamentShortObliqueLineAfterNote", 
        "ornamentObliqueLineBeforeNote", 
        "ornamentObliqueLineAfterNote", 
        "ornamentDoubleObliqueLinesBeforeNote", 
        "ornamentDoubleObliqueLinesAfterNote", 
        "ornamentObliqueLineHorizBeforeNote", 
        "ornamentObliqueLineHorizAfterNote", 
        "ornamentComma", 
        "ornamentShake3", 
        "ornamentVerticalLine", 
        "ornamentShakeMuffat1", 
        "glissandoUp", 
        "glissandoDown", 
        "ornamentSchleifer", 
        "ornamentTopLeftConcaveStroke", 
        "ornamentTopLeftConvexStroke", 
        "ornamentHighLeftConcaveStroke", 
        "ornamentHighLeftConvexStroke", 
        "ornamentLeftVerticalStroke", 
        "ornamentLeftVerticalStrokeWithCross", 
        "ornamentLeftShakeT", 
        "ornamentLeftPlus", 
        "ornamentLowLeftConcaveStroke", 
        "ornamentLowLeftConvexStroke", 
        "ornamentBottomLeftConcaveStroke", 
        "ornamentBottomLeftConcaveStrokeLarge", 
        "ornamentBottomLeftConvexStroke", 
        "ornamentZigZagLineNoRightEnd", 
        "ornamentZigZagLineWithRightEnd", 
        "ornamentMiddleVerticalStroke", 
        "ornamentTopRightConcaveStroke", 
        "ornamentTopRightConvexStroke", 
        "ornamentHighRightConcaveStroke", 
        "ornamentHighRightConvexStroke", 
        "ornamentRightVerticalStroke", 
        "ornamentLowRightConcaveStroke", 
        "ornamentLowRightConvexStroke", 
        "ornamentBottomRightConcaveStroke", 
        "ornamentBottomRightConvexStroke", 
        "ornamentPrecompSlide", 
        "ornamentPrecompDescendingSlide", 
        "ornamentPrecompAppoggTrill", 
        "ornamentPrecompAppoggTrillSuffix", 
        "ornamentPrecompTurnTrillDAnglebert", 
        "ornamentPrecompSlideTrillDAnglebert", 
        "ornamentPrecompSlideTrillMarpurg", 
        "ornamentPrecompTurnTrillBach", 
        "ornamentPrecompSlideTrillBach", 
        "ornamentPrecompSlideTrillMuffat", 
        "ornamentPrecompSlideTrillSuffixMuffat", 
        "ornamentPrecompTrillSuffixDandrieu", 
        "ornamentPrecompPortDeVoixMordent", 
        "ornamentPrecompTrillWithMordent", 
        "ornamentPrecompCadence", 
        "ornamentPrecompCadenceWithTurn ", 
        "ornamentPrecompDoubleCadenceLowerPrefix", 
        "ornamentPrecompCadenceUpperPrefix ", 
        "ornamentPrecompCadenceUpperPrefixTurn", 
        "ornamentPrecompDoubleCadenceUpperPrefix ", 
        "ornamentPrecompDoubleCadenceUpperPrefixTurn", 
        "ornamentPrecompMordentRelease", 
        "ornamentPrecompMordentUpperPrefix", 
        "ornamentPrecompInvertedMordentUpperPrefix", 
        "ornamentPrecompTrillLowerSuffix"
    ], 
    "tf_pedals": [
        "keyboardPedalPed", 
        "keyboardPedalP", 
        "keyboardPedalE", 
        "keyboardPedalD", 
        "keyboardPedalDot", 
        "keyboardPedalUp", 
        "keyboardPedalHalf", 
        "keyboardPedalUpNotch", 
        "keyboardPedalHyphen", 
        "keyboardPedalSost", 
        "keyboardPedalS"
    ], 
    "tf_pictograms": [
        "pictGlsp", 
        "pictXyl", 
        "pictXylTenor", 
        "pictXylBass", 
        "pictXylTrough", 
        "pictXylTenorTrough", 
        "pictMar", 
        "pictVib", 
        "pictVibMotorOff", 
        "pictEmptyTrap", 
        "pictGlspSmithBrindle", 
        "pictXylSmithBrindle", 
        "pictMarSmithBrindle", 
        "pictVibSmithBrindle", 
        "pictCrotales", 
        "pictSteelDrums", 
        "pictCelesta", 
        "pictLithophone", 
        "pictTubaphone", 
        "pictTubularBells", 
        "pictWindChimesGlass", 
        "pictChimes", 
        "pictBambooChimes", 
        "pictShellChimes", 
        "pictGlassTubeChimes", 
        "pictGlassPlateChimes", 
        "pictMetalTubeChimes", 
        "pictMetalPlateChimes", 
        "pictTimpani", 
        "pictSnareDrum", 
        "pictSnareDrumSnaresOff", 
        "pictSnareDrumMilitary", 
        "pictBassDrum", 
        "pictBassDrumOnSide", 
        "pictTenorDrum", 
        "pictTomTom", 
        "pictTomTomChinese", 
        "pictTomTomJapanese", 
        "pictTomTomIndoAmerican", 
        "pictTambourine", 
        "pictTimbales", 
        "pictBongos", 
        "pictConga", 
        "pictLogDrum", 
        "pictSlitDrum", 
        "pictBrakeDrum", 
        "pictGobletDrum", 
        "pictTabla", 
        "pictCuica", 
        "pictWoodBlock", 
        "pictTempleBlocks", 
        "pictClaves", 
        "pictGuiro", 
        "pictRatchet", 
        "pictFootballRatchet", 
        "pictWhip", 
        "pictBoardClapper", 
        "pictCastanets", 
        "pictCastanetsWithHandle", 
        "pictQuijada", 
        "pictBambooScraper", 
        "pictRecoReco", 
        "pictTriangle", 
        "pictAnvil", 
        "pictSleighBell", 
        "pictCowBell", 
        "pictAlmglocken", 
        "pictBellPlate", 
        "pictBell", 
        "pictHandbell", 
        "pictCencerro", 
        "pictAgogo", 
        "pictShellBells", 
        "pictJingleBells", 
        "pictBellTree", 
        "pictCrashCymbals", 
        "pictSuspendedCymbal", 
        "pictHiHat", 
        "pictHiHatOnStand", 
        "pictSizzleCymbal", 
        "pictVietnameseHat", 
        "pictChineseCymbal", 
        "pictFingerCymbals", 
        "pictCymbalTongs", 
        "pictEdgeOfCymbal", 
        "pictBellOfCymbal", 
        "pictTamTam", 
        "pictTamTamWithBeater", 
        "pictGong", 
        "pictGongWithButton", 
        "pictSlideBrushOnGong", 
        "pictFlexatone", 
        "pictMaraca", 
        "pictMaracas", 
        "pictCabasa", 
        "pictThundersheet", 
        "pictVibraslap", 
        "pictSistrum", 
        "pictRainstick", 
        "pictChainRattle", 
        "pictSlideWhistle", 
        "pictBirdWhistle", 
        "pictPoliceWhistle", 
        "pictSiren", 
        "pictWindMachine", 
        "pictCarHorn", 
        "pictKlaxonHorn", 
        "pictDuckCall", 
        "pictWindWhistle", 
        "pictMegaphone", 
        "pictLotusFlute", 
        "pictPistolShot", 
        "pictCannon", 
        "pictSandpaperBlocks", 
        "pictLionsRoar", 
        "pictGlassHarp", 
        "pictGlassHarmonica", 
        "pictMusicalSaw", 
        "pictJawHarp", 
        "pictBeaterSoftXylophoneUp", 
        "pictBeaterSoftXylophoneDown", 
        "pictBeaterSoftXylophoneRight", 
        "pictBeaterSoftXylophoneLeft", 
        "pictBeaterMediumXylophoneUp", 
        "pictBeaterMediumXylophoneDown", 
        "pictBeaterMediumXylophoneRight", 
        "pictBeaterMediumXylophoneLeft", 
        "pictBeaterHardXylophoneUp", 
        "pictBeaterHardXylophoneDown", 
        "pictBeaterHardXylophoneRight", 
        "pictBeaterHardXylophoneLeft", 
        "pictBeaterWoodXylophoneUp", 
        "pictBeaterWoodXylophoneDown", 
        "pictBeaterWoodXylophoneRight", 
        "pictBeaterWoodXylophoneLeft", 
        "pictBeaterSoftGlockenspielUp", 
        "pictBeaterSoftGlockenspielDown", 
        "pictBeaterSoftGlockenspielRight", 
        "pictBeaterSoftGlockenspielLeft", 
        "pictBeaterHardGlockenspielUp", 
        "pictBeaterHardGlockenspielDown", 
        "pictBeaterHardGlockenspielRight", 
        "pictBeaterHardGlockenspielLeft", 
        "pictBeaterSoftTimpaniUp", 
        "pictBeaterSoftTimpaniDown", 
        "pictBeaterSoftTimpaniRight", 
        "pictBeaterSoftTimpaniLeft", 
        "pictBeaterMediumTimpaniUp", 
        "pictBeaterMediumTimpaniDown", 
        "pictBeaterMediumTimpaniRight", 
        "pictBeaterMediumTimpaniLeft", 
        "pictBeaterHardTimpaniUp", 
        "pictBeaterHardTimpaniDown", 
        "pictBeaterHardTimpaniRight", 
        "pictBeaterHardTimpaniLeft", 
        "pictBeaterWoodTimpaniUp", 
        "pictBeaterWoodTimpaniDown", 
        "pictBeaterWoodTimpaniRight", 
        "pictBeaterWoodTimpaniLeft", 
        "pictBeaterSoftBassDrumUp", 
        "pictBeaterSoftBassDrumDown", 
        "pictBeaterMediumBassDrumUp", 
        "pictBeaterMediumBassDrumDown", 
        "pictBeaterHardBassDrumUp", 
        "pictBeaterHardBassDrumDown", 
        "pictBeaterMetalBassDrumUp", 
        "pictBeaterMetalBassDrumDown", 
        "pictBeaterDoubleBassDrumUp", 
        "pictBeaterDoubleBassDrumDown", 
        "pictBeaterSoftYarnUp", 
        "pictBeaterSoftYarnDown", 
        "pictBeaterSoftYarnRight", 
        "pictBeaterSoftYarnLeft", 
        "pictBeaterMediumYarnUp", 
        "pictBeaterMediumYarnDown", 
        "pictBeaterMediumYarnRight", 
        "pictBeaterMediumYarnLeft", 
        "pictBeaterHardYarnUp", 
        "pictBeaterHardYarnDown", 
        "pictBeaterHardYarnRight", 
        "pictBeaterHardYarnLeft", 
        "pictBeaterSuperballUp", 
        "pictBeaterSuperballDown", 
        "pictBeaterSuperballRight", 
        "pictBeaterSuperballLeft", 
        "pictSuperball", 
        "pictWoundHardUp", 
        "pictWoundHardDown", 
        "pictWoundHardRight", 
        "pictWoundHardLeft", 
        "pictWoundSoftUp", 
        "pictWoundSoftDown", 
        "pictWoundSoftRight", 
        "pictWoundSoftLeft", 
        "pictGumSoftUp", 
        "pictGumSoftDown", 
        "pictGumSoftRight", 
        "pictGumSoftLeft", 
        "pictGumMediumUp", 
        "pictGumMediumDown", 
        "pictGumMediumRight", 
        "pictGumMediumLeft", 
        "pictGumHardUp", 
        "pictGumHardDown", 
        "pictGumHardRight", 
        "pictGumHardLeft", 
        "pictBeaterMetalUp", 
        "pictBeaterMetalDown", 
        "pictBeaterMetalRight", 
        "pictBeaterMetalLeft", 
        "pictBeaterHammerWoodUp", 
        "pictBeaterHammerWoodDown", 
        "pictBeaterHammerPlasticUp", 
        "pictBeaterHammerPlasticDown", 
        "pictBeaterHammerMetalUp", 
        "pictBeaterHammerMetalDown", 
        "pictBeaterSnareSticksUp", 
        "pictBeaterSnareSticksDown", 
        "pictBeaterJazzSticksUp", 
        "pictStickShot", 
        "pictScrapeCenterToEdge", 
        "pictScrapeEdgeToCenter", 
        "pictScrapeAroundRim", 
        "pictOnRim", 
        "pictOpenRimShot", 
        "pictHalfOpen1", 
        "pictHalfOpen2", 
        "pictOpen", 
        "pictDamp1", 
        "pictDamp2", 
        "pictDamp3", 
        "pictDamp4", 
        "pictRimShotOnStem", 
        "pictCenter1", 
        "pictCenter2", 
        "pictCenter3", 
        "pictRim1", 
        "pictRim2", 
        "pictRim3", 
        "pictNormalPosition", 
        "pictChokeCymbal", 
        "pictRightHandSquare", 
        "pictLeftHandCircle", 
        "pictSwishStem", 
        "pictTurnRightStem", 
        "pictTurnLeftStem", 
        "pictTurnRightLeftStem", 
        "pictCrushStem", 
        "pictDeadNoteStem", 
        "accdnRH3RanksPiccolo", 
        "accdnRH3RanksClarinet", 
        "accdnRH3RanksUpperTremolo8", 
        "accdnRH3RanksLowerTremolo8", 
        "accdnRH3RanksBassoon", 
        "accdnRH3RanksOboe", 
        "accdnRH3RanksViolin", 
        "accdnRH3RanksImitationMusette", 
        "accdnRH3RanksAuthenticMusette", 
        "accdnRH3RanksOrgan", 
        "accdnRH3RanksHarmonium", 
        "accdnRH3RanksBandoneon", 
        "accdnRH3RanksAccordion", 
        "accdnRH3RanksMaster", 
        "accdnRH3RanksTwoChoirs", 
        "accdnRH3RanksTremoloLower8ve", 
        "accdnRH3RanksTremoloUpper8ve", 
        "accdnRH3RanksDoubleTremoloLower8ve", 
        "accdnRH3RanksDoubleTremoloUpper8ve", 
        "accdnRH3RanksFullFactory", 
        "accdnRH4RanksSoprano", 
        "accdnRH4RanksAlto", 
        "accdnRH4RanksTenor", 
        "accdnRH4RanksMaster", 
        "accdnRH4RanksSoftBass", 
        "accdnRH4RanksSoftTenor", 
        "accdnRH4RanksBassAlto", 
        "accdnLH2Ranks8Round", 
        "accdnLH2Ranks16Round", 
        "accdnLH2Ranks8Plus16Round", 
        "accdnLH2RanksMasterRound", 
        "accdnLH2RanksMasterPlus16Round", 
        "accdnLH2RanksFullMasterRound", 
        "accdnLH3Ranks8Square", 
        "accdnLH3Ranks2Square", 
        "accdnLH3RanksDouble8Square", 
        "accdnLH3Ranks2Plus8Square", 
        "accdnLH3RanksTuttiSquare", 
        "accdnCombRH3RanksEmpty", 
        "accdnCombRH4RanksEmpty", 
        "accdnCombLH2RanksEmpty", 
        "accdnCombLH3RanksEmptySquare", 
        "accdnCombDot", 
        "accdnPush", 
        "accdnPull", 
        "accdnRicochet2", 
        "accdnRicochet3", 
        "accdnRicochet4", 
        "accdnRicochet5", 
        "accdnRicochet6", 
        "accdnRicochetStem2", 
        "accdnRicochetStem3", 
        "accdnRicochetStem4", 
        "accdnRicochetStem5", 
        "accdnRicochetStem6"
    ], 
    "tf_prolations": [
        "mensuralProportionMinor", 
        "mensuralProportionMajor", 
        "mensuralModusPerfectumVert", 
        "mensuralModusImperfectumVert", 
        "mensuralTempusPerfectumHoriz", 
        "mensuralTempusImperfectumHoriz"
    ], 
    "tf_zeroWidth": [
        "staff1Line", 
        "staff2Lines", 
        "staff3Lines", 
        "staff4Lines", 
        "staff5Lines", 
        "staff6Lines", 
        "staff1LineWide", 
        "staff2LinesWide", 
        "staff3LinesWide", 
        "staff4LinesWide", 
        "staff5LinesWide", 
        "staff6LinesWide", 
        "staff1LineNarrow", 
        "staff2LinesNarrow", 
        "staff3LinesNarrow", 
        "staff4LinesNarrow", 
        "staff5LinesNarrow", 
        "staff6LinesNarrow", 
        "legerLine", 
        "legerLineWide", 
        "legerLineNarrow", 
        "timeSig0", 
        "timeSig1", 
        "timeSig2", 
        "timeSig3", 
        "timeSig4", 
        "timeSig5", 
        "timeSig6", 
        "timeSig7", 
        "timeSig8", 
        "timeSig9", 
        "pictBeaterSoftXylophoneLeft", 
        "pictBeaterMediumXylophoneLeft", 
        "pictBeaterHardXylophoneLeft", 
        "pictBeaterWoodXylophoneLeft", 
        "pictBeaterSoftGlockenspielLeft", 
        "pictBeaterHardGlockenspielLeft", 
        "pictBeaterSoftTimpaniLeft", 
        "pictBeaterMediumTimpaniLeft", 
        "pictBeaterHardTimpaniLeft", 
        "pictBeaterWoodTimpaniLeft", 
        "pictBeaterSoftYarnLeft", 
        "pictBeaterMediumYarnLeft", 
        "pictBeaterHardYarnLeft", 
        "pictBeaterSuperballLeft", 
        "pictWoundHardLeft", 
        "pictWoundSoftLeft", 
        "pictGumSoftLeft", 
        "pictGumMediumLeft", 
        "pictGumHardLeft", 
        "pictBeaterMetalLeft", 
        "pictBeaterCombiningParentheses", 
        "pictBeaterCombiningDashedCircle", 
        "pictBeaterBox", 
        "chantStaff", 
        "chantStaffWide", 
        "chantStaffNarrow", 
        "luteStaff6Lines", 
        "luteStaff6LinesWide", 
        "luteStaff6LinesNarrow"
    ], 
    "wigglesArpeggiato": [
        "wiggleArpeggiatoUp", 
        "wiggleArpeggiatoDown", 
        "wiggleArpeggiatoUpSwash", 
        "wiggleArpeggiatoDownSwash", 
        "wiggleArpeggiatoUpArrow", 
        "wiggleArpeggiatoDownArrow"
    ], 
    "wigglesArpeggiatoDown": [
        "wiggleArpeggiatoDown", 
        "wiggleArpeggiatoDownSwash", 
        "wiggleArpeggiatoDownArrow"
    ], 
    "wigglesArpeggiatoUp": [
        "wiggleArpeggiatoUp", 
        "wiggleArpeggiatoUpSwash", 
        "wiggleArpeggiatoUpArrow"
    ], 
    "wigglesCircularMotion": [
        "wiggleCircularStart", 
        "wiggleCircularLargest", 
        "wiggleCircularLargerStill", 
        "wiggleCircularLarger", 
        "wiggleCircularLarge", 
        "wiggleCircular", 
        "wiggleCircularSmall", 
        "wiggleCircularEnd"
    ], 
    "wigglesQuasiRandom": [
        "wiggleRandom1", 
        "wiggleRandom2", 
        "wiggleRandom3", 
        "wiggleRandom4"
    ], 
    "wigglesTrill": [
        "wiggleTrillFastest", 
        "wiggleTrillFasterStill", 
        "wiggleTrillFaster", 
        "wiggleTrillFast", 
        "wiggleTrill", 
        "wiggleTrillSlow", 
        "wiggleTrillSlower", 
        "wiggleTrillSlowerStill", 
        "wiggleTrillSlowest"
    ], 
    "wigglesVibrato": [
        "wiggleVibrato", 
        "wiggleVibratoWide", 
        "guitarVibratoStroke", 
        "guitarWideVibratoStroke"
    ], 
    "wigglesVibratoVariable": [
        "wiggleVibratoStart", 
        "wiggleVibratoSmallestFastest", 
        "wiggleVibratoSmallestFasterStill", 
        "wiggleVibratoSmallestFaster", 
        "wiggleVibratoSmallestFast", 
        "wiggleVibratoSmallestSlow", 
        "wiggleVibratoSmallestSlower", 
        "wiggleVibratoSmallestSlowest", 
        "wiggleVibratoSmallFastest", 
        "wiggleVibratoSmallFasterStill", 
        "wiggleVibratoSmallFaster", 
        "wiggleVibratoSmallFast", 
        "wiggleVibratoSmallSlow", 
        "wiggleVibratoSmallSlower", 
        "wiggleVibratoSmallSlowest", 
        "wiggleVibratoMediumFastest", 
        "wiggleVibratoMediumFasterStill", 
        "wiggleVibratoMediumFaster", 
        "wiggleVibratoMediumFast", 
        "wiggleVibratoMediumSlow", 
        "wiggleVIbratoMediumSlower", 
        "wiggleVibratoMediumSlowest", 
        "wiggleVibratoLargeFastest", 
        "wiggleVibratoLargeFasterStill", 
        "wiggleVibratoLargeFaster", 
        "wiggleVibratoLargeFast", 
        "wiggleVibratoLargeSlow", 
        "wiggleVibratoLargeSlower", 
        "wiggleVibratoLargeSlowest", 
        "wiggleVibratoLargestFastest", 
        "wiggleVibratoLargestFasterStill", 
        "wiggleVibratoLargestFaster", 
        "wiggleVibratoLargestFast", 
        "wiggleVibratoLargestSlow", 
        "wiggleVIbratoLargestSlower", 
        "wiggleVibratoLargestSlowest"
    ]
}
},{}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/glyphnames_diet.json":[function(require,module,exports){
module.exports={
    "4stringTabClef": "U+E06E", 
    "6stringTabClef": "U+E06D", 
    "accSagittal11LargeDiesisDown": "U+E30D", 
    "accSagittal11LargeDiesisUp": "U+E30C", 
    "accSagittal11MediumDiesisDown": "U+E30B", 
    "accSagittal11MediumDiesisUp": "U+E30A", 
    "accSagittal11v19LargeDiesisDown": "U+E3AB", 
    "accSagittal11v19LargeDiesisUp": "U+E3AA", 
    "accSagittal11v19MediumDiesisDown": "U+E3A3", 
    "accSagittal11v19MediumDiesisUp": "U+E3A2", 
    "accSagittal11v49CommaDown": "U+E397", 
    "accSagittal11v49CommaUp": "U+E396", 
    "accSagittal143CommaDown": "U+E395", 
    "accSagittal143CommaUp": "U+E394", 
    "accSagittal17CommaDown": "U+E343", 
    "accSagittal17CommaUp": "U+E342", 
    "accSagittal17KleismaDown": "U+E393", 
    "accSagittal17KleismaUp": "U+E392", 
    "accSagittal19CommaDown": "U+E399", 
    "accSagittal19CommaUp": "U+E398", 
    "accSagittal19SchismaDown": "U+E391", 
    "accSagittal19SchismaUp": "U+E390", 
    "accSagittal23CommaDown": "U+E371", 
    "accSagittal23CommaUp": "U+E370", 
    "accSagittal23SmallDiesisDown": "U+E39F", 
    "accSagittal23SmallDiesisUp": "U+E39E", 
    "accSagittal25SmallDiesisDown": "U+E307", 
    "accSagittal25SmallDiesisUp": "U+E306", 
    "accSagittal35LargeDiesisDown": "U+E30F", 
    "accSagittal35LargeDiesisUp": "U+E30E", 
    "accSagittal35MediumDiesisDown": "U+E309", 
    "accSagittal35MediumDiesisUp": "U+E308", 
    "accSagittal49LargeDiesisDown": "U+E3A9", 
    "accSagittal49LargeDiesisUp": "U+E3A8", 
    "accSagittal49MediumDiesisDown": "U+E3A5", 
    "accSagittal49MediumDiesisUp": "U+E3A4", 
    "accSagittal49SmallDiesisDown": "U+E39D", 
    "accSagittal49SmallDiesisUp": "U+E39C", 
    "accSagittal55CommaDown": "U+E345", 
    "accSagittal55CommaUp": "U+E344", 
    "accSagittal5CommaDown": "U+E303", 
    "accSagittal5CommaUp": "U+E302", 
    "accSagittal5v11SmallDiesisDown": "U+E349", 
    "accSagittal5v11SmallDiesisUp": "U+E348", 
    "accSagittal5v13LargeDiesisDown": "U+E3AD", 
    "accSagittal5v13LargeDiesisUp": "U+E3AC", 
    "accSagittal5v13MediumDiesisDown": "U+E3A1", 
    "accSagittal5v13MediumDiesisUp": "U+E3A0", 
    "accSagittal5v19CommaDown": "U+E373", 
    "accSagittal5v19CommaUp": "U+E372", 
    "accSagittal5v23SmallDiesisDown": "U+E375", 
    "accSagittal5v23SmallDiesisUp": "U+E374", 
    "accSagittal5v49MediumDiesisDown": "U+E3A7", 
    "accSagittal5v49MediumDiesisUp": "U+E3A6", 
    "accSagittal5v7KleismaDown": "U+E301", 
    "accSagittal5v7KleismaUp": "U+E300", 
    "accSagittal7CommaDown": "U+E305", 
    "accSagittal7CommaUp": "U+E304", 
    "accSagittal7v11CommaDown": "U+E347", 
    "accSagittal7v11CommaUp": "U+E346", 
    "accSagittal7v11KleismaDown": "U+E341", 
    "accSagittal7v11KleismaUp": "U+E340", 
    "accSagittal7v19CommaDown": "U+E39B", 
    "accSagittal7v19CommaUp": "U+E39A", 
    "accSagittalAcute": "U+E3F2", 
    "accSagittalDoubleFlat": "U+E335", 
    "accSagittalDoubleFlat11v49CUp": "U+E3E9", 
    "accSagittalDoubleFlat143CUp": "U+E3EB", 
    "accSagittalDoubleFlat17CUp": "U+E365", 
    "accSagittalDoubleFlat17kUp": "U+E3ED", 
    "accSagittalDoubleFlat19CUp": "U+E3E7", 
    "accSagittalDoubleFlat19sUp": "U+E3EF", 
    "accSagittalDoubleFlat23CUp": "U+E387", 
    "accSagittalDoubleFlat23SUp": "U+E3E1", 
    "accSagittalDoubleFlat25SUp": "U+E32D", 
    "accSagittalDoubleFlat49SUp": "U+E3E3", 
    "accSagittalDoubleFlat55CUp": "U+E363", 
    "accSagittalDoubleFlat5CUp": "U+E331", 
    "accSagittalDoubleFlat5v11SUp": "U+E35F", 
    "accSagittalDoubleFlat5v19CUp": "U+E385", 
    "accSagittalDoubleFlat5v23SUp": "U+E383", 
    "accSagittalDoubleFlat5v7kUp": "U+E333", 
    "accSagittalDoubleFlat7CUp": "U+E32F", 
    "accSagittalDoubleFlat7v11CUp": "U+E361", 
    "accSagittalDoubleFlat7v11kUp": "U+E367", 
    "accSagittalDoubleFlat7v19CUp": "U+E3E5", 
    "accSagittalDoubleSharp": "U+E334", 
    "accSagittalDoubleSharp11v49CDown": "U+E3E8", 
    "accSagittalDoubleSharp143CDown": "U+E3EA", 
    "accSagittalDoubleSharp17CDown": "U+E364", 
    "accSagittalDoubleSharp17kDown": "U+E3EC", 
    "accSagittalDoubleSharp19CDown": "U+E3E6", 
    "accSagittalDoubleSharp19sDown": "U+E3EE", 
    "accSagittalDoubleSharp23CDown": "U+E386", 
    "accSagittalDoubleSharp23SDown": "U+E3E0", 
    "accSagittalDoubleSharp25SDown": "U+E32C", 
    "accSagittalDoubleSharp49SDown": "U+E3E2", 
    "accSagittalDoubleSharp55CDown": "U+E362", 
    "accSagittalDoubleSharp5CDown": "U+E330", 
    "accSagittalDoubleSharp5v11SDown": "U+E35E", 
    "accSagittalDoubleSharp5v19CDown": "U+E384", 
    "accSagittalDoubleSharp5v23SDown": "U+E382", 
    "accSagittalDoubleSharp5v7kDown": "U+E332", 
    "accSagittalDoubleSharp7CDown": "U+E32E", 
    "accSagittalDoubleSharp7v11CDown": "U+E360", 
    "accSagittalDoubleSharp7v11kDown": "U+E366", 
    "accSagittalDoubleSharp7v19CDown": "U+E3E4", 
    "accSagittalFlat": "U+E319", 
    "accSagittalFlat11LDown": "U+E329", 
    "accSagittalFlat11MDown": "U+E327", 
    "accSagittalFlat11v19LDown": "U+E3DB", 
    "accSagittalFlat11v19MDown": "U+E3D3", 
    "accSagittalFlat11v49CDown": "U+E3C7", 
    "accSagittalFlat11v49CUp": "U+E3B9", 
    "accSagittalFlat143CDown": "U+E3C5", 
    "accSagittalFlat143CUp": "U+E3BB", 
    "accSagittalFlat17CDown": "U+E357", 
    "accSagittalFlat17CUp": "U+E351", 
    "accSagittalFlat17kDown": "U+E3C3", 
    "accSagittalFlat17kUp": "U+E3BD", 
    "accSagittalFlat19CDown": "U+E3C9", 
    "accSagittalFlat19CUp": "U+E3B7", 
    "accSagittalFlat19sDown": "U+E3C1", 
    "accSagittalFlat19sUp": "U+E3BF", 
    "accSagittalFlat23CDown": "U+E37D", 
    "accSagittalFlat23CUp": "U+E37B", 
    "accSagittalFlat23SDown": "U+E3CF", 
    "accSagittalFlat23SUp": "U+E3B1", 
    "accSagittalFlat25SDown": "U+E323", 
    "accSagittalFlat25SUp": "U+E311", 
    "accSagittalFlat35LDown": "U+E32B", 
    "accSagittalFlat35MDown": "U+E325", 
    "accSagittalFlat49LDown": "U+E3D9", 
    "accSagittalFlat49MDown": "U+E3D5", 
    "accSagittalFlat49SDown": "U+E3CD", 
    "accSagittalFlat49SUp": "U+E3B3", 
    "accSagittalFlat55CDown": "U+E359", 
    "accSagittalFlat55CUp": "U+E34F", 
    "accSagittalFlat5CDown": "U+E31F", 
    "accSagittalFlat5CUp": "U+E315", 
    "accSagittalFlat5v11SDown": "U+E35D", 
    "accSagittalFlat5v11SUp": "U+E34B", 
    "accSagittalFlat5v13LDown": "U+E3DD", 
    "accSagittalFlat5v13MDown": "U+E3D1", 
    "accSagittalFlat5v19CDown": "U+E37F", 
    "accSagittalFlat5v19CUp": "U+E379", 
    "accSagittalFlat5v23SDown": "U+E381", 
    "accSagittalFlat5v23SUp": "U+E377", 
    "accSagittalFlat5v49MDown": "U+E3D7", 
    "accSagittalFlat5v7kDown": "U+E31D", 
    "accSagittalFlat5v7kUp": "U+E317", 
    "accSagittalFlat7CDown": "U+E321", 
    "accSagittalFlat7CUp": "U+E313", 
    "accSagittalFlat7v11CDown": "U+E35B", 
    "accSagittalFlat7v11CUp": "U+E34D", 
    "accSagittalFlat7v11kDown": "U+E355", 
    "accSagittalFlat7v11kUp": "U+E353", 
    "accSagittalFlat7v19CDown": "U+E3CB", 
    "accSagittalFlat7v19CUp": "U+E3B5", 
    "accSagittalGrave": "U+E3F3", 
    "accSagittalShaftDown": "U+E3F1", 
    "accSagittalShaftUp": "U+E3F0", 
    "accSagittalSharp": "U+E318", 
    "accSagittalSharp11LUp": "U+E328", 
    "accSagittalSharp11MUp": "U+E326", 
    "accSagittalSharp11v19LUp": "U+E3DA", 
    "accSagittalSharp11v19MUp": "U+E3D2", 
    "accSagittalSharp11v49CDown": "U+E3B8", 
    "accSagittalSharp11v49CUp": "U+E3C6", 
    "accSagittalSharp143CDown": "U+E3BA", 
    "accSagittalSharp143CUp": "U+E3C4", 
    "accSagittalSharp17CDown": "U+E350", 
    "accSagittalSharp17CUp": "U+E356", 
    "accSagittalSharp17kDown": "U+E3BC", 
    "accSagittalSharp17kUp": "U+E3C2", 
    "accSagittalSharp19CDown": "U+E3B6", 
    "accSagittalSharp19CUp": "U+E3C8", 
    "accSagittalSharp19sDown": "U+E3BE", 
    "accSagittalSharp19sUp": "U+E3C0", 
    "accSagittalSharp23CDown": "U+E37A", 
    "accSagittalSharp23CUp": "U+E37C", 
    "accSagittalSharp23SDown": "U+E3B0", 
    "accSagittalSharp23SUp": "U+E3CE", 
    "accSagittalSharp25SDown": "U+E310", 
    "accSagittalSharp25SUp": "U+E322", 
    "accSagittalSharp35LUp": "U+E32A", 
    "accSagittalSharp35MUp": "U+E324", 
    "accSagittalSharp49LUp": "U+E3D8", 
    "accSagittalSharp49MUp": "U+E3D4", 
    "accSagittalSharp49SDown": "U+E3B2", 
    "accSagittalSharp49SUp": "U+E3CC", 
    "accSagittalSharp55CDown": "U+E34E", 
    "accSagittalSharp55CUp": "U+E358", 
    "accSagittalSharp5CDown": "U+E314", 
    "accSagittalSharp5CUp": "U+E31E", 
    "accSagittalSharp5v11SDown": "U+E34A", 
    "accSagittalSharp5v11SUp": "U+E35C", 
    "accSagittalSharp5v13LUp": "U+E3DC", 
    "accSagittalSharp5v13MUp": "U+E3D0", 
    "accSagittalSharp5v19CDown": "U+E378", 
    "accSagittalSharp5v19CUp": "U+E37E", 
    "accSagittalSharp5v23SDown": "U+E376", 
    "accSagittalSharp5v23SUp": "U+E380", 
    "accSagittalSharp5v49MUp": "U+E3D6", 
    "accSagittalSharp5v7kDown": "U+E316", 
    "accSagittalSharp5v7kUp": "U+E31C", 
    "accSagittalSharp7CDown": "U+E312", 
    "accSagittalSharp7CUp": "U+E320", 
    "accSagittalSharp7v11CDown": "U+E34C", 
    "accSagittalSharp7v11CUp": "U+E35A", 
    "accSagittalSharp7v11kDown": "U+E352", 
    "accSagittalSharp7v11kUp": "U+E354", 
    "accSagittalSharp7v19CDown": "U+E3B4", 
    "accSagittalSharp7v19CUp": "U+E3CA", 
    "accSagittalUnused1": "U+E31A", 
    "accSagittalUnused2": "U+E31B", 
    "accSagittalUnused3": "U+E3DE", 
    "accSagittalUnused4": "U+E3DF", 
    "accdnCombDot": "U+E8CA", 
    "accdnCombLH2RanksEmpty": "U+E8C8", 
    "accdnCombLH3RanksEmptySquare": "U+E8C9", 
    "accdnCombRH3RanksEmpty": "U+E8C6", 
    "accdnCombRH4RanksEmpty": "U+E8C7", 
    "accdnDiatonicClef": "U+E079", 
    "accdnLH2Ranks16Round": "U+E8BC", 
    "accdnLH2Ranks8Plus16Round": "U+E8BD", 
    "accdnLH2Ranks8Round": "U+E8BB", 
    "accdnLH2RanksFullMasterRound": "U+E8C0", 
    "accdnLH2RanksMasterPlus16Round": "U+E8BF", 
    "accdnLH2RanksMasterRound": "U+E8BE", 
    "accdnLH3Ranks2Plus8Square": "U+E8C4", 
    "accdnLH3Ranks2Square": "U+E8C2", 
    "accdnLH3Ranks8Square": "U+E8C1", 
    "accdnLH3RanksDouble8Square": "U+E8C3", 
    "accdnLH3RanksTuttiSquare": "U+E8C5", 
    "accdnPull": "U+E8CC", 
    "accdnPush": "U+E8CB", 
    "accdnRH3RanksAccordion": "U+E8AC", 
    "accdnRH3RanksAuthenticMusette": "U+E8A8", 
    "accdnRH3RanksBandoneon": "U+E8AB", 
    "accdnRH3RanksBassoon": "U+E8A4", 
    "accdnRH3RanksClarinet": "U+E8A1", 
    "accdnRH3RanksDoubleTremoloLower8ve": "U+E8B1", 
    "accdnRH3RanksDoubleTremoloUpper8ve": "U+E8B2", 
    "accdnRH3RanksFullFactory": "U+E8B3", 
    "accdnRH3RanksHarmonium": "U+E8AA", 
    "accdnRH3RanksImitationMusette": "U+E8A7", 
    "accdnRH3RanksLowerTremolo8": "U+E8A3", 
    "accdnRH3RanksMaster": "U+E8AD", 
    "accdnRH3RanksOboe": "U+E8A5", 
    "accdnRH3RanksOrgan": "U+E8A9", 
    "accdnRH3RanksPiccolo": "U+E8A0", 
    "accdnRH3RanksTremoloLower8ve": "U+E8AF", 
    "accdnRH3RanksTremoloUpper8ve": "U+E8B0", 
    "accdnRH3RanksTwoChoirs": "U+E8AE", 
    "accdnRH3RanksUpperTremolo8": "U+E8A2", 
    "accdnRH3RanksViolin": "U+E8A6", 
    "accdnRH4RanksAlto": "U+E8B5", 
    "accdnRH4RanksBassAlto": "U+E8BA", 
    "accdnRH4RanksMaster": "U+E8B7", 
    "accdnRH4RanksSoftBass": "U+E8B8", 
    "accdnRH4RanksSoftTenor": "U+E8B9", 
    "accdnRH4RanksSoprano": "U+E8B4", 
    "accdnRH4RanksTenor": "U+E8B6", 
    "accdnRicochet2": "U+E8CD", 
    "accdnRicochet3": "U+E8CE", 
    "accdnRicochet4": "U+E8CF", 
    "accdnRicochet5": "U+E8D0", 
    "accdnRicochet6": "U+E8D1", 
    "accdnRicochetStem2": "U+E8D2", 
    "accdnRicochetStem3": "U+E8D3", 
    "accdnRicochetStem4": "U+E8D4", 
    "accdnRicochetStem5": "U+E8D5", 
    "accdnRicochetStem6": "U+E8D6", 
    "accidental1CommaFlat": "U+E454", 
    "accidental1CommaSharp": "U+E450", 
    "accidental2CommaFlat": "U+E455", 
    "accidental2CommaSharp": "U+E451", 
    "accidental3CommaFlat": "U+E456", 
    "accidental3CommaSharp": "U+E452", 
    "accidental4CommaFlat": "U+E457", 
    "accidental5CommaSharp": "U+E453", 
    "accidentalArrowDown": "U+E27B", 
    "accidentalArrowUp": "U+E27A", 
    "accidentalBakiyeFlat": "U+E442", 
    "accidentalBakiyeSharp": "U+E445", 
    "accidentalBuyukMucennebFlat": "U+E440", 
    "accidentalBuyukMucennebSharp": "U+E447", 
    "accidentalCombiningCloseCurlyBrace": "U+E2EF", 
    "accidentalCombiningLower17Schisma": "U+E2E6", 
    "accidentalCombiningLower19Schisma": "U+E2E8", 
    "accidentalCombiningLower23Limit29LimitComma": "U+E2EA", 
    "accidentalCombiningLower31Schisma": "U+E2EC", 
    "accidentalCombiningOpenCurlyBrace": "U+E2EE", 
    "accidentalCombiningRaise17Schisma": "U+E2E7", 
    "accidentalCombiningRaise19Schisma": "U+E2E9", 
    "accidentalCombiningRaise23Limit29LimitComma": "U+E2EB", 
    "accidentalCombiningRaise31Schisma": "U+E2ED", 
    "accidentalCommaSlashDown": "U+E47A", 
    "accidentalCommaSlashUp": "U+E479", 
    "accidentalDoubleFlat": "U+E264", 
    "accidentalDoubleFlatEqualTempered": "U+E2F0", 
    "accidentalDoubleFlatOneArrowDown": "U+E2C0", 
    "accidentalDoubleFlatOneArrowUp": "U+E2C5", 
    "accidentalDoubleFlatReversed": "U+E483", 
    "accidentalDoubleFlatThreeArrowsDown": "U+E2D4", 
    "accidentalDoubleFlatThreeArrowsUp": "U+E2D9", 
    "accidentalDoubleFlatTurned": "U+E485", 
    "accidentalDoubleFlatTwoArrowsDown": "U+E2CA", 
    "accidentalDoubleFlatTwoArrowsUp": "U+E2CF", 
    "accidentalDoubleSharp": "U+E263", 
    "accidentalDoubleSharpEqualTempered": "U+E2F4", 
    "accidentalDoubleSharpOneArrowDown": "U+E2C4", 
    "accidentalDoubleSharpOneArrowUp": "U+E2C9", 
    "accidentalDoubleSharpThreeArrowsDown": "U+E2D8", 
    "accidentalDoubleSharpThreeArrowsUp": "U+E2DD", 
    "accidentalDoubleSharpTwoArrowsDown": "U+E2CE", 
    "accidentalDoubleSharpTwoArrowsUp": "U+E2D3", 
    "accidentalFilledReversedFlatAndFlat": "U+E296", 
    "accidentalFilledReversedFlatAndFlatArrowDown": "U+E298", 
    "accidentalFilledReversedFlatAndFlatArrowUp": "U+E297", 
    "accidentalFilledReversedFlatArrowDown": "U+E293", 
    "accidentalFilledReversedFlatArrowUp": "U+E292", 
    "accidentalFiveQuarterTonesFlatArrowDown": "U+E279", 
    "accidentalFiveQuarterTonesSharpArrowUp": "U+E276", 
    "accidentalFlat": "U+E260", 
    "accidentalFlatEqualTempered": "U+E2F1", 
    "accidentalFlatOneArrowDown": "U+E2C1", 
    "accidentalFlatOneArrowUp": "U+E2C6", 
    "accidentalFlatThreeArrowsDown": "U+E2D5", 
    "accidentalFlatThreeArrowsUp": "U+E2DA", 
    "accidentalFlatTurned": "U+E484", 
    "accidentalFlatTwoArrowsDown": "U+E2CB", 
    "accidentalFlatTwoArrowsUp": "U+E2D0", 
    "accidentalHalfSharpArrowDown": "U+E29A", 
    "accidentalHalfSharpArrowUp": "U+E299", 
    "accidentalJohnston13": "U+E2B6", 
    "accidentalJohnston31": "U+E2B7", 
    "accidentalJohnstonDown": "U+E2B5", 
    "accidentalJohnstonEl": "U+E2B2", 
    "accidentalJohnstonMinus": "U+E2B1", 
    "accidentalJohnstonPlus": "U+E2B0", 
    "accidentalJohnstonSeven": "U+E2B3", 
    "accidentalJohnstonUp": "U+E2B4", 
    "accidentalKomaFlat": "U+E443", 
    "accidentalKomaSharp": "U+E444", 
    "accidentalKoron": "U+E460", 
    "accidentalKucukMucennebFlat": "U+E441", 
    "accidentalKucukMucennebSharp": "U+E446", 
    "accidentalLargeDoubleSharp": "U+E47D", 
    "accidentalLowerOneSeptimalComma": "U+E2DE", 
    "accidentalLowerOneTridecimalQuartertone": "U+E2E4", 
    "accidentalLowerOneUndecimalQuartertone": "U+E2E2", 
    "accidentalLowerTwoSeptimalCommas": "U+E2E0", 
    "accidentalNarrowReversedFlat": "U+E284", 
    "accidentalNarrowReversedFlatAndFlat": "U+E285", 
    "accidentalNatural": "U+E261", 
    "accidentalNaturalEqualTempered": "U+E2F2", 
    "accidentalNaturalFlat": "U+E267", 
    "accidentalNaturalOneArrowDown": "U+E2C2", 
    "accidentalNaturalOneArrowUp": "U+E2C7", 
    "accidentalNaturalReversed": "U+E482", 
    "accidentalNaturalSharp": "U+E268", 
    "accidentalNaturalThreeArrowsDown": "U+E2D6", 
    "accidentalNaturalThreeArrowsUp": "U+E2DB", 
    "accidentalNaturalTwoArrowsDown": "U+E2CC", 
    "accidentalNaturalTwoArrowsUp": "U+E2D1", 
    "accidentalOneAndAHalfSharpsArrowDown": "U+E29C", 
    "accidentalOneAndAHalfSharpsArrowUp": "U+E29B", 
    "accidentalOneThirdToneFlatFerneyhough": "U+E48B", 
    "accidentalOneThirdToneSharpFerneyhough": "U+E48A", 
    "accidentalParensLeft": "U+E26A", 
    "accidentalParensRight": "U+E26B", 
    "accidentalQuarterToneFlat4": "U+E47F", 
    "accidentalQuarterToneFlatArrowUp": "U+E270", 
    "accidentalQuarterToneFlatFilledReversed": "U+E480", 
    "accidentalQuarterToneFlatNaturalArrowDown": "U+E273", 
    "accidentalQuarterToneFlatPenderecki": "U+E478", 
    "accidentalQuarterToneFlatStein": "U+E280", 
    "accidentalQuarterToneFlatVanBlankenburg": "U+E488", 
    "accidentalQuarterToneSharp4": "U+E47E", 
    "accidentalQuarterToneSharpArrowDown": "U+E275", 
    "accidentalQuarterToneSharpBusotti": "U+E472", 
    "accidentalQuarterToneSharpNaturalArrowUp": "U+E272", 
    "accidentalQuarterToneSharpStein": "U+E282", 
    "accidentalQuarterToneSharpWiggle": "U+E475", 
    "accidentalRaiseOneSeptimalComma": "U+E2DF", 
    "accidentalRaiseOneTridecimalQuartertone": "U+E2E5", 
    "accidentalRaiseOneUndecimalQuartertone": "U+E2E3", 
    "accidentalRaiseTwoSeptimalCommas": "U+E2E1", 
    "accidentalReversedFlatAndFlatArrowDown": "U+E295", 
    "accidentalReversedFlatAndFlatArrowUp": "U+E294", 
    "accidentalReversedFlatArrowDown": "U+E291", 
    "accidentalReversedFlatArrowUp": "U+E290", 
    "accidentalSharp": "U+E262", 
    "accidentalSharpEqualTempered": "U+E2F3", 
    "accidentalSharpOneArrowDown": "U+E2C3", 
    "accidentalSharpOneArrowUp": "U+E2C8", 
    "accidentalSharpOneHorizontalStroke": "U+E473", 
    "accidentalSharpReversed": "U+E481", 
    "accidentalSharpSharp": "U+E269", 
    "accidentalSharpThreeArrowsDown": "U+E2D7", 
    "accidentalSharpThreeArrowsUp": "U+E2DC", 
    "accidentalSharpTwoArrowsDown": "U+E2CD", 
    "accidentalSharpTwoArrowsUp": "U+E2D2", 
    "accidentalSims12Down": "U+E2A0", 
    "accidentalSims12Up": "U+E2A3", 
    "accidentalSims4Down": "U+E2A2", 
    "accidentalSims4Up": "U+E2A5", 
    "accidentalSims6Down": "U+E2A1", 
    "accidentalSims6Up": "U+E2A4", 
    "accidentalSori": "U+E461", 
    "accidentalTavenerFlat": "U+E477", 
    "accidentalTavenerSharp": "U+E476", 
    "accidentalThreeQuarterTonesFlatArrowDown": "U+E271", 
    "accidentalThreeQuarterTonesFlatArrowUp": "U+E278", 
    "accidentalThreeQuarterTonesFlatCouper": "U+E489", 
    "accidentalThreeQuarterTonesFlatGrisey": "U+E486", 
    "accidentalThreeQuarterTonesFlatTartini": "U+E487", 
    "accidentalThreeQuarterTonesFlatZimmermann": "U+E281", 
    "accidentalThreeQuarterTonesSharpArrowDown": "U+E277", 
    "accidentalThreeQuarterTonesSharpArrowUp": "U+E274", 
    "accidentalThreeQuarterTonesSharpBusotti": "U+E474", 
    "accidentalThreeQuarterTonesSharpStein": "U+E283", 
    "accidentalTripleFlat": "U+E266", 
    "accidentalTripleSharp": "U+E265", 
    "accidentalTwoThirdTonesFlatFerneyhough": "U+E48D", 
    "accidentalTwoThirdTonesSharpFerneyhough": "U+E48C", 
    "accidentalWilsonMinus": "U+E47C", 
    "accidentalWilsonPlus": "U+E47B", 
    "accidentalWyschnegradsky10TwelfthsFlat": "U+E434", 
    "accidentalWyschnegradsky10TwelfthsSharp": "U+E429", 
    "accidentalWyschnegradsky11TwelfthsFlat": "U+E435", 
    "accidentalWyschnegradsky11TwelfthsSharp": "U+E42A", 
    "accidentalWyschnegradsky1TwelfthsFlat": "U+E42B", 
    "accidentalWyschnegradsky1TwelfthsSharp": "U+E420", 
    "accidentalWyschnegradsky2TwelfthsFlat": "U+E42C", 
    "accidentalWyschnegradsky2TwelfthsSharp": "U+E421", 
    "accidentalWyschnegradsky3TwelfthsFlat": "U+E42D", 
    "accidentalWyschnegradsky3TwelfthsSharp": "U+E422", 
    "accidentalWyschnegradsky4TwelfthsFlat": "U+E42E", 
    "accidentalWyschnegradsky4TwelfthsSharp": "U+E423", 
    "accidentalWyschnegradsky5TwelfthsFlat": "U+E42F", 
    "accidentalWyschnegradsky5TwelfthsSharp": "U+E424", 
    "accidentalWyschnegradsky6TwelfthsFlat": "U+E430", 
    "accidentalWyschnegradsky6TwelfthsSharp": "U+E425", 
    "accidentalWyschnegradsky7TwelfthsFlat": "U+E431", 
    "accidentalWyschnegradsky7TwelfthsSharp": "U+E426", 
    "accidentalWyschnegradsky8TwelfthsFlat": "U+E432", 
    "accidentalWyschnegradsky8TwelfthsSharp": "U+E427", 
    "accidentalWyschnegradsky9TwelfthsFlat": "U+E433", 
    "accidentalWyschnegradsky9TwelfthsSharp": "U+E428", 
    "accidentalXenakisOneThirdToneSharp": "U+E470", 
    "accidentalXenakisTwoThirdTonesSharp": "U+E471", 
    "analyticsEndStimme": "U+E863", 
    "analyticsHauptstimme": "U+E860", 
    "analyticsInversion1": "U+E869", 
    "analyticsNebenstimme": "U+E861", 
    "analyticsStartStimme": "U+E862", 
    "analyticsTheme": "U+E864", 
    "analyticsTheme1": "U+E868", 
    "analyticsThemeInversion": "U+E867", 
    "analyticsThemeRetrograde": "U+E865", 
    "analyticsThemeRetrogradeInversion": "U+E866", 
    "arpeggiatoDown": "U+E635", 
    "arpeggiatoUp": "U+E634", 
    "arrowBlackDown": "U+EB64", 
    "arrowBlackDownLeft": "U+EB65", 
    "arrowBlackDownRight": "U+EB63", 
    "arrowBlackLeft": "U+EB66", 
    "arrowBlackRight": "U+EB62", 
    "arrowBlackUp": "U+EB60", 
    "arrowBlackUpLeft": "U+EB67", 
    "arrowBlackUpRight": "U+EB61", 
    "arrowOpenDown": "U+EB74", 
    "arrowOpenDownLeft": "U+EB75", 
    "arrowOpenDownRight": "U+EB73", 
    "arrowOpenLeft": "U+EB76", 
    "arrowOpenRight": "U+EB72", 
    "arrowOpenUp": "U+EB70", 
    "arrowOpenUpLeft": "U+EB77", 
    "arrowOpenUpRight": "U+EB71", 
    "arrowWhiteDown": "U+EB6C", 
    "arrowWhiteDownLeft": "U+EB6D", 
    "arrowWhiteDownRight": "U+EB6B", 
    "arrowWhiteLeft": "U+EB6E", 
    "arrowWhiteRight": "U+EB6A", 
    "arrowWhiteUp": "U+EB68", 
    "arrowWhiteUpLeft": "U+EB6F", 
    "arrowWhiteUpRight": "U+EB69", 
    "arrowheadBlackDown": "U+EB7C", 
    "arrowheadBlackDownLeft": "U+EB7D", 
    "arrowheadBlackDownRight": "U+EB7B", 
    "arrowheadBlackLeft": "U+EB7E", 
    "arrowheadBlackRight": "U+EB7A", 
    "arrowheadBlackUp": "U+EB78", 
    "arrowheadBlackUpLeft": "U+EB7F", 
    "arrowheadBlackUpRight": "U+EB79", 
    "arrowheadOpenDown": "U+EB8C", 
    "arrowheadOpenDownLeft": "U+EB8D", 
    "arrowheadOpenDownRight": "U+EB8B", 
    "arrowheadOpenLeft": "U+EB8E", 
    "arrowheadOpenRight": "U+EB8A", 
    "arrowheadOpenUp": "U+EB88", 
    "arrowheadOpenUpLeft": "U+EB8F", 
    "arrowheadOpenUpRight": "U+EB89", 
    "arrowheadWhiteDown": "U+EB84", 
    "arrowheadWhiteDownLeft": "U+EB85", 
    "arrowheadWhiteDownRight": "U+EB83", 
    "arrowheadWhiteLeft": "U+EB86", 
    "arrowheadWhiteRight": "U+EB82", 
    "arrowheadWhiteUp": "U+EB80", 
    "arrowheadWhiteUpLeft": "U+EB87", 
    "arrowheadWhiteUpRight": "U+EB81", 
    "articAccentAbove": "U+E4A0", 
    "articAccentBelow": "U+E4A1", 
    "articAccentStaccatoAbove": "U+E4B0", 
    "articAccentStaccatoBelow": "U+E4B1", 
    "articLaissezVibrerAbove": "U+E4BA", 
    "articLaissezVibrerBelow": "U+E4BB", 
    "articMarcatoAbove": "U+E4AC", 
    "articMarcatoBelow": "U+E4AD", 
    "articMarcatoStaccatoAbove": "U+E4AE", 
    "articMarcatoStaccatoBelow": "U+E4AF", 
    "articStaccatissimoAbove": "U+E4A6", 
    "articStaccatissimoBelow": "U+E4A7", 
    "articStaccatissimoStrokeAbove": "U+E4AA", 
    "articStaccatissimoStrokeBelow": "U+E4AB", 
    "articStaccatissimoWedgeAbove": "U+E4A8", 
    "articStaccatissimoWedgeBelow": "U+E4A9", 
    "articStaccatoAbove": "U+E4A2", 
    "articStaccatoBelow": "U+E4A3", 
    "articStressAbove": "U+E4B6", 
    "articStressBelow": "U+E4B7", 
    "articTenutoAbove": "U+E4A4", 
    "articTenutoAccentAbove": "U+E4B4", 
    "articTenutoAccentBelow": "U+E4B5", 
    "articTenutoBelow": "U+E4A5", 
    "articTenutoStaccatoAbove": "U+E4B2", 
    "articTenutoStaccatoBelow": "U+E4B3", 
    "articUnstressAbove": "U+E4B8", 
    "articUnstressBelow": "U+E4B9", 
    "augmentationDot": "U+E1E7", 
    "barlineDashed": "U+E036", 
    "barlineDotted": "U+E037", 
    "barlineDouble": "U+E031", 
    "barlineFinal": "U+E032", 
    "barlineHeavy": "U+E034", 
    "barlineHeavyHeavy": "U+E035", 
    "barlineReverseFinal": "U+E033", 
    "barlineShort": "U+E038", 
    "barlineSingle": "U+E030", 
    "barlineTick": "U+E039", 
    "beamAccelRit1": "U+EAF4", 
    "beamAccelRit10": "U+EAFD", 
    "beamAccelRit11": "U+EAFE", 
    "beamAccelRit12": "U+EAFF", 
    "beamAccelRit13": "U+EB00", 
    "beamAccelRit14": "U+EB01", 
    "beamAccelRit15": "U+EB02", 
    "beamAccelRit2": "U+EAF5", 
    "beamAccelRit3": "U+EAF6", 
    "beamAccelRit4": "U+EAF7", 
    "beamAccelRit5": "U+EAF8", 
    "beamAccelRit6": "U+EAF9", 
    "beamAccelRit7": "U+EAFA", 
    "beamAccelRit8": "U+EAFB", 
    "beamAccelRit9": "U+EAFC", 
    "beamAccelRitFinal": "U+EB03", 
    "brace": "U+E000", 
    "bracket": "U+E002", 
    "bracketBottom": "U+E004", 
    "bracketTop": "U+E003", 
    "brassBend": "U+E5E3", 
    "brassDoitLong": "U+E5D6", 
    "brassDoitMedium": "U+E5D5", 
    "brassDoitShort": "U+E5D4", 
    "brassFallLipLong": "U+E5D9", 
    "brassFallLipMedium": "U+E5D8", 
    "brassFallLipShort": "U+E5D7", 
    "brassFallRoughLong": "U+E5DF", 
    "brassFallRoughMedium": "U+E5DE", 
    "brassFallRoughShort": "U+E5DD", 
    "brassFallSmoothLong": "U+E5DC", 
    "brassFallSmoothMedium": "U+E5DB", 
    "brassFallSmoothShort": "U+E5DA", 
    "brassFlip": "U+E5E1", 
    "brassHarmonMuteClosed": "U+E5E8", 
    "brassHarmonMuteStemHalfLeft": "U+E5E9", 
    "brassHarmonMuteStemHalfRight": "U+E5EA", 
    "brassHarmonMuteStemOpen": "U+E5EB", 
    "brassJazzTurn": "U+E5E4", 
    "brassLiftLong": "U+E5D3", 
    "brassLiftMedium": "U+E5D2", 
    "brassLiftShort": "U+E5D1", 
    "brassMuteClosed": "U+E5E5", 
    "brassMuteHalfClosed": "U+E5E6", 
    "brassMuteOpen": "U+E5E7", 
    "brassPlop": "U+E5E0", 
    "brassScoop": "U+E5D0", 
    "brassSmear": "U+E5E2", 
    "breathMarkComma": "U+E4CE", 
    "breathMarkSalzedo": "U+E4D5", 
    "breathMarkTick": "U+E4CF", 
    "breathMarkUpbow": "U+E4D0", 
    "bridgeClef": "U+E078", 
    "buzzRoll": "U+E22A", 
    "cClef": "U+E05C", 
    "cClef8vb": "U+E05D", 
    "cClefArrowDown": "U+E05F", 
    "cClefArrowUp": "U+E05E", 
    "cClefChange": "U+E07B", 
    "cClefCombining": "U+E061", 
    "cClefReversed": "U+E075", 
    "cClefSquare": "U+E060", 
    "cClefTriangular": "U+E06F", 
    "cClefTriangularToFClef": "U+E071", 
    "caesura": "U+E4D1", 
    "caesuraCurved": "U+E4D4", 
    "caesuraShort": "U+E4D3", 
    "caesuraThick": "U+E4D2", 
    "chantAccentusAbove": "U+E9D6", 
    "chantAccentusBelow": "U+E9D7", 
    "chantAuctumAsc": "U+E994", 
    "chantAuctumDesc": "U+E995", 
    "chantAugmentum": "U+E9D9", 
    "chantCaesura": "U+E8F8", 
    "chantCclef": "U+E906", 
    "chantCirculusAbove": "U+E9D2", 
    "chantCirculusBelow": "U+E9D3", 
    "chantConnectingLineAsc2nd": "U+E9BD", 
    "chantConnectingLineAsc3rd": "U+E9BE", 
    "chantConnectingLineAsc4th": "U+E9BF", 
    "chantConnectingLineAsc5th": "U+E9C0", 
    "chantConnectingLineAsc6th": "U+E9C1", 
    "chantCustosStemDownPosHigh": "U+EA08", 
    "chantCustosStemDownPosHighest": "U+EA09", 
    "chantCustosStemDownPosMiddle": "U+EA07", 
    "chantCustosStemUpPosLow": "U+EA05", 
    "chantCustosStemUpPosLowest": "U+EA04", 
    "chantCustosStemUpPosMiddle": "U+EA06", 
    "chantDeminutumLower": "U+E9B3", 
    "chantDeminutumUpper": "U+E9B2", 
    "chantDivisioFinalis": "U+E8F6", 
    "chantDivisioMaior": "U+E8F4", 
    "chantDivisioMaxima": "U+E8F5", 
    "chantDivisioMinima": "U+E8F3", 
    "chantEntryLineAsc2nd": "U+E9B4", 
    "chantEntryLineAsc3rd": "U+E9B5", 
    "chantEntryLineAsc4th": "U+E9B6", 
    "chantEntryLineAsc5th": "U+E9B7", 
    "chantEntryLineAsc6th": "U+E9B8", 
    "chantEpisema": "U+E9D8", 
    "chantFclef": "U+E902", 
    "chantIctusAbove": "U+E9D0", 
    "chantIctusBelow": "U+E9D1", 
    "chantLigaturaDesc2nd": "U+E9B9", 
    "chantLigaturaDesc3rd": "U+E9BA", 
    "chantLigaturaDesc4th": "U+E9BB", 
    "chantLigaturaDesc5th": "U+E9BC", 
    "chantOriscusAscending": "U+E99C", 
    "chantOriscusDescending": "U+E99D", 
    "chantOriscusLiquescens": "U+E99E", 
    "chantPodatusLower": "U+E9B0", 
    "chantPodatusUpper": "U+E9B1", 
    "chantPunctum": "U+E990", 
    "chantPunctumCavum": "U+E998", 
    "chantPunctumDeminutum": "U+E9A1", 
    "chantPunctumInclinatum": "U+E991", 
    "chantPunctumInclinatumAuctum": "U+E992", 
    "chantPunctumInclinatumDeminutum": "U+E993", 
    "chantPunctumLinea": "U+E999", 
    "chantPunctumLineaCavum": "U+E99A", 
    "chantPunctumVirga": "U+E996", 
    "chantPunctumVirgaReversed": "U+E997", 
    "chantQuilisma": "U+E99B", 
    "chantSemicirculusAbove": "U+E9D4", 
    "chantSemicirculusBelow": "U+E9D5", 
    "chantStaff": "U+E8F0", 
    "chantStaffNarrow": "U+E8F2", 
    "chantStaffWide": "U+E8F1", 
    "chantStrophicus": "U+E99F", 
    "chantStrophicusAuctus": "U+E9A0", 
    "chantStrophicusLiquescens2nd": "U+E9C2", 
    "chantStrophicusLiquescens3rd": "U+E9C3", 
    "chantStrophicusLiquescens4th": "U+E9C4", 
    "chantStrophicusLiquescens5th": "U+E9C5", 
    "chantVirgula": "U+E8F7", 
    "clef15": "U+E07E", 
    "clef8": "U+E07D", 
    "clefChangeCombining": "U+E07F", 
    "coda": "U+E048", 
    "codaSquare": "U+E049", 
    "conductorBeat2Compound": "U+E897", 
    "conductorBeat2Simple": "U+E894", 
    "conductorBeat3Compound": "U+E898", 
    "conductorBeat3Simple": "U+E895", 
    "conductorBeat4Compound": "U+E899", 
    "conductorBeat4Simple": "U+E896", 
    "conductorLeftBeat": "U+E891", 
    "conductorRightBeat": "U+E892", 
    "conductorStrongBeat": "U+E890", 
    "conductorWeakBeat": "U+E893", 
    "controlBeginBeam": "U+E8E0", 
    "controlBeginPhrase": "U+E8E6", 
    "controlBeginSlur": "U+E8E4", 
    "controlBeginTie": "U+E8E2", 
    "controlEndBeam": "U+E8E1", 
    "controlEndPhrase": "U+E8E7", 
    "controlEndSlur": "U+E8E5", 
    "controlEndTie": "U+E8E3", 
    "csymAugmented": "U+E872", 
    "csymBracketLeftTall": "U+E877", 
    "csymBracketRightTall": "U+E878", 
    "csymDiminished": "U+E870", 
    "csymHalfDiminished": "U+E871", 
    "csymMajorSeventh": "U+E873", 
    "csymMinor": "U+E874", 
    "csymParensLeftTall": "U+E875", 
    "csymParensRightTall": "U+E876", 
    "curlewSign": "U+E4D6", 
    "daCapo": "U+E046", 
    "dalSegno": "U+E045", 
    "daseianExcellentes1": "U+EA3C", 
    "daseianExcellentes2": "U+EA3D", 
    "daseianExcellentes3": "U+EA3E", 
    "daseianExcellentes4": "U+EA3F", 
    "daseianFinales1": "U+EA34", 
    "daseianFinales2": "U+EA35", 
    "daseianFinales3": "U+EA36", 
    "daseianFinales4": "U+EA37", 
    "daseianGraves1": "U+EA30", 
    "daseianGraves2": "U+EA31", 
    "daseianGraves3": "U+EA32", 
    "daseianGraves4": "U+EA33", 
    "daseianResidua1": "U+EA40", 
    "daseianResidua2": "U+EA41", 
    "daseianSuperiores1": "U+EA38", 
    "daseianSuperiores2": "U+EA39", 
    "daseianSuperiores3": "U+EA3A", 
    "daseianSuperiores4": "U+EA3B", 
    "doubleTongueAbove": "U+E5F0", 
    "doubleTongueBelow": "U+E5F1", 
    "dynamicCrescendoHairpin": "U+E53E", 
    "dynamicDiminuendoHairpin": "U+E53F", 
    "dynamicFF": "U+E52F", 
    "dynamicFFF": "U+E530", 
    "dynamicFFFF": "U+E531", 
    "dynamicFFFFF": "U+E532", 
    "dynamicFFFFFF": "U+E533", 
    "dynamicForte": "U+E522", 
    "dynamicFortePiano": "U+E534", 
    "dynamicForzando": "U+E535", 
    "dynamicMF": "U+E52D", 
    "dynamicMP": "U+E52C", 
    "dynamicMessaDiVoce": "U+E540", 
    "dynamicMezzo": "U+E521", 
    "dynamicNiente": "U+E526", 
    "dynamicNienteForHairpin": "U+E541", 
    "dynamicPF": "U+E52E", 
    "dynamicPP": "U+E52B", 
    "dynamicPPP": "U+E52A", 
    "dynamicPPPP": "U+E529", 
    "dynamicPPPPP": "U+E528", 
    "dynamicPPPPPP": "U+E527", 
    "dynamicPiano": "U+E520", 
    "dynamicRinforzando": "U+E523", 
    "dynamicRinforzando1": "U+E53C", 
    "dynamicRinforzando2": "U+E53D", 
    "dynamicSforzando": "U+E524", 
    "dynamicSforzando1": "U+E536", 
    "dynamicSforzandoPianissimo": "U+E538", 
    "dynamicSforzandoPiano": "U+E537", 
    "dynamicSforzato": "U+E539", 
    "dynamicSforzatoFF": "U+E53B", 
    "dynamicSforzatoPiano": "U+E53A", 
    "dynamicZ": "U+E525", 
    "elecAudioChannelsEight": "U+EB46", 
    "elecAudioChannelsFive": "U+EB43", 
    "elecAudioChannelsFour": "U+EB42", 
    "elecAudioChannelsOne": "U+EB3E", 
    "elecAudioChannelsSeven": "U+EB45", 
    "elecAudioChannelsSix": "U+EB44", 
    "elecAudioChannelsThreeFrontal": "U+EB40", 
    "elecAudioChannelsThreeSurround": "U+EB41", 
    "elecAudioChannelsTwo": "U+EB3F", 
    "elecAudioIn": "U+EB49", 
    "elecAudioMono": "U+EB3C", 
    "elecAudioOut": "U+EB4A", 
    "elecAudioStereo": "U+EB3D", 
    "elecCamera": "U+EB1B", 
    "elecDataIn": "U+EB4D", 
    "elecDataOut": "U+EB4E", 
    "elecDisc": "U+EB13", 
    "elecDownload": "U+EB4F", 
    "elecEject": "U+EB2B", 
    "elecFastForward": "U+EB1F", 
    "elecHeadphones": "U+EB11", 
    "elecHeadset": "U+EB12", 
    "elecLineIn": "U+EB47", 
    "elecLineOut": "U+EB48", 
    "elecLoop": "U+EB23", 
    "elecLoudspeaker": "U+EB1A", 
    "elecMIDIController0": "U+EB36", 
    "elecMIDIController100": "U+EB3B", 
    "elecMIDIController20": "U+EB37", 
    "elecMIDIController40": "U+EB38", 
    "elecMIDIController60": "U+EB39", 
    "elecMIDIController80": "U+EB3A", 
    "elecMIDIIn": "U+EB34", 
    "elecMIDIOut": "U+EB35", 
    "elecMicrophone": "U+EB10", 
    "elecMicrophoneMute": "U+EB28", 
    "elecMicrophoneUnmute": "U+EB29", 
    "elecMixingConsole": "U+EB15", 
    "elecMonitor": "U+EB18", 
    "elecMute": "U+EB26", 
    "elecPause": "U+EB1E", 
    "elecPlay": "U+EB1C", 
    "elecPowerOnOff": "U+EB2A", 
    "elecProjector": "U+EB19", 
    "elecReplay": "U+EB24", 
    "elecRewind": "U+EB20", 
    "elecShuffle": "U+EB25", 
    "elecSkipBackwards": "U+EB22", 
    "elecSkipForwards": "U+EB21", 
    "elecStop": "U+EB1D", 
    "elecTape": "U+EB14", 
    "elecUSB": "U+EB16", 
    "elecUnmute": "U+EB27", 
    "elecUpload": "U+EB50", 
    "elecVideoCamera": "U+EB17", 
    "elecVideoIn": "U+EB4B", 
    "elecVideoOut": "U+EB4C", 
    "elecVolumeFader": "U+EB2C", 
    "elecVolumeFaderThumb": "U+EB2D", 
    "elecVolumeLevel0": "U+EB2E", 
    "elecVolumeLevel100": "U+EB33", 
    "elecVolumeLevel20": "U+EB2F", 
    "elecVolumeLevel40": "U+EB30", 
    "elecVolumeLevel60": "U+EB31", 
    "elecVolumeLevel80": "U+EB32", 
    "fClef": "U+E062", 
    "fClef15ma": "U+E066", 
    "fClef15mb": "U+E063", 
    "fClef8va": "U+E065", 
    "fClef8vb": "U+E064", 
    "fClefArrowDown": "U+E068", 
    "fClefArrowUp": "U+E067", 
    "fClefChange": "U+E07C", 
    "fClefReversed": "U+E076", 
    "fClefTriangular": "U+E070", 
    "fClefTriangularToCClef": "U+E072", 
    "fClefTurned": "U+E077", 
    "fermataAbove": "U+E4C0", 
    "fermataBelow": "U+E4C1", 
    "fermataLongAbove": "U+E4C6", 
    "fermataLongBelow": "U+E4C7", 
    "fermataLongHenzeAbove": "U+E4CA", 
    "fermataLongHenzeBelow": "U+E4CB", 
    "fermataShortAbove": "U+E4C4", 
    "fermataShortBelow": "U+E4C5", 
    "fermataShortHenzeAbove": "U+E4CC", 
    "fermataShortHenzeBelow": "U+E4CD", 
    "fermataVeryLongAbove": "U+E4C8", 
    "fermataVeryLongBelow": "U+E4C9", 
    "fermataVeryShortAbove": "U+E4C2", 
    "fermataVeryShortBelow": "U+E4C3", 
    "figbass0": "U+EA50", 
    "figbass1": "U+EA51", 
    "figbass2": "U+EA52", 
    "figbass2Raised": "U+EA53", 
    "figbass3": "U+EA54", 
    "figbass4": "U+EA55", 
    "figbass4Raised": "U+EA56", 
    "figbass5": "U+EA57", 
    "figbass5Raised1": "U+EA58", 
    "figbass5Raised2": "U+EA59", 
    "figbass5Raised3": "U+EA5A", 
    "figbass6": "U+EA5B", 
    "figbass6Raised": "U+EA5C", 
    "figbass7": "U+EA5D", 
    "figbass7Raised1": "U+EA5E", 
    "figbass7Raised2": "U+EA5F", 
    "figbass8": "U+EA60", 
    "figbass9": "U+EA61", 
    "figbass9Raised": "U+EA62", 
    "figbassBracketLeft": "U+EA68", 
    "figbassBracketRight": "U+EA69", 
    "figbassCombiningLowering": "U+EA6E", 
    "figbassCombiningRaising": "U+EA6D", 
    "figbassDoubleFlat": "U+EA63", 
    "figbassDoubleSharp": "U+EA67", 
    "figbassFlat": "U+EA64", 
    "figbassNatural": "U+EA65", 
    "figbassParensLeft": "U+EA6A", 
    "figbassParensRight": "U+EA6B", 
    "figbassPlus": "U+EA6C", 
    "figbassSharp": "U+EA66", 
    "flag1024thDown": "U+E24F", 
    "flag1024thUp": "U+E24E", 
    "flag128thDown": "U+E249", 
    "flag128thUp": "U+E248", 
    "flag16thDown": "U+E243", 
    "flag16thUp": "U+E242", 
    "flag256thDown": "U+E24B", 
    "flag256thUp": "U+E24A", 
    "flag32ndDown": "U+E245", 
    "flag32ndUp": "U+E244", 
    "flag512thDown": "U+E24D", 
    "flag512thUp": "U+E24C", 
    "flag64thDown": "U+E247", 
    "flag64thUp": "U+E246", 
    "flag8thDown": "U+E241", 
    "flag8thUp": "U+E240", 
    "flagInternalDown": "U+E251", 
    "flagInternalUp": "U+E250", 
    "fretboard3String": "U+E850", 
    "fretboard3StringNut": "U+E851", 
    "fretboard4String": "U+E852", 
    "fretboard4StringNut": "U+E853", 
    "fretboard5String": "U+E854", 
    "fretboard5StringNut": "U+E855", 
    "fretboard6String": "U+E856", 
    "fretboard6StringNut": "U+E857", 
    "fretboardFilledCircle": "U+E858", 
    "fretboardO": "U+E85A", 
    "fretboardX": "U+E859", 
    "functionAngleLeft": "U+EA93", 
    "functionAngleRight": "U+EA94", 
    "functionBracketLeft": "U+EA8F", 
    "functionBracketRight": "U+EA90", 
    "functionDD": "U+EA81", 
    "functionDLower": "U+EA80", 
    "functionDUpper": "U+EA7F", 
    "functionEight": "U+EA78", 
    "functionFive": "U+EA75", 
    "functionFour": "U+EA74", 
    "functionGLower": "U+EA84", 
    "functionGUpper": "U+EA83", 
    "functionGreaterThan": "U+EA7C", 
    "functionLessThan": "U+EA7A", 
    "functionMinus": "U+EA7B", 
    "functionNLower": "U+EA86", 
    "functionNUpper": "U+EA85", 
    "functionNine": "U+EA79", 
    "functionOne": "U+EA71", 
    "functionPLower": "U+EA88", 
    "functionPUpper": "U+EA87", 
    "functionParensLeft": "U+EA91", 
    "functionParensRight": "U+EA92", 
    "functionPlus": "U+EA98", 
    "functionRepetition1": "U+EA95", 
    "functionRepetition2": "U+EA96", 
    "functionRing": "U+EA97", 
    "functionSLower": "U+EA8A", 
    "functionSSLower": "U+EA7E", 
    "functionSSUpper": "U+EA7D", 
    "functionSUpper": "U+EA89", 
    "functionSeven": "U+EA77", 
    "functionSix": "U+EA76", 
    "functionSlashedDD": "U+EA82", 
    "functionTLower": "U+EA8C", 
    "functionTUpper": "U+EA8B", 
    "functionThree": "U+EA73", 
    "functionTwo": "U+EA72", 
    "functionVLower": "U+EA8E", 
    "functionVUpper": "U+EA8D", 
    "functionZero": "U+EA70", 
    "gClef": "U+E050", 
    "gClef15ma": "U+E054", 
    "gClef15mb": "U+E051", 
    "gClef8va": "U+E053", 
    "gClef8vb": "U+E052", 
    "gClef8vbCClef": "U+E056", 
    "gClef8vbOld": "U+E055", 
    "gClef8vbParens": "U+E057", 
    "gClefArrowDown": "U+E05B", 
    "gClefArrowUp": "U+E05A", 
    "gClefChange": "U+E07A", 
    "gClefLigatedNumberAbove": "U+E059", 
    "gClefLigatedNumberBelow": "U+E058", 
    "gClefReversed": "U+E073", 
    "gClefTurned": "U+E074", 
    "glissandoDown": "U+E586", 
    "glissandoUp": "U+E585", 
    "graceNoteAcciaccaturaStemDown": "U+E561", 
    "graceNoteAcciaccaturaStemUp": "U+E560", 
    "graceNoteAppoggiaturaStemDown": "U+E563", 
    "graceNoteAppoggiaturaStemUp": "U+E562", 
    "graceNoteSlashStemDown": "U+E565", 
    "graceNoteSlashStemUp": "U+E564", 
    "guitarClosePedal": "U+E83F", 
    "guitarFadeIn": "U+E843", 
    "guitarFadeOut": "U+E844", 
    "guitarGolpe": "U+E842", 
    "guitarHalfOpenPedal": "U+E83E", 
    "guitarLeftHandTapping": "U+E840", 
    "guitarOpenPedal": "U+E83D", 
    "guitarRightHandTapping": "U+E841", 
    "guitarShake": "U+E832", 
    "guitarString0": "U+E833", 
    "guitarString1": "U+E834", 
    "guitarString2": "U+E835", 
    "guitarString3": "U+E836", 
    "guitarString4": "U+E837", 
    "guitarString5": "U+E838", 
    "guitarString6": "U+E839", 
    "guitarString7": "U+E83A", 
    "guitarString8": "U+E83B", 
    "guitarString9": "U+E83C", 
    "guitarStrumDown": "U+E847", 
    "guitarStrumUp": "U+E846", 
    "guitarVibratoBarDip": "U+E831", 
    "guitarVibratoBarScoop": "U+E830", 
    "guitarVibratoStroke": "U+EAB2", 
    "guitarVolumeSwell": "U+E845", 
    "guitarWideVibratoStroke": "U+EAB3", 
    "handbellsBelltree": "U+E81F", 
    "handbellsDamp3": "U+E81E", 
    "handbellsEcho1": "U+E81B", 
    "handbellsEcho2": "U+E81C", 
    "handbellsGyro": "U+E81D", 
    "handbellsHandMartellato": "U+E812", 
    "handbellsMalletBellOnTable": "U+E815", 
    "handbellsMalletBellSuspended": "U+E814", 
    "handbellsMalletLft": "U+E816", 
    "handbellsMartellato": "U+E810", 
    "handbellsMartellatoLift": "U+E811", 
    "handbellsMutedMartellato": "U+E813", 
    "handbellsPluckLift": "U+E817", 
    "handbellsSwing": "U+E81A", 
    "handbellsSwingDown": "U+E819", 
    "handbellsSwingUp": "U+E818", 
    "handbellsTablePairBells": "U+E821", 
    "handbellsTableSingleBell": "U+E820", 
    "harpMetalRod": "U+E68F", 
    "harpPedalCentered": "U+E681", 
    "harpPedalDivider": "U+E683", 
    "harpPedalLowered": "U+E682", 
    "harpPedalRaised": "U+E680", 
    "harpSalzedoFluidicSoundsLeft": "U+E68D", 
    "harpSalzedoFluidicSoundsRight": "U+E68E", 
    "harpSalzedoMetallicSounds": "U+E688", 
    "harpSalzedoMuffleTotally": "U+E68C", 
    "harpSalzedoOboicFlux": "U+E685", 
    "harpSalzedoPlayUpperEnd": "U+E68A", 
    "harpSalzedoSlideWithSuppleness": "U+E684", 
    "harpSalzedoTamTamSounds": "U+E689", 
    "harpSalzedoThunderEffect": "U+E686", 
    "harpSalzedoTimpanicSounds": "U+E68B", 
    "harpSalzedoWhistlingSounds": "U+E687", 
    "harpStringNoiseStem": "U+E694", 
    "harpTuningKey": "U+E690", 
    "harpTuningKeyGlissando": "U+E693", 
    "harpTuningKeyHandle": "U+E691", 
    "harpTuningKeyShank": "U+E692", 
    "keyboardBebung2DotsAbove": "U+E668", 
    "keyboardBebung2DotsBelow": "U+E669", 
    "keyboardBebung3DotsAbove": "U+E66A", 
    "keyboardBebung3DotsBelow": "U+E66B", 
    "keyboardBebung4DotsAbove": "U+E66C", 
    "keyboardBebung4DotsBelow": "U+E66D", 
    "keyboardLeftPedalPictogram": "U+E65E", 
    "keyboardMiddlePedalPictogram": "U+E65F", 
    "keyboardPedalD": "U+E653", 
    "keyboardPedalDot": "U+E654", 
    "keyboardPedalE": "U+E652", 
    "keyboardPedalHalf": "U+E656", 
    "keyboardPedalHalf2": "U+E65B", 
    "keyboardPedalHalf3": "U+E65C", 
    "keyboardPedalHeel1": "U+E661", 
    "keyboardPedalHeel2": "U+E662", 
    "keyboardPedalHeel3": "U+E663", 
    "keyboardPedalHeelToe": "U+E666", 
    "keyboardPedalHyphen": "U+E658", 
    "keyboardPedalP": "U+E651", 
    "keyboardPedalPed": "U+E650", 
    "keyboardPedalS": "U+E65A", 
    "keyboardPedalSost": "U+E659", 
    "keyboardPedalToe1": "U+E664", 
    "keyboardPedalToe2": "U+E665", 
    "keyboardPedalUp": "U+E655", 
    "keyboardPedalUpNotch": "U+E657", 
    "keyboardPedalUpSpecial": "U+E65D", 
    "keyboardPlayWithLH": "U+E670", 
    "keyboardPlayWithLHEnd": "U+E671", 
    "keyboardPlayWithRH": "U+E66E", 
    "keyboardPlayWithRHEnd": "U+E66F", 
    "keyboardPluckInside": "U+E667", 
    "keyboardRightPedalPictogram": "U+E660", 
    "kievanAccidentalFlat": "U+EC3E", 
    "kievanAccidentalSharp": "U+EC3D", 
    "kievanAugmentationDot": "U+EC3C", 
    "kievanCClef": "U+EC30", 
    "kievanEndingSymbol": "U+EC31", 
    "kievanNote8thStemDown": "U+EC3A", 
    "kievanNote8thStemUp": "U+EC39", 
    "kievanNoteBeam": "U+EC3B", 
    "kievanNoteHalfStaffLine": "U+EC35", 
    "kievanNoteHalfStaffSpace": "U+EC36", 
    "kievanNoteQuarterStemDown": "U+EC38", 
    "kievanNoteQuarterStemUp": "U+EC37", 
    "kievanNoteReciting": "U+EC32", 
    "kievanNoteWhole": "U+EC33", 
    "kievanNoteWholeFinal": "U+EC34", 
    "kodalyHandDo": "U+EC40", 
    "kodalyHandFa": "U+EC43", 
    "kodalyHandLa": "U+EC45", 
    "kodalyHandMi": "U+EC42", 
    "kodalyHandRe": "U+EC41", 
    "kodalyHandSo": "U+EC44", 
    "kodalyHandTi": "U+EC46", 
    "leftRepeatSmall": "U+E04C", 
    "legerLine": "U+E022", 
    "legerLineNarrow": "U+E024", 
    "legerLineWide": "U+E023", 
    "luteBarlineEndRepeat": "U+EBA4", 
    "luteBarlineFinal": "U+EBA5", 
    "luteBarlineStartRepeat": "U+EBA3", 
    "luteDuration16th": "U+EBAB", 
    "luteDuration32nd": "U+EBAC", 
    "luteDuration8th": "U+EBAA", 
    "luteDurationDoubleWhole": "U+EBA6", 
    "luteDurationHalf": "U+EBA8", 
    "luteDurationQuarter": "U+EBA9", 
    "luteDurationWhole": "U+EBA7", 
    "luteFingeringRHFirst": "U+EBAE", 
    "luteFingeringRHSecond": "U+EBAF", 
    "luteFingeringRHThird": "U+EBB0", 
    "luteFingeringRHThumb": "U+EBAD", 
    "luteFrench10thCourse": "U+EBD0", 
    "luteFrench7thCourse": "U+EBCD", 
    "luteFrench8thCourse": "U+EBCE", 
    "luteFrench9thCourse": "U+EBCF", 
    "luteFrenchAppoggiaturaAbove": "U+EBD5", 
    "luteFrenchAppoggiaturaBelow": "U+EBD4", 
    "luteFrenchFretA": "U+EBC0", 
    "luteFrenchFretB": "U+EBC1", 
    "luteFrenchFretC": "U+EBC2", 
    "luteFrenchFretD": "U+EBC3", 
    "luteFrenchFretE": "U+EBC4", 
    "luteFrenchFretF": "U+EBC5", 
    "luteFrenchFretG": "U+EBC6", 
    "luteFrenchFretH": "U+EBC7", 
    "luteFrenchFretI": "U+EBC8", 
    "luteFrenchFretK": "U+EBC9", 
    "luteFrenchFretL": "U+EBCA", 
    "luteFrenchFretM": "U+EBCB", 
    "luteFrenchFretN": "U+EBCC", 
    "luteFrenchMordentInverted": "U+EBD3", 
    "luteFrenchMordentLower": "U+EBD2", 
    "luteFrenchMordentUpper": "U+EBD1", 
    "luteGermanALower": "U+EC00", 
    "luteGermanAUpper": "U+EC17", 
    "luteGermanBLower": "U+EC01", 
    "luteGermanBUpper": "U+EC18", 
    "luteGermanCLower": "U+EC02", 
    "luteGermanCUpper": "U+EC19", 
    "luteGermanDLower": "U+EC03", 
    "luteGermanDUpper": "U+EC1A", 
    "luteGermanELower": "U+EC04", 
    "luteGermanEUpper": "U+EC1B", 
    "luteGermanFLower": "U+EC05", 
    "luteGermanFUpper": "U+EC1C", 
    "luteGermanGLower": "U+EC06", 
    "luteGermanGUpper": "U+EC1D", 
    "luteGermanHLower": "U+EC07", 
    "luteGermanHUpper": "U+EC1E", 
    "luteGermanILower": "U+EC08", 
    "luteGermanIUpper": "U+EC1F", 
    "luteGermanKLower": "U+EC09", 
    "luteGermanKUpper": "U+EC20", 
    "luteGermanLLower": "U+EC0A", 
    "luteGermanLUpper": "U+EC21", 
    "luteGermanMLower": "U+EC0B", 
    "luteGermanMUpper": "U+EC22", 
    "luteGermanNLower": "U+EC0C", 
    "luteGermanNUpper": "U+EC23", 
    "luteGermanOLower": "U+EC0D", 
    "luteGermanPLower": "U+EC0E", 
    "luteGermanQLower": "U+EC0F", 
    "luteGermanRLower": "U+EC10", 
    "luteGermanSLower": "U+EC11", 
    "luteGermanTLower": "U+EC12", 
    "luteGermanVLower": "U+EC13", 
    "luteGermanXLower": "U+EC14", 
    "luteGermanYLower": "U+EC15", 
    "luteGermanZLower": "U+EC16", 
    "luteItalianClefCSolFaUt": "U+EBF1", 
    "luteItalianClefFFaUt": "U+EBF0", 
    "luteItalianFret0": "U+EBE0", 
    "luteItalianFret1": "U+EBE1", 
    "luteItalianFret2": "U+EBE2", 
    "luteItalianFret3": "U+EBE3", 
    "luteItalianFret4": "U+EBE4", 
    "luteItalianFret5": "U+EBE5", 
    "luteItalianFret6": "U+EBE6", 
    "luteItalianFret7": "U+EBE7", 
    "luteItalianFret8": "U+EBE8", 
    "luteItalianFret9": "U+EBE9", 
    "luteItalianHoldFinger": "U+EBF4", 
    "luteItalianHoldNote": "U+EBF3", 
    "luteItalianReleaseFinger": "U+EBF5", 
    "luteItalianTempoFast": "U+EBEA", 
    "luteItalianTempoNeitherFastNorSlow": "U+EBEC", 
    "luteItalianTempoSlow": "U+EBED", 
    "luteItalianTempoSomewhatFast": "U+EBEB", 
    "luteItalianTempoVerySlow": "U+EBEE", 
    "luteItalianTimeTriple": "U+EBEF", 
    "luteItalianTremolo": "U+EBF2", 
    "luteItalianVibrato": "U+EBF6", 
    "luteStaff6Lines": "U+EBA0", 
    "luteStaff6LinesNarrow": "U+EBA2", 
    "luteStaff6LinesWide": "U+EBA1", 
    "lyricsElision": "U+E551", 
    "lyricsElisionNarrow": "U+E550", 
    "lyricsElisionWide": "U+E552", 
    "lyricsHyphenBaseline": "U+E553", 
    "lyricsHyphenBaselineNonBreaking": "U+E554", 
    "medRenFlatHardB": "U+E9E1", 
    "medRenFlatSoftB": "U+E9E0", 
    "medRenFlatWithDot": "U+E9E4", 
    "medRenGClefCMN": "U+EA24", 
    "medRenLiquescenceCMN": "U+EA22", 
    "medRenLiquescentAscCMN": "U+EA26", 
    "medRenLiquescentDescCMN": "U+EA27", 
    "medRenNatural": "U+E9E2", 
    "medRenNaturalWithCross": "U+E9E5", 
    "medRenOriscusCMN": "U+EA2A", 
    "medRenPlicaCMN": "U+EA23", 
    "medRenPunctumCMN": "U+EA25", 
    "medRenQuilismaCMN": "U+EA28", 
    "medRenSharpCroix": "U+E9E3", 
    "medRenStrophicusCMN": "U+EA29", 
    "mensuralAlterationSign": "U+EA10", 
    "mensuralBlackBrevis": "U+E952", 
    "mensuralBlackBrevisVoid": "U+E956", 
    "mensuralBlackDragma": "U+E95A", 
    "mensuralBlackLonga": "U+E951", 
    "mensuralBlackMaxima": "U+E950", 
    "mensuralBlackMinima": "U+E954", 
    "mensuralBlackMinimaVoid": "U+E958", 
    "mensuralBlackSemibrevis": "U+E953", 
    "mensuralBlackSemibrevisCaudata": "U+E959", 
    "mensuralBlackSemibrevisOblique": "U+E95B", 
    "mensuralBlackSemibrevisVoid": "U+E957", 
    "mensuralBlackSemiminima": "U+E955", 
    "mensuralCclef": "U+E905", 
    "mensuralCclefPetrucciPosHigh": "U+E90A", 
    "mensuralCclefPetrucciPosHighest": "U+E90B", 
    "mensuralCclefPetrucciPosLow": "U+E908", 
    "mensuralCclefPetrucciPosLowest": "U+E907", 
    "mensuralCclefPetrucciPosMiddle": "U+E909", 
    "mensuralColorationEndRound": "U+EA0F", 
    "mensuralColorationEndSquare": "U+EA0D", 
    "mensuralColorationStartRound": "U+EA0E", 
    "mensuralColorationStartSquare": "U+EA0C", 
    "mensuralCombStemDiagonal": "U+E940", 
    "mensuralCombStemDown": "U+E93F", 
    "mensuralCombStemDownFlagExtended": "U+E948", 
    "mensuralCombStemDownFlagFlared": "U+E946", 
    "mensuralCombStemDownFlagFusa": "U+E94C", 
    "mensuralCombStemDownFlagLeft": "U+E944", 
    "mensuralCombStemDownFlagRight": "U+E942", 
    "mensuralCombStemDownFlagSemiminima": "U+E94A", 
    "mensuralCombStemUp": "U+E93E", 
    "mensuralCombStemUpFlagExtended": "U+E947", 
    "mensuralCombStemUpFlagFlared": "U+E945", 
    "mensuralCombStemUpFlagFusa": "U+E94B", 
    "mensuralCombStemUpFlagLeft": "U+E943", 
    "mensuralCombStemUpFlagRight": "U+E941", 
    "mensuralCombStemUpFlagSemiminima": "U+E949", 
    "mensuralCustosCheckmark": "U+EA0A", 
    "mensuralCustosDown": "U+EA03", 
    "mensuralCustosTurn": "U+EA0B", 
    "mensuralCustosUp": "U+EA02", 
    "mensuralFclef": "U+E903", 
    "mensuralFclefPetrucci": "U+E904", 
    "mensuralGclef": "U+E900", 
    "mensuralGclefPetrucci": "U+E901", 
    "mensuralModusImperfectumVert": "U+E92D", 
    "mensuralModusPerfectumVert": "U+E92C", 
    "mensuralNoteheadLongaBlack": "U+E934", 
    "mensuralNoteheadLongaBlackVoid": "U+E936", 
    "mensuralNoteheadLongaVoid": "U+E935", 
    "mensuralNoteheadLongaWhite": "U+E937", 
    "mensuralNoteheadMaximaBlack": "U+E930", 
    "mensuralNoteheadMaximaBlackVoid": "U+E932", 
    "mensuralNoteheadMaximaVoid": "U+E931", 
    "mensuralNoteheadMaximaWhite": "U+E933", 
    "mensuralNoteheadMinimaWhite": "U+E93C", 
    "mensuralNoteheadSemibrevisBlack": "U+E938", 
    "mensuralNoteheadSemibrevisBlackVoid": "U+E93A", 
    "mensuralNoteheadSemibrevisBlackVoidTurned": "U+E93B", 
    "mensuralNoteheadSemibrevisVoid": "U+E939", 
    "mensuralNoteheadSemiminimaWhite": "U+E93D", 
    "mensuralObliqueAsc2ndBlack": "U+E970", 
    "mensuralObliqueAsc2ndBlackVoid": "U+E972", 
    "mensuralObliqueAsc2ndVoid": "U+E971", 
    "mensuralObliqueAsc2ndWhite": "U+E973", 
    "mensuralObliqueAsc3rdBlack": "U+E974", 
    "mensuralObliqueAsc3rdBlackVoid": "U+E976", 
    "mensuralObliqueAsc3rdVoid": "U+E975", 
    "mensuralObliqueAsc3rdWhite": "U+E977", 
    "mensuralObliqueAsc4thBlack": "U+E978", 
    "mensuralObliqueAsc4thBlackVoid": "U+E97A", 
    "mensuralObliqueAsc4thVoid": "U+E979", 
    "mensuralObliqueAsc4thWhite": "U+E97B", 
    "mensuralObliqueAsc5thBlack": "U+E97C", 
    "mensuralObliqueAsc5thBlackVoid": "U+E97E", 
    "mensuralObliqueAsc5thVoid": "U+E97D", 
    "mensuralObliqueAsc5thWhite": "U+E97F", 
    "mensuralObliqueDesc2ndBlack": "U+E980", 
    "mensuralObliqueDesc2ndBlackVoid": "U+E982", 
    "mensuralObliqueDesc2ndVoid": "U+E981", 
    "mensuralObliqueDesc2ndWhite": "U+E983", 
    "mensuralObliqueDesc3rdBlack": "U+E984", 
    "mensuralObliqueDesc3rdBlackVoid": "U+E986", 
    "mensuralObliqueDesc3rdVoid": "U+E985", 
    "mensuralObliqueDesc3rdWhite": "U+E987", 
    "mensuralObliqueDesc4thBlack": "U+E988", 
    "mensuralObliqueDesc4thBlackVoid": "U+E98A", 
    "mensuralObliqueDesc4thVoid": "U+E989", 
    "mensuralObliqueDesc4thWhite": "U+E98B", 
    "mensuralObliqueDesc5thBlack": "U+E98C", 
    "mensuralObliqueDesc5thBlackVoid": "U+E98E", 
    "mensuralObliqueDesc5thVoid": "U+E98D", 
    "mensuralObliqueDesc5thWhite": "U+E98F", 
    "mensuralProlation1": "U+E910", 
    "mensuralProlation10": "U+E919", 
    "mensuralProlation11": "U+E91A", 
    "mensuralProlation2": "U+E911", 
    "mensuralProlation3": "U+E912", 
    "mensuralProlation4": "U+E913", 
    "mensuralProlation5": "U+E914", 
    "mensuralProlation6": "U+E915", 
    "mensuralProlation7": "U+E916", 
    "mensuralProlation8": "U+E917", 
    "mensuralProlation9": "U+E918", 
    "mensuralProlationCombiningDot": "U+E920", 
    "mensuralProlationCombiningDotVoid": "U+E924", 
    "mensuralProlationCombiningStroke": "U+E925", 
    "mensuralProlationCombiningThreeDots": "U+E922", 
    "mensuralProlationCombiningThreeDotsTri": "U+E923", 
    "mensuralProlationCombiningTwoDots": "U+E921", 
    "mensuralProportion1": "U+E926", 
    "mensuralProportion2": "U+E927", 
    "mensuralProportion3": "U+E928", 
    "mensuralProportion4": "U+E929", 
    "mensuralProportionMajor": "U+E92B", 
    "mensuralProportionMinor": "U+E92A", 
    "mensuralProportionProportioDupla1": "U+E91C", 
    "mensuralProportionProportioDupla2": "U+E91D", 
    "mensuralProportionProportioQuadrupla": "U+E91F", 
    "mensuralProportionProportioTripla": "U+E91E", 
    "mensuralProportionTempusPerfectum": "U+E91B", 
    "mensuralRestBrevis": "U+E9F3", 
    "mensuralRestFusa": "U+E9F7", 
    "mensuralRestLongaImperfecta": "U+E9F2", 
    "mensuralRestLongaPerfecta": "U+E9F1", 
    "mensuralRestMaxima": "U+E9F0", 
    "mensuralRestMinima": "U+E9F5", 
    "mensuralRestSemibrevis": "U+E9F4", 
    "mensuralRestSemifusa": "U+E9F8", 
    "mensuralRestSemiminima": "U+E9F6", 
    "mensuralSignumDown": "U+EA01", 
    "mensuralSignumUp": "U+EA00", 
    "mensuralTempusImperfectumHoriz": "U+E92F", 
    "mensuralTempusPerfectumHoriz": "U+E92E", 
    "mensuralWhiteBrevis": "U+E95E", 
    "mensuralWhiteFusa": "U+E961", 
    "mensuralWhiteLonga": "U+E95D", 
    "mensuralWhiteMaxima": "U+E95C", 
    "mensuralWhiteMinima": "U+E95F", 
    "mensuralWhiteSemiminima": "U+E960", 
    "metricModulationArrowLeft": "U+EC63", 
    "metricModulationArrowRight": "U+EC64", 
    "miscDoNotCopy": "U+EC61", 
    "miscDoNotPhotocopy": "U+EC60", 
    "miscEyeglasses": "U+EC62", 
    "note1024thDown": "U+E1E6", 
    "note1024thUp": "U+E1E5", 
    "note128thDown": "U+E1E0", 
    "note128thUp": "U+E1DF", 
    "note16thDown": "U+E1DA", 
    "note16thUp": "U+E1D9", 
    "note256thDown": "U+E1E2", 
    "note256thUp": "U+E1E1", 
    "note32ndDown": "U+E1DC", 
    "note32ndUp": "U+E1DB", 
    "note512thDown": "U+E1E4", 
    "note512thUp": "U+E1E3", 
    "note64thDown": "U+E1DE", 
    "note64thUp": "U+E1DD", 
    "note8thDown": "U+E1D8", 
    "note8thUp": "U+E1D7", 
    "noteABlack": "U+E197", 
    "noteAFlatBlack": "U+E196", 
    "noteAFlatHalf": "U+E17F", 
    "noteAFlatWhole": "U+E168", 
    "noteAHalf": "U+E180", 
    "noteASharpBlack": "U+E198", 
    "noteASharpHalf": "U+E181", 
    "noteASharpWhole": "U+E16A", 
    "noteAWhole": "U+E169", 
    "noteBBlack": "U+E19A", 
    "noteBFlatBlack": "U+E199", 
    "noteBFlatHalf": "U+E182", 
    "noteBFlatWhole": "U+E16B", 
    "noteBHalf": "U+E183", 
    "noteBSharpBlack": "U+E19B", 
    "noteBSharpHalf": "U+E184", 
    "noteBSharpWhole": "U+E16D", 
    "noteBWhole": "U+E16C", 
    "noteCBlack": "U+E19D", 
    "noteCFlatBlack": "U+E19C", 
    "noteCFlatHalf": "U+E185", 
    "noteCFlatWhole": "U+E16E", 
    "noteCHalf": "U+E186", 
    "noteCSharpBlack": "U+E19E", 
    "noteCSharpHalf": "U+E187", 
    "noteCSharpWhole": "U+E170", 
    "noteCWhole": "U+E16F", 
    "noteDBlack": "U+E1A0", 
    "noteDFlatBlack": "U+E19F", 
    "noteDFlatHalf": "U+E188", 
    "noteDFlatWhole": "U+E171", 
    "noteDHalf": "U+E189", 
    "noteDSharpBlack": "U+E1A1", 
    "noteDSharpHalf": "U+E18A", 
    "noteDSharpWhole": "U+E173", 
    "noteDWhole": "U+E172", 
    "noteDoBlack": "U+E160", 
    "noteDoHalf": "U+E158", 
    "noteDoWhole": "U+E150", 
    "noteDoubleWhole": "U+E1D0", 
    "noteDoubleWholeSquare": "U+E1D1", 
    "noteEBlack": "U+E1A3", 
    "noteEFlatBlack": "U+E1A2", 
    "noteEFlatHalf": "U+E18B", 
    "noteEFlatWhole": "U+E174", 
    "noteEHalf": "U+E18C", 
    "noteESharpBlack": "U+E1A4", 
    "noteESharpHalf": "U+E18D", 
    "noteESharpWhole": "U+E176", 
    "noteEWhole": "U+E175", 
    "noteEmptyBlack": "U+E1AF", 
    "noteEmptyHalf": "U+E1AE", 
    "noteEmptyWhole": "U+E1AD", 
    "noteFBlack": "U+E1A6", 
    "noteFFlatBlack": "U+E1A5", 
    "noteFFlatHalf": "U+E18E", 
    "noteFFlatWhole": "U+E177", 
    "noteFHalf": "U+E18F", 
    "noteFSharpBlack": "U+E1A7", 
    "noteFSharpHalf": "U+E190", 
    "noteFSharpWhole": "U+E179", 
    "noteFWhole": "U+E178", 
    "noteFaBlack": "U+E163", 
    "noteFaHalf": "U+E15B", 
    "noteFaWhole": "U+E153", 
    "noteGBlack": "U+E1A9", 
    "noteGFlatBlack": "U+E1A8", 
    "noteGFlatHalf": "U+E191", 
    "noteGFlatWhole": "U+E17A", 
    "noteGHalf": "U+E192", 
    "noteGSharpBlack": "U+E1AA", 
    "noteGSharpHalf": "U+E193", 
    "noteGSharpWhole": "U+E17C", 
    "noteGWhole": "U+E17B", 
    "noteHBlack": "U+E1AB", 
    "noteHHalf": "U+E194", 
    "noteHSharpBlack": "U+E1AC", 
    "noteHSharpHalf": "U+E195", 
    "noteHSharpWhole": "U+E17E", 
    "noteHWhole": "U+E17D", 
    "noteHalfDown": "U+E1D4", 
    "noteHalfUp": "U+E1D3", 
    "noteLaBlack": "U+E165", 
    "noteLaHalf": "U+E15D", 
    "noteLaWhole": "U+E155", 
    "noteMiBlack": "U+E162", 
    "noteMiHalf": "U+E15A", 
    "noteMiWhole": "U+E152", 
    "noteQuarterDown": "U+E1D6", 
    "noteQuarterUp": "U+E1D5", 
    "noteReBlack": "U+E161", 
    "noteReHalf": "U+E159", 
    "noteReWhole": "U+E151", 
    "noteShapeArrowheadLeftBlack": "U+E1C9", 
    "noteShapeArrowheadLeftWhite": "U+E1C8", 
    "noteShapeDiamondBlack": "U+E1B9", 
    "noteShapeDiamondWhite": "U+E1B8", 
    "noteShapeIsoscelesTriangleBlack": "U+E1C5", 
    "noteShapeIsoscelesTriangleWhite": "U+E1C4", 
    "noteShapeKeystoneBlack": "U+E1C1", 
    "noteShapeKeystoneWhite": "U+E1C0", 
    "noteShapeMoonBlack": "U+E1BD", 
    "noteShapeMoonLeftBlack": "U+E1C7", 
    "noteShapeMoonLeftWhite": "U+E1C6", 
    "noteShapeMoonWhite": "U+E1BC", 
    "noteShapeQuarterMoonBlack": "U+E1C3", 
    "noteShapeQuarterMoonWhite": "U+E1C2", 
    "noteShapeRoundBlack": "U+E1B1", 
    "noteShapeRoundWhite": "U+E1B0", 
    "noteShapeSquareBlack": "U+E1B3", 
    "noteShapeSquareWhite": "U+E1B2", 
    "noteShapeTriangleLeftBlack": "U+E1B7", 
    "noteShapeTriangleLeftWhite": "U+E1B6", 
    "noteShapeTriangleRightBlack": "U+E1B5", 
    "noteShapeTriangleRightWhite": "U+E1B4", 
    "noteShapeTriangleRoundBlack": "U+E1BF", 
    "noteShapeTriangleRoundLeftBlack": "U+E1CB", 
    "noteShapeTriangleRoundLeftWhite": "U+E1CA", 
    "noteShapeTriangleRoundWhite": "U+E1BE", 
    "noteShapeTriangleUpBlack": "U+E1BB", 
    "noteShapeTriangleUpWhite": "U+E1BA", 
    "noteSiBlack": "U+E167", 
    "noteSiHalf": "U+E15F", 
    "noteSiWhole": "U+E157", 
    "noteSoBlack": "U+E164", 
    "noteSoHalf": "U+E15C", 
    "noteSoWhole": "U+E154", 
    "noteTiBlack": "U+E166", 
    "noteTiHalf": "U+E15E", 
    "noteTiWhole": "U+E156", 
    "noteWhole": "U+E1D2", 
    "noteheadBlack": "U+E0A4", 
    "noteheadCircleSlash": "U+E0F7", 
    "noteheadCircleX": "U+E0B3", 
    "noteheadCircleXDoubleWhole": "U+E0B0", 
    "noteheadCircleXHalf": "U+E0B2", 
    "noteheadCircleXWhole": "U+E0B1", 
    "noteheadCircledBlack": "U+E0E4", 
    "noteheadCircledBlackLarge": "U+E0E8", 
    "noteheadCircledDoubleWhole": "U+E0E7", 
    "noteheadCircledDoubleWholeLarge": "U+E0EB", 
    "noteheadCircledHalf": "U+E0E5", 
    "noteheadCircledHalfLarge": "U+E0E9", 
    "noteheadCircledWhole": "U+E0E6", 
    "noteheadCircledWholeLarge": "U+E0EA", 
    "noteheadCircledXLarge": "U+E0EC", 
    "noteheadClusterDoubleWhole2nd": "U+E124", 
    "noteheadClusterDoubleWhole3rd": "U+E128", 
    "noteheadClusterDoubleWholeBottom": "U+E12E", 
    "noteheadClusterDoubleWholeMiddle": "U+E12D", 
    "noteheadClusterDoubleWholeTop": "U+E12C", 
    "noteheadClusterHalf2nd": "U+E126", 
    "noteheadClusterHalf3rd": "U+E12A", 
    "noteheadClusterHalfBottom": "U+E134", 
    "noteheadClusterHalfMiddle": "U+E133", 
    "noteheadClusterHalfTop": "U+E132", 
    "noteheadClusterQuarter2nd": "U+E127", 
    "noteheadClusterQuarter3rd": "U+E12B", 
    "noteheadClusterQuarterBottom": "U+E137", 
    "noteheadClusterQuarterMiddle": "U+E136", 
    "noteheadClusterQuarterTop": "U+E135", 
    "noteheadClusterRoundBlack": "U+E123", 
    "noteheadClusterRoundWhite": "U+E122", 
    "noteheadClusterSquareBlack": "U+E121", 
    "noteheadClusterSquareWhite": "U+E120", 
    "noteheadClusterWhole2nd": "U+E125", 
    "noteheadClusterWhole3rd": "U+E129", 
    "noteheadClusterWholeBottom": "U+E131", 
    "noteheadClusterWholeMiddle": "U+E130", 
    "noteheadClusterWholeTop": "U+E12F", 
    "noteheadDiamondBlack": "U+E0DB", 
    "noteheadDiamondBlackOld": "U+E0E2", 
    "noteheadDiamondBlackWide": "U+E0DC", 
    "noteheadDiamondClusterBlack2nd": "U+E139", 
    "noteheadDiamondClusterBlack3rd": "U+E13B", 
    "noteheadDiamondClusterBlackBottom": "U+E141", 
    "noteheadDiamondClusterBlackMiddle": "U+E140", 
    "noteheadDiamondClusterBlackTop": "U+E13F", 
    "noteheadDiamondClusterWhite2nd": "U+E138", 
    "noteheadDiamondClusterWhite3rd": "U+E13A", 
    "noteheadDiamondClusterWhiteBottom": "U+E13E", 
    "noteheadDiamondClusterWhiteMiddle": "U+E13D", 
    "noteheadDiamondClusterWhiteTop": "U+E13C", 
    "noteheadDiamondDoubleWhole": "U+E0D7", 
    "noteheadDiamondDoubleWholeOld": "U+E0DF", 
    "noteheadDiamondHalf": "U+E0D9", 
    "noteheadDiamondHalfFilled": "U+E0E3", 
    "noteheadDiamondHalfOld": "U+E0E1", 
    "noteheadDiamondHalfWide": "U+E0DA", 
    "noteheadDiamondOpen": "U+E0FC", 
    "noteheadDiamondWhite": "U+E0DD", 
    "noteheadDiamondWhiteWide": "U+E0DE", 
    "noteheadDiamondWhole": "U+E0D8", 
    "noteheadDiamondWholeOld": "U+E0E0", 
    "noteheadDoubleWhole": "U+E0A0", 
    "noteheadDoubleWholeSquare": "U+E0A1", 
    "noteheadDoubleWholeWithX": "U+E0B4", 
    "noteheadHalf": "U+E0A3", 
    "noteheadHalfFilled": "U+E0FB", 
    "noteheadHalfWithX": "U+E0B6", 
    "noteheadHeavyX": "U+E0F8", 
    "noteheadHeavyXHat": "U+E0F9", 
    "noteheadLargeArrowDownBlack": "U+E0F4", 
    "noteheadLargeArrowDownDoubleWhole": "U+E0F1", 
    "noteheadLargeArrowDownHalf": "U+E0F3", 
    "noteheadLargeArrowDownWhole": "U+E0F2", 
    "noteheadLargeArrowUpBlack": "U+E0F0", 
    "noteheadLargeArrowUpDoubleWhole": "U+E0ED", 
    "noteheadLargeArrowUpHalf": "U+E0EF", 
    "noteheadLargeArrowUpWhole": "U+E0EE", 
    "noteheadMoonBlack": "U+E0CB", 
    "noteheadMoonWhite": "U+E0CA", 
    "noteheadNull": "U+E0A5", 
    "noteheadParenthesis": "U+E0CE", 
    "noteheadParenthesisLeft": "U+E0F5", 
    "noteheadParenthesisRight": "U+E0F6", 
    "noteheadPlusBlack": "U+E0AF", 
    "noteheadPlusDoubleWhole": "U+E0AC", 
    "noteheadPlusHalf": "U+E0AE", 
    "noteheadPlusWhole": "U+E0AD", 
    "noteheadRectangularClusterBlackBottom": "U+E144", 
    "noteheadRectangularClusterBlackMiddle": "U+E143", 
    "noteheadRectangularClusterBlackTop": "U+E142", 
    "noteheadRectangularClusterWhiteBottom": "U+E147", 
    "noteheadRectangularClusterWhiteMiddle": "U+E146", 
    "noteheadRectangularClusterWhiteTop": "U+E145", 
    "noteheadRoundBlack": "U+E113", 
    "noteheadRoundBlackLarge": "U+E110", 
    "noteheadRoundBlackSlashed": "U+E118", 
    "noteheadRoundBlackSlashedLarge": "U+E116", 
    "noteheadRoundWhite": "U+E114", 
    "noteheadRoundWhiteLarge": "U+E111", 
    "noteheadRoundWhiteSlashed": "U+E119", 
    "noteheadRoundWhiteSlashedLarge": "U+E117", 
    "noteheadRoundWhiteWithDot": "U+E115", 
    "noteheadRoundWhiteWithDotLarge": "U+E112", 
    "noteheadSlashDiamondWhite": "U+E104", 
    "noteheadSlashHorizontalEnds": "U+E101", 
    "noteheadSlashHorizontalEndsMuted": "U+E108", 
    "noteheadSlashVerticalEnds": "U+E100", 
    "noteheadSlashVerticalEndsMuted": "U+E107", 
    "noteheadSlashVerticalEndsSmall": "U+E105", 
    "noteheadSlashWhiteHalf": "U+E103", 
    "noteheadSlashWhiteMuted": "U+E109", 
    "noteheadSlashWhiteWhole": "U+E102", 
    "noteheadSlashX": "U+E106", 
    "noteheadSlashedBlack1": "U+E0CF", 
    "noteheadSlashedBlack2": "U+E0D0", 
    "noteheadSlashedDoubleWhole1": "U+E0D5", 
    "noteheadSlashedDoubleWhole2": "U+E0D6", 
    "noteheadSlashedHalf1": "U+E0D1", 
    "noteheadSlashedHalf2": "U+E0D2", 
    "noteheadSlashedWhole1": "U+E0D3", 
    "noteheadSlashedWhole2": "U+E0D4", 
    "noteheadSquareBlack": "U+E0B9", 
    "noteheadSquareBlackLarge": "U+E11A", 
    "noteheadSquareBlackWhite": "U+E11B", 
    "noteheadSquareWhite": "U+E0B8", 
    "noteheadTriangleDownBlack": "U+E0C7", 
    "noteheadTriangleDownDoubleWhole": "U+E0C3", 
    "noteheadTriangleDownHalf": "U+E0C5", 
    "noteheadTriangleDownWhite": "U+E0C6", 
    "noteheadTriangleDownWhole": "U+E0C4", 
    "noteheadTriangleLeftBlack": "U+E0C0", 
    "noteheadTriangleLeftWhite": "U+E0BF", 
    "noteheadTriangleRightBlack": "U+E0C2", 
    "noteheadTriangleRightWhite": "U+E0C1", 
    "noteheadTriangleRoundDownBlack": "U+E0CD", 
    "noteheadTriangleRoundDownWhite": "U+E0CC", 
    "noteheadTriangleUpBlack": "U+E0BE", 
    "noteheadTriangleUpDoubleWhole": "U+E0BA", 
    "noteheadTriangleUpHalf": "U+E0BC", 
    "noteheadTriangleUpRightBlack": "U+E0C9", 
    "noteheadTriangleUpRightWhite": "U+E0C8", 
    "noteheadTriangleUpWhite": "U+E0BD", 
    "noteheadTriangleUpWhole": "U+E0BB", 
    "noteheadVoidWithX": "U+E0B7", 
    "noteheadWhole": "U+E0A2", 
    "noteheadWholeFilled": "U+E0FA", 
    "noteheadWholeWithX": "U+E0B5", 
    "noteheadXBlack": "U+E0A9", 
    "noteheadXDoubleWhole": "U+E0A6", 
    "noteheadXHalf": "U+E0A8", 
    "noteheadXOrnate": "U+E0AA", 
    "noteheadXOrnateEllipse": "U+E0AB", 
    "noteheadXWhole": "U+E0A7", 
    "octaveParensLeft": "U+E51A", 
    "octaveParensRight": "U+E51B", 
    "ornamentBottomLeftConcaveStroke": "U+E59A", 
    "ornamentBottomLeftConcaveStrokeLarge": "U+E59B", 
    "ornamentBottomLeftConvexStroke": "U+E59C", 
    "ornamentBottomRightConcaveStroke": "U+E5A7", 
    "ornamentBottomRightConvexStroke": "U+E5A8", 
    "ornamentComma": "U+E581", 
    "ornamentDoubleObliqueLinesAfterNote": "U+E57E", 
    "ornamentDoubleObliqueLinesBeforeNote": "U+E57D", 
    "ornamentDownCurve": "U+E578", 
    "ornamentHaydn": "U+E56F", 
    "ornamentHighLeftConcaveStroke": "U+E592", 
    "ornamentHighLeftConvexStroke": "U+E593", 
    "ornamentHighRightConcaveStroke": "U+E5A2", 
    "ornamentHighRightConvexStroke": "U+E5A3", 
    "ornamentHookAfterNote": "U+E576", 
    "ornamentHookBeforeNote": "U+E575", 
    "ornamentLeftFacingHalfCircle": "U+E572", 
    "ornamentLeftFacingHook": "U+E574", 
    "ornamentLeftPlus": "U+E597", 
    "ornamentLeftShakeT": "U+E596", 
    "ornamentLeftVerticalStroke": "U+E594", 
    "ornamentLeftVerticalStrokeWithCross": "U+E595", 
    "ornamentLowLeftConcaveStroke": "U+E598", 
    "ornamentLowLeftConvexStroke": "U+E599", 
    "ornamentLowRightConcaveStroke": "U+E5A5", 
    "ornamentLowRightConvexStroke": "U+E5A6", 
    "ornamentMiddleVerticalStroke": "U+E59F", 
    "ornamentMordent": "U+E56C", 
    "ornamentMordentInverted": "U+E56D", 
    "ornamentObliqueLineAfterNote": "U+E57C", 
    "ornamentObliqueLineBeforeNote": "U+E57B", 
    "ornamentObliqueLineHorizAfterNote": "U+E580", 
    "ornamentObliqueLineHorizBeforeNote": "U+E57F", 
    "ornamentOriscus": "U+EA21", 
    "ornamentPinceCouperin": "U+E588", 
    "ornamentPortDeVoixV": "U+E570", 
    "ornamentPrecompAppoggTrill": "U+E5B2", 
    "ornamentPrecompAppoggTrillSuffix": "U+E5B3", 
    "ornamentPrecompCadence": "U+E5BE", 
    "ornamentPrecompCadenceUpperPrefix ": "U+E5C1", 
    "ornamentPrecompCadenceUpperPrefixTurn": "U+E5C2", 
    "ornamentPrecompCadenceWithTurn ": "U+E5BF", 
    "ornamentPrecompDescendingSlide": "U+E5B1", 
    "ornamentPrecompDoubleCadenceLowerPrefix": "U+E5C0", 
    "ornamentPrecompDoubleCadenceUpperPrefix ": "U+E5C3", 
    "ornamentPrecompDoubleCadenceUpperPrefixTurn": "U+E5C4", 
    "ornamentPrecompInvertedMordentUpperPrefix": "U+E5C7", 
    "ornamentPrecompMordentRelease": "U+E5C5", 
    "ornamentPrecompMordentUpperPrefix": "U+E5C6", 
    "ornamentPrecompPortDeVoixMordent": "U+E5BC", 
    "ornamentPrecompSlide": "U+E5B0", 
    "ornamentPrecompSlideTrillBach": "U+E5B8", 
    "ornamentPrecompSlideTrillDAnglebert": "U+E5B5", 
    "ornamentPrecompSlideTrillMarpurg": "U+E5B6", 
    "ornamentPrecompSlideTrillMuffat": "U+E5B9", 
    "ornamentPrecompSlideTrillSuffixMuffat": "U+E5BA", 
    "ornamentPrecompTrillLowerSuffix": "U+E5C8", 
    "ornamentPrecompTrillSuffixDandrieu": "U+E5BB", 
    "ornamentPrecompTrillWithMordent": "U+E5BD", 
    "ornamentPrecompTurnTrillBach": "U+E5B7", 
    "ornamentPrecompTurnTrillDAnglebert": "U+E5B4", 
    "ornamentQuilisma": "U+EA20", 
    "ornamentRightFacingHalfCircle": "U+E571", 
    "ornamentRightFacingHook": "U+E573", 
    "ornamentRightVerticalStroke": "U+E5A4", 
    "ornamentSchleifer": "U+E587", 
    "ornamentShake3": "U+E582", 
    "ornamentShakeMuffat1": "U+E584", 
    "ornamentShortObliqueLineAfterNote": "U+E57A", 
    "ornamentShortObliqueLineBeforeNote": "U+E579", 
    "ornamentTopLeftConcaveStroke": "U+E590", 
    "ornamentTopLeftConvexStroke": "U+E591", 
    "ornamentTopRightConcaveStroke": "U+E5A0", 
    "ornamentTopRightConvexStroke": "U+E5A1", 
    "ornamentTremblement": "U+E56E", 
    "ornamentTremblementCouperin": "U+E589", 
    "ornamentTrill": "U+E566", 
    "ornamentTurn": "U+E567", 
    "ornamentTurnInverted": "U+E568", 
    "ornamentTurnSlash": "U+E569", 
    "ornamentTurnUp": "U+E56A", 
    "ornamentTurnUpS": "U+E56B", 
    "ornamentUpCurve": "U+E577", 
    "ornamentVerticalLine": "U+E583", 
    "ornamentZigZagLineNoRightEnd": "U+E59D", 
    "ornamentZigZagLineWithRightEnd": "U+E59E", 
    "ottava": "U+E510", 
    "ottavaAlta": "U+E511", 
    "ottavaBassa": "U+E512", 
    "ottavaBassaBa": "U+E513", 
    "pendereckiTremolo": "U+E22B", 
    "pictAgogo": "U+E717", 
    "pictAlmglocken": "U+E712", 
    "pictAnvil": "U+E701", 
    "pictBambooChimes": "U+E6C3", 
    "pictBambooScraper": "U+E6FB", 
    "pictBassDrum": "U+E6D4", 
    "pictBassDrumOnSide": "U+E6D5", 
    "pictBeaterBow": "U+E7DE", 
    "pictBeaterBox": "U+E7EB", 
    "pictBeaterBrassMalletsDown": "U+E7DA", 
    "pictBeaterBrassMalletsUp": "U+E7D9", 
    "pictBeaterCombiningDashedCircle": "U+E7EA", 
    "pictBeaterCombiningParentheses": "U+E7E9", 
    "pictBeaterDoubleBassDrumDown": "U+E7A1", 
    "pictBeaterDoubleBassDrumUp": "U+E7A0", 
    "pictBeaterFinger": "U+E7E4", 
    "pictBeaterFingernails": "U+E7E6", 
    "pictBeaterFist": "U+E7E5", 
    "pictBeaterGuiroScraper": "U+E7DD", 
    "pictBeaterHammer": "U+E7E1", 
    "pictBeaterHammerMetalDown": "U+E7D0", 
    "pictBeaterHammerMetalUp": "U+E7CF", 
    "pictBeaterHammerPlasticDown": "U+E7CE", 
    "pictBeaterHammerPlasticUp": "U+E7CD", 
    "pictBeaterHammerWoodDown": "U+E7CC", 
    "pictBeaterHammerWoodUp": "U+E7CB", 
    "pictBeaterHand": "U+E7E3", 
    "pictBeaterHardBassDrumDown": "U+E79D", 
    "pictBeaterHardBassDrumUp": "U+E79C", 
    "pictBeaterHardGlockenspielDown": "U+E785", 
    "pictBeaterHardGlockenspielLeft": "U+E787", 
    "pictBeaterHardGlockenspielRight": "U+E786", 
    "pictBeaterHardGlockenspielUp": "U+E784", 
    "pictBeaterHardTimpaniDown": "U+E791", 
    "pictBeaterHardTimpaniLeft": "U+E793", 
    "pictBeaterHardTimpaniRight": "U+E792", 
    "pictBeaterHardTimpaniUp": "U+E790", 
    "pictBeaterHardXylophoneDown": "U+E779", 
    "pictBeaterHardXylophoneLeft": "U+E77B", 
    "pictBeaterHardXylophoneRight": "U+E77A", 
    "pictBeaterHardXylophoneUp": "U+E778", 
    "pictBeaterHardYarnDown": "U+E7AB", 
    "pictBeaterHardYarnLeft": "U+E7AD", 
    "pictBeaterHardYarnRight": "U+E7AC", 
    "pictBeaterHardYarnUp": "U+E7AA", 
    "pictBeaterJazzSticksDown": "U+E7D4", 
    "pictBeaterJazzSticksUp": "U+E7D3", 
    "pictBeaterKnittingNeedle": "U+E7E2", 
    "pictBeaterMallet": "U+E7DF", 
    "pictBeaterMediumBassDrumDown": "U+E79B", 
    "pictBeaterMediumBassDrumUp": "U+E79A", 
    "pictBeaterMediumTimpaniDown": "U+E78D", 
    "pictBeaterMediumTimpaniLeft": "U+E78F", 
    "pictBeaterMediumTimpaniRight": "U+E78E", 
    "pictBeaterMediumTimpaniUp": "U+E78C", 
    "pictBeaterMediumXylophoneDown": "U+E775", 
    "pictBeaterMediumXylophoneLeft": "U+E777", 
    "pictBeaterMediumXylophoneRight": "U+E776", 
    "pictBeaterMediumXylophoneUp": "U+E774", 
    "pictBeaterMediumYarnDown": "U+E7A7", 
    "pictBeaterMediumYarnLeft": "U+E7A9", 
    "pictBeaterMediumYarnRight": "U+E7A8", 
    "pictBeaterMediumYarnUp": "U+E7A6", 
    "pictBeaterMetalBassDrumDown": "U+E79F", 
    "pictBeaterMetalBassDrumUp": "U+E79E", 
    "pictBeaterMetalDown": "U+E7C8", 
    "pictBeaterMetalHammer": "U+E7E0", 
    "pictBeaterMetalLeft": "U+E7CA", 
    "pictBeaterMetalRight": "U+E7C9", 
    "pictBeaterMetalUp": "U+E7C7", 
    "pictBeaterSnareSticksDown": "U+E7D2", 
    "pictBeaterSnareSticksUp": "U+E7D1", 
    "pictBeaterSoftBassDrumDown": "U+E799", 
    "pictBeaterSoftBassDrumUp": "U+E798", 
    "pictBeaterSoftGlockenspielDown": "U+E781", 
    "pictBeaterSoftGlockenspielLeft": "U+E783", 
    "pictBeaterSoftGlockenspielRight": "U+E782", 
    "pictBeaterSoftGlockenspielUp": "U+E780", 
    "pictBeaterSoftTimpaniDown": "U+E789", 
    "pictBeaterSoftTimpaniLeft": "U+E78B", 
    "pictBeaterSoftTimpaniRight": "U+E78A", 
    "pictBeaterSoftTimpaniUp": "U+E788", 
    "pictBeaterSoftXylophone": "U+E7DB", 
    "pictBeaterSoftXylophoneDown": "U+E771", 
    "pictBeaterSoftXylophoneLeft": "U+E773", 
    "pictBeaterSoftXylophoneRight": "U+E772", 
    "pictBeaterSoftXylophoneUp": "U+E770", 
    "pictBeaterSoftYarnDown": "U+E7A3", 
    "pictBeaterSoftYarnLeft": "U+E7A5", 
    "pictBeaterSoftYarnRight": "U+E7A4", 
    "pictBeaterSoftYarnUp": "U+E7A2", 
    "pictBeaterSpoonWoodenMallet": "U+E7DC", 
    "pictBeaterSuperballDown": "U+E7AF", 
    "pictBeaterSuperballLeft": "U+E7B1", 
    "pictBeaterSuperballRight": "U+E7B0", 
    "pictBeaterSuperballUp": "U+E7AE", 
    "pictBeaterTriangleDown": "U+E7D6", 
    "pictBeaterTriangleUp": "U+E7D5", 
    "pictBeaterWireBrushesDown": "U+E7D8", 
    "pictBeaterWireBrushesUp": "U+E7D7", 
    "pictBeaterWoodTimpaniDown": "U+E795", 
    "pictBeaterWoodTimpaniLeft": "U+E797", 
    "pictBeaterWoodTimpaniRight": "U+E796", 
    "pictBeaterWoodTimpaniUp": "U+E794", 
    "pictBeaterWoodXylophoneDown": "U+E77D", 
    "pictBeaterWoodXylophoneLeft": "U+E77F", 
    "pictBeaterWoodXylophoneRight": "U+E77E", 
    "pictBeaterWoodXylophoneUp": "U+E77C", 
    "pictBell": "U+E714", 
    "pictBellOfCymbal": "U+E72A", 
    "pictBellPlate": "U+E713", 
    "pictBellTree": "U+E71A", 
    "pictBirdWhistle": "U+E751", 
    "pictBoardClapper": "U+E6F7", 
    "pictBongos": "U+E6DD", 
    "pictBrakeDrum": "U+E6E1", 
    "pictCabasa": "U+E743", 
    "pictCannon": "U+E761", 
    "pictCarHorn": "U+E755", 
    "pictCastanets": "U+E6F8", 
    "pictCastanetsWithHandle": "U+E6F9", 
    "pictCelesta": "U+E6B0", 
    "pictCencerro": "U+E716", 
    "pictCenter1": "U+E7FE", 
    "pictCenter2": "U+E7FF", 
    "pictCenter3": "U+E800", 
    "pictChainRattle": "U+E748", 
    "pictChimes": "U+E6C2", 
    "pictChineseCymbal": "U+E726", 
    "pictChokeCymbal": "U+E805", 
    "pictClaves": "U+E6F2", 
    "pictCoins": "U+E7E7", 
    "pictConga": "U+E6DE", 
    "pictCowBell": "U+E711", 
    "pictCrashCymbals": "U+E720", 
    "pictCrotales": "U+E6AE", 
    "pictCrushStem": "U+E80C", 
    "pictCuica": "U+E6E4", 
    "pictCymbalTongs": "U+E728", 
    "pictDamp1": "U+E7F9", 
    "pictDamp2": "U+E7FA", 
    "pictDamp3": "U+E7FB", 
    "pictDamp4": "U+E7FC", 
    "pictDeadNoteStem": "U+E80D", 
    "pictDrumStick": "U+E7E8", 
    "pictDuckCall": "U+E757", 
    "pictEdgeOfCymbal": "U+E729", 
    "pictEmptyTrap": "U+E6A9", 
    "pictFingerCymbals": "U+E727", 
    "pictFlexatone": "U+E740", 
    "pictFootballRatchet": "U+E6F5", 
    "pictGlassHarmonica": "U+E765", 
    "pictGlassHarp": "U+E764", 
    "pictGlassPlateChimes": "U+E6C6", 
    "pictGlassTubeChimes": "U+E6C5", 
    "pictGlsp": "U+E6A0", 
    "pictGlspSmithBrindle": "U+E6AA", 
    "pictGobletDrum": "U+E6E2", 
    "pictGong": "U+E732", 
    "pictGongWithButton": "U+E733", 
    "pictGuiro": "U+E6F3", 
    "pictGumHardDown": "U+E7C4", 
    "pictGumHardLeft": "U+E7C6", 
    "pictGumHardRight": "U+E7C5", 
    "pictGumHardUp": "U+E7C3", 
    "pictGumMediumDown": "U+E7C0", 
    "pictGumMediumLeft": "U+E7C2", 
    "pictGumMediumRight": "U+E7C1", 
    "pictGumMediumUp": "U+E7BF", 
    "pictGumSoftDown": "U+E7BC", 
    "pictGumSoftLeft": "U+E7BE", 
    "pictGumSoftRight": "U+E7BD", 
    "pictGumSoftUp": "U+E7BB", 
    "pictHalfOpen1": "U+E7F6", 
    "pictHalfOpen2": "U+E7F7", 
    "pictHandbell": "U+E715", 
    "pictHiHat": "U+E722", 
    "pictHiHatOnStand": "U+E723", 
    "pictJawHarp": "U+E767", 
    "pictJingleBells": "U+E719", 
    "pictKlaxonHorn": "U+E756", 
    "pictLeftHandCircle": "U+E807", 
    "pictLionsRoar": "U+E763", 
    "pictLithophone": "U+E6B1", 
    "pictLogDrum": "U+E6DF", 
    "pictLotusFlute": "U+E75A", 
    "pictMar": "U+E6A6", 
    "pictMarSmithBrindle": "U+E6AC", 
    "pictMaraca": "U+E741", 
    "pictMaracas": "U+E742", 
    "pictMegaphone": "U+E759", 
    "pictMetalPlateChimes": "U+E6C8", 
    "pictMetalTubeChimes": "U+E6C7", 
    "pictMusicalSaw": "U+E766", 
    "pictNormalPosition": "U+E804", 
    "pictOnRim": "U+E7F4", 
    "pictOpen": "U+E7F8", 
    "pictOpenRimShot": "U+E7F5", 
    "pictPistolShot": "U+E760", 
    "pictPoliceWhistle": "U+E752", 
    "pictQuijada": "U+E6FA", 
    "pictRainstick": "U+E747", 
    "pictRatchet": "U+E6F4", 
    "pictRecoReco": "U+E6FC", 
    "pictRightHandSquare": "U+E806", 
    "pictRim1": "U+E801", 
    "pictRim2": "U+E802", 
    "pictRim3": "U+E803", 
    "pictRimShotOnStem": "U+E7FD", 
    "pictSandpaperBlocks": "U+E762", 
    "pictScrapeAroundRim": "U+E7F3", 
    "pictScrapeCenterToEdge": "U+E7F1", 
    "pictScrapeEdgeToCenter": "U+E7F2", 
    "pictShellBells": "U+E718", 
    "pictShellChimes": "U+E6C4", 
    "pictSiren": "U+E753", 
    "pictSistrum": "U+E746", 
    "pictSizzleCymbal": "U+E724", 
    "pictSleighBell": "U+E710", 
    "pictSlideBrushOnGong": "U+E734", 
    "pictSlideWhistle": "U+E750", 
    "pictSlitDrum": "U+E6E0", 
    "pictSnareDrum": "U+E6D1", 
    "pictSnareDrumMilitary": "U+E6D3", 
    "pictSnareDrumSnaresOff": "U+E6D2", 
    "pictSteelDrums": "U+E6AF", 
    "pictStickShot": "U+E7F0", 
    "pictSuperball": "U+E7B2", 
    "pictSuspendedCymbal": "U+E721", 
    "pictSwishStem": "U+E808", 
    "pictTabla": "U+E6E3", 
    "pictTamTam": "U+E730", 
    "pictTamTamWithBeater": "U+E731", 
    "pictTambourine": "U+E6DB", 
    "pictTempleBlocks": "U+E6F1", 
    "pictTenorDrum": "U+E6D6", 
    "pictThundersheet": "U+E744", 
    "pictTimbales": "U+E6DC", 
    "pictTimpani": "U+E6D0", 
    "pictTomTom": "U+E6D7", 
    "pictTomTomChinese": "U+E6D8", 
    "pictTomTomIndoAmerican": "U+E6DA", 
    "pictTomTomJapanese": "U+E6D9", 
    "pictTriangle": "U+E700", 
    "pictTubaphone": "U+E6B2", 
    "pictTubularBells": "U+E6C0", 
    "pictTurnLeftStem": "U+E80A", 
    "pictTurnRightLeftStem": "U+E80B", 
    "pictTurnRightStem": "U+E809", 
    "pictVib": "U+E6A7", 
    "pictVibMotorOff": "U+E6A8", 
    "pictVibSmithBrindle": "U+E6AD", 
    "pictVibraslap": "U+E745", 
    "pictVietnameseHat": "U+E725", 
    "pictWhip": "U+E6F6", 
    "pictWindChimesGlass": "U+E6C1", 
    "pictWindMachine": "U+E754", 
    "pictWindWhistle": "U+E758", 
    "pictWoodBlock": "U+E6F0", 
    "pictWoundHardDown": "U+E7B4", 
    "pictWoundHardLeft": "U+E7B6", 
    "pictWoundHardRight": "U+E7B5", 
    "pictWoundHardUp": "U+E7B3", 
    "pictWoundSoftDown": "U+E7B8", 
    "pictWoundSoftLeft": "U+E7BA", 
    "pictWoundSoftRight": "U+E7B9", 
    "pictWoundSoftUp": "U+E7B7", 
    "pictXyl": "U+E6A1", 
    "pictXylBass": "U+E6A3", 
    "pictXylSmithBrindle": "U+E6AB", 
    "pictXylTenor": "U+E6A2", 
    "pictXylTenorTrough": "U+E6A5", 
    "pictXylTrough": "U+E6A4", 
    "pluckedBuzzPizzicato": "U+E632", 
    "pluckedDamp": "U+E638", 
    "pluckedDampAll": "U+E639", 
    "pluckedDampOnStem": "U+E63B", 
    "pluckedFingernailFlick": "U+E637", 
    "pluckedLeftHandPizzicato": "U+E633", 
    "pluckedPlectrum": "U+E63A", 
    "pluckedSnapPizzicatoAbove": "U+E631", 
    "pluckedSnapPizzicatoBelow": "U+E630", 
    "pluckedWithFingernails": "U+E636", 
    "quindicesima": "U+E514", 
    "quindicesimaAlta": "U+E515", 
    "quindicesimaBassa": "U+E516", 
    "repeat1Bar": "U+E500", 
    "repeat2Bars": "U+E501", 
    "repeat4Bars": "U+E502", 
    "repeatDot": "U+E044", 
    "repeatDots": "U+E043", 
    "repeatLeft": "U+E040", 
    "repeatRight": "U+E041", 
    "repeatRightLeft": "U+E042", 
    "rest1024th": "U+E4ED", 
    "rest128th": "U+E4EA", 
    "rest16th": "U+E4E7", 
    "rest256th": "U+E4EB", 
    "rest32nd": "U+E4E8", 
    "rest512th": "U+E4EC", 
    "rest64th": "U+E4E9", 
    "rest8th": "U+E4E6", 
    "restDoubleWhole": "U+E4E2", 
    "restDoubleWholeLegerLine": "U+E4F3", 
    "restHBar": "U+E4EE", 
    "restHBarLeft": "U+E4EF", 
    "restHBarMiddle": "U+E4F0", 
    "restHBarRight": "U+E4F1", 
    "restHalf": "U+E4E4", 
    "restHalfLegerLine": "U+E4F5", 
    "restLonga": "U+E4E1", 
    "restMaxima": "U+E4E0", 
    "restQuarter": "U+E4E5", 
    "restQuarterOld": "U+E4F2", 
    "restWhole": "U+E4E3", 
    "restWholeLegerLine": "U+E4F4", 
    "reversedBrace": "U+E001", 
    "reversedBracketBottom": "U+E006", 
    "reversedBracketTop": "U+E005", 
    "rightRepeatSmall": "U+E04D", 
    "segno": "U+E047", 
    "segnoSerpent1": "U+E04A", 
    "segnoSerpent2": "U+E04B", 
    "semipitchedPercussionClef1": "U+E06B", 
    "semipitchedPercussionClef2": "U+E06C", 
    "smnFlat": "U+EC52", 
    "smnFlatWhite": "U+EC53", 
    "smnHistoryDoubleFlat": "U+EC57", 
    "smnHistoryDoubleSharp": "U+EC55", 
    "smnHistoryFlat": "U+EC56", 
    "smnHistorySharp": "U+EC54", 
    "smnNatural": "U+EC58", 
    "smnSharp": "U+EC50", 
    "smnSharpWhite": "U+EC51", 
    "splitBarDivider": "U+E00A", 
    "staff1Line": "U+E010", 
    "staff1LineNarrow": "U+E01C", 
    "staff1LineWide": "U+E016", 
    "staff2Lines": "U+E011", 
    "staff2LinesNarrow": "U+E01D", 
    "staff2LinesWide": "U+E017", 
    "staff3Lines": "U+E012", 
    "staff3LinesNarrow": "U+E01E", 
    "staff3LinesWide": "U+E018", 
    "staff4Lines": "U+E013", 
    "staff4LinesNarrow": "U+E01F", 
    "staff4LinesWide": "U+E019", 
    "staff5Lines": "U+E014", 
    "staff5LinesNarrow": "U+E020", 
    "staff5LinesWide": "U+E01A", 
    "staff6Lines": "U+E015", 
    "staff6LinesNarrow": "U+E021", 
    "staff6LinesWide": "U+E01B", 
    "staffDivideArrowDown": "U+E00B", 
    "staffDivideArrowUp": "U+E00C", 
    "staffDivideArrowUpDown": "U+E00D", 
    "staffPosLower1": "U+EB98", 
    "staffPosLower2": "U+EB99", 
    "staffPosLower3": "U+EB9A", 
    "staffPosLower4": "U+EB9B", 
    "staffPosLower5": "U+EB9C", 
    "staffPosLower6": "U+EB9D", 
    "staffPosLower7": "U+EB9E", 
    "staffPosLower8": "U+EB9F", 
    "staffPosRaise1": "U+EB90", 
    "staffPosRaise2": "U+EB91", 
    "staffPosRaise3": "U+EB92", 
    "staffPosRaise4": "U+EB93", 
    "staffPosRaise5": "U+EB94", 
    "staffPosRaise6": "U+EB95", 
    "staffPosRaise7": "U+EB96", 
    "staffPosRaise8": "U+EB97", 
    "stem": "U+E210", 
    "stemBowOnBridge": "U+E215", 
    "stemBowOnTailpiece": "U+E216", 
    "stemBuzzRoll": "U+E217", 
    "stemDamp": "U+E218", 
    "stemHarpStringNoise": "U+E21F", 
    "stemMultiphonicsBlack": "U+E21A", 
    "stemMultiphonicsBlackWhite": "U+E21C", 
    "stemMultiphonicsWhite": "U+E21B", 
    "stemPendereckiTremolo": "U+E213", 
    "stemRimShot": "U+E21E", 
    "stemSprechgesang": "U+E211", 
    "stemSulPonticello": "U+E214", 
    "stemSussurando": "U+E21D", 
    "stemSwished": "U+E212", 
    "stemVibratoPulse": "U+E219", 
    "stringsBowBehindBridge": "U+E618", 
    "stringsBowOnBridge": "U+E619", 
    "stringsBowOnTailpiece": "U+E61A", 
    "stringsChangeBowDirection": "U+E626", 
    "stringsDownBow": "U+E610", 
    "stringsDownBowTurned": "U+E611", 
    "stringsFouette": "U+E622", 
    "stringsHalfHarmonic": "U+E615", 
    "stringsHarmonic": "U+E614", 
    "stringsJeteAbove": "U+E620", 
    "stringsJeteBelow": "U+E621", 
    "stringsMuteOff": "U+E617", 
    "stringsMuteOn": "U+E616", 
    "stringsOverpressureDownBow": "U+E61B", 
    "stringsOverpressureNoDirection": "U+E61F", 
    "stringsOverpressurePossibileDownBow": "U+E61D", 
    "stringsOverpressurePossibileUpBow": "U+E61E", 
    "stringsOverpressureUpBow": "U+E61C", 
    "stringsThumbPosition": "U+E624", 
    "stringsThumbPositionTurned": "U+E625", 
    "stringsUpBow": "U+E612", 
    "stringsUpBowTurned": "U+E613", 
    "stringsVibratoPulse": "U+E623", 
    "systemDivider": "U+E007", 
    "systemDividerExtraLong": "U+E009", 
    "systemDividerLong": "U+E008", 
    "textAugmentationDot": "U+E1FC", 
    "textBlackNoteFrac16thLongStem": "U+E1F5", 
    "textBlackNoteFrac16thShortStem": "U+E1F4", 
    "textBlackNoteFrac32ndLongStem": "U+E1F6", 
    "textBlackNoteFrac8thLongStem": "U+E1F3", 
    "textBlackNoteFrac8thShortStem": "U+E1F2", 
    "textBlackNoteLongStem": "U+E1F1", 
    "textBlackNoteShortStem": "U+E1F0", 
    "textCont16thBeamLongStem": "U+E1FA", 
    "textCont16thBeamShortStem": "U+E1F9", 
    "textCont32ndBeamLongStem": "U+E1FB", 
    "textCont8thBeamLongStem": "U+E1F8", 
    "textCont8thBeamShortStem": "U+E1F7", 
    "textTie": "U+E1FD", 
    "textTuplet3LongStem": "U+E202", 
    "textTuplet3ShortStem": "U+E1FF", 
    "textTupletBracketEndLongStem": "U+E203", 
    "textTupletBracketEndShortStem": "U+E200", 
    "textTupletBracketStartLongStem": "U+E201", 
    "textTupletBracketStartShortStem": "U+E1FE", 
    "timeSig0": "U+E080", 
    "timeSig1": "U+E081", 
    "timeSig2": "U+E082", 
    "timeSig3": "U+E083", 
    "timeSig4": "U+E084", 
    "timeSig5": "U+E085", 
    "timeSig6": "U+E086", 
    "timeSig7": "U+E087", 
    "timeSig8": "U+E088", 
    "timeSig9": "U+E089", 
    "timeSigCombDenominator": "U+E09F", 
    "timeSigCombNumerator": "U+E09E", 
    "timeSigComma": "U+E096", 
    "timeSigCommon": "U+E08A", 
    "timeSigCutCommon": "U+E08B", 
    "timeSigEquals": "U+E08F", 
    "timeSigFractionHalf": "U+E098", 
    "timeSigFractionOneThird": "U+E09A", 
    "timeSigFractionQuarter": "U+E097", 
    "timeSigFractionThreeQuarters": "U+E099", 
    "timeSigFractionTwoThirds": "U+E09B", 
    "timeSigFractionalSlash": "U+E08E", 
    "timeSigMinus": "U+E090", 
    "timeSigMultiply": "U+E091", 
    "timeSigOpenPenderecki": "U+E09D", 
    "timeSigParensLeft": "U+E094", 
    "timeSigParensLeftSmall": "U+E092", 
    "timeSigParensRight": "U+E095", 
    "timeSigParensRightSmall": "U+E093", 
    "timeSigPlus": "U+E08C", 
    "timeSigPlusSmall": "U+E08D", 
    "timeSigX": "U+E09C", 
    "tremolo1": "U+E220", 
    "tremolo2": "U+E221", 
    "tremolo3": "U+E222", 
    "tremolo4": "U+E223", 
    "tremolo5": "U+E224", 
    "tremoloDivisiDots2": "U+E22E", 
    "tremoloDivisiDots3": "U+E22F", 
    "tremoloDivisiDots4": "U+E230", 
    "tremoloDivisiDots6": "U+E231", 
    "tremoloFingered1": "U+E225", 
    "tremoloFingered2": "U+E226", 
    "tremoloFingered3": "U+E227", 
    "tremoloFingered4": "U+E228", 
    "tremoloFingered5": "U+E229", 
    "tripleTongueAbove": "U+E5F2", 
    "tripleTongueBelow": "U+E5F3", 
    "tuplet0": "U+E880", 
    "tuplet1": "U+E881", 
    "tuplet2": "U+E882", 
    "tuplet3": "U+E883", 
    "tuplet4": "U+E884", 
    "tuplet5": "U+E885", 
    "tuplet6": "U+E886", 
    "tuplet7": "U+E887", 
    "tuplet8": "U+E888", 
    "tuplet9": "U+E889", 
    "tupletColon": "U+E88A", 
    "unmeasuredTremolo": "U+E22C", 
    "unmeasuredTremoloSimple": "U+E22D", 
    "unpitchedPercussionClef1": "U+E069", 
    "unpitchedPercussionClef2": "U+E06A", 
    "ventiduesima": "U+E517", 
    "ventiduesimaAlta": "U+E518", 
    "ventiduesimaBassa": "U+E519", 
    "vocalMouthClosed": "U+E640", 
    "vocalMouthOpen": "U+E642", 
    "vocalMouthPursed": "U+E644", 
    "vocalMouthSlightlyOpen": "U+E641", 
    "vocalMouthWideOpen": "U+E643", 
    "vocalSprechgesang": "U+E645", 
    "vocalsSussurando": "U+E646", 
    "wiggleArpeggiatoDown": "U+EAAA", 
    "wiggleArpeggiatoDownArrow": "U+EAAE", 
    "wiggleArpeggiatoDownSwash": "U+EAAC", 
    "wiggleArpeggiatoUp": "U+EAA9", 
    "wiggleArpeggiatoUpArrow": "U+EAAD", 
    "wiggleArpeggiatoUpSwash": "U+EAAB", 
    "wiggleCircular": "U+EAC9", 
    "wiggleCircularConstant": "U+EAC0", 
    "wiggleCircularConstantFlipped": "U+EAC1", 
    "wiggleCircularConstantFlippedLarge": "U+EAC3", 
    "wiggleCircularConstantLarge": "U+EAC2", 
    "wiggleCircularEnd": "U+EACB", 
    "wiggleCircularLarge": "U+EAC8", 
    "wiggleCircularLarger": "U+EAC7", 
    "wiggleCircularLargerStill": "U+EAC6", 
    "wiggleCircularLargest": "U+EAC5", 
    "wiggleCircularSmall": "U+EACA", 
    "wiggleCircularStart": "U+EAC4", 
    "wiggleGlissando": "U+EAAF", 
    "wiggleGlissandoGroup1": "U+EABD", 
    "wiggleGlissandoGroup2": "U+EABE", 
    "wiggleGlissandoGroup3": "U+EABF", 
    "wiggleRandom1": "U+EAF0", 
    "wiggleRandom2": "U+EAF1", 
    "wiggleRandom3": "U+EAF2", 
    "wiggleRandom4": "U+EAF3", 
    "wiggleSawtooth": "U+EABB", 
    "wiggleSawtoothNarrow": "U+EABA", 
    "wiggleSawtoothWide": "U+EABC", 
    "wiggleSquareWave": "U+EAB8", 
    "wiggleSquareWaveNarrow": "U+EAB7", 
    "wiggleSquareWaveWide": "U+EAB9", 
    "wiggleTrill": "U+EAA4", 
    "wiggleTrillFast": "U+EAA3", 
    "wiggleTrillFaster": "U+EAA2", 
    "wiggleTrillFasterStill": "U+EAA1", 
    "wiggleTrillFastest": "U+EAA0", 
    "wiggleTrillSlow": "U+EAA5", 
    "wiggleTrillSlower": "U+EAA6", 
    "wiggleTrillSlowerStill": "U+EAA7", 
    "wiggleTrillSlowest": "U+EAA8", 
    "wiggleVIbratoLargestSlower": "U+EAEE", 
    "wiggleVIbratoMediumSlower": "U+EAE0", 
    "wiggleVibrato": "U+EAB0", 
    "wiggleVibratoLargeFast": "U+EAE5", 
    "wiggleVibratoLargeFaster": "U+EAE4", 
    "wiggleVibratoLargeFasterStill": "U+EAE3", 
    "wiggleVibratoLargeFastest": "U+EAE2", 
    "wiggleVibratoLargeSlow": "U+EAE6", 
    "wiggleVibratoLargeSlower": "U+EAE7", 
    "wiggleVibratoLargeSlowest": "U+EAE8", 
    "wiggleVibratoLargestFast": "U+EAEC", 
    "wiggleVibratoLargestFaster": "U+EAEB", 
    "wiggleVibratoLargestFasterStill": "U+EAEA", 
    "wiggleVibratoLargestFastest": "U+EAE9", 
    "wiggleVibratoLargestSlow": "U+EAED", 
    "wiggleVibratoLargestSlowest": "U+EAEF", 
    "wiggleVibratoMediumFast": "U+EADE", 
    "wiggleVibratoMediumFaster": "U+EADD", 
    "wiggleVibratoMediumFasterStill": "U+EADC", 
    "wiggleVibratoMediumFastest": "U+EADB", 
    "wiggleVibratoMediumSlow": "U+EADF", 
    "wiggleVibratoMediumSlowest": "U+EAE1", 
    "wiggleVibratoSmallFast": "U+EAD7", 
    "wiggleVibratoSmallFaster": "U+EAD6", 
    "wiggleVibratoSmallFasterStill": "U+EAD5", 
    "wiggleVibratoSmallFastest": "U+EAD4", 
    "wiggleVibratoSmallSlow": "U+EAD8", 
    "wiggleVibratoSmallSlower": "U+EAD9", 
    "wiggleVibratoSmallSlowest": "U+EADA", 
    "wiggleVibratoSmallestFast": "U+EAD0", 
    "wiggleVibratoSmallestFaster": "U+EACF", 
    "wiggleVibratoSmallestFasterStill": "U+EACE", 
    "wiggleVibratoSmallestFastest": "U+EACD", 
    "wiggleVibratoSmallestSlow": "U+EAD1", 
    "wiggleVibratoSmallestSlower": "U+EAD2", 
    "wiggleVibratoSmallestSlowest": "U+EAD3", 
    "wiggleVibratoStart": "U+EACC", 
    "wiggleVibratoWide": "U+EAB1", 
    "wiggleWavy": "U+EAB5", 
    "wiggleWavyNarrow": "U+EAB4", 
    "wiggleWavyWide": "U+EAB6", 
    "windClosedHole": "U+E5F4", 
    "windFlatEmbouchure": "U+E5FB", 
    "windHalfClosedHole1": "U+E5F6", 
    "windHalfClosedHole2": "U+E5F7", 
    "windHalfClosedHole3": "U+E5F8", 
    "windLessRelaxedEmbouchure": "U+E5FE", 
    "windLessTightEmbouchure": "U+E600", 
    "windMultiphonicsBlackStem": "U+E607", 
    "windMultiphonicsBlackWhiteStem": "U+E609", 
    "windMultiphonicsWhiteStem": "U+E608", 
    "windOpenHole": "U+E5F9", 
    "windReedPositionIn": "U+E606", 
    "windReedPositionNormal": "U+E604", 
    "windReedPositionOut": "U+E605", 
    "windRelaxedEmbouchure": "U+E5FD", 
    "windSharpEmbouchure": "U+E5FC", 
    "windStrongAirPressure": "U+E603", 
    "windThreeQuartersClosedHole": "U+E5F5", 
    "windTightEmbouchure": "U+E5FF", 
    "windTrillKey": "U+E5FA", 
    "windVeryTightEmbouchure": "U+E601", 
    "windWeakAirPressure": "U+E602"
}

},{}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/hash.js":[function(require,module,exports){
function hash(str) {
    "use strict";
    var hash = 0;
    var i = 0;
    var chr = 0;
    var len;
    if (str.length === 0) {
        return hash;
    }
    for (i = 0, len = str.length; i < len; i++) {
        chr = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0;
    }
    return hash;
}
;
module.exports = hash;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/renderUtil.js":[function(require,module,exports){
exports.rastalToHeight = [
    9.2,
    7.9,
    7.4,
    7,
    6.5,
    6,
    5.5,
    4.8,
    3.7
];
exports.pageSizes = [
    {
        name: "U.S. Letter",
        lilypondName: "letter",
        width: 215.9,
        height: 279.4,
        unit: "mm"
    },
    {
        name: "U.S. Legal",
        lilypondName: "legal",
        width: 215.9,
        height: 355.6,
        unit: "mm"
    },
    {
        name: "ISO A4",
        lilypondName: "a4",
        width: 210,
        height: 297,
        unit: "mm"
    },
    {
        name: "ISO B4",
        lilypondName: "b4",
        width: 250,
        height: 353,
        unit: "mm"
    },
    {
        name: "ISO A3",
        lilypondName: "a3",
        width: 297,
        height: 420,
        unit: "mm"
    },
    {
        name: "Print",
        lilypondName: "arch a",
        width: 229,
        height: 305,
        unit: "mm"
    },
    {
        name: "Choral",
        lilypondName: "choral",
        width: 178,
        height: 254,
        unit: "mm"
    },
    {
        name: "Marching Band",
        lilypondName: "marching",
        width: 133,
        height: 170,
        unit: "mm"
    }
];
function defaultPageSize() {
    "use strict";
    return exports.pageSizes[0];
}
exports.defaultPageSize = defaultPageSize;
;
exports.defaultIndent = 15;
exports.defaultMargins = {
    top: 15.25,
    right: 15.25,
    bottom: 15.25,
    left: 15.25
};
exports.defaultStaveHeight = 6.25;
exports.lilypondSizes = {
    "choral": {
        width: 178,
        height: 254,
        unit: "mm"
    },
    "marching": {
        width: 133,
        height: 170,
        unit: "mm"
    },
    "a10": {
        width: 26,
        height: 37,
        unit: "mm"
    },
    "a9": {
        width: 37,
        height: 52,
        unit: "mm"
    },
    "a8": {
        width: 52,
        height: 74,
        unit: "mm"
    },
    "a7": {
        width: 74,
        height: 105,
        unit: "mm"
    },
    "a6": {
        width: 105,
        height: 148,
        unit: "mm"
    },
    "a5": {
        width: 148,
        height: 210,
        unit: "mm"
    },
    "a4": {
        width: 210,
        height: 297,
        unit: "mm"
    },
    "a3": {
        width: 297,
        height: 420,
        unit: "mm"
    },
    "a2": {
        width: 420,
        height: 594,
        unit: "mm"
    },
    "a1": {
        width: 594,
        height: 841,
        unit: "mm"
    },
    "a0": {
        width: 841,
        height: 1189,
        unit: "mm"
    },
    "b10": {
        width: 31,
        height: 44,
        unit: "mm"
    },
    "b9": {
        width: 44,
        height: 62,
        unit: "mm"
    },
    "b8": {
        width: 62,
        height: 88,
        unit: "mm"
    },
    "b7": {
        width: 88,
        height: 125,
        unit: "mm"
    },
    "b6": {
        width: 125,
        height: 176,
        unit: "mm"
    },
    "b5": {
        width: 176,
        height: 250,
        unit: "mm"
    },
    "b4": {
        width: 250,
        height: 353,
        unit: "mm"
    },
    "b3": {
        width: 353,
        height: 500,
        unit: "mm"
    },
    "b2": {
        width: 500,
        height: 707,
        unit: "mm"
    },
    "b1": {
        width: 707,
        height: 1000,
        unit: "mm"
    },
    "b0": {
        width: 1000,
        height: 1414,
        unit: "mm"
    },
    "4a0": {
        width: 1682,
        height: 2378,
        unit: "mm"
    },
    "2a0": {
        width: 1189,
        height: 1682,
        unit: "mm"
    },
    "c10": {
        width: 28,
        height: 40,
        unit: "mm"
    },
    "c9": {
        width: 40,
        height: 57,
        unit: "mm"
    },
    "c8": {
        width: 57,
        height: 81,
        unit: "mm"
    },
    "c7": {
        width: 81,
        height: 114,
        unit: "mm"
    },
    "c6": {
        width: 114,
        height: 162,
        unit: "mm"
    },
    "c5": {
        width: 162,
        height: 229,
        unit: "mm"
    },
    "c4": {
        width: 229,
        height: 324,
        unit: "mm"
    },
    "c3": {
        width: 324,
        height: 458,
        unit: "mm"
    },
    "c2": {
        width: 458,
        height: 648,
        unit: "mm"
    },
    "c1": {
        width: 648,
        height: 917,
        unit: "mm"
    },
    "c0": {
        width: 917,
        height: 1297,
        unit: "mm"
    },
    "junior-legal": {
        width: 8.0,
        height: 5.0,
        unit: "in"
    },
    "legal": {
        width: 8.5,
        height: 14.0,
        unit: "in"
    },
    "ledger": {
        width: 17.0,
        height: 11.0,
        unit: "in"
    },
    "letter": {
        width: 8.5,
        height: 11.0,
        unit: "in"
    },
    "tabloid": {
        width: 11.0,
        height: 17.0,
        unit: "in"
    },
    "11x17": {
        width: 11.0,
        height: 17.0,
        unit: "in"
    },
    "17x11": {
        width: 17.0,
        height: 11.0,
        unit: "in"
    },
    "government-letter": {
        width: 8,
        height: 10.5,
        unit: "in"
    },
    "government-legal": {
        width: 8.5,
        height: 13.0,
        unit: "in"
    },
    "philippine-legal": {
        width: 8.5,
        height: 13.0,
        unit: "in"
    },
    "ansi a": {
        width: 8.5,
        height: 11.0,
        unit: "in"
    },
    "ansi b": {
        width: 17.0,
        height: 11.0,
        unit: "in"
    },
    "ansi c": {
        width: 17.0,
        height: 22.0,
        unit: "in"
    },
    "ansi d": {
        width: 22.0,
        height: 34.0,
        unit: "in"
    },
    "ansi e": {
        width: 34.0,
        height: 44.0,
        unit: "in"
    },
    "engineering f": {
        width: 28.0,
        height: 40.0,
        unit: "in"
    },
    "arch a": {
        width: 9.0,
        height: 12.0,
        unit: "in"
    },
    "arch b": {
        width: 12.0,
        height: 18.0,
        unit: "in"
    },
    "arch c": {
        width: 18.0,
        height: 24.0,
        unit: "in"
    },
    "arch d": {
        width: 24.0,
        height: 36.0,
        unit: "in"
    },
    "arch e": {
        width: 36.0,
        height: 48.0,
        unit: "in"
    },
    "arch e1": {
        width: 30.0,
        height: 42.0,
        unit: "in"
    },
    "statement": {
        width: 5.5,
        height: 8.5,
        unit: "in"
    },
    "half letter": {
        width: 5.5,
        height: 8.5,
        unit: "in"
    },
    "quarto": {
        width: 8.0,
        height: 10.0,
        unit: "in"
    },
    "octavo": {
        width: 6.75,
        height: 10.5,
        unit: "in"
    },
    "executive": {
        width: 7.25,
        height: 10.5,
        unit: "in"
    },
    "monarch": {
        width: 7.25,
        height: 10.5,
        unit: "in"
    },
    "foolscap": {
        width: 8.27,
        height: 13.0,
        unit: "in"
    },
    "folio": {
        width: 8.27,
        height: 13.0,
        unit: "in"
    },
    "super-b": {
        width: 13.0,
        height: 19.0,
        unit: "in"
    },
    "post": {
        width: 15.5,
        height: 19.5,
        unit: "in"
    },
    "crown": {
        width: 15.0,
        height: 20.0,
        unit: "in"
    },
    "large post": {
        width: 16.5,
        height: 21.0,
        unit: "in"
    },
    "demy": {
        width: 17.5,
        height: 22.5,
        unit: "in"
    },
    "medium": {
        width: 18.0,
        height: 23.0,
        unit: "in"
    },
    "broadsheet": {
        width: 18.0,
        height: 24.0,
        unit: "in"
    },
    "royal": {
        width: 20.0,
        height: 25.0,
        unit: "in"
    },
    "elephant": {
        width: 23.0,
        height: 28.0,
        unit: "in"
    },
    "double demy": {
        width: 22.5,
        height: 35.0,
        unit: "in"
    },
    "quad demy": {
        width: 35.0,
        height: 45.0,
        unit: "in"
    },
    "atlas": {
        width: 26.0,
        height: 34.0,
        unit: "in"
    },
    "imperial": {
        width: 22.0,
        height: 30.0,
        unit: "in"
    },
    "antiquarian": {
        width: 31.0,
        height: 53.0,
        unit: "in"
    },
    "pa0": {
        width: 840,
        height: 1120,
        unit: "mm"
    },
    "pa1": {
        width: 560,
        height: 840,
        unit: "mm"
    },
    "pa2": {
        width: 420,
        height: 560,
        unit: "mm"
    },
    "pa3": {
        width: 280,
        height: 420,
        unit: "mm"
    },
    "pa4": {
        width: 210,
        height: 280,
        unit: "mm"
    },
    "pa5": {
        width: 140,
        height: 210,
        unit: "mm"
    },
    "pa6": {
        width: 105,
        height: 140,
        unit: "mm"
    },
    "pa7": {
        width: 70,
        height: 105,
        unit: "mm"
    },
    "pa8": {
        width: 52,
        height: 70,
        unit: "mm"
    },
    "pa9": {
        width: 35,
        height: 52,
        unit: "mm"
    },
    "pa10": {
        width: 26,
        height: 35,
        unit: "mm"
    },
    "f4": {
        width: 210,
        height: 330,
        unit: "mm"
    },
    "a8landscape": {
        width: 74,
        height: 52,
        unit: "mm"
    }
};
function mmToTenths(scaling40, mm) {
    "use strict";
    return mm / scaling40 * 40;
}
exports.mmToTenths = mmToTenths;
function cssSizeToTenths(scaling40, css) {
    "use strict";
    var px = NaN;
    switch (true) {
        case !!~css.indexOf("px"):
        case !isNaN(parseFloat(css)):
            px = parseFloat(css.split("px")[0]);
            break;
        case css === "xx-small":
            px = 9;
            break;
        case css === "x-small":
            px = 10;
            break;
        case css === "medium":
            px = 16;
            break;
        case css === "large":
            px = 18;
            break;
        case css === "x-large":
            px = 24;
            break;
        case css === "xx-large":
            px = 32;
            break;
        case css === "small":
        default:
            px = 13;
            break;
    }
    return mmToTenths(scaling40, px * 25.4 / 96);
}
exports.cssSizeToTenths = cssSizeToTenths;
function tenthsToMM(scaling40, tenths) {
    "use strict";
    return scaling40 * tenths / 40;
}
exports.tenthsToMM = tenthsToMM;
exports.ptPerMM = 2.842;
exports.mmPerIn = 25.4;
function sigmoid(t) {
    "use strict";
    return 1 / (1 + Math.exp(-t));
}
exports.sigmoid = sigmoid;
exports.V_PADDING = 20;
function getHeaderHeight(header) {
    "use strict";
    var height = 0;
    if (header.title) {
        height += 2;
    }
    if (header.composer) {
        height += 0.75;
    }
    return height;
}
exports.getHeaderHeight = getHeaderHeight;
exports.staveSeperation = 3.24;
exports.useGL = false;

},{}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_accidental.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var Glyph = require("./_glyph");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Accidental = (function (_super) {
    __extends(Accidental, _super);
    function Accidental() {
        _super.apply(this, arguments);
    }
    Accidental.prototype.render = function () {
        return React.createElement(Glyph.Component, { x: this.props.x, y: this.props.y - (this.props.line - 3) * 10, fill: this.props.stroke, opacity: this.props.opacity, glyphName: this.props.accidental, "selection-info": "accidental-" + this.props.idx });
    };
    return Accidental;
})(TypedReact.Component);
var Accidental;
(function (Accidental) {
    "use strict";
    Accidental.Component = TypedReact.createClass(Accidental, [PureRenderMixin]);
})(Accidental || (Accidental = {}));
module.exports = Accidental;

},{"./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_barNumber.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var BarNumber = (function (_super) {
    __extends(BarNumber, _super);
    function BarNumber() {
        _super.apply(this, arguments);
    }
    BarNumber.prototype.render = function () {
        return React.createElement("text", { x: this.props.x, y: this.props.y, fontSize: 24, className: "bn_" }, this.props.barNumber);
    };
    return BarNumber;
})(TypedReact.Component);
;
var BarNumber;
(function (BarNumber) {
    "use strict";
    BarNumber.Component = TypedReact.createClass(BarNumber, [PureRenderMixin]);
})(BarNumber || (BarNumber = {}));
module.exports = BarNumber;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_beam.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var C = require("../stores/contracts");
var Glyph = require("./_glyph");
var getFontOffset = require("./_getFontOffset");
var Beam = (function (_super) {
    __extends(Beam, _super);
    function Beam() {
        _super.apply(this, arguments);
        this.getFontOffset = getFontOffset;
    }
    Beam.prototype.render = function () {
        var _this = this;
        if (this.props.beams === -1 /* Variable */) {
            var xLow = this._getX1();
            var xHi = this._getX2();
            return React.createElement("g", null, _.map(this.props.variableBeams, function (beams, idx) {
                if (idx === 0) {
                    return null;
                }
                return _.times(beams, function (beam) {
                    var x1;
                    var x2 = _this._withXOffset(_this.props.variableX[idx]);
                    if (_this.props.variableBeams[idx - 1] <= beam) {
                        if (_this.props.variableX[idx + 1] && _this.props.variableBeams[idx + 1] === beams) {
                            return null;
                        }
                        x1 = _this._withXOffset((_this.props.variableX[idx - 1] + _this.props.variableX[idx] * 3) * 10);
                    }
                    else {
                        x1 = _this._withXOffset(_this.props.variableX[idx - 1]);
                    }
                    return React.DOM.polygon({
                        key: idx + "_" + beam,
                        points: x1 + "," + _this._getYVar(0, beam, (x1 - xLow) / (xHi - xLow)) + " " + x2 + "," + _this._getYVar(0, beam, (x2 - xLow) / (xHi - xLow)) + " " + x2 + "," + _this._getYVar(1, beam, (x2 - xLow) / (xHi - xLow)) + " " + x1 + "," + _this._getYVar(1, beam, (x1 - xLow) / (xHi - xLow)),
                        stroke: _this.props.stroke,
                        fill: _this.props.stroke,
                        strokeWidth: 0
                    });
                });
            }), this._tuplet());
        }
        else {
            return React.createElement("g", null, _.times(this.props.beams, function (idx) { return React.DOM.polygon({
                key: "" + idx,
                points: _this._getX1() + "," + _this._getY1(0, idx) + " " + _this._getX2() + "," + _this._getY2(0, idx) + " " + _this._getX2() + "," + _this._getY2(1, idx) + " " + _this._getX1() + "," + _this._getY1(1, idx),
                stroke: _this.props.stroke,
                fill: _this.props.stroke,
                strokeWidth: 0
            }); }), this._tuplet());
        }
    };
    Beam.prototype.getLineXOffset = function () {
        return this.direction() * -this.props.stemWidth / 2;
    };
    Beam.prototype.direction = function () {
        return this.props.direction;
    };
    Beam.prototype._withXOffset = function (x) {
        return x + this.getFontOffset("noteheadBlack")[0] * 10 + this.getLineXOffset();
    };
    Beam.prototype._getX1 = function () {
        return this._withXOffset(this.props.x);
    };
    Beam.prototype._getX2 = function () {
        return this._withXOffset(this.props.x + this.props.width);
    };
    Beam.prototype._getY1 = function (incl, idx) {
        return this.props.y - this._getYOffset() - this.direction() * this.getFontOffset("noteheadBlack")[1] * 10 - (this.props.line1 - 3) * 10 + this.direction() * idx * 8.8 + (incl || 0) * (C.SMuFL.bravuraMetadata.engravingDefaults.beamThickness * 10);
    };
    Beam.prototype._getY2 = function (incl, idx) {
        return this.props.y - this._getYOffset() - this.direction() * this.getFontOffset("noteheadBlack")[1] * 10 - (this.props.line2 - 3) * 10 + this.direction() * idx * 8.8 + (incl || 0) * (C.SMuFL.bravuraMetadata.engravingDefaults.beamThickness * 10);
    };
    Beam.prototype._getYVar = function (incl, idx, percent) {
        var y1 = this._getY1(incl, idx);
        var y2 = this._getY2(incl, idx);
        return (1 - percent) * y1 + percent * y2;
    };
    Beam.prototype._getYOffset = function () {
        if (this.direction() === -1) {
            return 1;
        }
        return 0.2;
    };
    Beam.prototype._tuplet = function () {
        if (!this.props.tuplet) {
            return null;
        }
        else {
            var offset = this._getX2() - this._getX1();
            var y = (this._getY1(1, this.props.beams - 1) + this._getY2(1, this.props.beams - 1)) / 2 - (4 + 8 * this.props.beams) * this.direction() + 5.2;
            return React.createElement(Glyph.Component, { "selection-info": "beamTuplet", fill: this.props.tupletsTemporary ? "#A5A5A5" : "#000000", glyphName: "tuplet3", x: this.props.x + offset / 2, y: y });
        }
    };
    return Beam;
})(TypedReact.Component);
;
var Beam;
(function (Beam) {
    "use strict";
    Beam.Component = TypedReact.createClass(Beam, [PureRenderMixin]);
})(Beam || (Beam = {}));
module.exports = Beam;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./_getFontOffset":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_getFontOffset.js","./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_bezier.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Bezier = (function (_super) {
    __extends(Bezier, _super);
    function Bezier() {
        _super.apply(this, arguments);
    }
    Bezier.prototype.render = function () {
        return React.DOM.path({
            d: ("M" + this.props.x1 + "," + this.props.y1 + "C" + this.props.x2 + "," + this.props.y2 + " " + this.props.x3 + "," + this.props.y3 + " " + this.props.x4 + "," + this.props.y4 + " " + "C" + this.props.x5 + "," + this.props.y5 + " " + this.props.x6 + "," + this.props.y6 + " " + this.props.x1 + "," + this.props.y1),
            fill: this.props.fill,
            strokeWidth: this.props.strokeWidth,
            stroke: this.props.stroke
        });
    };
    return Bezier;
})(TypedReact.Component);
var Bezier;
(function (Bezier) {
    "use strict";
    Bezier.Component = TypedReact.createClass(Bezier, [PureRenderMixin]);
})(Bezier || (Bezier = {}));
module.exports = Bezier;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_dot.js":[function(require,module,exports){
(function (global){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Dot = (function (_super) {
    __extends(Dot, _super);
    function Dot() {
        _super.apply(this, arguments);
    }
    Dot.prototype.render = function () {
        return React.DOM.g(null, React.DOM.circle({
            "data-selection-info": "dotted",
            cx: (this.cx()),
            cy: (this.cy()),
            fill: this.props.stroke,
            r: (this.props.radius)
        }), global.isChoreServer ? null : React.DOM.rect({
            "data-selection-info": "dotted",
            width: 3,
            height: 3,
            x: (this.cx() - 4),
            y: (this.cy() - 4),
            fill: "transparent",
            className: "mn_handle"
        }));
    };
    Dot.prototype.cyOffset = function () {
        return ((this.props.line * 2) % 2) ? 0 : 5;
    };
    Dot.prototype.cx = function () {
        return this.props.x + 18 + 6 * (this.props.idx);
    };
    Dot.prototype.cy = function () {
        return this.props.y - (this.props.line - 3) * 10 - this.cyOffset();
    };
    return Dot;
})(TypedReact.Component);
var Dot;
(function (Dot) {
    "use strict";
    Dot.Component = TypedReact.createClass(Dot, [PureRenderMixin]);
})(Dot || (Dot = {}));
module.exports = Dot;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_flag.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var assert = require("assert");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Glyph = require("./_glyph");
var getFontOffset = require("./_getFontOffset");
var Flag = (function (_super) {
    __extends(Flag, _super);
    function Flag() {
        _super.apply(this, arguments);
        this.getFontOffset = getFontOffset;
    }
    Flag.prototype.render = function () {
        var fontOffset = this.getFontOffset(this.glyphName());
        var noteOffset = this.getFontOffset();
        return React.createElement(Glyph.Component, { x: this.props.x + fontOffset[0] * 10 + ((this.props.direction === 1) ? noteOffset[0] * 10 - this.props.stemWidth : 0), y: this.props.y - (this.props.line - 3) * 10 - noteOffset[1] * 10 - this.direction() * this.props.stemHeight, fill: this.props.stroke, glyphName: this.glyphName() });
    };
    Flag.prototype.directionString = function () {
        if (this.direction() === 1) {
            return "Up";
        }
        else if (this.direction() === -1) {
            return "Down";
        }
        assert(false, "Invalid direction");
    };
    Flag.prototype.direction = function () {
        return this.props.direction;
    };
    Flag.prototype.glyphName = function () {
        return this.props.flag + this.directionString();
    };
    Flag.prototype.getDefaultProps = function () {
        return {
            x: 0,
            y: 0,
            line: 3
        };
    };
    return Flag;
})(TypedReact.Component);
var Flag;
(function (Flag) {
    "use strict";
    Flag.Component = TypedReact.createClass(Flag, [PureRenderMixin]);
    ;
})(Flag || (Flag = {}));
module.exports = Flag;

},{"./_getFontOffset":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_getFontOffset.js","./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_getFontOffset.js":[function(require,module,exports){
var _ = require("lodash");
var assert = require("assert");
var C = require("../stores/contracts");
var getAnchor = _.memoize(function (notehead) { return C.SMuFL.bravuraMetadata.glyphsWithAnchors[notehead]; });
function getFontOffset(notehead, directionMult) {
    "use strict";
    notehead = notehead || this.props.notehead;
    var dm = directionMult || 1;
    var anchors = getAnchor(notehead);
    switch (true) {
        case !anchors:
            return [0, 0];
        case this.direction() * dm === 1:
            return anchors.stemUpSE || anchors.stemUpNW;
        case this.direction() * dm === -1:
            return anchors.stemDownNW || anchors.stemDownSW;
        default:
            assert(false, "Invalid direction");
    }
}
module.exports = getFontOffset;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js":[function(require,module,exports){
(function (global){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var assert = require("assert");
var C = require("../stores/contracts");
var Glyph = (function (_super) {
    __extends(Glyph, _super);
    function Glyph() {
        _super.apply(this, arguments);
    }
    Glyph.prototype.render = function () {
        var px = this.props.x;
        var py = this.props.y;
        if (this.props.glyphName.substr(0, 2) === "fa") {
            assert(this.props.code);
            return React.DOM.text({
                x: px,
                y: py,
                fill: this.props.fill,
                fillOpacity: this.props.opacity,
                strokeOpacity: this.props.opacity,
                transform: this.props.transform,
                style: { fontSize: this.props.scale ? this.props.scale + "em" : undefined },
                className: "fa"
            }, this.props.code);
        }
        else {
            assert(!this.props.code);
        }
        var text = React.DOM.text({
            x: px,
            y: py,
            fill: this.props.fill,
            fillOpacity: this.props.opacity,
            strokeOpacity: this.props.opacity,
            transform: this.props.transform,
            fontSize: 40,
            className: "mn_"
        }, C.SMuFL.getGlyphCode(this.props.glyphName));
        if (!this.props["selection-info"] || global.isChoreServer) {
            return text;
        }
        else {
            return React.DOM.g(null, text, React.DOM.rect({
                "data-selection-info": this.props["selection-info"],
                width: 4,
                height: 5,
                x: (this.props.x - 1.2),
                y: (this.props.y - 2.5),
                fill: "transparent",
                className: "mn_handle"
            }));
        }
    };
    return Glyph;
})(TypedReact.Component);
var Glyph;
(function (Glyph) {
    "use strict";
    Glyph.Component = TypedReact.createClass(Glyph, [PureRenderMixin]);
})(Glyph || (Glyph = {}));
module.exports = Glyph;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_header.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var C = require("../stores/contracts");
var Header = (function (_super) {
    __extends(Header, _super);
    function Header() {
        _super.apply(this, arguments);
        this._uuid = C.generateUUID();
        this._listeners = [];
    }
    Header.prototype.render = function () {
        var _this = this;
        this._editNodes = [];
        var model = this.props.model;
        var editMode = this.getEditMode();
        var style = {
            fontSize: this.props.fontSize + "px"
        };
        return React.DOM.g({ style: style }, model.credits.map(function (credit, idx) { return React.DOM.g({ key: "w_" + idx }, credit.creditWords.map((editMode ? _this.getEditNode : getViewNode).bind(_this, _this._editNodes, credit))); }));
        function toCSS(justification) {
            switch (justification) {
                case 0 /* Left */:
                    return "start";
                case 2 /* Center */:
                    return "middle";
                case 1 /* Right */:
                    return "end";
            }
        }
        function getViewNode(editNodes, credit, words, idx) {
            editNodes[idx] = null;
            return React.DOM.text({
                key: "credit_" + idx,
                className: "tn_",
                "data-selection-info": "header_" + credit.creditTypes.join("_") + "_" + idx,
                style: {
                    textAnchor: toCSS(words.justify)
                },
                x: (words.defaultX + (words.relativeX || 0)),
                y: (words.defaultY + (words.relativeY || 0)),
                fontSize: C.renderUtil.cssSizeToTenths(this.props.fontSize, words.fontSize)
            }, words.words);
        }
    };
    Header.prototype.getEditMode = function () {
        return null;
    };
    Header.prototype.getEditNode = function (editNodes, credit, words, idx) {
        return null;
    };
    Header.prototype.componentDidMount = function () {
        this._renderForeigns();
    };
    Header.prototype.componentDidUpdate = function () {
        this._renderForeigns();
    };
    Header.prototype.componentWillReceiveProps = function (nextProps) {
        this._removeOldForeigns(nextProps.model.credits.length);
    };
    Header.prototype.componentWillUnmount = function () {
        this._removeOldForeigns(0);
    };
    Header.prototype._renderForeigns = function () {
        var _this = this;
        for (var i = 0; i < this._editNodes.length; ++i) {
            var node = this._editNodes[i];
            if (node) {
                var words = node.words;
                React.render(React.DOM.input({
                    type: "text",
                    className: "form-control",
                    id: "newsong_title",
                    placeholder: "",
                    onChange: function (event) { return _this.setState({
                        composer: event.target.value
                    }); },
                    value: words.words
                }), this.refs[node.ref].getDOMNode().firstElementChild.firstElementChild);
            }
        }
    };
    Header.prototype._removeOldForeigns = function (i) {
        for (; i < this._editNodes.length; ++i) {
            var node = this._editNodes[i];
            if (node) {
                React.unmountComponentAtNode(this.refs[node.ref].getDOMNode().firstElementChild.firstElementChild);
            }
        }
    };
    Header.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var oldHash = this._hash;
        this._hash = C.JSONx.hash(nextProps);
        return oldHash !== this._hash;
    };
    return Header;
})(TypedReact.Component);
var Header;
(function (Header) {
    "use strict";
    Header.Component = TypedReact.createClass(Header);
})(Header || (Header = {}));
module.exports = Header;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_ledgerLine.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var C = require("../stores/contracts");
var Line = require("./_line");
var LedgerLine = (function (_super) {
    __extends(LedgerLine, _super);
    function LedgerLine() {
        _super.apply(this, arguments);
    }
    LedgerLine.prototype.render = function () {
        var west = C.SMuFL.bravuraBBoxes[this.props.notehead][3];
        var east = C.SMuFL.bravuraBBoxes[this.props.notehead][0];
        var xOffset = (east - west) * 10;
        return React.createElement(Line.Component, { x1: this.props.x - 3.2, x2: this.props.x + xOffset - 0.2, y1: this.props.y - (this.props.line - 3) * 10, y2: this.props.y - (this.props.line - 3) * 10, victoriaXStrokeWidthFactor: 0, stroke: "#000000", strokeWidth: 2.2 });
    };
    return LedgerLine;
})(TypedReact.Component);
var LedgerLine;
(function (LedgerLine) {
    "use strict";
    LedgerLine.Component = TypedReact.createClass(LedgerLine, [PureRenderMixin]);
})(LedgerLine || (LedgerLine = {}));
module.exports = LedgerLine;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./_line":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_line.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_line.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Line = (function (_super) {
    __extends(Line, _super);
    function Line() {
        _super.apply(this, arguments);
    }
    Line.prototype.render = function () {
        return React.DOM.line({
            className: this.props.className,
            x1: (this.props.x1),
            x2: (this.props.x2),
            y1: (this.props.y1),
            y2: (this.props.y2),
            stroke: this.props.stroke,
            strokeWidth: (this.props.strokeWidth)
        });
    };
    return Line;
})(TypedReact.Component);
var Line;
(function (Line) {
    "use strict";
    Line.Component = TypedReact.createClass(Line, [PureRenderMixin]);
})(Line || (Line = {}));
module.exports = Line;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_note.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var assert = require("assert");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Accidental = require("./_accidental");
var Dot = require("./_dot");
var Flag = require("./_flag");
var LedgerLine = require("./_ledgerLine");
var NoteHead = require("./_noteHead");
var NoteStem = require("./_noteStem");
var Note = (function (_super) {
    __extends(Note, _super);
    function Note() {
        _super.apply(this, arguments);
    }
    Note.prototype.render = function () {
        var _this = this;
        var direction = this.direction();
        var lines = this.getLines();
        var linesObj = {};
        var linesOffset = {};
        var i;
        for (i = 0; i < lines.length; ++i) {
            linesObj[lines[i]] = true;
        }
        for (i = 0; i < lines.length; ++i) {
            assert(!isNaN(lines[i]));
            if (linesObj[lines[i] - 0.5]) {
                var x = 0.5;
                for (var j = lines[i] - 1; linesObj[j]; j -= 0.5) {
                    if (x === 0.5) {
                        x = 0;
                    }
                    else {
                        x = 0.5;
                    }
                }
                if (direction === 1) {
                    linesOffset[lines[i] + 0.5 - x] = 1.4 * 4 * 2;
                    linesOffset[lines[i] - x] = 0;
                }
                else {
                    linesOffset[lines[i] + 0.5 - x] = 0;
                    linesOffset[lines[i] - x] = -1.4 * 4 * 2;
                }
            }
        }
        return React.createElement("g", null, _.map(lines, function (line, idx) { return React.createElement("g", { key: "_" + idx }, React.createElement(NoteHead.Component, { key: "_0", x: _this.props.x + (linesOffset[line] || 0), y: _this.props.y, line: line, stroke: _this.props.strokes[idx], notehead: _this.props.notehead }), _this.props.dotted ? _.times(_this.props.dotted, function (idx) { return React.createElement(Dot.Component, { idx: idx, key: "_1_" + idx, stroke: _this.props.strokes[0], radius: 2.4, x: _this.props.x, y: _this.props.y, line: line }); }) : null, _this.props.hasStem && React.createElement(NoteStem.Component, { x: _this.props.x, y: _this.props.y, key: "_2", direction: direction, line: _this.getStartingLine(), stroke: _this.props.secondaryStroke, height: _this.getStemHeight(), notehead: _this.props.notehead }), _this.props.flag && React.createElement(Flag.Component, { key: "_3", x: _this.props.x, y: _this.props.y, line: _this.getStartingLine(), stroke: _this.props.secondaryStroke, stemHeight: _this.getStemHeight(), stemWidth: 1.4, flag: _this.props.flag, notehead: _this.props.notehead, direction: direction }), _this.props.children && _.map(_this.props.children, function (component, idx) {
            component.key = "_4_" + idx;
            component.props.direction = direction;
            component.props.line = _this.getStartingLine();
            component.props.x = _this.props.x;
            component.props.y = _this.props.y;
            component.props.idx = idx;
            component.props.notehead = _this.props.notehead;
            return component;
        }), _this.accidentals(), _this.ledgerLines(), _this.tie()); }));
    };
    Note.prototype.getDefaultProps = function () {
        return {
            x: 0,
            y: 0,
            line: 3,
            dotted: null,
            hasStem: true,
            accidentals: null,
            strokes: ["black"]
        };
    };
    Note.prototype.direction = function () {
        var _this = this;
        if (this.props.direction) {
            return this.props.direction;
        }
        var consider;
        if (this.props.line.length) {
            consider = _.reduce(this.props.line, function (memo, i) { return memo + i / _this.props.line.length; }, 0);
        }
        else {
            consider = this.props.line;
        }
        if (consider > 3) {
            return -1;
        }
        else if (consider <= 3) {
            return 1;
        }
        assert(0);
    };
    Note.prototype.getLines = function () {
        return this.props.line.length ? this.props.line : [this.props.line];
    };
    Note.prototype.getLowestLine = function () {
        return _.reduce(this.getLines(), function (a, b) { return Math.min(a, b); }, 99999);
    };
    Note.prototype.getHighestLine = function () {
        return _.reduce(this.getLines(), function (a, b) { return Math.max(a, b); }, -99999);
    };
    Note.prototype.getStartingLine = function () {
        return this.direction() === 1 ? this.getLowestLine() : this.getHighestLine();
    };
    Note.prototype.getHeightDeterminingLine = function () {
        return this.direction() === 1 ? this.getHighestLine() : this.getLowestLine();
    };
    Note.prototype.getStemHeight = function () {
        if (this.props.stemHeight) {
            return this.props.stemHeight;
        }
        var heightFromOtherNotes = (this.getHighestLine() - this.getLowestLine()) * 10;
        var idealStemHeight = IDEAL_STEM_HEIGHT + heightFromOtherNotes;
        var minStemHeight = MIN_STEM_HEIGHT + heightFromOtherNotes;
        var start = this.getHeightDeterminingLine() * 10;
        var idealExtreme = start + this.direction() * idealStemHeight;
        if (idealExtreme >= 65) {
            return Math.max(minStemHeight, idealStemHeight - (idealExtreme - 65));
        }
        else if (idealExtreme <= -15) {
            return Math.max(minStemHeight, idealStemHeight - (-15 - idealExtreme));
        }
        return 35;
    };
    Note.prototype.isOnLedger = function () {
        var lowest = this.getLowestLine();
        var highest = this.getHighestLine();
        return lowest < 0.5 || highest > 5.5;
    };
    Note.prototype.ledgerLines = function () {
        var _this = this;
        if (!this.isOnLedger()) {
            return false;
        }
        var ret = [];
        var lowest = this.getLowestLine();
        var highest = this.getHighestLine();
        if (lowest < 0.5) {
            ret = ret.concat(_.times(Math.floor(1 - lowest), function (idx) { return React.createElement(LedgerLine.Component, { key: idx + "low", line: -idx, notehead: _this.props.notehead, x: _this.props.x, y: _this.props.y }); }));
        }
        if (highest > 5.5) {
            ret = ret.concat(_.times(Math.floor(highest - 5), function (idx) { return React.createElement(LedgerLine.Component, { key: idx + "high", line: 6 + idx, notehead: _this.props.notehead, x: _this.props.x, y: _this.props.y }); }));
        }
        assert(ret.length);
        return ret;
    };
    Note.prototype.accidentalSpacing = function () {
        if (this.isOnLedger()) {
            return 14.4;
        }
        else {
            return 12;
        }
    };
    Note.prototype.accidentals = function () {
        var _this = this;
        if (this.props.accidentals === null) {
            return false;
        }
        var accidentals = this.props.accidentals;
        accidentals = accidentals.length ? accidentals : [accidentals];
        var l = this.getLines();
        var glyphOffset = 0;
        return _.map(accidentals, function (acc, idx) {
            if (!isNaN(acc)) {
                var glyphName;
                switch (acc) {
                    case 2:
                        glyphName = "accidentalDoubleSharp";
                        glyphOffset = 18;
                        break;
                    case 1:
                        glyphName = "accidentalSharp";
                        break;
                    case 0:
                        glyphName = "accidentalNatural";
                        break;
                    case -1:
                        glyphName = "accidentalFlat";
                        break;
                    case -2:
                        glyphName = "accidentalDoubleFlat";
                        glyphOffset = 18;
                        break;
                    default:
                        assert(0, "Not reached");
                }
                return React.createElement(Accidental.Component, { x: _this.props.x - (glyphOffset || _this.accidentalSpacing()), y: _this.props.y, stroke: _this.props.accStrokes[idx], line: l[idx], key: "acc_" + idx, idx: idx, accidental: glyphName });
            }
            else {
                return null;
            }
        });
    };
    Note.prototype.tie = function () {
        var Slur = require("./slur");
        if (!this.props.tieTo) {
            return null;
        }
        var fullWidth = this.props.tieTo - this.props.x;
        return React.createElement(Slur.Component, { key: 0, spec: {
            direction: -this.direction(),
            x: this.props.x + fullWidth / 8 + 6,
            y: this.props.y,
            lines1: [this.getStartingLine()],
            lines2: [this.getStartingLine()],
            width: fullWidth * 0.75
        } });
    };
    return Note;
})(TypedReact.Component);
;
var IDEAL_STEM_HEIGHT = 35;
var MIN_STEM_HEIGHT = 25;
var Note;
(function (Note) {
    "use strict";
    function getExtremeLine(line, direction) {
        "use strict";
        if (!isNaN(line * 1)) {
            return line * 1;
        }
        else if (direction === 1) {
            return _.reduce(line, function (m, s) { return Math.min(m, s); }, 99999);
        }
        else {
            return _.reduce(line, function (m, s) { return Math.max(m, s); }, -99999);
        }
    }
    Note.getExtremeLine = getExtremeLine;
    ;
    Note.Component = TypedReact.createClass(Note, [PureRenderMixin]);
})(Note || (Note = {}));
module.exports = Note;

},{"./_accidental":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_accidental.js","./_dot":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_dot.js","./_flag":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_flag.js","./_ledgerLine":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_ledgerLine.js","./_noteHead":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_noteHead.js","./_noteStem":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_noteStem.js","./slur":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/slur.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_noteHead.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Glyph = require("./_glyph");
var NoteHead = (function (_super) {
    __extends(NoteHead, _super);
    function NoteHead() {
        _super.apply(this, arguments);
    }
    NoteHead.prototype.render = function () {
        return React.createElement(Glyph.Component, { x: this.props.x, y: this.props.y - (this.props.line - 3) * 10, fill: this.props.stroke, glyphName: this.props.notehead });
    };
    NoteHead.prototype.getDefaultProps = function () {
        return {
            x: 0,
            y: 0,
            line: 3
        };
    };
    return NoteHead;
})(TypedReact.Component);
var NoteHead;
(function (NoteHead) {
    "use strict";
    NoteHead.Component = TypedReact.createClass(NoteHead, [PureRenderMixin]);
})(NoteHead || (NoteHead = {}));
module.exports = NoteHead;

},{"./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_noteNotation.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var C = require("../stores/contracts");
var Glyph = require("./_glyph");
var getFontOffset = require("./_getFontOffset");
var NoteNotation = (function (_super) {
    __extends(NoteNotation, _super);
    function NoteNotation() {
        _super.apply(this, arguments);
        this.getFontOffset = getFontOffset;
    }
    NoteNotation.prototype.render = function () {
        var offset = C.SMuFL.bravuraBBoxes[this.props.notehead][0];
        var start = C.SMuFL.bravuraBBoxes[this.props.notehead][3];
        var o2 = C.SMuFL.bravuraBBoxes[this.glyphName()][3];
        var s2 = C.SMuFL.bravuraBBoxes[this.glyphName()][0];
        return React.createElement(Glyph.Component, { x: this.props.x + this.xOffset() + (offset - start) / 4 / 2 + (o2 - s2) / 4 / 2, y: this.props.y - this.yOffset(), fill: this.glyphIsTemporary() ? "#A5A5A5" : "#000000", glyphName: this.glyphName(), glyphIsTemporary: this.glyphIsTemporary() });
    };
    NoteNotation.prototype.directionString = function () {
        if (C.SMuFL.bravuraBBoxes[this.notationName()]) {
            return "";
        }
        else if (this.direction() === 1) {
            return "Below";
        }
        else if (this.direction() === -1) {
            return "Above";
        }
    };
    NoteNotation.prototype.shouldBeAboveStaff = function () {
        var above = ["fermata", "breathMark", "caesura", "strings"];
        for (var i = 0; i < above.length; ++i) {
            if (this.notationName().indexOf(above[i]) === 0) {
                return true;
            }
        }
        return false;
    };
    NoteNotation.prototype.shouldBeBelowStaff = function () {
        var below = ["dynamic"];
        for (var i = 0; i < below.length; ++i) {
            if (this.notationName().indexOf(below[i]) === 0) {
                return true;
            }
        }
        return false;
    };
    NoteNotation.prototype.glyphIsTemporary = function () {
        return false;
    };
    NoteNotation.prototype.glyphName = function () {
        return this.notationName() + this.directionString();
    };
    NoteNotation.prototype.notationName = function () {
        return "";
    };
    NoteNotation.prototype.direction = function () {
        if (this.shouldBeAboveStaff()) {
            return -1;
        }
        return this.props.direction;
    };
    NoteNotation.prototype.xOffset = function () {
        return 0;
    };
    NoteNotation.prototype.yOffset = function () {
        var m;
        if (this.shouldBeAboveStaff()) {
            m = (6.0 + this.props.idx - 3) / 4;
            if (m + 1.5 <= this.props.line / 4) {
                m = (this.props.line) / 4 + 1.5;
            }
            return m;
        }
        else if (this.shouldBeBelowStaff()) {
            m = (-1.5 + this.props.idx - 3) / 4;
            if (m + 1.5 >= this.props.line / 4) {
                m = (this.props.line) / 4 - 1.5;
            }
            return m;
        }
        if (this.direction() === 1) {
            return (this.props.line - 1.2 - (this.props.line % 1 && this.props.line - 1.2 > 0 ? 0.4 : 0) - this.props.idx - 3) / 4;
        }
        return (this.props.line + 1.2 + (this.props.line % 1 && this.props.line + 1.2 < 5 ? 0.4 : 0) + this.props.idx - 3) / 4;
    };
    return NoteNotation;
})(TypedReact.Component);
var NoteNotation;
(function (NoteNotation) {
    "use strict";
    NoteNotation.Component = TypedReact.createClass(NoteNotation, [PureRenderMixin]);
})(NoteNotation || (NoteNotation = {}));
module.exports = NoteNotation;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./_getFontOffset":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_getFontOffset.js","./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_noteStem.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Line = require("./_line");
var SMuFL = require("../util/SMuFL");
var getFontOffset = require("./_getFontOffset");
var stemThickness = SMuFL.bravuraMetadata.engravingDefaults.stemThickness * 10;
var NoteStem = (function (_super) {
    __extends(NoteStem, _super);
    function NoteStem() {
        _super.apply(this, arguments);
        this.getFontOffset = getFontOffset;
    }
    NoteStem.prototype.render = function () {
        var fontOffset = this.getFontOffset();
        return React.createElement(Line.Component, { x1: this.props.x + fontOffset[0] * 10 + this.lineXOffset(), x2: this.props.x + fontOffset[0] * 10 + this.lineXOffset(), y1: this.props.y - fontOffset[1] * 10 - (this.props.line - 3) * 10, y2: this.props.y - (this.props.line - 3) * 10 - fontOffset[1] * 10 - this.direction() * this.height(), stroke: this.props.stroke, strokeWidth: stemThickness });
    };
    NoteStem.prototype.height = function () {
        return this.props.height;
    };
    NoteStem.prototype.direction = function () {
        return this.props.direction;
    };
    NoteStem.prototype.lineXOffset = function () {
        return this.direction() * -stemThickness / 2;
    };
    NoteStem.prototype.getDefaultProps = function () {
        return {
            x: 0,
            y: 0,
            height: 3.5,
            stroke: "#000000"
        };
    };
    return NoteStem;
})(TypedReact.Component);
var NoteStem;
(function (NoteStem) {
    "use strict";
    NoteStem.Component = TypedReact.createClass(NoteStem, [PureRenderMixin]);
})(NoteStem || (NoteStem = {}));
module.exports = NoteStem;

},{"../util/SMuFL":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/SMuFL.js","./_getFontOffset":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_getFontOffset.js","./_line":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_line.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_rect.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Rect = (function (_super) {
    __extends(Rect, _super);
    function Rect() {
        _super.apply(this, arguments);
    }
    Rect.prototype.render = function () {
        return React.DOM.rect({
            className: this.props.className,
            opacity: this.props.opacity || 1.0,
            x: (this.props.x),
            y: (this.props.y),
            stroke: this.props.stroke,
            fill: this.props.fill,
            height: (this.props.height),
            width: (this.props.width)
        });
    };
    return Rect;
})(TypedReact.Component);
var Rect;
(function (Rect) {
    "use strict";
    Rect.Component = TypedReact.createClass(Rect, [PureRenderMixin]);
})(Rect || (Rect = {}));
module.exports = Rect;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_rest.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var assert = require("assert");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Dot = require("./_dot");
var Glyph = require("./_glyph");
var Rest = (function (_super) {
    __extends(Rest, _super);
    function Rest() {
        _super.apply(this, arguments);
    }
    Rest.prototype.render = function () {
        var _this = this;
        var line = this.props.line;
        assert.deepEqual(line, [3]);
        return React.createElement("g", null, React.createElement(Glyph.Component, { key: "R", x: this.props.x + this.props.spacing, y: this.props.y, fill: this.props.stroke, glyphName: this.props.notehead }), this.props.dotted ? _.times(this.props.dotted, function (idx) { return React.createElement(Dot.Component, { idx: idx, key: idx + "d", radius: 2.4, stroke: _this.props.stroke, x: _this.props.x + _this.props.spacing, y: _this.props.y, line: 3 }); }) : null, this.props.children && _.map(this.props.children, function (element, idx) {
            element.props.direction = _this.direction();
            element.props.line = _this.startingLine();
            element.props.x = _this.props.x;
            element.props.y = _this.props.y;
            element.props.idx = idx;
            element.props.notehead = _this.props.notehead;
            return element;
        }));
    };
    Rest.prototype.direction = function () {
        return 1;
    };
    Rest.prototype.startingLine = function () {
        return 3;
    };
    return Rest;
})(TypedReact.Component);
var Rest;
(function (Rest) {
    "use strict";
    Rest.Component = TypedReact.createClass(Rest, [PureRenderMixin]);
})(Rest || (Rest = {}));
module.exports = Rest;

},{"./_dot":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_dot.js","./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_staveLines.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Line = require("./_line");
var SMuFL = require("../util/SMuFL");
var StaveLines = (function (_super) {
    __extends(StaveLines, _super);
    function StaveLines() {
        _super.apply(this, arguments);
    }
    StaveLines.prototype.render = function () {
        var _this = this;
        return React.createElement("g", null, _.times(5, function (i) { return React.createElement(Line.Component, { key: "staff-" + i, x1: _this.props.x, x2: _this.props.x + _this.props.width, y1: _this.props.y - 10 * (i - 2), y2: _this.props.y - 10 * (i - 2), stroke: "#6A6A6A", victoriaXStrokeWidthFactor: 0, strokeWidth: SMuFL.bravuraMetadata.engravingDefaults.staffLineThickness * 10 }); }));
    };
    return StaveLines;
})(TypedReact.Component);
var StaveLines;
(function (StaveLines) {
    "use strict";
    StaveLines.Component = TypedReact.createClass(StaveLines, [PureRenderMixin]);
})(StaveLines || (StaveLines = {}));
module.exports = StaveLines;

},{"../util/SMuFL":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/SMuFL.js","./_line":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_line.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/barline.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var C = require("../stores/contracts");
var Rect = require("./_rect");
var Line = require("./_line");
var PureModelViewMixin = require("./pureModelViewMixin");
var SMuFL = require("../util/SMuFL");
var Barline = (function (_super) {
    __extends(Barline, _super);
    function Barline() {
        _super.apply(this, arguments);
    }
    Barline.prototype.render = function () {
        var spec = this.props.spec;
        var defaults = SMuFL.bravuraMetadata.engravingDefaults;
        var thickX = spec.x + defaults.barlineSeparation * 10 + defaults.thickBarlineThickness * 10;
        if (spec.barStyle.data === 5 /* LightHeavy */) {
            return React.createElement("g", null, React.createElement(Line.Component, { key: 1, x1: spec.x, x2: spec.x, y1: spec.y - spec.height - spec.yOffset, y2: spec.y + spec.height - spec.yOffset, stroke: spec.barStyle.color, victoriaYStrokeWidthFactor: 0, fill: spec.barStyle.color, strokeWidth: defaults.thinBarlineThickness * 10 }), React.createElement(Line.Component, { key: 2, x1: thickX, x2: thickX, y1: spec.y - spec.height - spec.yOffset, y2: spec.y + spec.height - spec.yOffset, victoriaYStrokeWidthFactor: 0, stroke: spec.barStyle.color, fill: spec.barStyle.color, strokeWidth: defaults.thickBarlineThickness * 10 }), React.createElement(Rect.Component, { key: 3, opacity: 1.0, x: spec.x + defaults.barlineSeparation * 10 + defaults.thickBarlineThickness * 10 + defaults.thinBarlineThickness * 10, y: spec.y - spec.height - 1 - spec.yOffset, stroke: "#FFFFFF", fill: "#FFFFFF", height: spec.height * 2 + 2, width: 4000 }));
        }
        return React.createElement(Line.Component, { x1: spec.x, x2: spec.x, y1: spec.y - spec.height - spec.yOffset, y2: spec.y + spec.height - spec.yOffset, stroke: spec.barStyle.color, fill: spec.barStyle.color, strokeWidth: defaults.thinBarlineThickness * 10 });
    };
    return Barline;
})(TypedReact.Component);
;
var Barline;
(function (Barline) {
    "use strict";
    Barline.Component = TypedReact.createClass(Barline, [PureModelViewMixin]);
})(Barline || (Barline = {}));
module.exports = Barline;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","../util/SMuFL":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/util/SMuFL.js","./_line":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_line.js","./_rect":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_rect.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/beamGroup.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var assert = require("assert");
var Beam = require("./_beam");
var BeamGroupModel = require("../stores/beamGroup");
var C = require("../stores/contracts");
var Note = require("./_note");
var BeamGroup = (function (_super) {
    __extends(BeamGroup, _super);
    function BeamGroup() {
        _super.apply(this, arguments);
    }
    BeamGroup.prototype.render = function () {
        var spec = this.props.spec;
        var Xs = [];
        var Ys = [];
        var lines = [];
        _.each(spec.beam, function (note, idx) {
            Xs.push(note.x);
            Ys.push(note.y);
            lines.push(note.lines);
        });
        var direction = BeamGroupModel.decideDirection(lines[0] || [3], lines[lines.length - 1]);
        var line1 = getExtremeLine(lines[0] || 3, direction);
        var line2 = getExtremeLine(lines[lines.length - 1] || 3, direction);
        var m = spec.beam.length ? 10 * (line2 - line1) / (spec.beam.length - 1) : 0;
        var stemHeight1 = 35;
        var stemHeight2 = 35;
        if (m > 5) {
            stemHeight2 = stemHeight2 - direction * (m - 20) * (spec.beam.length - 1);
            m = 5;
        }
        if (m < -5) {
            stemHeight2 = stemHeight2 - direction * (m + 20) * (spec.beam.length - 1);
            m = -5;
        }
        var dynamicM = m / (Xs[Xs.length - 1] - Xs[0]);
        var b = line1 * 10 + stemHeight1;
        function getSH(direction, idx, line) {
            return (b * direction + (direction === 1 ? 0 : 69) + dynamicM * (Xs[idx] - Xs[0]) * direction) - direction * line * 10;
        }
        _.each(spec.beam, function (note, idx) {
            var sh = getSH(direction, idx, getExtremeLine(note.lines, -direction));
            if (sh < 30) {
                b += direction * (30 - sh);
                m = 0;
            }
            assert(note.strokes);
            var stroke = note.strokes[0];
            if (strokeColor !== stroke && strokeColor) {
                strokeEnabled = false;
            }
            if (!strokeColor) {
                strokeColor = stroke;
            }
        });
        var strokeColor;
        var strokeEnabled = true;
        var durationProps = [];
        _.each(spec.beam, function (note, idx) {
            durationProps.push({
                direction: direction,
                stemHeight: getSH(direction, idx, getExtremeLine(lines[idx], direction)),
                key: null,
                spec: undefined
            });
        });
        var children = spec.generate(durationProps);
        return React.createElement("g", null, React.createElement(Beam.Component, { beams: (spec.beams) || 1 /* One */, variableBeams: spec.variableBeams, variableX: spec.variableBeams ? Xs : null, direction: direction, key: "beam", line1: parseFloat("" + line1) + direction * getSH(direction, 0, line1) / 10, line2: parseFloat("" + line2) + direction * getSH(direction, spec.beam.length - 1, line2) / 10, stemWidth: 1.4, stroke: strokeEnabled ? strokeColor : "#000000", tuplet: spec.tuplet, tupletsTemporary: spec.tupletsTemporary, width: Xs[Xs.length - 1] - Xs[0], x: Xs[0], y: Ys[0] }), children);
    };
    return BeamGroup;
})(TypedReact.Component);
;
var getExtremeLine = Note.getExtremeLine;
var BeamGroup;
(function (BeamGroup) {
    "use strict";
    BeamGroup.Component = TypedReact.createClass(BeamGroup);
})(BeamGroup || (BeamGroup = {}));
module.exports = BeamGroup;

},{"../stores/beamGroup":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/beamGroup.js","../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./_beam":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_beam.js","./_note":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_note.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/begin.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureModelViewMixin = require("./pureModelViewMixin");
var StaveLines = require("./_staveLines");
var BeginView = (function (_super) {
    __extends(BeginView, _super);
    function BeginView() {
        _super.apply(this, arguments);
    }
    BeginView.prototype.render = function () {
        var spec = this.props.spec;
        return React.createElement("g", null, React.createElement(StaveLines.Component, { key: "StaveLines", width: this.props.spec.width, x: spec.x, y: spec.braceY }));
    };
    return BeginView;
})(TypedReact.Component);
;
var BeginView;
(function (BeginView) {
    "use strict";
    BeginView.Component = TypedReact.createClass(BeginView, [PureModelViewMixin]);
})(BeginView || (BeginView = {}));
module.exports = BeginView;

},{"./_staveLines":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_staveLines.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/clef.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var Glyph = require("./_glyph");
var PureModelViewMixin = require("./pureModelViewMixin");
var Clef = (function (_super) {
    __extends(Clef, _super);
    function Clef() {
        _super.apply(this, arguments);
    }
    Clef.prototype.render = function () {
        var spec = this.props.spec;
        var x = spec.x - (spec.isChange ? 0.2 : 0);
        var clef = React.createElement(Glyph.Component, { x: x, y: spec.y - (this.line() - 3) * 10, opacity: this.props.opacity, fill: spec.color, glyphName: this.sign() + (spec.isChange ? "Change" : "") });
        return clef;
    };
    Clef.prototype.sign = function () {
        var clef = this.props.spec.displayedClef;
        return clef.sign.toLowerCase() + "Clef";
    };
    Clef.prototype.line = function () {
        return this.props.spec.displayedClef.line;
    };
    return Clef;
})(TypedReact.Component);
;
var Clef;
(function (Clef) {
    "use strict";
    Clef.Component = TypedReact.createClass(Clef, [PureModelViewMixin]);
})(Clef || (Clef = {}));
module.exports = Clef;

},{"./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/duration.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var assert = require("assert");
var C = require("../stores/contracts");
var DurationModel = require("../stores/duration");
var Note = require("./_note");
var NoteNotation = require("./_noteNotation");
var PureModelViewMixin = require("./pureModelViewMixin");
var Rest = require("./_rest");
var Duration = (function (_super) {
    __extends(Duration, _super);
    function Duration() {
        _super.apply(this, arguments);
    }
    Duration.prototype.render = function () {
        var props = this.props;
        var spec = props.spec;
        assert(spec instanceof DurationModel);
        var notations = _.map(spec.displayNotation || [], function (m, idx) { return React.createElement(NoteNotation.Component, { idx: 1, direction: props.direction, notation: m, key: idx, line: 3, notehead: props.spec.noteheadGlyph, x: NaN, y: NaN }); });
        var zeroOffsetMode = !C.renderUtil.useGL && !spec.isRest && !spec.tie;
        if (spec.isRest) {
            return React.createElement(Rest.Component, { dotted: spec.displayDots, line: [3], key: spec.key, isNote: true, notehead: spec.restHead, spacing: spec.spacing, stroke: spec.color, x: spec.x, y: spec.y }, notations);
        }
        assert(spec.count);
        var note = React.createElement(Note.Component, { accidentals: spec._displayedAccidentals, accStrokes: spec.accStrokes, direction: this.props.direction || spec.direction, dotted: spec.displayDots, flag: spec.flag, hasStem: spec.hasStem, isNote: true, key: spec.key, line: spec.lines, notehead: spec.noteheadGlyph, secondaryStroke: spec.color, stemHeight: this.props.stemHeight, strokes: spec.strokes, tieTo: spec.tieTo && spec.tieTo.x, x: zeroOffsetMode ? 0 : spec.x, y: zeroOffsetMode ? 0 : spec.y }, notations);
        if (zeroOffsetMode) {
            return React.createElement("g", { key: spec.key, x: spec.x, y: spec.y, transform: "translate(" + spec.x + "," + spec.y + ")" }, note);
        }
        else {
            return note;
        }
    };
    return Duration;
})(TypedReact.Component);
var Duration;
(function (Duration) {
    Duration.Component = TypedReact.createClass(Duration, [PureModelViewMixin]);
})(Duration || (Duration = {}));
module.exports = Duration;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","../stores/duration":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/duration.js","./_note":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_note.js","./_noteNotation":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_noteNotation.js","./_rest":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_rest.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/keySignature.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var Accidental = require("./_accidental");
var PureModelViewMixin = require("./pureModelViewMixin");
var KeySignature = (function (_super) {
    __extends(KeySignature, _super);
    function KeySignature() {
        _super.apply(this, arguments);
    }
    KeySignature.prototype.render = function () {
        var _this = this;
        var spec = this.props.spec;
        return React.createElement("g", null, _.map(this.getAccidentals(), function (a, idx) { return React.createElement(Accidental.Component, { key: idx, x: spec.x + idx * 10, y: spec.y, line: a.line, stroke: spec.color, opacity: _this.props.opacity, accidental: a.accidental }); }));
    };
    KeySignature.prototype.getAccidentals = function () {
        var spec = this.props.spec;
        if (spec.fifths >= 0) {
            return _.times(spec.fifths, function (i) { return Object({
                line: sharps[standardClef(spec.clef)][i],
                accidental: "accidentalSharp"
            }); });
        }
        else if (spec.fifths < 0) {
            return _.times(-spec.fifths, function (i) { return Object({
                line: flats[standardClef(spec.clef)][i],
                accidental: "accidentalFlat"
            }); });
        }
    };
    return KeySignature;
})(TypedReact.Component);
;
function standardClef(clef) {
    "use strict";
    switch (true) {
        case (clef.sign === "G"):
            return "treble";
        case (clef.sign === "F"):
            return "bass";
        case (clef.sign === "C" && clef.line === 3):
            return "alto";
        case (clef.sign === "C" && clef.line === 4):
            return "tenor";
        default:
            console.warn("Invalid clef?");
            return "treble";
    }
}
;
var sharps = {
    treble: [5, 3.5, 5.5, 4, 2.5, 4.5, 3],
    bass: [4, 2.5, 4.5, 3, 1.5, 3.5, 2],
    alto: [4.5, 3, 5, 3.5, 2, 4, 2.5],
    tenor: [2, 4, 2.5, 4.5, 3, 5, 3.5]
};
var flats = {
    treble: [3, 4.5, 2.5, 4, 2, 3.5, 1.5],
    bass: [2, 3.5, 1.5, 3, 1, 2.5, 0.5],
    alto: [2.5, 4, 2, 3.5, 1.5, 3, 1],
    tenor: [3.5, 5, 3, 4.5, 2.5, 4, 2]
};
var KeySignature;
(function (KeySignature) {
    "use strict";
    KeySignature.Component = TypedReact.createClass(KeySignature, [PureModelViewMixin]);
})(KeySignature || (KeySignature = {}));
module.exports = KeySignature;

},{"./_accidental":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_accidental.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/newline.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var PureModelViewMixin = require("./pureModelViewMixin");
var StaveLines = require("./_staveLines");
var BarNumber = require("./_barNumber");
var NewlineView = (function (_super) {
    __extends(NewlineView, _super);
    function NewlineView() {
        _super.apply(this, arguments);
    }
    NewlineView.prototype.render = function () {
        var spec = this.props.spec;
        var barNumber = spec.ctxData.bar + "";
        return React.createElement("g", null, React.createElement(StaveLines.Component, { key: "StaveLines", width: this.props.spec.width, x: spec.x, y: spec.braceY + spec.lineSpacing }), React.createElement(BarNumber.Component, { x: spec.x - 0, y: spec.braceY + spec.lineSpacing - 30, barNumber: barNumber }));
    };
    return NewlineView;
})(TypedReact.Component);
;
var NewlineView;
(function (NewlineView) {
    "use strict";
    NewlineView.Component = TypedReact.createClass(NewlineView, [PureModelViewMixin]);
})(NewlineView || (NewlineView = {}));
module.exports = NewlineView;

},{"./_barNumber":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_barNumber.js","./_staveLines":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_staveLines.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TypedReact = require("typed-react");
var C = require("../stores/contracts");
var PureModelViewMixin = (function (_super) {
    __extends(PureModelViewMixin, _super);
    function PureModelViewMixin() {
        _super.apply(this, arguments);
    }
    PureModelViewMixin.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var oldHash = this._hash;
        this._hash = C.JSONx.hash(nextProps) + nextProps.spec.x * 9973 + nextProps.spec.y * 997;
        return oldHash !== this._hash;
    };
    return PureModelViewMixin;
})(TypedReact.Mixin);
var Mixin = TypedReact.createMixin(PureModelViewMixin);
module.exports = Mixin;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/slur.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var assert = require("assert");
var Bezier = require("./_bezier");
var Note = require("./_note");
var PureModelViewMixin = require("./pureModelViewMixin");
var getExtremeLine = Note.getExtremeLine;
var Slur = (function (_super) {
    __extends(Slur, _super);
    function Slur() {
        _super.apply(this, arguments);
    }
    Slur.prototype.render = function () {
        var x2 = this.getX2();
        var x1 = this.getX1();
        var y2 = this.getY2(0);
        var y1 = this.getY1(0);
        var dir = this.direction();
        var x2mx1 = x2 - x1;
        var x1mx2 = -x2mx1;
        var relw = 3.2;
        var y1my2 = y1 - y2;
        var absw = -dir * 8.321228 / Math.max(1, (Math.abs(y1my2)));
        if ((y1my2 > 0 ? -1 : 1) * dir === 1) {
            absw = absw * 2;
        }
        assert(!isNaN(x2));
        assert(!isNaN(x1));
        assert(!isNaN(y2));
        assert(!isNaN(y1));
        assert(!isNaN(dir));
        assert(!isNaN(x2mx1));
        assert(!isNaN(x1mx2));
        assert(!isNaN(relw));
        assert(!isNaN(y1my2));
        assert(!isNaN(absw));
        return React.createElement(Bezier.Component, { x1: x2, y1: y2, x2: 0.28278198 / 1.23897534 * x1mx2 + x2, y2: ((dir === -1 ? y1my2 : 0) + absw) + y2, x3: 0.9561935 / 1.23897534 * x1mx2 + x2, y3: ((dir === -1 ? y1my2 : 0) + absw) + y2, x4: x1, y4: y1, x5: 0.28278198 / 1.23897534 * x2mx1 + x1, y5: ((dir === -1 ? 0 : -y1my2) + absw + relw) + y1, x6: 0.95619358 / 1.23897534 * x2mx1 + x1, y6: ((dir === -1 ? 0 : -y1my2) + absw + relw) + y1, fill: "#000000", strokeWidth: 1.2, stroke: "#000000" });
    };
    Slur.prototype.getYOffset = function () {
        if (this.direction() === -1) {
            return -10;
        }
        return 10;
    };
    Slur.prototype.direction = function () {
        return this.props.spec.direction;
    };
    Slur.prototype.getX1 = function () {
        return this.props.spec.x;
    };
    Slur.prototype.getX2 = function () {
        return this.props.spec.x + this.props.spec.width;
    };
    Slur.prototype.getY1 = function (idx) {
        return this.props.spec.y - this.getYOffset() - (getExtremeLine(this.props.spec.lines1, -this.direction) - 3) * 10;
    };
    Slur.prototype.getY2 = function (idx) {
        return this.props.spec.y - this.getYOffset() - (getExtremeLine(this.props.spec.lines2, -this.direction) - 3) * 10;
    };
    return Slur;
})(TypedReact.Component);
var Slur;
(function (Slur) {
    "use strict";
    Slur.Component = TypedReact.createClass(Slur, [PureModelViewMixin]);
})(Slur || (Slur = {}));
module.exports = Slur;

},{"./_bezier":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_bezier.js","./_note":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_note.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/timeSignature.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require("react");
var TypedReact = require("typed-react");
var _ = require("lodash");
var PureRenderMixin = require("react/lib/ReactComponentWithPureRenderMixin");
var Glyph = require("./_glyph");
var PureModelViewMixin = require("./pureModelViewMixin");
var TimeSignature = (function (_super) {
    __extends(TimeSignature, _super);
    function TimeSignature() {
        _super.apply(this, arguments);
    }
    TimeSignature.prototype.render = function () {
        var spec = this.props.spec;
        var ts = spec.displayTimeSignature;
        if (ts.commonRepresentation) {
            var beats = ts.beats;
            var beatType = ts.beatType;
            if (beats === 4 && beatType === 4) {
                return React.createElement(Glyph.Component, { x: spec.x, y: spec.y, fill: spec.color, glyphName: "timeSigCommon" });
            }
            else if (beats === 2 && beatType === 2) {
                return React.createElement(Glyph.Component, { x: spec.x, y: spec.y, fill: spec.color, glyphName: "timeSigCutCommon" });
            }
        }
        return React.createElement("g", null, React.createElement(TimeSignatureNumber.Component, { key: "-5", stroke: spec.color, x: spec.x + this.numOffset(), y: spec.y - 10 }, ts.beats), React.createElement(TimeSignatureNumber.Component, { key: "-6", stroke: spec.color, x: spec.x + this.denOffset(), y: spec.y + 10 }, ts.beatType));
    };
    TimeSignature.prototype.numOffset = function () {
        var ts = this.props.spec.displayTimeSignature;
        if (ts.beats < 10 && ts.beatType >= 10) {
            return 5;
        }
        return 0;
    };
    TimeSignature.prototype.denOffset = function () {
        var ts = this.props.spec.displayTimeSignature;
        if (ts.beatType < 10 && ts.beats >= 10) {
            return 5;
        }
        return 0;
    };
    return TimeSignature;
})(TypedReact.Component);
;
var TimeSignature;
(function (TimeSignature) {
    "use strict";
    TimeSignature.Component = TypedReact.createClass(TimeSignature, [PureModelViewMixin]);
})(TimeSignature || (TimeSignature = {}));
var TimeSignatureNumber = (function (_super) {
    __extends(TimeSignatureNumber, _super);
    function TimeSignatureNumber() {
        _super.apply(this, arguments);
    }
    TimeSignatureNumber.prototype.render = function () {
        var _this = this;
        return React.createElement("g", null, _.map((this.props.children + "").split(""), function (c, i) { return React.createElement(Glyph.Component, { key: "ts-" + i, x: _this.props.x + i * 10, y: _this.props.y, fill: _this.props.stroke, glyphName: "timeSig" + c }); }));
    };
    return TimeSignatureNumber;
})(TypedReact.Component);
var TimeSignatureNumber;
(function (TimeSignatureNumber) {
    TimeSignatureNumber.Component = TypedReact.createClass(TimeSignatureNumber, [PureRenderMixin]);
})(TimeSignatureNumber || (TimeSignatureNumber = {}));
module.exports = TimeSignature;

},{"./_glyph":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_glyph.js","./pureModelViewMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/pureModelViewMixin.js","lodash":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","react/lib/ReactComponentWithPureRenderMixin":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/wedge.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TypedReact = require("typed-react");
var React = require("react");
var C = require("../stores/contracts");
var Line = require("./_line");
var Wedge = (function (_super) {
    __extends(Wedge, _super);
    function Wedge() {
        _super.apply(this, arguments);
    }
    Wedge.prototype.render = function () {
        var spec = this.props.spec;
        var strokeWidth = 0.04;
        var isCrec = spec.wedgeType === 0 /* Crescendo */;
        if (spec.wedgeType === 2 /* Stop */) {
            return null;
        }
        var yOut = [
            spec.y - strokeWidth / 2 + 1.2 - 0.15,
            spec.y - strokeWidth / 2 + 1.2 + 0.15
        ];
        var yIn = [
            spec.y - strokeWidth / 2 + 1.2,
            spec.y - strokeWidth / 2 + 1.2,
        ];
        return React.createElement("g", null, React.createElement(Line.Component, { x1: spec.x, x2: spec.x + 0.8, y1: (isCrec ? yIn : yOut)[0], y2: (isCrec ? yOut : yIn)[0], stroke: "#000000", strokeWidth: 0.04 }), React.createElement(Line.Component, { x1: spec.x, x2: spec.x + 0.8, y1: (isCrec ? yIn : yOut)[1], y2: (isCrec ? yOut : yIn)[1], stroke: "#000000", strokeWidth: 0.04 }));
    };
    Wedge.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var oldHash = this._hash;
        this._hash = C.JSONx.hash(nextProps);
        return oldHash !== this._hash;
    };
    return Wedge;
})(TypedReact.Component);
var Wedge;
(function (Wedge) {
    "use strict";
    Wedge.Component = TypedReact.createClass(Wedge);
})(Wedge || (Wedge = {}));
module.exports = Wedge;

},{"../stores/contracts":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/stores/contracts.js","./_line":"/Users/joshua/miniproj/satie/website/node_modules/satie/dist/views/_line.js","react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js","typed-react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/es6-promise/dist/es6-promise.js":[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   2.0.1
 */

(function() {
    "use strict";

    function $$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function $$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function $$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var $$utils$$_isArray;

    if (!Array.isArray) {
      $$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      $$utils$$_isArray = Array.isArray;
    }

    var $$utils$$isArray = $$utils$$_isArray;
    var $$utils$$now = Date.now || function() { return new Date().getTime(); };
    function $$utils$$F() { }

    var $$utils$$o_create = (Object.create || function (o) {
      if (arguments.length > 1) {
        throw new Error('Second argument not supported');
      }
      if (typeof o !== 'object') {
        throw new TypeError('Argument must be an object');
      }
      $$utils$$F.prototype = o;
      return new $$utils$$F();
    });

    var $$asap$$len = 0;

    var $$asap$$default = function asap(callback, arg) {
      $$asap$$queue[$$asap$$len] = callback;
      $$asap$$queue[$$asap$$len + 1] = arg;
      $$asap$$len += 2;
      if ($$asap$$len === 2) {
        // If len is 1, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        $$asap$$scheduleFlush();
      }
    };

    var $$asap$$browserGlobal = (typeof window !== 'undefined') ? window : {};
    var $$asap$$BrowserMutationObserver = $$asap$$browserGlobal.MutationObserver || $$asap$$browserGlobal.WebKitMutationObserver;

    // test for web worker but not in IE10
    var $$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function $$asap$$useNextTick() {
      return function() {
        process.nextTick($$asap$$flush);
      };
    }

    function $$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new $$asap$$BrowserMutationObserver($$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function $$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = $$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function $$asap$$useSetTimeout() {
      return function() {
        setTimeout($$asap$$flush, 1);
      };
    }

    var $$asap$$queue = new Array(1000);

    function $$asap$$flush() {
      for (var i = 0; i < $$asap$$len; i+=2) {
        var callback = $$asap$$queue[i];
        var arg = $$asap$$queue[i+1];

        callback(arg);

        $$asap$$queue[i] = undefined;
        $$asap$$queue[i+1] = undefined;
      }

      $$asap$$len = 0;
    }

    var $$asap$$scheduleFlush;

    // Decide what async method to use to triggering processing of queued callbacks:
    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
      $$asap$$scheduleFlush = $$asap$$useNextTick();
    } else if ($$asap$$BrowserMutationObserver) {
      $$asap$$scheduleFlush = $$asap$$useMutationObserver();
    } else if ($$asap$$isWorker) {
      $$asap$$scheduleFlush = $$asap$$useMessageChannel();
    } else {
      $$asap$$scheduleFlush = $$asap$$useSetTimeout();
    }

    function $$$internal$$noop() {}
    var $$$internal$$PENDING   = void 0;
    var $$$internal$$FULFILLED = 1;
    var $$$internal$$REJECTED  = 2;
    var $$$internal$$GET_THEN_ERROR = new $$$internal$$ErrorObject();

    function $$$internal$$selfFullfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function $$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.')
    }

    function $$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        $$$internal$$GET_THEN_ERROR.error = error;
        return $$$internal$$GET_THEN_ERROR;
      }
    }

    function $$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function $$$internal$$handleForeignThenable(promise, thenable, then) {
       $$asap$$default(function(promise) {
        var sealed = false;
        var error = $$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            $$$internal$$resolve(promise, value);
          } else {
            $$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          $$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          $$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function $$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === $$$internal$$FULFILLED) {
        $$$internal$$fulfill(promise, thenable._result);
      } else if (promise._state === $$$internal$$REJECTED) {
        $$$internal$$reject(promise, thenable._result);
      } else {
        $$$internal$$subscribe(thenable, undefined, function(value) {
          $$$internal$$resolve(promise, value);
        }, function(reason) {
          $$$internal$$reject(promise, reason);
        });
      }
    }

    function $$$internal$$handleMaybeThenable(promise, maybeThenable) {
      if (maybeThenable.constructor === promise.constructor) {
        $$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        var then = $$$internal$$getThen(maybeThenable);

        if (then === $$$internal$$GET_THEN_ERROR) {
          $$$internal$$reject(promise, $$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          $$$internal$$fulfill(promise, maybeThenable);
        } else if ($$utils$$isFunction(then)) {
          $$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          $$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function $$$internal$$resolve(promise, value) {
      if (promise === value) {
        $$$internal$$reject(promise, $$$internal$$selfFullfillment());
      } else if ($$utils$$objectOrFunction(value)) {
        $$$internal$$handleMaybeThenable(promise, value);
      } else {
        $$$internal$$fulfill(promise, value);
      }
    }

    function $$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      $$$internal$$publish(promise);
    }

    function $$$internal$$fulfill(promise, value) {
      if (promise._state !== $$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = $$$internal$$FULFILLED;

      if (promise._subscribers.length === 0) {
      } else {
        $$asap$$default($$$internal$$publish, promise);
      }
    }

    function $$$internal$$reject(promise, reason) {
      if (promise._state !== $$$internal$$PENDING) { return; }
      promise._state = $$$internal$$REJECTED;
      promise._result = reason;

      $$asap$$default($$$internal$$publishRejection, promise);
    }

    function $$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + $$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + $$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        $$asap$$default($$$internal$$publish, parent);
      }
    }

    function $$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          $$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function $$$internal$$ErrorObject() {
      this.error = null;
    }

    var $$$internal$$TRY_CATCH_ERROR = new $$$internal$$ErrorObject();

    function $$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        $$$internal$$TRY_CATCH_ERROR.error = e;
        return $$$internal$$TRY_CATCH_ERROR;
      }
    }

    function $$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = $$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = $$$internal$$tryCatch(callback, detail);

        if (value === $$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          $$$internal$$reject(promise, $$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== $$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        $$$internal$$resolve(promise, value);
      } else if (failed) {
        $$$internal$$reject(promise, error);
      } else if (settled === $$$internal$$FULFILLED) {
        $$$internal$$fulfill(promise, value);
      } else if (settled === $$$internal$$REJECTED) {
        $$$internal$$reject(promise, value);
      }
    }

    function $$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          $$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          $$$internal$$reject(promise, reason);
        });
      } catch(e) {
        $$$internal$$reject(promise, e);
      }
    }

    function $$$enumerator$$makeSettledResult(state, position, value) {
      if (state === $$$internal$$FULFILLED) {
        return {
          state: 'fulfilled',
          value: value
        };
      } else {
        return {
          state: 'rejected',
          reason: value
        };
      }
    }

    function $$$enumerator$$Enumerator(Constructor, input, abortOnReject, label) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor($$$internal$$noop, label);
      this._abortOnReject = abortOnReject;

      if (this._validateInput(input)) {
        this._input     = input;
        this.length     = input.length;
        this._remaining = input.length;

        this._init();

        if (this.length === 0) {
          $$$internal$$fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;
          this._enumerate();
          if (this._remaining === 0) {
            $$$internal$$fulfill(this.promise, this._result);
          }
        }
      } else {
        $$$internal$$reject(this.promise, this._validationError());
      }
    }

    $$$enumerator$$Enumerator.prototype._validateInput = function(input) {
      return $$utils$$isArray(input);
    };

    $$$enumerator$$Enumerator.prototype._validationError = function() {
      return new Error('Array Methods must be provided an Array');
    };

    $$$enumerator$$Enumerator.prototype._init = function() {
      this._result = new Array(this.length);
    };

    var $$$enumerator$$default = $$$enumerator$$Enumerator;

    $$$enumerator$$Enumerator.prototype._enumerate = function() {
      var length  = this.length;
      var promise = this.promise;
      var input   = this._input;

      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    $$$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var c = this._instanceConstructor;
      if ($$utils$$isMaybeThenable(entry)) {
        if (entry.constructor === c && entry._state !== $$$internal$$PENDING) {
          entry._onerror = null;
          this._settledAt(entry._state, i, entry._result);
        } else {
          this._willSettleAt(c.resolve(entry), i);
        }
      } else {
        this._remaining--;
        this._result[i] = this._makeResult($$$internal$$FULFILLED, i, entry);
      }
    };

    $$$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var promise = this.promise;

      if (promise._state === $$$internal$$PENDING) {
        this._remaining--;

        if (this._abortOnReject && state === $$$internal$$REJECTED) {
          $$$internal$$reject(promise, value);
        } else {
          this._result[i] = this._makeResult(state, i, value);
        }
      }

      if (this._remaining === 0) {
        $$$internal$$fulfill(promise, this._result);
      }
    };

    $$$enumerator$$Enumerator.prototype._makeResult = function(state, i, value) {
      return value;
    };

    $$$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      $$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt($$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt($$$internal$$REJECTED, i, reason);
      });
    };

    var $$promise$all$$default = function all(entries, label) {
      return new $$$enumerator$$default(this, entries, true /* abort on reject */, label).promise;
    };

    var $$promise$race$$default = function race(entries, label) {
      /*jshint validthis:true */
      var Constructor = this;

      var promise = new Constructor($$$internal$$noop, label);

      if (!$$utils$$isArray(entries)) {
        $$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
        return promise;
      }

      var length = entries.length;

      function onFulfillment(value) {
        $$$internal$$resolve(promise, value);
      }

      function onRejection(reason) {
        $$$internal$$reject(promise, reason);
      }

      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {
        $$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
      }

      return promise;
    };

    var $$promise$resolve$$default = function resolve(object, label) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor($$$internal$$noop, label);
      $$$internal$$resolve(promise, object);
      return promise;
    };

    var $$promise$reject$$default = function reject(reason, label) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor($$$internal$$noop, label);
      $$$internal$$reject(promise, reason);
      return promise;
    };

    var $$es6$promise$promise$$counter = 0;

    function $$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function $$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var $$es6$promise$promise$$default = $$es6$promise$promise$$Promise;

    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise’s eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function $$es6$promise$promise$$Promise(resolver) {
      this._id = $$es6$promise$promise$$counter++;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      if ($$$internal$$noop !== resolver) {
        if (!$$utils$$isFunction(resolver)) {
          $$es6$promise$promise$$needsResolver();
        }

        if (!(this instanceof $$es6$promise$promise$$Promise)) {
          $$es6$promise$promise$$needsNew();
        }

        $$$internal$$initializePromise(this, resolver);
      }
    }

    $$es6$promise$promise$$Promise.all = $$promise$all$$default;
    $$es6$promise$promise$$Promise.race = $$promise$race$$default;
    $$es6$promise$promise$$Promise.resolve = $$promise$resolve$$default;
    $$es6$promise$promise$$Promise.reject = $$promise$reject$$default;

    $$es6$promise$promise$$Promise.prototype = {
      constructor: $$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: function(onFulfillment, onRejection) {
        var parent = this;
        var state = parent._state;

        if (state === $$$internal$$FULFILLED && !onFulfillment || state === $$$internal$$REJECTED && !onRejection) {
          return this;
        }

        var child = new this.constructor($$$internal$$noop);
        var result = parent._result;

        if (state) {
          var callback = arguments[state - 1];
          $$asap$$default(function(){
            $$$internal$$invokeCallback(state, child, callback, result);
          });
        } else {
          $$$internal$$subscribe(parent, child, onFulfillment, onRejection);
        }

        return child;
      },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };

    var $$es6$promise$polyfill$$default = function polyfill() {
      var local;

      if (typeof global !== 'undefined') {
        local = global;
      } else if (typeof window !== 'undefined' && window.document) {
        local = window;
      } else {
        local = self;
      }

      var es6PromiseSupport =
        "Promise" in local &&
        // Some of these methods are missing from
        // Firefox/Chrome experimental implementations
        "resolve" in local.Promise &&
        "reject" in local.Promise &&
        "all" in local.Promise &&
        "race" in local.Promise &&
        // Older version of the spec had a resolver object
        // as the arg rather than a function
        (function() {
          var resolve;
          new local.Promise(function(r) { resolve = r; });
          return $$utils$$isFunction(resolve);
        }());

      if (!es6PromiseSupport) {
        local.Promise = $$es6$promise$promise$$default;
      }
    };

    var es6$promise$umd$$ES6Promise = {
      'Promise': $$es6$promise$promise$$default,
      'polyfill': $$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = es6$promise$umd$$ES6Promise;
    }
}).call(this);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/process/browser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/lodash/dist/lodash.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/lodash/dist/lodash.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/lodash/dist/lodash.js":"/Users/joshua/miniproj/satie/website/node_modules/lodash/dist/lodash.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/musicxml-interfaces/typescript/dist/musicXML_DOM.js":[function(require,module,exports){
var assert = require("assert");
function popFront(t) {
    t.slice(1);
    return t;
}
var parttimeXSLBuffer = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"> <xsl:output method=\"xml\" indent=\"yes\" encoding=\"UTF-8\" omit-xml-declaration=\"no\" standalone=\"no\" doctype-system=\"http://www.musicxml.org/dtds/timewise.dtd\" doctype-public=\"-//Recordare//DTD MusicXML 3.0 Timewise//EN\" /> <xsl:template match=\"/\"> <xsl:apply-templates select=\"./score-partwise\"/> <xsl:apply-templates select=\"./score-timewise\"/> </xsl:template> <xsl:template match=\"score-timewise\"> <xsl:copy-of select=\".\" /> </xsl:template> <xsl:template match=\"text()\"> <xsl:value-of select=\".\" /> </xsl:template> <xsl:template match=\"*|@*|comment()|processing-instruction()\"> <xsl:copy><xsl:apply-templates select=\"*|@*|comment()|processing-instruction()|text()\" /></xsl:copy> </xsl:template> <xsl:template match=\"score-partwise\"> <xsl:element name=\"score-timewise\"> <xsl:apply-templates select=\"@version[.!='1.0']\"/> <xsl:apply-templates select=\"work\"/> <xsl:apply-templates select=\"movement-number\"/> <xsl:apply-templates select=\"movement-title\"/> <xsl:apply-templates select=\"identification\"/> <xsl:apply-templates select=\"defaults\"/> <xsl:apply-templates select=\"credit\"/> <xsl:apply-templates select=\"part-list\"/> <xsl:for-each select=\"part[1]/measure\"> <xsl:variable name=\"measure-number\"> <xsl:value-of select=\"@number\"/> </xsl:variable> <xsl:element name=\"measure\"> <xsl:attribute name=\"number\"> <xsl:value-of select=\"$measure-number\"/> </xsl:attribute> <xsl:if test=\"@implicit[. = 'yes']\"> <xsl:attribute name=\"implicit\"> <xsl:value-of select=\"@implicit\"/> </xsl:attribute> </xsl:if> <xsl:if test=\"@non-controlling[. = 'yes']\"> <xsl:attribute name=\"non-controlling\"> <xsl:value-of select=\"@non-controlling\"/> </xsl:attribute> </xsl:if> <xsl:if test=\"@width\"> <xsl:attribute name=\"width\"> <xsl:value-of select=\"@width\"/> </xsl:attribute> </xsl:if> <xsl:for-each select=\"../../part/measure\"> <xsl:if test=\"@number=$measure-number\"> <xsl:element name=\"part\"> <xsl:attribute name=\"id\"> <xsl:value-of select=\"parent::part/@id\"/> </xsl:attribute> <xsl:apply-templates /> </xsl:element> </xsl:if> </xsl:for-each> </xsl:element> </xsl:for-each> </xsl:element> </xsl:template> </xsl:stylesheet>";
var isIE = typeof window !== "undefined" && "ActiveXObject" in window;
if (!isIE) {
    var parttimeXSLDoc = (new DOMParser).parseFromString(parttimeXSLBuffer, "text/xml");
    var parttimeXSLProcessor = new XSLTProcessor;
    parttimeXSLProcessor.importStylesheet(parttimeXSLDoc);
}
function parseXML(musicxmlBuffer) {
    if (isIE) {
        var xslt = new ActiveXObject("Msxml2.XSLTemplate");
        var xmlDoc = new ActiveXObject("Msxml2.DOMDocument");
        var xslDoc = new ActiveXObject("Msxml2.FreeThreadedDOMDocument");
        xmlDoc.validateOnParse = false;
        xslDoc.validateOnParse = false;
        xmlDoc.resolveExternals = false;
        xslDoc.resolveExternals = false;
        xmlDoc.loadXML(musicxmlBuffer);
        xslDoc.loadXML(parttimeXSLBuffer);
        xslt.stylesheet = xslDoc;
        var xslProc = xslt.createProcessor();
        xslProc.input = xmlDoc;
        xslProc.transform();
        var dom = (new DOMParser).parseFromString(xslProc.output, "text/xml");
    }
    else {
        var dom = (new DOMParser).parseFromString(musicxmlBuffer, "text/xml");
        dom = parttimeXSLProcessor.transformToDocument(dom);
    }
    var json = xmlToScoreTimewise(dom.documentElement);
    return json;
}
exports.parseXML = parseXML;
function getString(ch, required) {
    return (ch.nodeType === ch.ATTRIBUTE_NODE ? ch.value : ch.textContent).trim();
}
exports.getString = getString;
function getNumber(ch, required) {
    var s = getString(ch, required);
    if (s.toLowerCase().indexOf("0x") === 0) {
        return parseInt(s, 16);
    }
    else {
        return parseFloat(s);
    }
}
exports.getNumber = getNumber;
function xmlToTextArray(node) {
    assert(false, "xmlToTextArray not implemented");
    return null;
}
exports.xmlToTextArray = xmlToTextArray;
function toCamelCase(input) {
    "use strict";
    return input.toLowerCase().replace(/-(.)/g, function (match, group1) {
        return group1.toUpperCase();
    });
}
exports.toCamelCase = toCamelCase;
function xmlToEncodingDate(node) {
    var text = getString(node, true);
    if (text.length < 10) {
        return null;
    }
    return {
        year: parseFloat(text.slice(0, 4)),
        month: parseFloat(text.slice(5, 7)),
        day: parseFloat(text.slice(8, 1))
    };
}
exports.xmlToEncodingDate = xmlToEncodingDate;
function xmlToMeasure(node) {
    "use strict";
    var ret = {};
    var foundImplicit = false;
    var foundNonControlling = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "part") {
            var dataPart = xmlToPart(ch);
            ret.parts = ret.parts || {};
            ret.parts[ch.attributes["id"].value] = dataPart;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber = getString(ch2, true);
            ret.number_ = dataNumber;
        }
        if (ch2.name === "implicit") {
            var dataImplicit = xmlToYesNo(ch2, true);
            ret.implicit = dataImplicit;
            foundImplicit = true;
        }
        if (ch2.name === "width") {
            var dataWidth = getNumber(ch2, true);
            ret.width = dataWidth;
        }
        if (ch2.name === "non-controlling") {
            var dataNonControlling = xmlToYesNo(ch2, true);
            ret.nonControlling = dataNonControlling;
            foundNonControlling = true;
        }
    }
    if (!foundImplicit) {
        ret.implicit = false;
    }
    if (!foundNonControlling) {
        ret.nonControlling = false;
    }
    return ret;
}
exports.xmlToMeasure = xmlToMeasure;
function xmlToYesNo(p, required) {
    var s = getString(p, true);
    if (s == "no") {
        return false;
    }
    if (s == "yes") {
        return true;
    }
    assert(!required, "Not reached");
    return false;
}
exports.xmlToYesNo = xmlToYesNo;
function xmlToNoteheadText(p) {
    return null;
}
exports.xmlToNoteheadText = xmlToNoteheadText;
function xmlToPartNameDisplay(p) {
    return null;
}
exports.xmlToPartNameDisplay = xmlToPartNameDisplay;
function xmlToPartAbbreviationDisplay(p) {
    return null;
}
exports.xmlToPartAbbreviationDisplay = xmlToPartAbbreviationDisplay;
function xmlToMode(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMode = xmlToMode;
function xmlToOtherAppearance(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToOtherAppearance = xmlToOtherAppearance;
function xmlToTuningStep(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTuningStep = xmlToTuningStep;
function xmlToOtherDynamics(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToOtherDynamics = xmlToOtherDynamics;
function xmlToVoice(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToVoice = xmlToVoice;
function xmlToNormalType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToNormalType = xmlToNormalType;
function xmlToSoftware(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSoftware = xmlToSoftware;
function xmlToEncodingDescription(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToEncodingDescription = xmlToEncodingDescription;
function xmlToKeyStep(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToKeyStep = xmlToKeyStep;
function xmlToKeyAlter(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToKeyAlter = xmlToKeyAlter;
function xmlToKeyAccidental(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToKeyAccidental = xmlToKeyAccidental;
function xmlToBeats(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBeats = xmlToBeats;
function xmlToBeatType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBeatType = xmlToBeatType;
function xmlToTimeRelation(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTimeRelation = xmlToTimeRelation;
function xmlToSenzaMisura(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSenzaMisura = xmlToSenzaMisura;
function xmlToInstruments(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToInstruments = xmlToInstruments;
function xmlToSign(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSign = xmlToSign;
function xmlToClefOctaveChange(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToClefOctaveChange = xmlToClefOctaveChange;
function xmlToStaffType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStaffType = xmlToStaffType;
function xmlToCapo(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToCapo = xmlToCapo;
function xmlToDiatonic(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDiatonic = xmlToDiatonic;
function xmlToChromatic(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToChromatic = xmlToChromatic;
function xmlToOctaveChange(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToOctaveChange = xmlToOctaveChange;
function xmlToSlashType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSlashType = xmlToSlashType;
function xmlToDisplayStep(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDisplayStep = xmlToDisplayStep;
function xmlToDisplayOctave(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDisplayOctave = xmlToDisplayOctave;
function xmlToBendAlter(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBendAlter = xmlToBendAlter;
function xmlToHoleType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToHoleType = xmlToHoleType;
function xmlToHoleShape(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToHoleShape = xmlToHoleShape;
function xmlToArrowDirection(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToArrowDirection = xmlToArrowDirection;
function xmlToArrowStyle(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToArrowStyle = xmlToArrowStyle;
function xmlToCircularArrow(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToCircularArrow = xmlToCircularArrow;
function xmlToBeatUnit(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBeatUnit = xmlToBeatUnit;
function xmlToMetronomeRelation(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMetronomeRelation = xmlToMetronomeRelation;
function xmlToMetronomeType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMetronomeType = xmlToMetronomeType;
function xmlToPedalStep(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPedalStep = xmlToPedalStep;
function xmlToPedalAlter(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPedalAlter = xmlToPedalAlter;
function xmlToAccordionMiddle(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToAccordionMiddle = xmlToAccordionMiddle;
function xmlToGlass(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToGlass = xmlToGlass;
function xmlToMetal(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMetal = xmlToMetal;
function xmlToWood(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToWood = xmlToWood;
function xmlToPitched(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPitched = xmlToPitched;
function xmlToMembrane(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMembrane = xmlToMembrane;
function xmlToEffect(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToEffect = xmlToEffect;
function xmlToStickType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStickType = xmlToStickType;
function xmlToStickMaterial(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStickMaterial = xmlToStickMaterial;
function xmlToStickLocation(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStickLocation = xmlToStickLocation;
function xmlToOtherPercussion(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToOtherPercussion = xmlToOtherPercussion;
function xmlToFrameStrings(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToFrameStrings = xmlToFrameStrings;
function xmlToFrameFrets(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToFrameFrets = xmlToFrameFrets;
function xmlToWorkNumber(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToWorkNumber = xmlToWorkNumber;
function xmlToWorkTitle(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToWorkTitle = xmlToWorkTitle;
function xmlToMovementNumber(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMovementNumber = xmlToMovementNumber;
function xmlToMovementTitle(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMovementTitle = xmlToMovementTitle;
function xmlToCreditType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToCreditType = xmlToCreditType;
function xmlToGroup(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToGroup = xmlToGroup;
function xmlToInstrumentName(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToInstrumentName = xmlToInstrumentName;
function xmlToInstrumentAbbreviation(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToInstrumentAbbreviation = xmlToInstrumentAbbreviation;
function xmlToInstrumentSound(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToInstrumentSound = xmlToInstrumentSound;
function xmlToEnsemble(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToEnsemble = xmlToEnsemble;
function xmlToVirtualLibrary(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToVirtualLibrary = xmlToVirtualLibrary;
function xmlToVirtualName(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToVirtualName = xmlToVirtualName;
function xmlToTenths(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTenths = xmlToTenths;
function xmlToLayoutTenths(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToLayoutTenths = xmlToLayoutTenths;
(function (StartStop) {
    StartStop[StartStop["Start"] = 0] = "Start";
    StartStop[StartStop["Stop"] = 1] = "Stop";
})(exports.StartStop || (exports.StartStop = {}));
var StartStop = exports.StartStop;
function getStartStop(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "start") {
        return 0 /* Start */;
    }
    if (s == "stop") {
        return 1 /* Stop */;
    }
    assert(false, "Not reached");
}
exports.getStartStop = getStartStop;
(function (StartStopContinue) {
    StartStopContinue[StartStopContinue["Start"] = 0] = "Start";
    StartStopContinue[StartStopContinue["Stop"] = 1] = "Stop";
    StartStopContinue[StartStopContinue["Continue"] = 2] = "Continue";
})(exports.StartStopContinue || (exports.StartStopContinue = {}));
var StartStopContinue = exports.StartStopContinue;
function getStartStopContinue(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "start") {
        return 0 /* Start */;
    }
    if (s == "stop") {
        return 1 /* Stop */;
    }
    if (s == "continue") {
        return 2 /* Continue */;
    }
    assert(false, "Not reached");
}
exports.getStartStopContinue = getStartStopContinue;
(function (StartStopSingle) {
    StartStopSingle[StartStopSingle["Single"] = 3] = "Single";
    StartStopSingle[StartStopSingle["Start"] = 0] = "Start";
    StartStopSingle[StartStopSingle["Stop"] = 1] = "Stop";
})(exports.StartStopSingle || (exports.StartStopSingle = {}));
var StartStopSingle = exports.StartStopSingle;
function getStartStopSingle(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "single") {
        return 3 /* Single */;
    }
    if (s == "start") {
        return 0 /* Start */;
    }
    if (s == "stop") {
        return 1 /* Stop */;
    }
    assert(false, "Not reached");
}
exports.getStartStopSingle = getStartStopSingle;
(function (SymbolSize) {
    SymbolSize[SymbolSize["Unspecified"] = 0] = "Unspecified";
    SymbolSize[SymbolSize["Full"] = 1] = "Full";
    SymbolSize[SymbolSize["Cue"] = 2] = "Cue";
    SymbolSize[SymbolSize["Large"] = 3] = "Large";
})(exports.SymbolSize || (exports.SymbolSize = {}));
var SymbolSize = exports.SymbolSize;
function getSymbolSize(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "unspecified") {
        return 0 /* Unspecified */;
    }
    if (s == "full") {
        return 1 /* Full */;
    }
    if (s == "cue") {
        return 2 /* Cue */;
    }
    if (s == "large") {
        return 3 /* Large */;
    }
    assert(false, "Not reached");
}
exports.getSymbolSize = getSymbolSize;
(function (AboveBelow) {
    AboveBelow[AboveBelow["Above"] = 1] = "Above";
    AboveBelow[AboveBelow["Below"] = 2] = "Below";
    AboveBelow[AboveBelow["Unspecified"] = 0] = "Unspecified";
})(exports.AboveBelow || (exports.AboveBelow = {}));
var AboveBelow = exports.AboveBelow;
function getAboveBelow(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "above") {
        return 1 /* Above */;
    }
    if (s == "below") {
        return 2 /* Below */;
    }
    if (s == "unspecified") {
        return 0 /* Unspecified */;
    }
    assert(false, "Not reached");
}
exports.getAboveBelow = getAboveBelow;
(function (OverUnder) {
    OverUnder[OverUnder["Over"] = 1] = "Over";
    OverUnder[OverUnder["Under"] = 2] = "Under";
    OverUnder[OverUnder["Unspecified"] = 0] = "Unspecified";
})(exports.OverUnder || (exports.OverUnder = {}));
var OverUnder = exports.OverUnder;
function getOverUnder(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "over") {
        return 1 /* Over */;
    }
    if (s == "under") {
        return 2 /* Under */;
    }
    if (s == "unspecified") {
        return 0 /* Unspecified */;
    }
    assert(false, "Not reached");
}
exports.getOverUnder = getOverUnder;
(function (UpDown) {
    UpDown[UpDown["Down"] = 1] = "Down";
    UpDown[UpDown["Up"] = 0] = "Up";
})(exports.UpDown || (exports.UpDown = {}));
var UpDown = exports.UpDown;
function getUpDown(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "down") {
        return 1 /* Down */;
    }
    if (s == "up") {
        return 0 /* Up */;
    }
    assert(false, "Not reached");
}
exports.getUpDown = getUpDown;
(function (TopBottom) {
    TopBottom[TopBottom["Top"] = 0] = "Top";
    TopBottom[TopBottom["Bottom"] = 1] = "Bottom";
})(exports.TopBottom || (exports.TopBottom = {}));
var TopBottom = exports.TopBottom;
function getTopBottom(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "top") {
        return 0 /* Top */;
    }
    if (s == "bottom") {
        return 1 /* Bottom */;
    }
    assert(false, "Not reached");
}
exports.getTopBottom = getTopBottom;
(function (LeftRight) {
    LeftRight[LeftRight["Right"] = 1] = "Right";
    LeftRight[LeftRight["Left"] = 0] = "Left";
})(exports.LeftRight || (exports.LeftRight = {}));
var LeftRight = exports.LeftRight;
function getLeftRight(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "right") {
        return 1 /* Right */;
    }
    if (s == "left") {
        return 0 /* Left */;
    }
    assert(false, "Not reached");
}
exports.getLeftRight = getLeftRight;
function verifyNumberOfLines(m) {
    assert(m >= 0 && m <= 3);
}
exports.verifyNumberOfLines = verifyNumberOfLines;
function xmlToNumberOfLines(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToNumberOfLines = xmlToNumberOfLines;
function verifyRotation(m) {
    assert(m >= -180 && m <= 180);
}
exports.verifyRotation = verifyRotation;
function xmlToRotation(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToRotation = xmlToRotation;
(function (EnclosureShape) {
    EnclosureShape[EnclosureShape["Circle"] = 3] = "Circle";
    EnclosureShape[EnclosureShape["Bracket"] = 4] = "Bracket";
    EnclosureShape[EnclosureShape["Triangle"] = 5] = "Triangle";
    EnclosureShape[EnclosureShape["Diamond"] = 6] = "Diamond";
    EnclosureShape[EnclosureShape["None"] = 7] = "None";
    EnclosureShape[EnclosureShape["Square"] = 1] = "Square";
    EnclosureShape[EnclosureShape["Oval"] = 2] = "Oval";
    EnclosureShape[EnclosureShape["Rectangle"] = 0] = "Rectangle";
})(exports.EnclosureShape || (exports.EnclosureShape = {}));
var EnclosureShape = exports.EnclosureShape;
function getEnclosureShape(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "circle") {
        return 3 /* Circle */;
    }
    if (s == "bracket") {
        return 4 /* Bracket */;
    }
    if (s == "triangle") {
        return 5 /* Triangle */;
    }
    if (s == "diamond") {
        return 6 /* Diamond */;
    }
    if (s == "none") {
        return 7 /* None */;
    }
    if (s == "square") {
        return 1 /* Square */;
    }
    if (s == "oval") {
        return 2 /* Oval */;
    }
    if (s == "rectangle") {
        return 0 /* Rectangle */;
    }
    assert(false, "Not reached");
}
exports.getEnclosureShape = getEnclosureShape;
(function (NormalItalic) {
    NormalItalic[NormalItalic["Italic"] = 1] = "Italic";
    NormalItalic[NormalItalic["Normal"] = 0] = "Normal";
})(exports.NormalItalic || (exports.NormalItalic = {}));
var NormalItalic = exports.NormalItalic;
function getNormalItalic(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "italic") {
        return 1 /* Italic */;
    }
    if (s == "normal") {
        return 0 /* Normal */;
    }
    assert(false, "Not reached");
}
exports.getNormalItalic = getNormalItalic;
(function (NormalBold) {
    NormalBold[NormalBold["Bold"] = 2] = "Bold";
    NormalBold[NormalBold["Normal"] = 0] = "Normal";
})(exports.NormalBold || (exports.NormalBold = {}));
var NormalBold = exports.NormalBold;
function getNormalBold(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "bold") {
        return 2 /* Bold */;
    }
    if (s == "normal") {
        return 0 /* Normal */;
    }
    assert(false, "Not reached");
}
exports.getNormalBold = getNormalBold;
function verifyNumberLevel(m) {
    assert(m >= 1 && m <= 6);
}
exports.verifyNumberLevel = verifyNumberLevel;
function xmlToNumberLevel(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToNumberLevel = xmlToNumberLevel;
function verifyBeamLevel(m) {
    assert(m >= 1 && m <= 8);
}
exports.verifyBeamLevel = verifyBeamLevel;
function xmlToBeamLevel(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToBeamLevel = xmlToBeamLevel;
function xmlToPosition(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    return ret;
}
exports.xmlToPosition = xmlToPosition;
function xmlToPlacement(node) {
    "use strict";
    var ret = {};
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToPlacement = xmlToPlacement;
function xmlToOrientation(node) {
    "use strict";
    var ret = {};
    var foundOrientation = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "orientation") {
            var dataOrientation = getOverUnder(ch2, 0 /* Unspecified */);
            ret.orientation = dataOrientation;
            foundOrientation = true;
        }
    }
    if (!foundOrientation) {
        ret.orientation = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToOrientation = xmlToOrientation;
function xmlToDirectiveEntity(node) {
    "use strict";
    var ret = {};
    var foundDirectiveEntity = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "directive-entity") {
            var dataDirectiveEntity = xmlToYesNo(ch2);
            ret.directiveEntity = dataDirectiveEntity;
            foundDirectiveEntity = true;
        }
    }
    if (!foundDirectiveEntity) {
        ret.directiveEntity = false;
    }
    return ret;
}
exports.xmlToDirectiveEntity = xmlToDirectiveEntity;
function xmlToBezier(node) {
    "use strict";
    var ret = {};
    var foundBezierX2 = false;
    var foundBezierOffset = false;
    var foundBezierOffset2 = false;
    var foundBezierX = false;
    var foundBezierY = false;
    var foundBezierY2 = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "bezier-x2") {
            var dataBezierX2 = getNumber(ch2, true);
            ret.bezierX2 = dataBezierX2;
            foundBezierX2 = true;
        }
        if (ch2.name === "bezier-offset") {
            var dataBezierOffset = getNumber(ch2, true);
            ret.bezierOffset = dataBezierOffset;
            foundBezierOffset = true;
        }
        if (ch2.name === "bezier-offset2") {
            var dataBezierOffset2 = getNumber(ch2, true);
            ret.bezierOffset2 = dataBezierOffset2;
            foundBezierOffset2 = true;
        }
        if (ch2.name === "bezier-x") {
            var dataBezierX = getNumber(ch2, true);
            ret.bezierX = dataBezierX;
            foundBezierX = true;
        }
        if (ch2.name === "bezier-y") {
            var dataBezierY = getNumber(ch2, true);
            ret.bezierY = dataBezierY;
            foundBezierY = true;
        }
        if (ch2.name === "bezier-y2") {
            var dataBezierY2 = getNumber(ch2, true);
            ret.bezierY2 = dataBezierY2;
            foundBezierY2 = true;
        }
    }
    if (!foundBezierX2) {
        ret.bezierX2 = NaN;
    }
    if (!foundBezierOffset) {
        ret.bezierOffset = NaN;
    }
    if (!foundBezierOffset2) {
        ret.bezierOffset2 = NaN;
    }
    if (!foundBezierX) {
        ret.bezierX = NaN;
    }
    if (!foundBezierY) {
        ret.bezierY = NaN;
    }
    if (!foundBezierY2) {
        ret.bezierY2 = NaN;
    }
    return ret;
}
exports.xmlToBezier = xmlToBezier;
function xmlToFont(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    return ret;
}
exports.xmlToFont = xmlToFont;
(function (LeftCenterRight) {
    LeftCenterRight[LeftCenterRight["Right"] = 1] = "Right";
    LeftCenterRight[LeftCenterRight["Center"] = 2] = "Center";
    LeftCenterRight[LeftCenterRight["Left"] = 0] = "Left";
})(exports.LeftCenterRight || (exports.LeftCenterRight = {}));
var LeftCenterRight = exports.LeftCenterRight;
function getLeftCenterRight(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "right") {
        return 1 /* Right */;
    }
    if (s == "center") {
        return 2 /* Center */;
    }
    if (s == "left") {
        return 0 /* Left */;
    }
    assert(false, "Not reached");
}
exports.getLeftCenterRight = getLeftCenterRight;
(function (TopMiddleBottomBaseline) {
    TopMiddleBottomBaseline[TopMiddleBottomBaseline["Top"] = 0] = "Top";
    TopMiddleBottomBaseline[TopMiddleBottomBaseline["Middle"] = 1] = "Middle";
    TopMiddleBottomBaseline[TopMiddleBottomBaseline["Baseline"] = 3] = "Baseline";
    TopMiddleBottomBaseline[TopMiddleBottomBaseline["Bottom"] = 2] = "Bottom";
})(exports.TopMiddleBottomBaseline || (exports.TopMiddleBottomBaseline = {}));
var TopMiddleBottomBaseline = exports.TopMiddleBottomBaseline;
function getTopMiddleBottomBaseline(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "top") {
        return 0 /* Top */;
    }
    if (s == "middle") {
        return 1 /* Middle */;
    }
    if (s == "baseline") {
        return 3 /* Baseline */;
    }
    if (s == "bottom") {
        return 2 /* Bottom */;
    }
    assert(false, "Not reached");
}
exports.getTopMiddleBottomBaseline = getTopMiddleBottomBaseline;
(function (DirectionMode) {
    DirectionMode[DirectionMode["Lro"] = 2] = "Lro";
    DirectionMode[DirectionMode["Rlo"] = 3] = "Rlo";
    DirectionMode[DirectionMode["Ltr"] = 0] = "Ltr";
    DirectionMode[DirectionMode["Rtl"] = 1] = "Rtl";
})(exports.DirectionMode || (exports.DirectionMode = {}));
var DirectionMode = exports.DirectionMode;
function getDirectionMode(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "lro") {
        return 2 /* Lro */;
    }
    if (s == "rlo") {
        return 3 /* Rlo */;
    }
    if (s == "ltr") {
        return 0 /* Ltr */;
    }
    if (s == "rtl") {
        return 1 /* Rtl */;
    }
    assert(false, "Not reached");
}
exports.getDirectionMode = getDirectionMode;
(function (StraightCurved) {
    StraightCurved[StraightCurved["Curved"] = 1] = "Curved";
    StraightCurved[StraightCurved["Straight"] = 0] = "Straight";
})(exports.StraightCurved || (exports.StraightCurved = {}));
var StraightCurved = exports.StraightCurved;
function getStraightCurved(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "curved") {
        return 1 /* Curved */;
    }
    if (s == "straight") {
        return 0 /* Straight */;
    }
    assert(false, "Not reached");
}
exports.getStraightCurved = getStraightCurved;
(function (SolidDashedDottedWavy) {
    SolidDashedDottedWavy[SolidDashedDottedWavy["Dashed"] = 1] = "Dashed";
    SolidDashedDottedWavy[SolidDashedDottedWavy["Wavy"] = 3] = "Wavy";
    SolidDashedDottedWavy[SolidDashedDottedWavy["Dotted"] = 2] = "Dotted";
    SolidDashedDottedWavy[SolidDashedDottedWavy["Solid"] = 0] = "Solid";
})(exports.SolidDashedDottedWavy || (exports.SolidDashedDottedWavy = {}));
var SolidDashedDottedWavy = exports.SolidDashedDottedWavy;
function getSolidDashedDottedWavy(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "dashed") {
        return 1 /* Dashed */;
    }
    if (s == "wavy") {
        return 3 /* Wavy */;
    }
    if (s == "dotted") {
        return 2 /* Dotted */;
    }
    if (s == "solid") {
        return 0 /* Solid */;
    }
    assert(false, "Not reached");
}
exports.getSolidDashedDottedWavy = getSolidDashedDottedWavy;
(function (NormalAngledSquare) {
    NormalAngledSquare[NormalAngledSquare["Angled"] = 1] = "Angled";
    NormalAngledSquare[NormalAngledSquare["Square"] = 2] = "Square";
    NormalAngledSquare[NormalAngledSquare["Normal"] = 0] = "Normal";
})(exports.NormalAngledSquare || (exports.NormalAngledSquare = {}));
var NormalAngledSquare = exports.NormalAngledSquare;
function getNormalAngledSquare(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "angled") {
        return 1 /* Angled */;
    }
    if (s == "square") {
        return 2 /* Square */;
    }
    if (s == "normal") {
        return 0 /* Normal */;
    }
    assert(false, "Not reached");
}
exports.getNormalAngledSquare = getNormalAngledSquare;
(function (UprightInverted) {
    UprightInverted[UprightInverted["Upright"] = 0] = "Upright";
    UprightInverted[UprightInverted["Inverted"] = 1] = "Inverted";
})(exports.UprightInverted || (exports.UprightInverted = {}));
var UprightInverted = exports.UprightInverted;
function getUprightInverted(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "upright") {
        return 0 /* Upright */;
    }
    if (s == "inverted") {
        return 1 /* Inverted */;
    }
    assert(false, "Not reached");
}
exports.getUprightInverted = getUprightInverted;
(function (UpperMainBelow) {
    UpperMainBelow[UpperMainBelow["Main"] = 1] = "Main";
    UpperMainBelow[UpperMainBelow["Below"] = 2] = "Below";
    UpperMainBelow[UpperMainBelow["Upper"] = 0] = "Upper";
})(exports.UpperMainBelow || (exports.UpperMainBelow = {}));
var UpperMainBelow = exports.UpperMainBelow;
function getUpperMainBelow(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "main") {
        return 1 /* Main */;
    }
    if (s == "below") {
        return 2 /* Below */;
    }
    if (s == "upper") {
        return 0 /* Upper */;
    }
    assert(false, "Not reached");
}
exports.getUpperMainBelow = getUpperMainBelow;
(function (WholeHalfUnison) {
    WholeHalfUnison[WholeHalfUnison["Unison"] = 2] = "Unison";
    WholeHalfUnison[WholeHalfUnison["Whole"] = 0] = "Whole";
    WholeHalfUnison[WholeHalfUnison["Half"] = 1] = "Half";
})(exports.WholeHalfUnison || (exports.WholeHalfUnison = {}));
var WholeHalfUnison = exports.WholeHalfUnison;
function getWholeHalfUnison(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "unison") {
        return 2 /* Unison */;
    }
    if (s == "whole") {
        return 0 /* Whole */;
    }
    if (s == "half") {
        return 1 /* Half */;
    }
    assert(false, "Not reached");
}
exports.getWholeHalfUnison = getWholeHalfUnison;
(function (WholeHalfNone) {
    WholeHalfNone[WholeHalfNone["None"] = 3] = "None";
    WholeHalfNone[WholeHalfNone["Whole"] = 0] = "Whole";
    WholeHalfNone[WholeHalfNone["Half"] = 1] = "Half";
})(exports.WholeHalfNone || (exports.WholeHalfNone = {}));
var WholeHalfNone = exports.WholeHalfNone;
function getWholeHalfNone(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 3 /* None */;
    }
    if (s == "whole") {
        return 0 /* Whole */;
    }
    if (s == "half") {
        return 1 /* Half */;
    }
    assert(false, "Not reached");
}
exports.getWholeHalfNone = getWholeHalfNone;
function xmlToColor(node) {
    "use strict";
    var ret = {};
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToColor = xmlToColor;
function xmlToTextDecoration(node) {
    "use strict";
    var ret = {};
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    return ret;
}
exports.xmlToTextDecoration = xmlToTextDecoration;
function xmlToJustify(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    return ret;
}
exports.xmlToJustify = xmlToJustify;
function xmlToHalign(node) {
    "use strict";
    var ret = {};
    var foundHalign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    return ret;
}
exports.xmlToHalign = xmlToHalign;
function xmlToValign(node) {
    "use strict";
    var ret = {};
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToValign = xmlToValign;
function xmlToValignImage(node) {
    "use strict";
    var ret = {};
    var foundValignImage = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "valign-image") {
            var dataValignImage = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valignImage = dataValignImage;
            foundValignImage = true;
        }
    }
    if (!foundValignImage) {
        ret.valignImage = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToValignImage = xmlToValignImage;
function xmlToLetterSpacing(node) {
    "use strict";
    var ret = {};
    var foundLetterSpacing = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    return ret;
}
exports.xmlToLetterSpacing = xmlToLetterSpacing;
function xmlToLineHeight(node) {
    "use strict";
    var ret = {};
    var foundLineHeight = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    return ret;
}
exports.xmlToLineHeight = xmlToLineHeight;
function xmlToTextDirection(node) {
    "use strict";
    var ret = {};
    var foundDir = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    return ret;
}
exports.xmlToTextDirection = xmlToTextDirection;
function xmlToTextRotation(node) {
    "use strict";
    var ret = {};
    var foundRotation = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    return ret;
}
exports.xmlToTextRotation = xmlToTextRotation;
function xmlToEnclosure(node) {
    "use strict";
    var ret = {};
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToEnclosure = xmlToEnclosure;
function xmlToPrintStyle(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToPrintStyle = xmlToPrintStyle;
function xmlToPrintStyleAlign(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToPrintStyleAlign = xmlToPrintStyleAlign;
function xmlToLineShape(node) {
    "use strict";
    var ret = {};
    var foundLineShape = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-shape") {
            var dataLineShape = getStraightCurved(ch2, 0 /* Straight */);
            ret.lineShape = dataLineShape;
            foundLineShape = true;
        }
    }
    if (!foundLineShape) {
        ret.lineShape = 0 /* Straight */;
    }
    return ret;
}
exports.xmlToLineShape = xmlToLineShape;
function xmlToDashedFormatting(node) {
    "use strict";
    var ret = {};
    var foundDashLength = false;
    var foundSpaceLength = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    return ret;
}
exports.xmlToDashedFormatting = xmlToDashedFormatting;
function xmlToPrintObject(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    return ret;
}
exports.xmlToPrintObject = xmlToPrintObject;
function xmlToPrintSpacing(node) {
    "use strict";
    var ret = {};
    var foundPrintSpacing = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-spacing") {
            var dataPrintSpacing = xmlToYesNo(ch2);
            ret.printSpacing = dataPrintSpacing;
            foundPrintSpacing = true;
        }
    }
    if (!foundPrintSpacing) {
        ret.printSpacing = true;
    }
    return ret;
}
exports.xmlToPrintSpacing = xmlToPrintSpacing;
function xmlToTextFormatting(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundLineHeight = false;
    var foundDir = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToTextFormatting = xmlToTextFormatting;
function xmlToLevelDisplay(node) {
    "use strict";
    var ret = {};
    var foundBracket = false;
    var foundSize = false;
    var foundParentheses = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "bracket") {
            var dataBracket = xmlToYesNo(ch2);
            ret.bracket = dataBracket;
            foundBracket = true;
        }
        if (ch2.name === "size") {
            var dataSize = getSymbolSize(ch2, 0 /* Unspecified */);
            ret.size = dataSize;
            foundSize = true;
        }
        if (ch2.name === "parentheses") {
            var dataParentheses = xmlToYesNo(ch2);
            ret.parentheses = dataParentheses;
            foundParentheses = true;
        }
    }
    if (!foundBracket) {
        ret.bracket = false;
    }
    if (!foundSize) {
        ret.size = 0 /* Unspecified */;
    }
    if (!foundParentheses) {
        ret.parentheses = false;
    }
    return ret;
}
exports.xmlToLevelDisplay = xmlToLevelDisplay;
function xmlToTrillSound(node) {
    "use strict";
    var ret = {};
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToTrillSound = xmlToTrillSound;
function xmlToBendSound(node) {
    "use strict";
    var ret = {};
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToBendSound = xmlToBendSound;
function xmlToTimeOnly(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "time-only") {
            var dataTimeOnly = getString(ch2, true);
            ret.timeOnly = dataTimeOnly;
        }
    }
    return ret;
}
exports.xmlToTimeOnly = xmlToTimeOnly;
function xmlToDocumentAttributes(node) {
    "use strict";
    var ret = {};
    var foundVersion_ = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "version") {
            var dataVersion_ = getString(ch2, true);
            ret.version_ = dataVersion_;
            foundVersion_ = true;
        }
    }
    if (!foundVersion_) {
        ret.version_ = "1.0";
    }
    return ret;
}
exports.xmlToDocumentAttributes = xmlToDocumentAttributes;
function xmlToEditorial(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToEditorial = xmlToEditorial;
function xmlToEditorialVoice(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "voice") {
            var dataVoice = getString(ch, true);
            ret.voice = dataVoice;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToEditorialVoice = xmlToEditorialVoice;
function xmlToFootnote(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundLineHeight = false;
    var foundDir = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, true);
    ret.text = dataText;
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToFootnote = xmlToFootnote;
function xmlToLevel(node) {
    "use strict";
    var ret = {};
    var foundBracket = false;
    var foundSize = false;
    var foundParentheses = false;
    var foundReference = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "bracket") {
            var dataBracket = xmlToYesNo(ch2);
            ret.bracket = dataBracket;
            foundBracket = true;
        }
        if (ch2.name === "size") {
            var dataSize = getSymbolSize(ch2, 0 /* Unspecified */);
            ret.size = dataSize;
            foundSize = true;
        }
        if (ch2.name === "parentheses") {
            var dataParentheses = xmlToYesNo(ch2);
            ret.parentheses = dataParentheses;
            foundParentheses = true;
        }
        if (ch2.name === "reference") {
            var dataReference = xmlToYesNo(ch2);
            ret.reference = dataReference;
            foundReference = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, true);
    ret.text = dataText;
    if (!foundBracket) {
        ret.bracket = false;
    }
    if (!foundSize) {
        ret.size = 0 /* Unspecified */;
    }
    if (!foundParentheses) {
        ret.parentheses = false;
    }
    if (!foundReference) {
        ret.reference = false;
    }
    return ret;
}
exports.xmlToLevel = xmlToLevel;
function xmlToFermata(node) {
    "use strict";
    var ret = {};
    var foundShape = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundType = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getUprightInverted(ch2, 0 /* Upright */);
            ret.type = dataType;
            foundType = true;
        }
    }
    var ch3 = node;
    var dataShape = getNormalAngledSquare(ch3, 0 /* Normal */);
    ret.shape = dataShape;
    if (!foundShape) {
        ret.shape = 0 /* Normal */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundType) {
        ret.type = 0 /* Upright */;
    }
    return ret;
}
exports.xmlToFermata = xmlToFermata;
function xmlToWavyLine(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundPlacement = false;
    var foundColor = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopContinue(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToWavyLine = xmlToWavyLine;
function xmlToStaff(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    var ch3 = node;
    var dataIdx = getNumber(ch3, true);
    ret.idx = dataIdx;
    return ret;
}
exports.xmlToStaff = xmlToStaff;
function xmlToSegno(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToSegno = xmlToSegno;
function xmlToCoda(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToCoda = xmlToCoda;
function xmlToActualNotes(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    var ch3 = node;
    var dataCount = getNumber(ch3, true);
    ret.count = dataCount;
    return ret;
}
exports.xmlToActualNotes = xmlToActualNotes;
function xmlToNormalNotes(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    var ch3 = node;
    var dataCount = getNumber(ch3, true);
    ret.count = dataCount;
    return ret;
}
exports.xmlToNormalNotes = xmlToNormalNotes;
function xmlToNormalDot(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToNormalDot = xmlToNormalDot;
function xmlToDynamics(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundPlacement = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "fp") {
            var dataFp = true;
            ret.fp = dataFp;
        }
        if (ch.nodeName === "pp") {
            var dataPp = true;
            ret.pp = dataPp;
        }
        if (ch.nodeName === "ppp") {
            var dataPpp = true;
            ret.ppp = dataPpp;
        }
        if (ch.nodeName === "fff") {
            var dataFff = true;
            ret.fff = dataFff;
        }
        if (ch.nodeName === "sf") {
            var dataSf = true;
            ret.sf = dataSf;
        }
        if (ch.nodeName === "rf") {
            var dataRf = true;
            ret.rf = dataRf;
        }
        if (ch.nodeName === "mp") {
            var dataMp = true;
            ret.mp = dataMp;
        }
        if (ch.nodeName === "sfpp") {
            var dataSfpp = true;
            ret.sfpp = dataSfpp;
        }
        if (ch.nodeName === "f") {
            var dataF = true;
            ret.f = dataF;
        }
        if (ch.nodeName === "ffffff") {
            var dataFfffff = true;
            ret.ffffff = dataFfffff;
        }
        if (ch.nodeName === "sfz") {
            var dataSfz = true;
            ret.sfz = dataSfz;
        }
        if (ch.nodeName === "ff") {
            var dataFf = true;
            ret.ff = dataFf;
        }
        if (ch.nodeName === "pppppp") {
            var dataPppppp = true;
            ret.pppppp = dataPppppp;
        }
        if (ch.nodeName === "rfz") {
            var dataRfz = true;
            ret.rfz = dataRfz;
        }
        if (ch.nodeName === "other-dynamics") {
            var dataOtherDynamics = getString(ch, true);
            ret.otherDynamics = dataOtherDynamics;
        }
        if (ch.nodeName === "fz") {
            var dataFz = true;
            ret.fz = dataFz;
        }
        if (ch.nodeName === "ppppp") {
            var dataPpppp = true;
            ret.ppppp = dataPpppp;
        }
        if (ch.nodeName === "mf") {
            var dataMf = true;
            ret.mf = dataMf;
        }
        if (ch.nodeName === "pppp") {
            var dataPppp = true;
            ret.pppp = dataPppp;
        }
        if (ch.nodeName === "fffff") {
            var dataFffff = true;
            ret.fffff = dataFffff;
        }
        if (ch.nodeName === "sffz") {
            var dataSffz = true;
            ret.sffz = dataSffz;
        }
        if (ch.nodeName === "sfp") {
            var dataSfp = true;
            ret.sfp = dataSfp;
        }
        if (ch.nodeName === "p") {
            var dataP = true;
            ret.p = dataP;
        }
        if (ch.nodeName === "ffff") {
            var dataFfff = true;
            ret.ffff = dataFfff;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToDynamics = xmlToDynamics;
function xmlToFingering(node) {
    "use strict";
    var ret = {};
    var foundSubstitution = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundAlternate = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "substitution") {
            var dataSubstitution = xmlToYesNo(ch2);
            ret.substitution = dataSubstitution;
            foundSubstitution = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "alternate") {
            var dataAlternate = xmlToYesNo(ch2);
            ret.alternate = dataAlternate;
            foundAlternate = true;
        }
    }
    var ch3 = node;
    var dataFinger = getNumber(ch3, true);
    ret.finger = dataFinger;
    if (!foundSubstitution) {
        ret.substitution = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundAlternate) {
        ret.alternate = false;
    }
    return ret;
}
exports.xmlToFingering = xmlToFingering;
function xmlToFret(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataFret = getNumber(ch3, true);
    ret.fret = dataFret;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToFret = xmlToFret;
function xmlToString(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataStringNum = getNumber(ch3, true);
    ret.stringNum = dataStringNum;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToString = xmlToString;
function xmlToTuningAlter(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    var ch3 = node;
    var dataStep = getString(ch3, true);
    ret.step = dataStep;
    return ret;
}
exports.xmlToTuningAlter = xmlToTuningAlter;
function xmlToTuningOctave(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    var ch3 = node;
    var dataStep = getString(ch3, true);
    ret.step = dataStep;
    return ret;
}
exports.xmlToTuningOctave = xmlToTuningOctave;
function xmlToDisplayText(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundLineHeight = false;
    var foundDir = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, true);
    ret.text = dataText;
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToDisplayText = xmlToDisplayText;
function xmlToAccidentalText(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundLineHeight = false;
    var foundDir = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, true);
    ret.text = dataText;
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToAccidentalText = xmlToAccidentalText;
function xmlToMidiDevice(node) {
    "use strict";
    var ret = {};
    var foundDeviceName = false;
    var foundPort = false;
    var foundId = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "port") {
            var dataPort = getNumber(ch2, true);
            ret.port = dataPort;
            foundPort = true;
        }
        if (ch2.name === "id") {
            var dataId = getNumber(ch2, true);
            ret.id = dataId;
            foundId = true;
        }
    }
    var ch3 = node;
    var dataDeviceName = getString(ch3, true);
    ret.deviceName = dataDeviceName;
    if (!foundDeviceName) {
        ret.deviceName = "";
    }
    if (!foundPort) {
        ret.port = NaN;
    }
    if (!foundId) {
        ret.id = NaN;
    }
    return ret;
}
exports.xmlToMidiDevice = xmlToMidiDevice;
function verifyMidiChannel(m) {
    assert(m >= 1 && m <= 16);
}
exports.verifyMidiChannel = verifyMidiChannel;
function xmlToMidiChannel(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToMidiChannel = xmlToMidiChannel;
function verifyMidiBank(m) {
    assert(m >= 1 && m <= 16384);
}
exports.verifyMidiBank = verifyMidiBank;
function xmlToMidiBank(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToMidiBank = xmlToMidiBank;
function verifyMidiProgram(m) {
    assert(m >= 1 && m <= 128);
}
exports.verifyMidiProgram = verifyMidiProgram;
function xmlToMidiProgram(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToMidiProgram = xmlToMidiProgram;
function verifyMidiUnpitched(m) {
    assert(m >= 1 && m <= 128);
}
exports.verifyMidiUnpitched = verifyMidiUnpitched;
function xmlToMidiUnpitched(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToMidiUnpitched = xmlToMidiUnpitched;
function verifyVolume(m) {
    assert(m >= 1 && m <= 100);
}
exports.verifyVolume = verifyVolume;
function xmlToVolume(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToVolume = xmlToVolume;
function verifyPan(m) {
    assert(m >= -180 && m <= 180);
}
exports.verifyPan = verifyPan;
function xmlToPan(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToPan = xmlToPan;
function verifyElevation(m) {
    assert(m >= -180 && m <= 180);
}
exports.verifyElevation = verifyElevation;
function xmlToElevation(node) {
    var str = node.textContent;
    var num = str.toLowerCase().indexOf("0x") === 0 ? parseInt(str, 16) : parseFloat(str);
    return num;
}
exports.xmlToElevation = xmlToElevation;
function xmlToMidiInstrument(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "midi-unpitched") {
            var dataMidiUnpitched = getNumber(ch, true);
            ret.midiUnpitched = dataMidiUnpitched;
        }
        if (ch.nodeName === "volume") {
            var dataVolume = getNumber(ch, true);
            ret.volume = dataVolume;
        }
        if (ch.nodeName === "pan") {
            var dataPan = getNumber(ch, true);
            ret.pan = dataPan;
        }
        if (ch.nodeName === "elevation") {
            var dataElevation = getNumber(ch, true);
            ret.elevation = dataElevation;
        }
        if (ch.nodeName === "midi-bank") {
            var dataMidiBank = getNumber(ch, true);
            ret.midiBank = dataMidiBank;
        }
        if (ch.nodeName === "midi-program") {
            var dataMidiProgram = getNumber(ch, true);
            ret.midiProgram = dataMidiProgram;
        }
        if (ch.nodeName === "midi-channel") {
            var dataMidiChannel = getNumber(ch, true);
            ret.midiChannel = dataMidiChannel;
        }
        if (ch.nodeName === "midi-name") {
            var dataMidiName = getString(ch, true);
            ret.midiName = dataMidiName;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "id") {
            var dataId = getString(ch2, true);
            ret.id = dataId;
        }
    }
    return ret;
}
exports.xmlToMidiInstrument = xmlToMidiInstrument;
function xmlToPlay(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "ipa") {
            var dataIpa = getString(ch, true);
            ret.ipa = dataIpa;
        }
        if (ch.nodeName === "mute") {
            var dataMute = getString(ch, true);
            ret.mute = dataMute;
        }
        if (ch.nodeName === "other-play") {
            var dataOtherPlay = getString(ch, true);
            ret.otherPlay = dataOtherPlay;
        }
        if (ch.nodeName === "semi-pitched") {
            var dataSemiPitched = getString(ch, true);
            ret.semiPitched = dataSemiPitched;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPlay = xmlToPlay;
function xmlToMillimeters(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMillimeters = xmlToMillimeters;
function xmlToScaling(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "tenths") {
            var dataTenths = getNumber(ch, true);
            ret.tenths = dataTenths;
        }
        if (ch.nodeName === "millimeters") {
            var dataMillimeters = getNumber(ch, true);
            ret.millimeters = dataMillimeters;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToScaling = xmlToScaling;
function xmlToLeftMargin(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToLeftMargin = xmlToLeftMargin;
function xmlToRightMargin(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToRightMargin = xmlToRightMargin;
function xmlToTopMargin(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTopMargin = xmlToTopMargin;
function xmlToBottomMargin(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBottomMargin = xmlToBottomMargin;
function xmlToPageHeight(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPageHeight = xmlToPageHeight;
function xmlToPageWidth(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPageWidth = xmlToPageWidth;
(function (OddEvenBoth) {
    OddEvenBoth[OddEvenBoth["Both"] = 2] = "Both";
    OddEvenBoth[OddEvenBoth["Even"] = 1] = "Even";
    OddEvenBoth[OddEvenBoth["Odd"] = 0] = "Odd";
})(exports.OddEvenBoth || (exports.OddEvenBoth = {}));
var OddEvenBoth = exports.OddEvenBoth;
function getOddEvenBoth(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "both") {
        return 2 /* Both */;
    }
    if (s == "even") {
        return 1 /* Even */;
    }
    if (s == "odd") {
        return 0 /* Odd */;
    }
    assert(false, "Not reached");
}
exports.getOddEvenBoth = getOddEvenBoth;
function xmlToPageMargins(node) {
    "use strict";
    var ret = {};
    var foundType = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "top-margin") {
            var dataTopMargin = getNumber(ch, true);
            ret.topMargin = dataTopMargin;
        }
        if (ch.nodeName === "left-margin") {
            var dataLeftMargin = getNumber(ch, true);
            ret.leftMargin = dataLeftMargin;
        }
        if (ch.nodeName === "bottom-margin") {
            var dataBottomMargin = getNumber(ch, true);
            ret.bottomMargin = dataBottomMargin;
        }
        if (ch.nodeName === "right-margin") {
            var dataRightMargin = getNumber(ch, true);
            ret.rightMargin = dataRightMargin;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getOddEvenBoth(ch2, 2 /* Both */);
            ret.type = dataType;
            foundType = true;
        }
    }
    if (!foundType) {
        ret.type = 2 /* Both */;
    }
    return ret;
}
exports.xmlToPageMargins = xmlToPageMargins;
function xmlToPageLayout(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "page-height") {
            var dataPageHeight = getNumber(ch, true);
            ret.pageHeight = dataPageHeight;
        }
        if (ch.nodeName === "page-width") {
            var dataPageWidth = getNumber(ch, true);
            ret.pageWidth = dataPageWidth;
        }
        if (ch.nodeName === "page-margins") {
            var dataPageMargins = xmlToPageMargins(ch);
            ret.pageMargins = (ret.pageMargins || []).concat(dataPageMargins);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPageLayout = xmlToPageLayout;
function xmlToSystemDistance(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSystemDistance = xmlToSystemDistance;
function xmlToTopSystemDistance(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTopSystemDistance = xmlToTopSystemDistance;
function xmlToSystemLayout(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "system-dividers") {
            var dataSystemDividers = xmlToSystemDividers(ch);
            ret.systemDividers = dataSystemDividers;
        }
        if (ch.nodeName === "system-margins") {
            var dataSystemMargins = xmlToSystemMargins(ch);
            ret.systemMargins = dataSystemMargins;
        }
        if (ch.nodeName === "system-distance") {
            var dataSystemDistance = getNumber(ch, true);
            ret.systemDistance = dataSystemDistance;
        }
        if (ch.nodeName === "top-system-distance") {
            var dataTopSystemDistance = getNumber(ch, true);
            ret.topSystemDistance = dataTopSystemDistance;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSystemLayout = xmlToSystemLayout;
function xmlToSystemMargins(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "left-margin") {
            var dataLeftMargin = getNumber(ch, true);
            ret.leftMargin = dataLeftMargin;
        }
        if (ch.nodeName === "right-margin") {
            var dataRightMargin = getNumber(ch, true);
            ret.rightMargin = dataRightMargin;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSystemMargins = xmlToSystemMargins;
function xmlToSystemDividers(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "right-divider") {
            var dataRightDivider = xmlToRightDivider(ch);
            ret.rightDivider = dataRightDivider;
        }
        if (ch.nodeName === "left-divider") {
            var dataLeftDivider = xmlToLeftDivider(ch);
            ret.leftDivider = dataLeftDivider;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSystemDividers = xmlToSystemDividers;
function xmlToLeftDivider(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToLeftDivider = xmlToLeftDivider;
function xmlToRightDivider(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToRightDivider = xmlToRightDivider;
function xmlToStaffDistance(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStaffDistance = xmlToStaffDistance;
function xmlToStaffLayout(node) {
    "use strict";
    var ret = {};
    var foundNum = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "staff-distance") {
            var dataStaffDistance = getNumber(ch, true);
            ret.staffDistance = dataStaffDistance;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "num") {
            var dataNum = getNumber(ch2, true);
            ret.num = dataNum;
            foundNum = true;
        }
    }
    if (!foundNum) {
        ret.num = 1;
    }
    return ret;
}
exports.xmlToStaffLayout = xmlToStaffLayout;
function xmlToMeasureDistance(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMeasureDistance = xmlToMeasureDistance;
function xmlToMeasureLayout(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "measure-distance") {
            var dataMeasureDistance = getNumber(ch, true);
            ret.measureDistance = dataMeasureDistance;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMeasureLayout = xmlToMeasureLayout;
function xmlToLineWidth(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataTenths = getNumber(ch3, true);
    ret.tenths = dataTenths;
    return ret;
}
exports.xmlToLineWidth = xmlToLineWidth;
(function (CueGraceLarge) {
    CueGraceLarge[CueGraceLarge["Grace"] = 1] = "Grace";
    CueGraceLarge[CueGraceLarge["Cue"] = 0] = "Cue";
    CueGraceLarge[CueGraceLarge["Large"] = 2] = "Large";
})(exports.CueGraceLarge || (exports.CueGraceLarge = {}));
var CueGraceLarge = exports.CueGraceLarge;
function getCueGraceLarge(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "grace") {
        return 1 /* Grace */;
    }
    if (s == "cue") {
        return 0 /* Cue */;
    }
    if (s == "large") {
        return 2 /* Large */;
    }
    assert(false, "Not reached");
}
exports.getCueGraceLarge = getCueGraceLarge;
function xmlToNoteSize(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getCueGraceLarge(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataSize = getNumber(ch3, true);
    ret.size = dataSize;
    return ret;
}
exports.xmlToNoteSize = xmlToNoteSize;
function xmlToDistance(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataTenths = getNumber(ch3, true);
    ret.tenths = dataTenths;
    return ret;
}
exports.xmlToDistance = xmlToDistance;
function xmlToAppearance(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "line-width") {
            var dataLineWidths = xmlToLineWidth(ch);
            ret.lineWidths[popFront((dataLineWidths.type.length ? "_" : "") + toCamelCase(dataLineWidths.type))] = dataLineWidths;
        }
        if (ch.nodeName === "distance") {
            var dataDistances = xmlToDistance(ch);
            ret.distances[popFront((dataDistances.type.length ? "_" : "") + toCamelCase(dataDistances.type))] = dataDistances;
        }
        if (ch.nodeName === "other-appearance") {
            var dataOtherAppearances = getString(ch, true);
            ret.otherAppearances = (ret.otherAppearances || []).concat(dataOtherAppearances);
        }
        if (ch.nodeName === "note-size") {
            var dataNoteSizes = xmlToNoteSize(ch);
            ret.noteSizes[dataNoteSizes.type] = dataNoteSizes;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToAppearance = xmlToAppearance;
function xmlToCreator(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataCreator = getString(ch3, true);
    ret.creator = dataCreator;
    return ret;
}
exports.xmlToCreator = xmlToCreator;
function xmlToRights(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataRights = getString(ch3, true);
    ret.rights = dataRights;
    return ret;
}
exports.xmlToRights = xmlToRights;
function xmlToEncoder(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataEncoder = getString(ch3, true);
    ret.encoder = dataEncoder;
    return ret;
}
exports.xmlToEncoder = xmlToEncoder;
function xmlToSource(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    var ch3 = node;
    var dataSource = getString(ch3, true);
    ret.source = dataSource;
    return ret;
}
exports.xmlToSource = xmlToSource;
function xmlToRelation(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    return ret;
}
exports.xmlToRelation = xmlToRelation;
function xmlToMiscellaneousField(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "name") {
            var dataName = getString(ch2, true);
            ret.name = dataName;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    return ret;
}
exports.xmlToMiscellaneousField = xmlToMiscellaneousField;
function xmlToMiscellaneous(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "miscellaneous-field") {
            var dataMiscellaneousFields = xmlToMiscellaneousField(ch);
            ret.miscellaneousFields = (ret.miscellaneousFields || []).concat(dataMiscellaneousFields);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMiscellaneous = xmlToMiscellaneous;
function xmlToIdentification(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "miscellaneous") {
            var dataMiscellaneous = xmlToMiscellaneous(ch);
            ret.miscellaneous = dataMiscellaneous;
        }
        if (ch.nodeName === "creator") {
            var dataCreators = xmlToCreator(ch);
            ret.creators = (ret.creators || []).concat(dataCreators);
        }
        if (ch.nodeName === "relation") {
            var dataRelations = xmlToRelation(ch);
            ret.relations = (ret.relations || []).concat(dataRelations);
        }
        if (ch.nodeName === "rights") {
            var dataRights = xmlToRights(ch);
            ret.rights = (ret.rights || []).concat(dataRights);
        }
        if (ch.nodeName === "encoding") {
            var dataEncoding = xmlToEncoding(ch);
            ret.encoding = dataEncoding;
        }
        if (ch.nodeName === "source") {
            var dataSource = xmlToSource(ch);
            ret.source = dataSource;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToIdentification = xmlToIdentification;
function xmlToSupports(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "element") {
            var dataElement = getString(ch2, true);
            ret.element = dataElement;
        }
        if (ch2.name === "attribute") {
            var dataAttribute = getString(ch2, true);
            ret.attribute = dataAttribute;
        }
        if (ch2.name === "value") {
            var dataValue = getString(ch2, true);
            ret.value = dataValue;
        }
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    return ret;
}
exports.xmlToSupports = xmlToSupports;
function xmlToEncoding(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "encoding-description") {
            var dataEncodingDescriptions = getString(ch, true);
            ret.encodingDescriptions = (ret.encodingDescriptions || []).concat(dataEncodingDescriptions);
        }
        if (ch.nodeName === "encoding-date") {
            var dataEncodingDate = xmlToEncodingDate(ch);
            ret.encodingDate = dataEncodingDate;
        }
        if (ch.nodeName === "supports") {
            var dataSupports = xmlToSupports(ch);
            ret.supports[popFront((dataSupports.element.length ? "_" : "") + toCamelCase(dataSupports.element) + (dataSupports.attribute.length ? "_" : "") + toCamelCase(dataSupports.attribute))] = dataSupports;
        }
        if (ch.nodeName === "encoder") {
            var dataEncoders = xmlToEncoder(ch);
            ret.encoders = (ret.encoders || []).concat(dataEncoders);
        }
        if (ch.nodeName === "software") {
            var dataSoftwares = getString(ch, true);
            ret.softwares = (ret.softwares || []).concat(dataSoftwares);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToEncoding = xmlToEncoding;
(function (SeparatorType) {
    SeparatorType[SeparatorType["None"] = 0] = "None";
    SeparatorType[SeparatorType["Horizontal"] = 1] = "Horizontal";
    SeparatorType[SeparatorType["Diagonal"] = 2] = "Diagonal";
    SeparatorType[SeparatorType["Vertical"] = 3] = "Vertical";
    SeparatorType[SeparatorType["Adjacent"] = 4] = "Adjacent";
})(exports.SeparatorType || (exports.SeparatorType = {}));
var SeparatorType = exports.SeparatorType;
function getSeparatorType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 0 /* None */;
    }
    if (s == "horizontal") {
        return 1 /* Horizontal */;
    }
    if (s == "diagonal") {
        return 2 /* Diagonal */;
    }
    if (s == "vertical") {
        return 3 /* Vertical */;
    }
    if (s == "adjacent") {
        return 4 /* Adjacent */;
    }
    assert(false, "Not reached");
}
exports.getSeparatorType = getSeparatorType;
function xmlToTimeSeparator(node) {
    "use strict";
    var ret = {};
    var foundSeparator = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "separator") {
            var dataSeparator = getSeparatorType(ch2, 0 /* None */);
            ret.separator = dataSeparator;
            foundSeparator = true;
        }
    }
    if (!foundSeparator) {
        ret.separator = 0 /* None */;
    }
    return ret;
}
exports.xmlToTimeSeparator = xmlToTimeSeparator;
(function (TimeSymbolType) {
    TimeSymbolType[TimeSymbolType["DottedNote"] = 4] = "DottedNote";
    TimeSymbolType[TimeSymbolType["Cut"] = 1] = "Cut";
    TimeSymbolType[TimeSymbolType["SingleNumber"] = 2] = "SingleNumber";
    TimeSymbolType[TimeSymbolType["Note"] = 3] = "Note";
    TimeSymbolType[TimeSymbolType["Common"] = 0] = "Common";
    TimeSymbolType[TimeSymbolType["Normal"] = 5] = "Normal";
})(exports.TimeSymbolType || (exports.TimeSymbolType = {}));
var TimeSymbolType = exports.TimeSymbolType;
function getTimeSymbolType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "dotted-note") {
        return 4 /* DottedNote */;
    }
    if (s == "cut") {
        return 1 /* Cut */;
    }
    if (s == "single-number") {
        return 2 /* SingleNumber */;
    }
    if (s == "note") {
        return 3 /* Note */;
    }
    if (s == "common") {
        return 0 /* Common */;
    }
    if (s == "normal") {
        return 5 /* Normal */;
    }
    assert(false, "Not reached");
}
exports.getTimeSymbolType = getTimeSymbolType;
function xmlToTimeSymbol(node) {
    "use strict";
    var ret = {};
    var foundSymbol = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "symbol") {
            var dataSymbol = getTimeSymbolType(ch2, 5 /* Normal */);
            ret.symbol = dataSymbol;
            foundSymbol = true;
        }
    }
    if (!foundSymbol) {
        ret.symbol = 5 /* Normal */;
    }
    return ret;
}
exports.xmlToTimeSymbol = xmlToTimeSymbol;
(function (CancelLocation) {
    CancelLocation[CancelLocation["Right"] = 1] = "Right";
    CancelLocation[CancelLocation["BeforeBarline"] = 2] = "BeforeBarline";
    CancelLocation[CancelLocation["Left"] = 0] = "Left";
})(exports.CancelLocation || (exports.CancelLocation = {}));
var CancelLocation = exports.CancelLocation;
function getCancelLocation(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "right") {
        return 1 /* Right */;
    }
    if (s == "before-barline") {
        return 2 /* BeforeBarline */;
    }
    if (s == "left") {
        return 0 /* Left */;
    }
    assert(false, "Not reached");
}
exports.getCancelLocation = getCancelLocation;
function xmlToCancel(node) {
    "use strict";
    var ret = {};
    var foundLocation = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "location") {
            var dataLocation = getCancelLocation(ch2, 0 /* Left */);
            ret.location = dataLocation;
            foundLocation = true;
        }
    }
    var ch3 = node;
    var dataFifths = getNumber(ch3, true);
    ret.fifths = dataFifths;
    if (!foundLocation) {
        ret.location = 0 /* Left */;
    }
    return ret;
}
exports.xmlToCancel = xmlToCancel;
function xmlToFifths(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToFifths = xmlToFifths;
function xmlToKeyOctave(node) {
    "use strict";
    var ret = {};
    var foundCancel = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
        }
        if (ch2.name === "cancel") {
            var dataCancel = xmlToYesNo(ch2);
            ret.cancel = dataCancel;
            foundCancel = true;
        }
    }
    var ch3 = node;
    var dataOctave = getNumber(ch3, true);
    ret.octave = dataOctave;
    if (!foundCancel) {
        ret.cancel = false;
    }
    return ret;
}
exports.xmlToKeyOctave = xmlToKeyOctave;
function xmlToDivisions(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDivisions = xmlToDivisions;
function xmlToKey(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPrintObject = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "cancel") {
            var dataCancel = xmlToCancel(ch);
            ret.cancel = dataCancel;
        }
        if (ch.nodeName === "key-step") {
            var dataKeySteps = getString(ch, true);
            ret.keySteps = (ret.keySteps || []).concat(dataKeySteps);
        }
        if (ch.nodeName === "key-octave") {
            var dataKeyOctaves = xmlToKeyOctave(ch);
            ret.keyOctaves = (ret.keyOctaves || []).concat(dataKeyOctaves);
        }
        if (ch.nodeName === "fifths") {
            var dataFifths = getNumber(ch, true);
            ret.fifths = dataFifths;
        }
        if (ch.nodeName === "key-alter") {
            var dataKeyAlters = getString(ch, true);
            ret.keyAlters = (ret.keyAlters || []).concat(dataKeyAlters);
        }
        if (ch.nodeName === "key-accidental") {
            var dataKeyAccidentals = getString(ch, true);
            ret.keyAccidentals = (ret.keyAccidentals || []).concat(dataKeyAccidentals);
        }
        if (ch.nodeName === "mode") {
            var dataMode = getString(ch, true);
            ret.mode = dataMode;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    return ret;
}
exports.xmlToKey = xmlToKey;
function xmlToTime(node) {
    "use strict";
    var ret = {};
    var foundSymbol = false;
    var foundSeparator = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundPrintObject = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "interchangeable") {
            var dataInterchangeables = xmlToInterchangeable(ch);
            ret.interchangeables = (ret.interchangeables || []).concat(dataInterchangeables);
        }
        if (ch.nodeName === "beats") {
            var dataBeats = getNumber(ch, true);
            ret.beats = (ret.beats || []).concat(dataBeats);
        }
        if (ch.nodeName === "beat-type") {
            var dataBeatTypes = getNumber(ch, true);
            ret.beatTypes = (ret.beatTypes || []).concat(dataBeatTypes);
        }
        if (ch.nodeName === "senza-misura") {
            var dataSenzaMisura = true;
            ret.senzaMisura = dataSenzaMisura;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "symbol") {
            var dataSymbol = getTimeSymbolType(ch2, 5 /* Normal */);
            ret.symbol = dataSymbol;
            foundSymbol = true;
        }
        if (ch2.name === "separator") {
            var dataSeparator = getSeparatorType(ch2, 0 /* None */);
            ret.separator = dataSeparator;
            foundSeparator = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
    }
    if (!foundSymbol) {
        ret.symbol = 5 /* Normal */;
    }
    if (!foundSeparator) {
        ret.separator = 0 /* None */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    return ret;
}
exports.xmlToTime = xmlToTime;
function xmlToInterchangeable(node) {
    "use strict";
    var ret = {};
    var foundSymbol = false;
    var foundSeparator = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "beats") {
            var dataBeats = getNumber(ch, true);
            ret.beats = (ret.beats || []).concat(dataBeats);
        }
        if (ch.nodeName === "beat-type") {
            var dataBeatTypes = getNumber(ch, true);
            ret.beatTypes = (ret.beatTypes || []).concat(dataBeatTypes);
        }
        if (ch.nodeName === "time-relation") {
            var dataTimeRelation = getString(ch, true);
            ret.timeRelation = dataTimeRelation;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "symbol") {
            var dataSymbol = getTimeSymbolType(ch2, 5 /* Normal */);
            ret.symbol = dataSymbol;
            foundSymbol = true;
        }
        if (ch2.name === "separator") {
            var dataSeparator = getSeparatorType(ch2, 0 /* None */);
            ret.separator = dataSeparator;
            foundSeparator = true;
        }
    }
    if (!foundSymbol) {
        ret.symbol = 5 /* Normal */;
    }
    if (!foundSeparator) {
        ret.separator = 0 /* None */;
    }
    return ret;
}
exports.xmlToInterchangeable = xmlToInterchangeable;
function xmlToStaves(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStaves = xmlToStaves;
(function (PartSymbolType) {
    PartSymbolType[PartSymbolType["None"] = 0] = "None";
    PartSymbolType[PartSymbolType["Line"] = 2] = "Line";
    PartSymbolType[PartSymbolType["Bracket"] = 3] = "Bracket";
    PartSymbolType[PartSymbolType["Square"] = 4] = "Square";
    PartSymbolType[PartSymbolType["Brace"] = 1] = "Brace";
})(exports.PartSymbolType || (exports.PartSymbolType = {}));
var PartSymbolType = exports.PartSymbolType;
function getPartSymbolType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 0 /* None */;
    }
    if (s == "line") {
        return 2 /* Line */;
    }
    if (s == "bracket") {
        return 3 /* Bracket */;
    }
    if (s == "square") {
        return 4 /* Square */;
    }
    if (s == "brace") {
        return 1 /* Brace */;
    }
    assert(false, "Not reached");
}
exports.getPartSymbolType = getPartSymbolType;
function xmlToPartSymbol(node) {
    "use strict";
    var ret = {};
    var foundTopStaff = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundColor = false;
    var foundBottomStaff = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "top-staff") {
            var dataTopStaff = getNumber(ch2, true);
            ret.topStaff = dataTopStaff;
            foundTopStaff = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "bottom-staff") {
            var dataBottomStaff = getNumber(ch2, true);
            ret.bottomStaff = dataBottomStaff;
            foundBottomStaff = true;
        }
    }
    var ch3 = node;
    var dataType = getPartSymbolType(ch3, null);
    ret.type = dataType;
    if (!foundTopStaff) {
        ret.topStaff = -1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundBottomStaff) {
        ret.bottomStaff = -1;
    }
    return ret;
}
exports.xmlToPartSymbol = xmlToPartSymbol;
function xmlToLine(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToLine = xmlToLine;
function xmlToClef(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundSize = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPrintObject = false;
    var foundAfterBarline = false;
    var foundAdditional = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "clef-octave-change") {
            var dataClefOctaveChange = getString(ch, true);
            ret.clefOctaveChange = dataClefOctaveChange;
        }
        if (ch.nodeName === "sign") {
            var dataSign = getString(ch, true);
            ret.sign = dataSign;
        }
        if (ch.nodeName === "line") {
            var dataLine = getNumber(ch, true);
            ret.line = dataLine;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "size") {
            var dataSize = getSymbolSize(ch2, 1 /* Full */);
            ret.size = dataSize;
            foundSize = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "after-barline") {
            var dataAfterBarline = xmlToYesNo(ch2);
            ret.afterBarline = dataAfterBarline;
            foundAfterBarline = true;
        }
        if (ch2.name === "additional") {
            var dataAdditional = xmlToYesNo(ch2);
            ret.additional = dataAdditional;
            foundAdditional = true;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundSize) {
        ret.size = 1 /* Full */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundAfterBarline) {
        ret.afterBarline = false;
    }
    if (!foundAdditional) {
        ret.additional = false;
    }
    return ret;
}
exports.xmlToClef = xmlToClef;
function xmlToStaffLines(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStaffLines = xmlToStaffLines;
function xmlToStaffTuning(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "tuning-alter") {
            var dataTuningAlter = xmlToTuningAlter(ch);
            ret.tuningAlter = dataTuningAlter;
        }
        if (ch.nodeName === "tuning-step") {
            var dataTuningStep = getString(ch, true);
            ret.tuningStep = dataTuningStep;
        }
        if (ch.nodeName === "tuning-octave") {
            var dataTuningOctave = xmlToTuningOctave(ch);
            ret.tuningOctave = dataTuningOctave;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line") {
            var dataLine = getString(ch2, true);
            ret.line = dataLine;
        }
    }
    return ret;
}
exports.xmlToStaffTuning = xmlToStaffTuning;
function xmlToStaffSize(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToStaffSize = xmlToStaffSize;
(function (ShowFretsType) {
    ShowFretsType[ShowFretsType["Letters"] = 1] = "Letters";
    ShowFretsType[ShowFretsType["Numbers"] = 0] = "Numbers";
})(exports.ShowFretsType || (exports.ShowFretsType = {}));
var ShowFretsType = exports.ShowFretsType;
function getShowFretsType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "letters") {
        return 1 /* Letters */;
    }
    if (s == "numbers") {
        return 0 /* Numbers */;
    }
    assert(false, "Not reached");
}
exports.getShowFretsType = getShowFretsType;
function xmlToStaffDetails(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundPrintObject = false;
    var foundPrintSpacing = false;
    var foundShowFets = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "staff-lines") {
            var dataStaffLines = getNumber(ch, true);
            ret.staffLines = dataStaffLines;
        }
        if (ch.nodeName === "staff-tuning") {
            var dataStaffTunings = xmlToStaffTuning(ch);
            ret.staffTunings = (ret.staffTunings || []).concat(dataStaffTunings);
        }
        if (ch.nodeName === "staff-size") {
            var dataStaffSize = getNumber(ch, true);
            ret.staffSize = dataStaffSize;
        }
        if (ch.nodeName === "capo") {
            var dataCapo = getString(ch, true);
            ret.capo = dataCapo;
        }
        if (ch.nodeName === "staff-type") {
            var dataStaffType = getString(ch, true);
            ret.staffType = dataStaffType;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "print-spacing") {
            var dataPrintSpacing = xmlToYesNo(ch2);
            ret.printSpacing = dataPrintSpacing;
            foundPrintSpacing = true;
        }
        if (ch2.name === "show-fets") {
            var dataShowFets = getShowFretsType(ch2, 0 /* Numbers */);
            ret.showFets = dataShowFets;
            foundShowFets = true;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundPrintSpacing) {
        ret.printSpacing = true;
    }
    if (!foundShowFets) {
        ret.showFets = 0 /* Numbers */;
    }
    return ret;
}
exports.xmlToStaffDetails = xmlToStaffDetails;
function xmlToDouble(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDouble = xmlToDouble;
function xmlToTranspose(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "diatonic") {
            var dataDiatonic = getString(ch, true);
            ret.diatonic = dataDiatonic;
        }
        if (ch.nodeName === "octave-change") {
            var dataOctaveChange = getString(ch, true);
            ret.octaveChange = dataOctaveChange;
        }
        if (ch.nodeName === "double") {
            var dataDouble_ = xmlToDouble(ch);
            ret.double_ = dataDouble_;
        }
        if (ch.nodeName === "chromatic") {
            var dataChromatic = getString(ch, true);
            ret.chromatic = dataChromatic;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
    }
    if (!foundNumber_) {
        ret.number_ = NaN;
    }
    return ret;
}
exports.xmlToTranspose = xmlToTranspose;
function xmlToDirective(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToDirective = xmlToDirective;
function xmlToSlashDot(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSlashDot = xmlToSlashDot;
function xmlToMultipleRest(node) {
    "use strict";
    var ret = {};
    var foundMultipleRest = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "multiple-rest") {
            var dataMultipleRest = xmlToYesNo(ch2);
            ret.multipleRest = dataMultipleRest;
            foundMultipleRest = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundMultipleRest) {
        ret.multipleRest = false;
    }
    return ret;
}
exports.xmlToMultipleRest = xmlToMultipleRest;
function xmlToMeasureRepeat(node) {
    "use strict";
    var ret = {};
    var foundSlashed = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "slashed") {
            var dataSlashed = getNumber(ch2, true);
            ret.slashed = dataSlashed;
            foundSlashed = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, false);
    ret.data = dataData;
    if (!foundSlashed) {
        ret.slashed = 1;
    }
    return ret;
}
exports.xmlToMeasureRepeat = xmlToMeasureRepeat;
function xmlToBeatRepeat(node) {
    "use strict";
    var ret = {};
    var foundUseDots = false;
    var foundSlases = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "slash-type") {
            var dataSlashType = getString(ch, true);
            ret.slashType = dataSlashType;
        }
        if (ch.nodeName === "slash-dot") {
            var dataSlashDots = xmlToSlashDot(ch);
            ret.slashDots = (ret.slashDots || []).concat(dataSlashDots);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "use-dots") {
            var dataUseDots = xmlToYesNo(ch2);
            ret.useDots = dataUseDots;
            foundUseDots = true;
        }
        if (ch2.name === "slases") {
            var dataSlases = getNumber(ch2, true);
            ret.slases = dataSlases;
            foundSlases = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundUseDots) {
        ret.useDots = false;
    }
    if (!foundSlases) {
        ret.slases = 1;
    }
    return ret;
}
exports.xmlToBeatRepeat = xmlToBeatRepeat;
function xmlToSlash(node) {
    "use strict";
    var ret = {};
    var foundUseDots = false;
    var foundUseStems = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "slash-type") {
            var dataSlashType = getString(ch, true);
            ret.slashType = dataSlashType;
        }
        if (ch.nodeName === "slash-dot") {
            var dataSlashDots = xmlToSlashDot(ch);
            ret.slashDots = (ret.slashDots || []).concat(dataSlashDots);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "use-dots") {
            var dataUseDots = xmlToYesNo(ch2);
            ret.useDots = dataUseDots;
            foundUseDots = true;
        }
        if (ch2.name === "use-stems") {
            var dataUseStems = xmlToYesNo(ch2);
            ret.useStems = dataUseStems;
            foundUseStems = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundUseDots) {
        ret.useDots = false;
    }
    if (!foundUseStems) {
        ret.useStems = false;
    }
    return ret;
}
exports.xmlToSlash = xmlToSlash;
function xmlToMeasureStyle(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "measure-repeat") {
            var dataMeasureRepeat = xmlToMeasureRepeat(ch);
            ret.measureRepeat = dataMeasureRepeat;
        }
        if (ch.nodeName === "beat-repeat") {
            var dataBeatRepeat = xmlToBeatRepeat(ch);
            ret.beatRepeat = dataBeatRepeat;
        }
        if (ch.nodeName === "multiple-rest") {
            var dataMultipleRest = xmlToMultipleRest(ch);
            ret.multipleRest = dataMultipleRest;
        }
        if (ch.nodeName === "slash") {
            var dataSlash = xmlToSlash(ch);
            ret.slash = dataSlash;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToMeasureStyle = xmlToMeasureStyle;
function xmlToAttributes(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "divisions") {
            var dataDivisions = getNumber(ch, true);
            ret.divisions = dataDivisions;
        }
        if (ch.nodeName === "part-symbol") {
            var dataPartSymbol = xmlToPartSymbol(ch);
            ret.partSymbol = dataPartSymbol;
        }
        if (ch.nodeName === "clef") {
            var dataClef = xmlToClef(ch);
            ret.clef = dataClef;
        }
        if (ch.nodeName === "measure-style") {
            var dataMeasureStyle = xmlToMeasureStyle(ch);
            ret.measureStyle = dataMeasureStyle;
        }
        if (ch.nodeName === "time") {
            var dataTime = xmlToTime(ch);
            ret.time = dataTime;
        }
        if (ch.nodeName === "staff-details") {
            var dataStaffDetails = xmlToStaffDetails(ch);
            ret.staffDetails = dataStaffDetails;
        }
        if (ch.nodeName === "transpose") {
            var dataTranspose = xmlToTranspose(ch);
            ret.transpose = dataTranspose;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "staves") {
            var dataStaves = getNumber(ch, true);
            ret.staves = dataStaves;
        }
        if (ch.nodeName === "instruments") {
            var dataInstruments = getString(ch, true);
            ret.instruments = dataInstruments;
        }
        if (ch.nodeName === "key") {
            var dataKeySignature = xmlToKey(ch);
            ret.keySignature = dataKeySignature;
        }
        if (ch.nodeName === "directive") {
            var dataDirective = xmlToDirective(ch);
            ret.directive = dataDirective;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToAttributes = xmlToAttributes;
function xmlToCue(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToCue = xmlToCue;
function xmlToGrace(node) {
    "use strict";
    var ret = {};
    var foundSlash = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "make-time") {
            var dataMakeTime = getString(ch2, true);
            ret.makeTime = dataMakeTime;
        }
        if (ch2.name === "steal-time-previous") {
            var dataStealTimePrevious = getString(ch2, true);
            ret.stealTimePrevious = dataStealTimePrevious;
        }
        if (ch2.name === "slash") {
            var dataSlash = xmlToYesNo(ch2);
            ret.slash = dataSlash;
            foundSlash = true;
        }
        if (ch2.name === "steal-time-following") {
            var dataStealTimeFollowing = getString(ch2, true);
            ret.stealTimeFollowing = dataStealTimeFollowing;
        }
    }
    if (!foundSlash) {
        ret.slash = false;
    }
    return ret;
}
exports.xmlToGrace = xmlToGrace;
function xmlToChord(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToChord = xmlToChord;
function xmlToUnpitched(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "display-step") {
            var dataDisplayStep = getString(ch, true);
            ret.displayStep = dataDisplayStep;
        }
        if (ch.nodeName === "display-octave") {
            var dataDisplayOctave = getString(ch, true);
            ret.displayOctave = dataDisplayOctave;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToUnpitched = xmlToUnpitched;
function xmlToAlter(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToAlter = xmlToAlter;
function xmlToOctave(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToOctave = xmlToOctave;
function xmlToPitch(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "alter") {
            var dataAlter = getNumber(ch, true);
            ret.alter = dataAlter;
        }
        if (ch.nodeName === "step") {
            var dataStep = getString(ch, true);
            ret.step = dataStep;
        }
        if (ch.nodeName === "octave") {
            var dataOctave = getNumber(ch, true);
            ret.octave = dataOctave;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPitch = xmlToPitch;
function xmlToFullNote(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "unpitched") {
            var dataUnpitched = xmlToUnpitched(ch);
            ret.unpitched = dataUnpitched;
        }
        if (ch.nodeName === "chord") {
            var dataChord = xmlToChord(ch);
            ret.chord = dataChord;
        }
        if (ch.nodeName === "pitch") {
            var dataPitch = xmlToPitch(ch);
            ret.pitch = dataPitch;
        }
        if (ch.nodeName === "rest") {
            var dataRest = xmlToRest(ch);
            ret.rest = dataRest;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToFullNote = xmlToFullNote;
function xmlToRest(node) {
    "use strict";
    var ret = {};
    var foundMeasure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "display-step") {
            var dataDisplayStep = getString(ch, true);
            ret.displayStep = dataDisplayStep;
        }
        if (ch.nodeName === "display-octave") {
            var dataDisplayOctave = getString(ch, true);
            ret.displayOctave = dataDisplayOctave;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "measure") {
            var dataMeasure = xmlToYesNo(ch2);
            ret.measure = dataMeasure;
            foundMeasure = true;
        }
    }
    if (!foundMeasure) {
        ret.measure = false;
    }
    return ret;
}
exports.xmlToRest = xmlToRest;
function xmlToDuration(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDuration = xmlToDuration;
function xmlToTie(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "time-only") {
            var dataTimeOnly = getString(ch2, true);
            ret.timeOnly = dataTimeOnly;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    return ret;
}
exports.xmlToTie = xmlToTie;
function xmlToInstrument(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "id") {
            var dataId = getString(ch2, true);
            ret.id = dataId;
        }
    }
    return ret;
}
exports.xmlToInstrument = xmlToInstrument;
function xmlToNote(node) {
    "use strict";
    var ret = {};
    var foundAttack = false;
    var foundEndDynamics = false;
    var foundPizzicato = false;
    var foundDynamics = false;
    var foundRelease = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPrintObject = false;
    var foundPrintSpacing = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "notehead-text") {
            var dataNoteheadText = xmlToNoteheadText(ch);
            ret.noteheadText = dataNoteheadText;
        }
        if (ch.nodeName === "time-modification") {
            var dataTimeModification = xmlToTimeModification(ch);
            ret.timeModification = dataTimeModification;
        }
        if (ch.nodeName === "accidental") {
            var dataAccidental = xmlToAccidental(ch);
            ret.accidental = dataAccidental;
        }
        if (ch.nodeName === "instrument") {
            var dataInstrument = xmlToInstrument(ch);
            ret.instrument = dataInstrument;
        }
        if (ch.nodeName === "lyric") {
            var dataLyrics = xmlToLyric(ch);
            ret.lyrics = (ret.lyrics || []).concat(dataLyrics);
        }
        if (ch.nodeName === "dot") {
            var dataDots = xmlToDot(ch);
            ret.dots = (ret.dots || []).concat(dataDots);
        }
        if (ch.nodeName === "notations") {
            var dataNotations = xmlToNotations(ch);
            ret.notations = (ret.notations || []).concat(dataNotations);
        }
        if (ch.nodeName === "stem") {
            var dataStem = xmlToStem(ch);
            ret.stem = dataStem;
        }
        if (ch.nodeName === "type") {
            var dataNoteType = xmlToType(ch);
            ret.noteType = dataNoteType;
        }
        if (ch.nodeName === "cue") {
            var dataCue = xmlToCue(ch);
            ret.cue = dataCue;
        }
        if (ch.nodeName === "duration") {
            var dataDuration = getNumber(ch, true);
            ret.duration = dataDuration;
        }
        if (ch.nodeName === "tie") {
            var dataTies = xmlToTie(ch);
            ret.ties = (ret.ties || []).concat(dataTies);
        }
        if (ch.nodeName === "play") {
            var dataPlay = xmlToPlay(ch);
            ret.play = dataPlay;
        }
        if (ch.nodeName === "staff") {
            var dataStaff = xmlToStaff(ch);
            ret.staff = dataStaff;
        }
        if (ch.nodeName === "grace") {
            var dataGrace = xmlToGrace(ch);
            ret.grace = dataGrace;
        }
        if (ch.nodeName === "notehead") {
            var dataNotehead = xmlToNotehead(ch);
            ret.notehead = dataNotehead;
        }
        if (ch.nodeName === "voice") {
            var dataVoice = getString(ch, true);
            ret.voice = dataVoice;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "unpitched") {
            var dataUnpitched = xmlToUnpitched(ch);
            ret.unpitched = dataUnpitched;
        }
        if (ch.nodeName === "chord") {
            var dataChord = xmlToChord(ch);
            ret.chord = dataChord;
        }
        if (ch.nodeName === "pitch") {
            var dataPitch = xmlToPitch(ch);
            ret.pitch = dataPitch;
        }
        if (ch.nodeName === "rest") {
            var dataRest = xmlToRest(ch);
            ret.rest = dataRest;
        }
        if (ch.nodeName === "beam") {
            var dataBeams = xmlToBeam(ch);
            ret.beams = (ret.beams || []).concat(dataBeams);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "attack") {
            var dataAttack = getNumber(ch2, true);
            ret.attack = dataAttack;
            foundAttack = true;
        }
        if (ch2.name === "end-dynamics") {
            var dataEndDynamics = getNumber(ch2, true);
            ret.endDynamics = dataEndDynamics;
            foundEndDynamics = true;
        }
        if (ch2.name === "pizzicato") {
            var dataPizzicato = xmlToYesNo(ch2);
            ret.pizzicato = dataPizzicato;
            foundPizzicato = true;
        }
        if (ch2.name === "dynamics") {
            var dataDynamics = getNumber(ch2, true);
            ret.dynamics = dataDynamics;
            foundDynamics = true;
        }
        if (ch2.name === "release") {
            var dataRelease = getNumber(ch2, true);
            ret.release = dataRelease;
            foundRelease = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "print-dot") {
            var dataPrintDot = xmlToYesNo(ch2);
            ret.printDot = dataPrintDot;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "print-spacing") {
            var dataPrintSpacing = xmlToYesNo(ch2);
            ret.printSpacing = dataPrintSpacing;
            foundPrintSpacing = true;
        }
        if (ch2.name === "print-lyric") {
            var dataPrintLyric = xmlToYesNo(ch2);
            ret.printLyric = dataPrintLyric;
        }
        if (ch2.name === "time-only") {
            var dataTimeOnly = getString(ch2, true);
            ret.timeOnly = dataTimeOnly;
        }
    }
    if (!foundAttack) {
        ret.attack = NaN;
    }
    if (!foundEndDynamics) {
        ret.endDynamics = 90;
    }
    if (!foundPizzicato) {
        ret.pizzicato = false;
    }
    if (!foundDynamics) {
        ret.dynamics = 90;
    }
    if (!foundRelease) {
        ret.release = NaN;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundPrintSpacing) {
        ret.printSpacing = true;
    }
    return ret;
}
exports.xmlToNote = xmlToNote;
(function (Count) {
    Count[Count["Quarter"] = 4] = "Quarter";
    Count[Count["Breve"] = 9990] = "Breve";
    Count[Count["Long"] = 9991] = "Long";
    Count[Count["_1024th"] = 1024] = "_1024th";
    Count[Count["_32nd"] = 32] = "_32nd";
    Count[Count["_16th"] = 16] = "_16th";
    Count[Count["Eighth"] = 8] = "Eighth";
    Count[Count["Maxima"] = 9992] = "Maxima";
    Count[Count["_512th"] = 512] = "_512th";
    Count[Count["_64th"] = 64] = "_64th";
    Count[Count["_256th"] = 256] = "_256th";
    Count[Count["_128th"] = 128] = "_128th";
    Count[Count["Half"] = 2] = "Half";
    Count[Count["Whole"] = 1] = "Whole";
})(exports.Count || (exports.Count = {}));
var Count = exports.Count;
function getCount(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "quarter") {
        return 4 /* Quarter */;
    }
    if (s == "breve") {
        return 9990 /* Breve */;
    }
    if (s == "long") {
        return 9991 /* Long */;
    }
    if (s == "1024th") {
        return 1024 /* _1024th */;
    }
    if (s == "32nd") {
        return 32 /* _32nd */;
    }
    if (s == "16th") {
        return 16 /* _16th */;
    }
    if (s == "eighth") {
        return 8 /* Eighth */;
    }
    if (s == "maxima") {
        return 9992 /* Maxima */;
    }
    if (s == "512th") {
        return 512 /* _512th */;
    }
    if (s == "64th") {
        return 64 /* _64th */;
    }
    if (s == "256th") {
        return 256 /* _256th */;
    }
    if (s == "128th") {
        return 128 /* _128th */;
    }
    if (s == "half") {
        return 2 /* Half */;
    }
    if (s == "whole") {
        return 1 /* Whole */;
    }
    assert(false, "Not reached");
}
exports.getCount = getCount;
function xmlToType(node) {
    "use strict";
    var ret = {};
    var foundSize = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "size") {
            var dataSize = getSymbolSize(ch2, 0 /* Unspecified */);
            ret.size = dataSize;
            foundSize = true;
        }
    }
    var ch3 = node;
    var dataDuration = getCount(ch3, null);
    ret.duration = dataDuration;
    if (!foundSize) {
        ret.size = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToType = xmlToType;
function xmlToDot(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToDot = xmlToDot;
(function (MxmlAccidental) {
    MxmlAccidental[MxmlAccidental["NaturalFlat"] = 7] = "NaturalFlat";
    MxmlAccidental[MxmlAccidental["SharpUp"] = 13] = "SharpUp";
    MxmlAccidental[MxmlAccidental["ThreeQuartersFlat"] = 10] = "ThreeQuartersFlat";
    MxmlAccidental[MxmlAccidental["ThreeQuartersSharp"] = 11] = "ThreeQuartersSharp";
    MxmlAccidental[MxmlAccidental["QuarterFlat"] = 8] = "QuarterFlat";
    MxmlAccidental[MxmlAccidental["Flat"] = 2] = "Flat";
    MxmlAccidental[MxmlAccidental["TripleSharp"] = 18] = "TripleSharp";
    MxmlAccidental[MxmlAccidental["Flat1"] = 27] = "Flat1";
    MxmlAccidental[MxmlAccidental["Flat2"] = 28] = "Flat2";
    MxmlAccidental[MxmlAccidental["Flat3"] = 29] = "Flat3";
    MxmlAccidental[MxmlAccidental["Flat4"] = 291] = "Flat4";
    MxmlAccidental[MxmlAccidental["TripleFlat"] = 19] = "TripleFlat";
    MxmlAccidental[MxmlAccidental["Flat5"] = 30] = "Flat5";
    MxmlAccidental[MxmlAccidental["Sharp"] = 0] = "Sharp";
    MxmlAccidental[MxmlAccidental["QuarterSharp"] = 9] = "QuarterSharp";
    MxmlAccidental[MxmlAccidental["SlashFlat"] = 21] = "SlashFlat";
    MxmlAccidental[MxmlAccidental["FlatDown"] = 16] = "FlatDown";
    MxmlAccidental[MxmlAccidental["NaturalDown"] = 14] = "NaturalDown";
    MxmlAccidental[MxmlAccidental["SlashQuarterSharp"] = 19] = "SlashQuarterSharp";
    MxmlAccidental[MxmlAccidental["SharpSharp"] = 4] = "SharpSharp";
    MxmlAccidental[MxmlAccidental["Sharp1"] = 23] = "Sharp1";
    MxmlAccidental[MxmlAccidental["FlatUp"] = 17] = "FlatUp";
    MxmlAccidental[MxmlAccidental["Sharp2"] = 24] = "Sharp2";
    MxmlAccidental[MxmlAccidental["Sharp3"] = 25] = "Sharp3";
    MxmlAccidental[MxmlAccidental["DoubleSharp"] = 3] = "DoubleSharp";
    MxmlAccidental[MxmlAccidental["Sharp4"] = 251] = "Sharp4";
    MxmlAccidental[MxmlAccidental["Sharp5"] = 26] = "Sharp5";
    MxmlAccidental[MxmlAccidental["Sori"] = 31] = "Sori";
    MxmlAccidental[MxmlAccidental["DoubleSlashFlat"] = 22] = "DoubleSlashFlat";
    MxmlAccidental[MxmlAccidental["SharpDown"] = 12] = "SharpDown";
    MxmlAccidental[MxmlAccidental["Koron"] = 32] = "Koron";
    MxmlAccidental[MxmlAccidental["NaturalUp"] = 15] = "NaturalUp";
    MxmlAccidental[MxmlAccidental["SlashSharp"] = 20] = "SlashSharp";
    MxmlAccidental[MxmlAccidental["NaturalSharp"] = 6] = "NaturalSharp";
    MxmlAccidental[MxmlAccidental["FlatFlat"] = 5] = "FlatFlat";
    MxmlAccidental[MxmlAccidental["Natural"] = 1] = "Natural";
    MxmlAccidental[MxmlAccidental["DoubleFlat"] = 33] = "DoubleFlat";
})(exports.MxmlAccidental || (exports.MxmlAccidental = {}));
var MxmlAccidental = exports.MxmlAccidental;
function getMxmlAccidental(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "natural-flat") {
        return 7 /* NaturalFlat */;
    }
    if (s == "sharp-up") {
        return 13 /* SharpUp */;
    }
    if (s == "three-quarters-flat") {
        return 10 /* ThreeQuartersFlat */;
    }
    if (s == "three-quarters-sharp") {
        return 11 /* ThreeQuartersSharp */;
    }
    if (s == "quarter-flat") {
        return 8 /* QuarterFlat */;
    }
    if (s == "flat") {
        return 2 /* Flat */;
    }
    if (s == "triple-sharp") {
        return 18 /* TripleSharp */;
    }
    if (s == "flat-1") {
        return 27 /* Flat1 */;
    }
    if (s == "flat-2") {
        return 28 /* Flat2 */;
    }
    if (s == "flat-3") {
        return 29 /* Flat3 */;
    }
    if (s == "flat-4") {
        return 291 /* Flat4 */;
    }
    if (s == "triple-flat") {
        return 19 /* TripleFlat */;
    }
    if (s == "flat-5") {
        return 30 /* Flat5 */;
    }
    if (s == "sharp") {
        return 0 /* Sharp */;
    }
    if (s == "quarter-sharp") {
        return 9 /* QuarterSharp */;
    }
    if (s == "slash-flat") {
        return 21 /* SlashFlat */;
    }
    if (s == "flat-down") {
        return 16 /* FlatDown */;
    }
    if (s == "natural-down") {
        return 14 /* NaturalDown */;
    }
    if (s == "slash-quarter-sharp") {
        return 19 /* SlashQuarterSharp */;
    }
    if (s == "sharp-sharp") {
        return 4 /* SharpSharp */;
    }
    if (s == "sharp-1") {
        return 23 /* Sharp1 */;
    }
    if (s == "flat-up") {
        return 17 /* FlatUp */;
    }
    if (s == "sharp-2") {
        return 24 /* Sharp2 */;
    }
    if (s == "sharp-3") {
        return 25 /* Sharp3 */;
    }
    if (s == "double-sharp") {
        return 3 /* DoubleSharp */;
    }
    if (s == "sharp-4") {
        return 251 /* Sharp4 */;
    }
    if (s == "sharp-5") {
        return 26 /* Sharp5 */;
    }
    if (s == "sori") {
        return 31 /* Sori */;
    }
    if (s == "double-slash-flat") {
        return 22 /* DoubleSlashFlat */;
    }
    if (s == "sharp-down") {
        return 12 /* SharpDown */;
    }
    if (s == "koron") {
        return 32 /* Koron */;
    }
    if (s == "natural-up") {
        return 15 /* NaturalUp */;
    }
    if (s == "slash-sharp") {
        return 20 /* SlashSharp */;
    }
    if (s == "natural-sharp") {
        return 6 /* NaturalSharp */;
    }
    if (s == "flat-flat") {
        return 5 /* FlatFlat */;
    }
    if (s == "natural") {
        return 1 /* Natural */;
    }
    if (s == "double-flat") {
        return 33 /* DoubleFlat */;
    }
    assert(false, "Not reached");
}
exports.getMxmlAccidental = getMxmlAccidental;
function xmlToAccidental(node) {
    "use strict";
    var ret = {};
    var foundCautionary = false;
    var foundBracket = false;
    var foundSize = false;
    var foundParentheses = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundEditorial = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "cautionary") {
            var dataCautionary = xmlToYesNo(ch2);
            ret.cautionary = dataCautionary;
            foundCautionary = true;
        }
        if (ch2.name === "bracket") {
            var dataBracket = xmlToYesNo(ch2);
            ret.bracket = dataBracket;
            foundBracket = true;
        }
        if (ch2.name === "size") {
            var dataSize = getSymbolSize(ch2, 0 /* Unspecified */);
            ret.size = dataSize;
            foundSize = true;
        }
        if (ch2.name === "parentheses") {
            var dataParentheses = xmlToYesNo(ch2);
            ret.parentheses = dataParentheses;
            foundParentheses = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "editorial") {
            var dataEditorial = xmlToYesNo(ch2);
            ret.editorial = dataEditorial;
            foundEditorial = true;
        }
    }
    var ch3 = node;
    var dataAccidental = getMxmlAccidental(ch3, null);
    ret.accidental = dataAccidental;
    if (!foundCautionary) {
        ret.cautionary = false;
    }
    if (!foundBracket) {
        ret.bracket = false;
    }
    if (!foundSize) {
        ret.size = 0 /* Unspecified */;
    }
    if (!foundParentheses) {
        ret.parentheses = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundEditorial) {
        ret.editorial = false;
    }
    return ret;
}
exports.xmlToAccidental = xmlToAccidental;
function xmlToTimeModification(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "actual-notes") {
            var dataActualNotes = xmlToActualNotes(ch);
            ret.actualNotes = dataActualNotes;
        }
        if (ch.nodeName === "normal-type") {
            var dataNormalType = getString(ch, true);
            ret.normalType = dataNormalType;
        }
        if (ch.nodeName === "normal-notes") {
            var dataNormalNotes = xmlToNormalNotes(ch);
            ret.normalNotes = dataNormalNotes;
        }
        if (ch.nodeName === "normal-dot") {
            var dataNormalDots = xmlToNormalDot(ch);
            ret.normalDots = (ret.normalDots || []).concat(dataNormalDots);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTimeModification = xmlToTimeModification;
(function (StemType) {
    StemType[StemType["None"] = 2] = "None";
    StemType[StemType["Double"] = 3] = "Double";
    StemType[StemType["Down"] = 0] = "Down";
    StemType[StemType["Up"] = 1] = "Up";
})(exports.StemType || (exports.StemType = {}));
var StemType = exports.StemType;
function getStemType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 2 /* None */;
    }
    if (s == "double") {
        return 3 /* Double */;
    }
    if (s == "down") {
        return 0 /* Down */;
    }
    if (s == "up") {
        return 1 /* Up */;
    }
    assert(false, "Not reached");
}
exports.getStemType = getStemType;
function xmlToStem(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataType = getStemType(ch3, null);
    ret.type = dataType;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToStem = xmlToStem;
(function (NoteheadType) {
    NoteheadType[NoteheadType["InvertedTriangle"] = 7] = "InvertedTriangle";
    NoteheadType[NoteheadType["CircleDot"] = 14] = "CircleDot";
    NoteheadType[NoteheadType["ArrowUp"] = 9] = "ArrowUp";
    NoteheadType[NoteheadType["Do"] = 18] = "Do";
    NoteheadType[NoteheadType["Mi"] = 20] = "Mi";
    NoteheadType[NoteheadType["Cross"] = 4] = "Cross";
    NoteheadType[NoteheadType["Slash"] = 0] = "Slash";
    NoteheadType[NoteheadType["Fa"] = 21] = "Fa";
    NoteheadType[NoteheadType["Triangle"] = 1] = "Triangle";
    NoteheadType[NoteheadType["FaUp"] = 22] = "FaUp";
    NoteheadType[NoteheadType["So"] = 23] = "So";
    NoteheadType[NoteheadType["LeftTriangle"] = 15] = "LeftTriangle";
    NoteheadType[NoteheadType["BackSlashed"] = 11] = "BackSlashed";
    NoteheadType[NoteheadType["None"] = 17] = "None";
    NoteheadType[NoteheadType["La"] = 24] = "La";
    NoteheadType[NoteheadType["Slashed"] = 10] = "Slashed";
    NoteheadType[NoteheadType["Normal"] = 12] = "Normal";
    NoteheadType[NoteheadType["Cluster"] = 13] = "Cluster";
    NoteheadType[NoteheadType["Ti"] = 25] = "Ti";
    NoteheadType[NoteheadType["Re"] = 19] = "Re";
    NoteheadType[NoteheadType["Nrectangle"] = 16] = "Nrectangle";
    NoteheadType[NoteheadType["Square"] = 3] = "Square";
    NoteheadType[NoteheadType["ArrowDown"] = 8] = "ArrowDown";
    NoteheadType[NoteheadType["X"] = 5] = "X";
    NoteheadType[NoteheadType["Diamond"] = 2] = "Diamond";
    NoteheadType[NoteheadType["CircleX"] = 6] = "CircleX";
})(exports.NoteheadType || (exports.NoteheadType = {}));
var NoteheadType = exports.NoteheadType;
function getNoteheadType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "inverted triangle") {
        return 7 /* InvertedTriangle */;
    }
    if (s == "circle dot") {
        return 14 /* CircleDot */;
    }
    if (s == "arrow up") {
        return 9 /* ArrowUp */;
    }
    if (s == "do") {
        return 18 /* Do */;
    }
    if (s == "mi") {
        return 20 /* Mi */;
    }
    if (s == "cross") {
        return 4 /* Cross */;
    }
    if (s == "slash") {
        return 0 /* Slash */;
    }
    if (s == "fa") {
        return 21 /* Fa */;
    }
    if (s == "triangle") {
        return 1 /* Triangle */;
    }
    if (s == "fa up") {
        return 22 /* FaUp */;
    }
    if (s == "so") {
        return 23 /* So */;
    }
    if (s == "left triangle") {
        return 15 /* LeftTriangle */;
    }
    if (s == "back slashed") {
        return 11 /* BackSlashed */;
    }
    if (s == "none") {
        return 17 /* None */;
    }
    if (s == "la") {
        return 24 /* La */;
    }
    if (s == "slashed") {
        return 10 /* Slashed */;
    }
    if (s == "normal") {
        return 12 /* Normal */;
    }
    if (s == "cluster") {
        return 13 /* Cluster */;
    }
    if (s == "ti") {
        return 25 /* Ti */;
    }
    if (s == "re") {
        return 19 /* Re */;
    }
    if (s == "nrectangle") {
        return 16 /* Nrectangle */;
    }
    if (s == "square") {
        return 3 /* Square */;
    }
    if (s == "arrow down") {
        return 8 /* ArrowDown */;
    }
    if (s == "x") {
        return 5 /* X */;
    }
    if (s == "diamond") {
        return 2 /* Diamond */;
    }
    if (s == "circle-x") {
        return 6 /* CircleX */;
    }
    assert(false, "Not reached");
}
exports.getNoteheadType = getNoteheadType;
function xmlToNotehead(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "filled") {
            var dataFilled = xmlToYesNo(ch2);
            ret.filled = dataFilled;
        }
        if (ch2.name === "parentheses") {
            var dataParentheses = xmlToYesNo(ch2);
            ret.parentheses = dataParentheses;
        }
    }
    var ch3 = node;
    var dataType = getNoteheadType(ch3, null);
    ret.type = dataType;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToNotehead = xmlToNotehead;
(function (BeamType) {
    BeamType[BeamType["BackwardHook"] = 4] = "BackwardHook";
    BeamType[BeamType["Begin"] = 0] = "Begin";
    BeamType[BeamType["ForwardHook"] = 3] = "ForwardHook";
    BeamType[BeamType["Continue"] = 1] = "Continue";
    BeamType[BeamType["End"] = 2] = "End";
})(exports.BeamType || (exports.BeamType = {}));
var BeamType = exports.BeamType;
function getBeamType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "backward hook") {
        return 4 /* BackwardHook */;
    }
    if (s == "begin") {
        return 0 /* Begin */;
    }
    if (s == "forward hook") {
        return 3 /* ForwardHook */;
    }
    if (s == "continue") {
        return 1 /* Continue */;
    }
    if (s == "end") {
        return 2 /* End */;
    }
    assert(false, "Not reached");
}
exports.getBeamType = getBeamType;
(function (AccelRitNone) {
    AccelRitNone[AccelRitNone["Accel"] = 0] = "Accel";
    AccelRitNone[AccelRitNone["None"] = 2] = "None";
    AccelRitNone[AccelRitNone["Rit"] = 1] = "Rit";
})(exports.AccelRitNone || (exports.AccelRitNone = {}));
var AccelRitNone = exports.AccelRitNone;
function getAccelRitNone(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "accel") {
        return 0 /* Accel */;
    }
    if (s == "none") {
        return 2 /* None */;
    }
    if (s == "rit") {
        return 1 /* Rit */;
    }
    assert(false, "Not reached");
}
exports.getAccelRitNone = getAccelRitNone;
function xmlToBeam(node) {
    "use strict";
    var ret = {};
    var foundRepeater = false;
    var foundNumber_ = false;
    var foundFan = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "repeater") {
            var dataRepeater = xmlToYesNo(ch2);
            ret.repeater = dataRepeater;
            foundRepeater = true;
        }
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "fan") {
            var dataFan = getAccelRitNone(ch2, 2 /* None */);
            ret.fan = dataFan;
            foundFan = true;
        }
    }
    var ch3 = node;
    var dataType = getBeamType(ch3, null);
    ret.type = dataType;
    if (!foundRepeater) {
        ret.repeater = false;
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundFan) {
        ret.fan = 2 /* None */;
    }
    return ret;
}
exports.xmlToBeam = xmlToBeam;
function xmlToNotations(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "slur") {
            var dataSlurs = xmlToSlur(ch);
            ret.slurs = (ret.slurs || []).concat(dataSlurs);
        }
        if (ch.nodeName === "articulations") {
            var dataArticulations = xmlToArticulations(ch);
            ret.articulations = (ret.articulations || []).concat(dataArticulations);
        }
        if (ch.nodeName === "slide") {
            var dataSlides = xmlToSlide(ch);
            ret.slides = (ret.slides || []).concat(dataSlides);
        }
        if (ch.nodeName === "technical") {
            var dataTechnicals = xmlToTechnical(ch);
            ret.technicals = (ret.technicals || []).concat(dataTechnicals);
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "tied") {
            var dataTieds = xmlToTied(ch);
            ret.tieds = (ret.tieds || []).concat(dataTieds);
        }
        if (ch.nodeName === "tuplet") {
            var dataTuplets = xmlToTuplet(ch);
            ret.tuplets = (ret.tuplets || []).concat(dataTuplets);
        }
        if (ch.nodeName === "glissando") {
            var dataGlissandos = xmlToGlissando(ch);
            ret.glissandos = (ret.glissandos || []).concat(dataGlissandos);
        }
        if (ch.nodeName === "dynamics") {
            var dataDynamics = xmlToDynamics(ch);
            ret.dynamics = (ret.dynamics || []).concat(dataDynamics);
        }
        if (ch.nodeName === "fermata") {
            var dataFermatas = xmlToFermata(ch);
            ret.fermatas = (ret.fermatas || []).concat(dataFermatas);
        }
        if (ch.nodeName === "accidental-mark") {
            var dataAccidentalMarks = xmlToAccidentalMark(ch);
            ret.accidentalMarks = (ret.accidentalMarks || []).concat(dataAccidentalMarks);
        }
        if (ch.nodeName === "ornaments") {
            var dataOrnaments = xmlToOrnaments(ch);
            ret.ornaments = (ret.ornaments || []).concat(dataOrnaments);
        }
        if (ch.nodeName === "arpeggiate") {
            var dataArpeggiates = xmlToArpeggiate(ch);
            ret.arpeggiates = (ret.arpeggiates || []).concat(dataArpeggiates);
        }
        if (ch.nodeName === "non-arpeggiate") {
            var dataNonArpeggiates = xmlToNonArpeggiate(ch);
            ret.nonArpeggiates = (ret.nonArpeggiates || []).concat(dataNonArpeggiates);
        }
        if (ch.nodeName === "other-notation") {
            var dataOtherNotations = xmlToOtherNotation(ch);
            ret.otherNotations = (ret.otherNotations || []).concat(dataOtherNotations);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    return ret;
}
exports.xmlToNotations = xmlToNotations;
function xmlToTied(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundPlacement = false;
    var foundOrientation = false;
    var foundBezierX2 = false;
    var foundBezierOffset = false;
    var foundBezierOffset2 = false;
    var foundBezierX = false;
    var foundBezierY = false;
    var foundBezierY2 = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "orientation") {
            var dataOrientation = getOverUnder(ch2, 0 /* Unspecified */);
            ret.orientation = dataOrientation;
            foundOrientation = true;
        }
        if (ch2.name === "bezier-x2") {
            var dataBezierX2 = getNumber(ch2, true);
            ret.bezierX2 = dataBezierX2;
            foundBezierX2 = true;
        }
        if (ch2.name === "bezier-offset") {
            var dataBezierOffset = getNumber(ch2, true);
            ret.bezierOffset = dataBezierOffset;
            foundBezierOffset = true;
        }
        if (ch2.name === "bezier-offset2") {
            var dataBezierOffset2 = getNumber(ch2, true);
            ret.bezierOffset2 = dataBezierOffset2;
            foundBezierOffset2 = true;
        }
        if (ch2.name === "bezier-x") {
            var dataBezierX = getNumber(ch2, true);
            ret.bezierX = dataBezierX;
            foundBezierX = true;
        }
        if (ch2.name === "bezier-y") {
            var dataBezierY = getNumber(ch2, true);
            ret.bezierY = dataBezierY;
            foundBezierY = true;
        }
        if (ch2.name === "bezier-y2") {
            var dataBezierY2 = getNumber(ch2, true);
            ret.bezierY2 = dataBezierY2;
            foundBezierY2 = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopContinue(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundOrientation) {
        ret.orientation = 0 /* Unspecified */;
    }
    if (!foundBezierX2) {
        ret.bezierX2 = NaN;
    }
    if (!foundBezierOffset) {
        ret.bezierOffset = NaN;
    }
    if (!foundBezierOffset2) {
        ret.bezierOffset2 = NaN;
    }
    if (!foundBezierX) {
        ret.bezierX = NaN;
    }
    if (!foundBezierY) {
        ret.bezierY = NaN;
    }
    if (!foundBezierY2) {
        ret.bezierY2 = NaN;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToTied = xmlToTied;
function xmlToSlur(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundPlacement = false;
    var foundOrientation = false;
    var foundBezierX2 = false;
    var foundBezierOffset = false;
    var foundBezierOffset2 = false;
    var foundBezierX = false;
    var foundBezierY = false;
    var foundBezierY2 = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "orientation") {
            var dataOrientation = getOverUnder(ch2, 0 /* Unspecified */);
            ret.orientation = dataOrientation;
            foundOrientation = true;
        }
        if (ch2.name === "bezier-x2") {
            var dataBezierX2 = getNumber(ch2, true);
            ret.bezierX2 = dataBezierX2;
            foundBezierX2 = true;
        }
        if (ch2.name === "bezier-offset") {
            var dataBezierOffset = getNumber(ch2, true);
            ret.bezierOffset = dataBezierOffset;
            foundBezierOffset = true;
        }
        if (ch2.name === "bezier-offset2") {
            var dataBezierOffset2 = getNumber(ch2, true);
            ret.bezierOffset2 = dataBezierOffset2;
            foundBezierOffset2 = true;
        }
        if (ch2.name === "bezier-x") {
            var dataBezierX = getNumber(ch2, true);
            ret.bezierX = dataBezierX;
            foundBezierX = true;
        }
        if (ch2.name === "bezier-y") {
            var dataBezierY = getNumber(ch2, true);
            ret.bezierY = dataBezierY;
            foundBezierY = true;
        }
        if (ch2.name === "bezier-y2") {
            var dataBezierY2 = getNumber(ch2, true);
            ret.bezierY2 = dataBezierY2;
            foundBezierY2 = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopContinue(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundOrientation) {
        ret.orientation = 0 /* Unspecified */;
    }
    if (!foundBezierX2) {
        ret.bezierX2 = NaN;
    }
    if (!foundBezierOffset) {
        ret.bezierOffset = NaN;
    }
    if (!foundBezierOffset2) {
        ret.bezierOffset2 = NaN;
    }
    if (!foundBezierX) {
        ret.bezierX = NaN;
    }
    if (!foundBezierY) {
        ret.bezierY = NaN;
    }
    if (!foundBezierY2) {
        ret.bezierY2 = NaN;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToSlur = xmlToSlur;
(function (ActualBothNone) {
    ActualBothNone[ActualBothNone["None"] = 2] = "None";
    ActualBothNone[ActualBothNone["Both"] = 1] = "Both";
    ActualBothNone[ActualBothNone["Actual"] = 0] = "Actual";
})(exports.ActualBothNone || (exports.ActualBothNone = {}));
var ActualBothNone = exports.ActualBothNone;
function getActualBothNone(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 2 /* None */;
    }
    if (s == "both") {
        return 1 /* Both */;
    }
    if (s == "actual") {
        return 0 /* Actual */;
    }
    assert(false, "Not reached");
}
exports.getActualBothNone = getActualBothNone;
function xmlToTuplet(node) {
    "use strict";
    var ret = {};
    var foundBracket = false;
    var foundShowNumber = false;
    var foundLineShape = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundPlacement = false;
    var foundShowType = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "tuplet-normal") {
            var dataTupletNormal = xmlToTupletNormal(ch);
            ret.tupletNormal = dataTupletNormal;
        }
        if (ch.nodeName === "tuplet-actual") {
            var dataTupletActual = xmlToTupletActual(ch);
            ret.tupletActual = dataTupletActual;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "bracket") {
            var dataBracket = xmlToYesNo(ch2);
            ret.bracket = dataBracket;
            foundBracket = true;
        }
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
        }
        if (ch2.name === "show-number") {
            var dataShowNumber = getActualBothNone(ch2, 0 /* Actual */);
            ret.showNumber = dataShowNumber;
            foundShowNumber = true;
        }
        if (ch2.name === "line-shape") {
            var dataLineShape = getStraightCurved(ch2, 0 /* Straight */);
            ret.lineShape = dataLineShape;
            foundLineShape = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
        if (ch2.name === "show-type") {
            var dataShowType = getActualBothNone(ch2, 2 /* None */);
            ret.showType = dataShowType;
            foundShowType = true;
        }
    }
    if (!foundBracket) {
        ret.bracket = false;
    }
    if (!foundShowNumber) {
        ret.showNumber = 0 /* Actual */;
    }
    if (!foundLineShape) {
        ret.lineShape = 0 /* Straight */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundShowType) {
        ret.showType = 2 /* None */;
    }
    return ret;
}
exports.xmlToTuplet = xmlToTuplet;
function xmlToTupletActual(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "tuplet-number") {
            var dataTupletNumber = xmlToTupletNumber(ch);
            ret.tupletNumber = dataTupletNumber;
        }
        if (ch.nodeName === "tuplet-dot") {
            var dataTupletDots = xmlToTupletDot(ch);
            ret.tupletDots = (ret.tupletDots || []).concat(dataTupletDots);
        }
        if (ch.nodeName === "tuplet-type") {
            var dataTupletType = xmlToTupletType(ch);
            ret.tupletType = dataTupletType;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTupletActual = xmlToTupletActual;
function xmlToTupletNormal(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "tuplet-number") {
            var dataTupletNumber = xmlToTupletNumber(ch);
            ret.tupletNumber = dataTupletNumber;
        }
        if (ch.nodeName === "tuplet-dot") {
            var dataTupletDots = xmlToTupletDot(ch);
            ret.tupletDots = (ret.tupletDots || []).concat(dataTupletDots);
        }
        if (ch.nodeName === "tuplet-type") {
            var dataTupletType = xmlToTupletType(ch);
            ret.tupletType = dataTupletType;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTupletNormal = xmlToTupletNormal;
function xmlToTupletNumber(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, true);
    ret.text = dataText;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToTupletNumber = xmlToTupletNumber;
function xmlToTupletType(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, true);
    ret.text = dataText;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToTupletType = xmlToTupletType;
function xmlToTupletDot(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToTupletDot = xmlToTupletDot;
function xmlToGlissando(node) {
    "use strict";
    var ret = {};
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundNormal = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
        if (ch2.name === "normal") {
            var dataNormal = getNumber(ch2, true);
            ret.normal = dataNormal;
            foundNormal = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, false);
    ret.text = dataText;
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundNormal) {
        ret.normal = 1;
    }
    return ret;
}
exports.xmlToGlissando = xmlToGlissando;
function xmlToSlide(node) {
    "use strict";
    var ret = {};
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundSecondBeat = false;
    var foundNormal = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
        if (ch2.name === "normal") {
            var dataNormal = getNumber(ch2, true);
            ret.normal = dataNormal;
            foundNormal = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, false);
    ret.text = dataText;
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    if (!foundNormal) {
        ret.normal = 1;
    }
    return ret;
}
exports.xmlToSlide = xmlToSlide;
function xmlToOtherNotation(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopSingle(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, false);
    ret.data = dataData;
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToOtherNotation = xmlToOtherNotation;
function xmlToOtherDirection(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToOtherDirection = xmlToOtherDirection;
function xmlToOrnaments(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "delayed-inverted-turn") {
            var dataDelayedInvertedTurn = xmlToDelayedInvertedTurn(ch);
            ret.delayedInvertedTurn = dataDelayedInvertedTurn;
        }
        if (ch.nodeName === "shake") {
            var dataShake = xmlToShake(ch);
            ret.shake = dataShake;
        }
        if (ch.nodeName === "turn") {
            var dataTurn = xmlToTurn(ch);
            ret.turn = dataTurn;
        }
        if (ch.nodeName === "inverted-turn") {
            var dataInvertedTurn = xmlToInvertedTurn(ch);
            ret.invertedTurn = dataInvertedTurn;
        }
        if (ch.nodeName === "other-ornament") {
            var dataOtherOrnament = xmlToOtherOrnament(ch);
            ret.otherOrnament = dataOtherOrnament;
        }
        if (ch.nodeName === "delayed-turn") {
            var dataDelayedTurn = xmlToDelayedTurn(ch);
            ret.delayedTurn = dataDelayedTurn;
        }
        if (ch.nodeName === "vertical-turn") {
            var dataVerticalTurn = xmlToVerticalTurn(ch);
            ret.verticalTurn = dataVerticalTurn;
        }
        if (ch.nodeName === "wavy-line") {
            var dataWavyLine = xmlToWavyLine(ch);
            ret.wavyLine = dataWavyLine;
        }
        if (ch.nodeName === "tremolo") {
            var dataTremolo = xmlToTremolo(ch);
            ret.tremolo = dataTremolo;
        }
        if (ch.nodeName === "accidental-mark") {
            var dataAccidentalMarks = xmlToAccidentalMark(ch);
            ret.accidentalMarks = (ret.accidentalMarks || []).concat(dataAccidentalMarks);
        }
        if (ch.nodeName === "trill-mark") {
            var dataTrillMark = xmlToTrillMark(ch);
            ret.trillMark = dataTrillMark;
        }
        if (ch.nodeName === "mordent") {
            var dataMordent = xmlToMordent(ch);
            ret.mordent = dataMordent;
        }
        if (ch.nodeName === "inverted-mordent") {
            var dataInvertedMordent = xmlToInvertedMordent(ch);
            ret.invertedMordent = dataInvertedMordent;
        }
        if (ch.nodeName === "schleifer") {
            var dataSchleifer = xmlToSchleifer(ch);
            ret.schleifer = dataSchleifer;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToOrnaments = xmlToOrnaments;
function xmlToTrillMark(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToTrillMark = xmlToTrillMark;
function xmlToTurn(node) {
    "use strict";
    var ret = {};
    var foundSlash = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "slash") {
            var dataSlash = xmlToYesNo(ch2);
            ret.slash = dataSlash;
            foundSlash = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundSlash) {
        ret.slash = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToTurn = xmlToTurn;
function xmlToDelayedTurn(node) {
    "use strict";
    var ret = {};
    var foundSlash = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "slash") {
            var dataSlash = xmlToYesNo(ch2);
            ret.slash = dataSlash;
            foundSlash = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundSlash) {
        ret.slash = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToDelayedTurn = xmlToDelayedTurn;
function xmlToInvertedTurn(node) {
    "use strict";
    var ret = {};
    var foundSlash = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "slash") {
            var dataSlash = xmlToYesNo(ch2);
            ret.slash = dataSlash;
            foundSlash = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundSlash) {
        ret.slash = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToInvertedTurn = xmlToInvertedTurn;
function xmlToDelayedInvertedTurn(node) {
    "use strict";
    var ret = {};
    var foundSlash = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "slash") {
            var dataSlash = xmlToYesNo(ch2);
            ret.slash = dataSlash;
            foundSlash = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundSlash) {
        ret.slash = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToDelayedInvertedTurn = xmlToDelayedInvertedTurn;
function xmlToVerticalTurn(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToVerticalTurn = xmlToVerticalTurn;
function xmlToShake(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToShake = xmlToShake;
function xmlToMordent(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "long") {
            var dataLong_ = xmlToYesNo(ch2);
            ret.long_ = dataLong_;
        }
        if (ch2.name === "approach") {
            var dataApproach = getAboveBelow(ch2, null);
            ret.approach = dataApproach;
        }
        if (ch2.name === "departure") {
            var dataDeparture = getAboveBelow(ch2, null);
            ret.departure = dataDeparture;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToMordent = xmlToMordent;
function xmlToInvertedMordent(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundStartNote = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundTrillStep = false;
    var foundTwoNoteTurn = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "long") {
            var dataLong_ = xmlToYesNo(ch2);
            ret.long_ = dataLong_;
        }
        if (ch2.name === "approach") {
            var dataApproach = getAboveBelow(ch2, null);
            ret.approach = dataApproach;
        }
        if (ch2.name === "departure") {
            var dataDeparture = getAboveBelow(ch2, null);
            ret.departure = dataDeparture;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "start-note") {
            var dataStartNote = getUpperMainBelow(ch2, 0 /* Upper */);
            ret.startNote = dataStartNote;
            foundStartNote = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "trill-step") {
            var dataTrillStep = getWholeHalfUnison(ch2, 0 /* Whole */);
            ret.trillStep = dataTrillStep;
            foundTrillStep = true;
        }
        if (ch2.name === "two-note-turn") {
            var dataTwoNoteTurn = getWholeHalfNone(ch2, 3 /* None */);
            ret.twoNoteTurn = dataTwoNoteTurn;
            foundTwoNoteTurn = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundStartNote) {
        ret.startNote = 0 /* Upper */;
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundTrillStep) {
        ret.trillStep = 0 /* Whole */;
    }
    if (!foundTwoNoteTurn) {
        ret.twoNoteTurn = 3 /* None */;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToInvertedMordent = xmlToInvertedMordent;
function xmlToSchleifer(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToSchleifer = xmlToSchleifer;
function xmlToTremolo(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundType = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopSingle(ch2, 3 /* Single */);
            ret.type = dataType;
            foundType = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, false);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundType) {
        ret.type = 3 /* Single */;
    }
    return ret;
}
exports.xmlToTremolo = xmlToTremolo;
function xmlToOtherOrnament(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopSingle(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, false);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToOtherOrnament = xmlToOtherOrnament;
function xmlToAccidentalMark(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataMark = getString(ch3, true);
    ret.mark = dataMark;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToAccidentalMark = xmlToAccidentalMark;
function xmlToTechnical(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "triple-tongue") {
            var dataTripleTongue = xmlToTripleTongue(ch);
            ret.tripleTongue = dataTripleTongue;
        }
        if (ch.nodeName === "toe") {
            var dataToe = xmlToToe(ch);
            ret.toe = dataToe;
        }
        if (ch.nodeName === "hole") {
            var dataHole = xmlToHole(ch);
            ret.hole = dataHole;
        }
        if (ch.nodeName === "hammer-on") {
            var dataHammerOn = xmlToHammerOn(ch);
            ret.hammerOn = dataHammerOn;
        }
        if (ch.nodeName === "up-bow") {
            var dataUpBow = xmlToUpBow(ch);
            ret.upBow = dataUpBow;
        }
        if (ch.nodeName === "down-bow") {
            var dataDownBow = xmlToDownBow(ch);
            ret.downBow = dataDownBow;
        }
        if (ch.nodeName === "fret") {
            var dataFret = xmlToFret(ch);
            ret.fret = dataFret;
        }
        if (ch.nodeName === "tap") {
            var dataTap = xmlToTap(ch);
            ret.tap = dataTap;
        }
        if (ch.nodeName === "pull-off") {
            var dataPullOff = xmlToPullOff(ch);
            ret.pullOff = dataPullOff;
        }
        if (ch.nodeName === "handbell") {
            var dataHandbell = xmlToHandbell(ch);
            ret.handbell = dataHandbell;
        }
        if (ch.nodeName === "bend") {
            var dataBend = xmlToBend(ch);
            ret.bend = dataBend;
        }
        if (ch.nodeName === "thumb-position") {
            var dataThumbPosition = xmlToThumbPosition(ch);
            ret.thumbPosition = dataThumbPosition;
        }
        if (ch.nodeName === "stopped") {
            var dataStopped = xmlToStopped(ch);
            ret.stopped = dataStopped;
        }
        if (ch.nodeName === "pluck") {
            var dataPluck = xmlToPluck(ch);
            ret.pluck = dataPluck;
        }
        if (ch.nodeName === "double-tongue") {
            var dataDoubleTongue = xmlToDoubleTongue(ch);
            ret.doubleTongue = dataDoubleTongue;
        }
        if (ch.nodeName === "string") {
            var dataString_ = xmlToString(ch);
            ret.string_ = dataString_;
        }
        if (ch.nodeName === "open-string") {
            var dataOpenString = xmlToOpenString(ch);
            ret.openString = dataOpenString;
        }
        if (ch.nodeName === "fingernails") {
            var dataFingernails = xmlToFingernails(ch);
            ret.fingernails = dataFingernails;
        }
        if (ch.nodeName === "arrow") {
            var dataArrow = xmlToArrow(ch);
            ret.arrow = dataArrow;
        }
        if (ch.nodeName === "harmonic") {
            var dataHarmonic = xmlToHarmonic(ch);
            ret.harmonic = dataHarmonic;
        }
        if (ch.nodeName === "heel") {
            var dataHeel = xmlToHeel(ch);
            ret.heel = dataHeel;
        }
        if (ch.nodeName === "other-technical") {
            var dataOtherTechnical = xmlToOtherTechnical(ch);
            ret.otherTechnical = dataOtherTechnical;
        }
        if (ch.nodeName === "snap-pizzicato") {
            var dataSnapPizzicato = xmlToSnapPizzicato(ch);
            ret.snapPizzicato = dataSnapPizzicato;
        }
        if (ch.nodeName === "fingering") {
            var dataFingering = xmlToFingering(ch);
            ret.fingering = dataFingering;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTechnical = xmlToTechnical;
function xmlToUpBow(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToUpBow = xmlToUpBow;
function xmlToDownBow(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToDownBow = xmlToDownBow;
function xmlToHarmonic(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "artificial") {
            var dataArtificial = true;
            ret.artificial = dataArtificial;
        }
        if (ch.nodeName === "touching-pitch") {
            var dataTouchingPitch = true;
            ret.touchingPitch = dataTouchingPitch;
        }
        if (ch.nodeName === "sounding-pitch") {
            var dataSoundingPitch = true;
            ret.soundingPitch = dataSoundingPitch;
        }
        if (ch.nodeName === "natural") {
            var dataNatural = true;
            ret.natural = dataNatural;
        }
        if (ch.nodeName === "base-pitch") {
            var dataBasePitch = true;
            ret.basePitch = dataBasePitch;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToHarmonic = xmlToHarmonic;
function xmlToOpenString(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToOpenString = xmlToOpenString;
function xmlToThumbPosition(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToThumbPosition = xmlToThumbPosition;
function xmlToPluck(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToPluck = xmlToPluck;
function xmlToDoubleTongue(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToDoubleTongue = xmlToDoubleTongue;
function xmlToTripleTongue(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToTripleTongue = xmlToTripleTongue;
function xmlToStopped(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToStopped = xmlToStopped;
function xmlToSnapPizzicato(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToSnapPizzicato = xmlToSnapPizzicato;
function xmlToHammerOn(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, false);
    ret.data = dataData;
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToHammerOn = xmlToHammerOn;
function xmlToPullOff(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, false);
    ret.data = dataData;
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToPullOff = xmlToPullOff;
function xmlToBend(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundAccelerate = false;
    var foundBeats = false;
    var foundLastBeat = false;
    var foundSecondBeat = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "bend-alter") {
            var dataBendAlter = getString(ch, true);
            ret.bendAlter = dataBendAlter;
        }
        if (ch.nodeName === "with-bar") {
            var dataWithBar = xmlToWithBar(ch);
            ret.withBar = dataWithBar;
        }
        if (ch.nodeName === "pre-bend") {
            var dataPreBend = true;
            ret.preBend = dataPreBend;
        }
        if (ch.nodeName === "release") {
            var dataRelease = true;
            ret.release = dataRelease;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "accelerate") {
            var dataAccelerate = xmlToYesNo(ch2);
            ret.accelerate = dataAccelerate;
            foundAccelerate = true;
        }
        if (ch2.name === "beats") {
            var dataBeats = getNumber(ch2, true);
            ret.beats = dataBeats;
            foundBeats = true;
        }
        if (ch2.name === "last-beat") {
            var dataLastBeat = getNumber(ch2, true);
            ret.lastBeat = dataLastBeat;
            foundLastBeat = true;
        }
        if (ch2.name === "second-beat") {
            var dataSecondBeat = getNumber(ch2, true);
            ret.secondBeat = dataSecondBeat;
            foundSecondBeat = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundAccelerate) {
        ret.accelerate = false;
    }
    if (!foundBeats) {
        ret.beats = 4;
    }
    if (!foundLastBeat) {
        ret.lastBeat = 75;
    }
    if (!foundSecondBeat) {
        ret.secondBeat = 25;
    }
    return ret;
}
exports.xmlToBend = xmlToBend;
function xmlToWithBar(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToWithBar = xmlToWithBar;
function xmlToTap(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToTap = xmlToTap;
function xmlToHeel(node) {
    "use strict";
    var ret = {};
    var foundSubstitution = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "substitution") {
            var dataSubstitution = xmlToYesNo(ch2);
            ret.substitution = dataSubstitution;
            foundSubstitution = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundSubstitution) {
        ret.substitution = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToHeel = xmlToHeel;
function xmlToToe(node) {
    "use strict";
    var ret = {};
    var foundSubstitution = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "substitution") {
            var dataSubstitution = xmlToYesNo(ch2);
            ret.substitution = dataSubstitution;
            foundSubstitution = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundSubstitution) {
        ret.substitution = false;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToToe = xmlToToe;
function xmlToFingernails(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToFingernails = xmlToFingernails;
function xmlToHole(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "hole-closed") {
            var dataHoleClosed = xmlToHoleClosed(ch);
            ret.holeClosed = dataHoleClosed;
        }
        if (ch.nodeName === "hole-shape") {
            var dataHoleShape = getString(ch, true);
            ret.holeShape = dataHoleShape;
        }
        if (ch.nodeName === "hole-type") {
            var dataHoleType = getString(ch, true);
            ret.holeType = dataHoleType;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToHole = xmlToHole;
(function (HoleLocation) {
    HoleLocation[HoleLocation["Right"] = 0] = "Right";
    HoleLocation[HoleLocation["Top"] = 3] = "Top";
    HoleLocation[HoleLocation["Bottom"] = 1] = "Bottom";
    HoleLocation[HoleLocation["Left"] = 2] = "Left";
})(exports.HoleLocation || (exports.HoleLocation = {}));
var HoleLocation = exports.HoleLocation;
function getHoleLocation(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "right") {
        return 0 /* Right */;
    }
    if (s == "top") {
        return 3 /* Top */;
    }
    if (s == "bottom") {
        return 1 /* Bottom */;
    }
    if (s == "left") {
        return 2 /* Left */;
    }
    assert(false, "Not reached");
}
exports.getHoleLocation = getHoleLocation;
(function (HoleClosedType) {
    HoleClosedType[HoleClosedType["No"] = 1] = "No";
    HoleClosedType[HoleClosedType["Yes"] = 0] = "Yes";
    HoleClosedType[HoleClosedType["Half"] = 2] = "Half";
})(exports.HoleClosedType || (exports.HoleClosedType = {}));
var HoleClosedType = exports.HoleClosedType;
function getHoleClosedType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "no") {
        return 1 /* No */;
    }
    if (s == "yes") {
        return 0 /* Yes */;
    }
    if (s == "half") {
        return 2 /* Half */;
    }
    assert(false, "Not reached");
}
exports.getHoleClosedType = getHoleClosedType;
function xmlToHoleClosed(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "location") {
            var dataLocation = getHoleLocation(ch2, null);
            ret.location = dataLocation;
        }
    }
    var ch3 = node;
    var dataData = getHoleClosedType(ch3, null);
    ret.data = dataData;
    return ret;
}
exports.xmlToHoleClosed = xmlToHoleClosed;
function xmlToArrow(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "arrow-style") {
            var dataArrowStyle = getString(ch, true);
            ret.arrowStyle = dataArrowStyle;
        }
        if (ch.nodeName === "arrow-direction") {
            var dataArrowDirection = getString(ch, true);
            ret.arrowDirection = dataArrowDirection;
        }
        if (ch.nodeName === "circular-arrow") {
            var dataCircularArrow = getString(ch, true);
            ret.circularArrow = dataCircularArrow;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToArrow = xmlToArrow;
function xmlToHandbell(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToHandbell = xmlToHandbell;
function xmlToOtherTechnical(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToOtherTechnical = xmlToOtherTechnical;
function xmlToArticulations(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "accent") {
            var dataAccent = xmlToAccent(ch);
            ret.accent = dataAccent;
        }
        if (ch.nodeName === "doit") {
            var dataDoit = xmlToDoit(ch);
            ret.doit = dataDoit;
        }
        if (ch.nodeName === "breath-mark") {
            var dataBreathMark = xmlToBreathMark(ch);
            ret.breathMark = dataBreathMark;
        }
        if (ch.nodeName === "other-articulation") {
            var dataOtherArticulations = xmlToOtherArticulation(ch);
            ret.otherArticulations = (ret.otherArticulations || []).concat(dataOtherArticulations);
        }
        if (ch.nodeName === "detached-legato") {
            var dataDetachedLegato = xmlToDetachedLegato(ch);
            ret.detachedLegato = dataDetachedLegato;
        }
        if (ch.nodeName === "staccatissimo") {
            var dataStaccatissimo = xmlToStaccatissimo(ch);
            ret.staccatissimo = dataStaccatissimo;
        }
        if (ch.nodeName === "plop") {
            var dataPlop = xmlToPlop(ch);
            ret.plop = dataPlop;
        }
        if (ch.nodeName === "unstress") {
            var dataUnstress = xmlToUnstress(ch);
            ret.unstress = dataUnstress;
        }
        if (ch.nodeName === "strong-accent") {
            var dataStrongAccent = xmlToStrongAccent(ch);
            ret.strongAccent = dataStrongAccent;
        }
        if (ch.nodeName === "staccato") {
            var dataStaccato = xmlToStaccato(ch);
            ret.staccato = dataStaccato;
        }
        if (ch.nodeName === "spiccato") {
            var dataSpiccato = xmlToSpiccato(ch);
            ret.spiccato = dataSpiccato;
        }
        if (ch.nodeName === "scoop") {
            var dataScoop = xmlToScoop(ch);
            ret.scoop = dataScoop;
        }
        if (ch.nodeName === "falloff") {
            var dataFalloff = xmlToFalloff(ch);
            ret.falloff = dataFalloff;
        }
        if (ch.nodeName === "caesura") {
            var dataCaesura = xmlToCaesura(ch);
            ret.caesura = dataCaesura;
        }
        if (ch.nodeName === "stress") {
            var dataStress = xmlToStress(ch);
            ret.stress = dataStress;
        }
        if (ch.nodeName === "tenuto") {
            var dataTenuto = xmlToTenuto(ch);
            ret.tenuto = dataTenuto;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToArticulations = xmlToArticulations;
function xmlToAccent(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToAccent = xmlToAccent;
function xmlToStrongAccent(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    var foundType = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataType = getUpDown(ch2, 0 /* Up */);
            ret.type = dataType;
            foundType = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundType) {
        ret.type = 0 /* Up */;
    }
    return ret;
}
exports.xmlToStrongAccent = xmlToStrongAccent;
function xmlToStaccato(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToStaccato = xmlToStaccato;
function xmlToTenuto(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToTenuto = xmlToTenuto;
function xmlToDetachedLegato(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToDetachedLegato = xmlToDetachedLegato;
function xmlToStaccatissimo(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToStaccatissimo = xmlToStaccatissimo;
function xmlToSpiccato(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToSpiccato = xmlToSpiccato;
function xmlToScoop(node) {
    "use strict";
    var ret = {};
    var foundLineShape = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-shape") {
            var dataLineShape = getStraightCurved(ch2, 0 /* Straight */);
            ret.lineShape = dataLineShape;
            foundLineShape = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundLineShape) {
        ret.lineShape = 0 /* Straight */;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToScoop = xmlToScoop;
function xmlToPlop(node) {
    "use strict";
    var ret = {};
    var foundLineShape = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-shape") {
            var dataLineShape = getStraightCurved(ch2, 0 /* Straight */);
            ret.lineShape = dataLineShape;
            foundLineShape = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundLineShape) {
        ret.lineShape = 0 /* Straight */;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToPlop = xmlToPlop;
function xmlToDoit(node) {
    "use strict";
    var ret = {};
    var foundLineShape = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-shape") {
            var dataLineShape = getStraightCurved(ch2, 0 /* Straight */);
            ret.lineShape = dataLineShape;
            foundLineShape = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundLineShape) {
        ret.lineShape = 0 /* Straight */;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToDoit = xmlToDoit;
function xmlToFalloff(node) {
    "use strict";
    var ret = {};
    var foundLineShape = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-shape") {
            var dataLineShape = getStraightCurved(ch2, 0 /* Straight */);
            ret.lineShape = dataLineShape;
            foundLineShape = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundLineShape) {
        ret.lineShape = 0 /* Straight */;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToFalloff = xmlToFalloff;
(function (BreathMarkType) {
    BreathMarkType[BreathMarkType["Empty"] = 2] = "Empty";
    BreathMarkType[BreathMarkType["Comma"] = 0] = "Comma";
    BreathMarkType[BreathMarkType["Tick"] = 1] = "Tick";
})(exports.BreathMarkType || (exports.BreathMarkType = {}));
var BreathMarkType = exports.BreathMarkType;
function getBreathMarkType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "") {
        return 2 /* Empty */;
    }
    if (s == "comma") {
        return 0 /* Comma */;
    }
    if (s == "tick") {
        return 1 /* Tick */;
    }
    assert(false, "Not reached");
}
exports.getBreathMarkType = getBreathMarkType;
function xmlToBreathMark(node) {
    "use strict";
    var ret = {};
    var foundLineShape = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line-shape") {
            var dataLineShape = getStraightCurved(ch2, 0 /* Straight */);
            ret.lineShape = dataLineShape;
            foundLineShape = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataType = getBreathMarkType(ch3, null);
    ret.type = dataType;
    if (!foundLineShape) {
        ret.lineShape = 0 /* Straight */;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToBreathMark = xmlToBreathMark;
function xmlToCaesura(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToCaesura = xmlToCaesura;
function xmlToStress(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToStress = xmlToStress;
function xmlToUnstress(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToUnstress = xmlToUnstress;
function xmlToOtherArticulation(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToOtherArticulation = xmlToOtherArticulation;
function xmlToArpeggiate(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundPlacement = false;
    var foundColor = false;
    var foundDirection = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "direction") {
            var dataDirection = getUpDown(ch2, 0 /* Up */);
            ret.direction = dataDirection;
            foundDirection = true;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundDirection) {
        ret.direction = 0 /* Up */;
    }
    return ret;
}
exports.xmlToArpeggiate = xmlToArpeggiate;
function xmlToNonArpeggiate(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundPlacement = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getTopBottom(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToNonArpeggiate = xmlToNonArpeggiate;
function xmlToLyric(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundPlacement = false;
    var foundColor = false;
    var foundPrintObject = false;
    var foundName = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "extend") {
            var dataExtend = xmlToExtend(ch);
            ret.extend = dataExtend;
        }
        if (ch.nodeName === "end-line") {
            var dataEndLine = true;
            ret.endLine = dataEndLine;
        }
        if (ch.nodeName === "syllabic") {
            var dataSyllabics = xmlToSyllabic(ch);
            ret.syllabics = (ret.syllabics || []).concat(dataSyllabics);
        }
        if (ch.nodeName === "text") {
            var dataTexts = xmlToText(ch);
            ret.texts = (ret.texts || []).concat(dataTexts);
        }
        if (ch.nodeName === "laughing") {
            var dataLaughing = true;
            ret.laughing = dataLaughing;
        }
        if (ch.nodeName === "humming") {
            var dataHumming = true;
            ret.humming = dataHumming;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "end-paragraph") {
            var dataEndParagraph = true;
            ret.endParagraph = dataEndParagraph;
        }
        if (ch.nodeName === "elision") {
            var dataElisions = xmlToElision(ch);
            ret.elisions = (ret.elisions || []).concat(dataElisions);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "name") {
            var dataName = getString(ch2, true);
            ret.name = dataName;
            foundName = true;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundName) {
        ret.name = "";
    }
    return ret;
}
exports.xmlToLyric = xmlToLyric;
function xmlToText(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundDir = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    return ret;
}
exports.xmlToText = xmlToText;
function xmlToSyllabic(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToSyllabic = xmlToSyllabic;
function xmlToElision(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToElision = xmlToElision;
function xmlToExtend(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundType = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopContinue(ch2, 0 /* Start */);
            ret.type = dataType;
            foundType = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundType) {
        ret.type = 0 /* Start */;
    }
    return ret;
}
exports.xmlToExtend = xmlToExtend;
function xmlToFiguredBass(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPrintObject = false;
    var foundPrintSpacing = false;
    var foundParentheses = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "figure") {
            var dataFigures = xmlToFigure(ch);
            ret.figures = (ret.figures || []).concat(dataFigures);
        }
        if (ch.nodeName === "duration") {
            var dataDuration = getNumber(ch, true);
            ret.duration = dataDuration;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "print-dot") {
            var dataPrintDot = xmlToYesNo(ch2);
            ret.printDot = dataPrintDot;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "print-spacing") {
            var dataPrintSpacing = xmlToYesNo(ch2);
            ret.printSpacing = dataPrintSpacing;
            foundPrintSpacing = true;
        }
        if (ch2.name === "print-lyric") {
            var dataPrintLyric = xmlToYesNo(ch2);
            ret.printLyric = dataPrintLyric;
        }
        if (ch2.name === "parentheses") {
            var dataParentheses = xmlToYesNo(ch2);
            ret.parentheses = dataParentheses;
            foundParentheses = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundPrintSpacing) {
        ret.printSpacing = true;
    }
    if (!foundParentheses) {
        ret.parentheses = false;
    }
    return ret;
}
exports.xmlToFiguredBass = xmlToFiguredBass;
function xmlToFigure(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "prefix") {
            var dataPrefix = xmlToPrefix(ch);
            ret.prefix = dataPrefix;
        }
        if (ch.nodeName === "figure-number") {
            var dataFigureNumber = xmlToFigureNumber(ch);
            ret.figureNumber = dataFigureNumber;
        }
        if (ch.nodeName === "extend") {
            var dataExtend = xmlToExtend(ch);
            ret.extend = dataExtend;
        }
        if (ch.nodeName === "suffix") {
            var dataSuffix = xmlToSuffix(ch);
            ret.suffix = dataSuffix;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToFigure = xmlToFigure;
function xmlToPrefix(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToPrefix = xmlToPrefix;
function xmlToFigureNumber(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToFigureNumber = xmlToFigureNumber;
function xmlToSuffix(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToSuffix = xmlToSuffix;
function xmlToBackup(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "duration") {
            var dataDuration = getNumber(ch, true);
            ret.duration = dataDuration;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBackup = xmlToBackup;
function xmlToForward(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "voice") {
            var dataVoice = getString(ch, true);
            ret.voice = dataVoice;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "duration") {
            var dataDuration = getNumber(ch, true);
            ret.duration = dataDuration;
        }
        if (ch.nodeName === "staff") {
            var dataStaff = xmlToStaff(ch);
            ret.staff = dataStaff;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToForward = xmlToForward;
(function (BarlineLocation) {
    BarlineLocation[BarlineLocation["Right"] = 1] = "Right";
    BarlineLocation[BarlineLocation["Middle"] = 2] = "Middle";
    BarlineLocation[BarlineLocation["Left"] = 0] = "Left";
})(exports.BarlineLocation || (exports.BarlineLocation = {}));
var BarlineLocation = exports.BarlineLocation;
function getBarlineLocation(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "right") {
        return 1 /* Right */;
    }
    if (s == "middle") {
        return 2 /* Middle */;
    }
    if (s == "left") {
        return 0 /* Left */;
    }
    assert(false, "Not reached");
}
exports.getBarlineLocation = getBarlineLocation;
function xmlToBarline(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "segno") {
            var dataSegno = xmlToSegno(ch);
            ret.segno = dataSegno;
        }
        if (ch.nodeName === "coda") {
            var dataCoda = xmlToCoda(ch);
            ret.coda = dataCoda;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "wavy-line") {
            var dataWavyLine = xmlToWavyLine(ch);
            ret.wavyLine = dataWavyLine;
        }
        if (ch.nodeName === "fermata") {
            var dataFermatas = xmlToFermata(ch);
            ret.fermatas = (ret.fermatas || []).concat(dataFermatas);
        }
        if (ch.nodeName === "bar-style") {
            var dataBarStyle = xmlToBarStyle(ch);
            ret.barStyle = dataBarStyle;
        }
        if (ch.nodeName === "ending") {
            var dataEnding = xmlToEnding(ch);
            ret.ending = dataEnding;
        }
        if (ch.nodeName === "repeat") {
            var dataRepeat = xmlToRepeat(ch);
            ret.repeat = dataRepeat;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "location") {
            var dataLocation = getBarlineLocation(ch2, null);
            ret.location = dataLocation;
        }
        if (ch2.name === "coda") {
            var dataCodaAttrib = getString(ch2, true);
            ret.codaAttrib = dataCodaAttrib;
        }
        if (ch2.name === "segno") {
            var dataSegnoAttrib = getString(ch2, true);
            ret.segnoAttrib = dataSegnoAttrib;
        }
        if (ch2.name === "divisions") {
            var dataDivisions = getString(ch2, true);
            ret.divisions = dataDivisions;
        }
    }
    return ret;
}
exports.xmlToBarline = xmlToBarline;
(function (BarStyleType) {
    BarStyleType[BarStyleType["Regular"] = 0] = "Regular";
    BarStyleType[BarStyleType["LightHeavy"] = 5] = "LightHeavy";
    BarStyleType[BarStyleType["HeavyLight"] = 6] = "HeavyLight";
    BarStyleType[BarStyleType["Short"] = 9] = "Short";
    BarStyleType[BarStyleType["None"] = 10] = "None";
    BarStyleType[BarStyleType["Dashed"] = 2] = "Dashed";
    BarStyleType[BarStyleType["HeavyHeavy"] = 7] = "HeavyHeavy";
    BarStyleType[BarStyleType["Tick"] = 8] = "Tick";
    BarStyleType[BarStyleType["Dotted"] = 1] = "Dotted";
    BarStyleType[BarStyleType["Heavy"] = 3] = "Heavy";
    BarStyleType[BarStyleType["LightLight"] = 4] = "LightLight";
})(exports.BarStyleType || (exports.BarStyleType = {}));
var BarStyleType = exports.BarStyleType;
function getBarStyleType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "regular") {
        return 0 /* Regular */;
    }
    if (s == "light-heavy") {
        return 5 /* LightHeavy */;
    }
    if (s == "heavy-light") {
        return 6 /* HeavyLight */;
    }
    if (s == "short") {
        return 9 /* Short */;
    }
    if (s == "none") {
        return 10 /* None */;
    }
    if (s == "dashed") {
        return 2 /* Dashed */;
    }
    if (s == "heavy-heavy") {
        return 7 /* HeavyHeavy */;
    }
    if (s == "tick") {
        return 8 /* Tick */;
    }
    if (s == "dotted") {
        return 1 /* Dotted */;
    }
    if (s == "heavy") {
        return 3 /* Heavy */;
    }
    if (s == "light-light") {
        return 4 /* LightLight */;
    }
    assert(false, "Not reached");
}
exports.getBarStyleType = getBarStyleType;
function xmlToBarStyle(node) {
    "use strict";
    var ret = {};
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getBarStyleType(ch3, null);
    ret.data = dataData;
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToBarStyle = xmlToBarStyle;
(function (StartStopDiscontinue) {
    StartStopDiscontinue[StartStopDiscontinue["Discontinue"] = 2] = "Discontinue";
    StartStopDiscontinue[StartStopDiscontinue["Start"] = 0] = "Start";
    StartStopDiscontinue[StartStopDiscontinue["Stop"] = 1] = "Stop";
})(exports.StartStopDiscontinue || (exports.StartStopDiscontinue = {}));
var StartStopDiscontinue = exports.StartStopDiscontinue;
function getStartStopDiscontinue(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "discontinue") {
        return 2 /* Discontinue */;
    }
    if (s == "start") {
        return 0 /* Start */;
    }
    if (s == "stop") {
        return 1 /* Stop */;
    }
    assert(false, "Not reached");
}
exports.getStartStopDiscontinue = getStartStopDiscontinue;
function xmlToEnding(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "end-length") {
            var dataEndLength = getNumber(ch2, true);
            ret.endLength = dataEndLength;
        }
        if (ch2.name === "text-x") {
            var dataTextX = getNumber(ch2, true);
            ret.textX = dataTextX;
        }
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
        }
        if (ch2.name === "text-y") {
            var dataTextY = getNumber(ch2, true);
            ret.textY = dataTextY;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopDiscontinue(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataEnding = getString(ch3, false);
    ret.ending = dataEnding;
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToEnding = xmlToEnding;
(function (WingedType) {
    WingedType[WingedType["None"] = 0] = "None";
    WingedType[WingedType["Curved"] = 2] = "Curved";
    WingedType[WingedType["DoubleCurved"] = 4] = "DoubleCurved";
    WingedType[WingedType["Straight"] = 1] = "Straight";
    WingedType[WingedType["DoubleStraight"] = 3] = "DoubleStraight";
})(exports.WingedType || (exports.WingedType = {}));
var WingedType = exports.WingedType;
function getWingedType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 0 /* None */;
    }
    if (s == "curved") {
        return 2 /* Curved */;
    }
    if (s == "double-curved") {
        return 4 /* DoubleCurved */;
    }
    if (s == "straight") {
        return 1 /* Straight */;
    }
    if (s == "double-straight") {
        return 3 /* DoubleStraight */;
    }
    assert(false, "Not reached");
}
exports.getWingedType = getWingedType;
(function (DirectionTypeBg) {
    DirectionTypeBg[DirectionTypeBg["Forward"] = 1] = "Forward";
    DirectionTypeBg[DirectionTypeBg["Backward"] = 0] = "Backward";
})(exports.DirectionTypeBg || (exports.DirectionTypeBg = {}));
var DirectionTypeBg = exports.DirectionTypeBg;
function getDirectionTypeBg(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "forward") {
        return 1 /* Forward */;
    }
    if (s == "backward") {
        return 0 /* Backward */;
    }
    assert(false, "Not reached");
}
exports.getDirectionTypeBg = getDirectionTypeBg;
function xmlToRepeat(node) {
    "use strict";
    var ret = {};
    var foundWinged = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "times") {
            var dataTimes = getString(ch2, true);
            ret.times = dataTimes;
        }
        if (ch2.name === "winged") {
            var dataWinged = getWingedType(ch2, 0 /* None */);
            ret.winged = dataWinged;
            foundWinged = true;
        }
        if (ch2.name === "direction") {
            var dataDirection = getDirectionTypeBg(ch2, null);
            ret.direction = dataDirection;
        }
    }
    if (!foundWinged) {
        ret.winged = 0 /* None */;
    }
    return ret;
}
exports.xmlToRepeat = xmlToRepeat;
(function (TipDirection) {
    TipDirection[TipDirection["Right"] = 3] = "Right";
    TipDirection[TipDirection["Northwest"] = 4] = "Northwest";
    TipDirection[TipDirection["Southwest"] = 7] = "Southwest";
    TipDirection[TipDirection["Down"] = 1] = "Down";
    TipDirection[TipDirection["Northeast"] = 5] = "Northeast";
    TipDirection[TipDirection["Southeast"] = 6] = "Southeast";
    TipDirection[TipDirection["Up"] = 0] = "Up";
    TipDirection[TipDirection["Left"] = 2] = "Left";
})(exports.TipDirection || (exports.TipDirection = {}));
var TipDirection = exports.TipDirection;
function getTipDirection(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "right") {
        return 3 /* Right */;
    }
    if (s == "northwest") {
        return 4 /* Northwest */;
    }
    if (s == "southwest") {
        return 7 /* Southwest */;
    }
    if (s == "down") {
        return 1 /* Down */;
    }
    if (s == "northeast") {
        return 5 /* Northeast */;
    }
    if (s == "southeast") {
        return 6 /* Southeast */;
    }
    if (s == "up") {
        return 0 /* Up */;
    }
    if (s == "left") {
        return 2 /* Left */;
    }
    assert(false, "Not reached");
}
exports.getTipDirection = getTipDirection;
function xmlToDirection(node) {
    "use strict";
    var ret = {};
    var foundPlacement = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "voice") {
            var dataVoice = getString(ch, true);
            ret.voice = dataVoice;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "direction-type") {
            var dataDirectionTypes = xmlToDirectionType(ch);
            ret.directionTypes = (ret.directionTypes || []).concat(dataDirectionTypes);
        }
        if (ch.nodeName === "staff") {
            var dataStaff = xmlToStaff(ch);
            ret.staff = dataStaff;
        }
        if (ch.nodeName === "offset") {
            var dataOffset = xmlToOffset(ch);
            ret.offset = dataOffset;
        }
        if (ch.nodeName === "sound") {
            var dataSound = xmlToSound(ch);
            ret.sound = dataSound;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToDirection = xmlToDirection;
function xmlToDirectionType(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "percussion") {
            var dataPercussions = xmlToPercussion(ch);
            ret.percussions = (ret.percussions || []).concat(dataPercussions);
        }
        if (ch.nodeName === "rehearsal") {
            var dataRehearsals = xmlToRehearsal(ch);
            ret.rehearsals = (ret.rehearsals || []).concat(dataRehearsals);
        }
        if (ch.nodeName === "pedal") {
            var dataPedal = xmlToPedal(ch);
            ret.pedal = dataPedal;
        }
        if (ch.nodeName === "principal-voice") {
            var dataPrincipalVoice = xmlToPrincipalVoice(ch);
            ret.principalVoice = dataPrincipalVoice;
        }
        if (ch.nodeName === "accordion-registration") {
            var dataAccordionRegistration = xmlToAccordionRegistration(ch);
            ret.accordionRegistration = dataAccordionRegistration;
        }
        if (ch.nodeName === "eyeglasses") {
            var dataEyeglasses = xmlToEyeglasses(ch);
            ret.eyeglasses = dataEyeglasses;
        }
        if (ch.nodeName === "image") {
            var dataImage = xmlToImage(ch);
            ret.image = dataImage;
        }
        if (ch.nodeName === "harp-pedals") {
            var dataHarpPedals = xmlToHarpPedals(ch);
            ret.harpPedals = dataHarpPedals;
        }
        if (ch.nodeName === "metronome") {
            var dataMetronome = xmlToMetronome(ch);
            ret.metronome = dataMetronome;
        }
        if (ch.nodeName === "other-direction") {
            var dataOtherDirection = xmlToOtherDirection(ch);
            ret.otherDirection = dataOtherDirection;
        }
        if (ch.nodeName === "segno") {
            var dataSegnos = xmlToSegno(ch);
            ret.segnos = (ret.segnos || []).concat(dataSegnos);
        }
        if (ch.nodeName === "scordatura") {
            var dataScordatura = xmlToScordatura(ch);
            ret.scordatura = dataScordatura;
        }
        if (ch.nodeName === "string-mute") {
            var dataStringMute = xmlToStringMute(ch);
            ret.stringMute = dataStringMute;
        }
        if (ch.nodeName === "wedge") {
            var dataWedge = xmlToWedge(ch);
            ret.wedge = dataWedge;
        }
        if (ch.nodeName === "dashes") {
            var dataDashes = xmlToDashes(ch);
            ret.dashes = dataDashes;
        }
        if (ch.nodeName === "damp") {
            var dataDamp = xmlToDamp(ch);
            ret.damp = dataDamp;
        }
        if (ch.nodeName === "bracket") {
            var dataBracket = xmlToBracket(ch);
            ret.bracket = dataBracket;
        }
        if (ch.nodeName === "dynamics") {
            var dataDynamics = xmlToDynamics(ch);
            ret.dynamics = dataDynamics;
        }
        if (ch.nodeName === "octave-shift") {
            var dataOctaveShift = xmlToOctaveShift(ch);
            ret.octaveShift = dataOctaveShift;
        }
        if (ch.nodeName === "words") {
            var dataWords = xmlToWords(ch);
            ret.words = (ret.words || []).concat(dataWords);
        }
        if (ch.nodeName === "damp-all") {
            var dataDampAll = xmlToDampAll(ch);
            ret.dampAll = dataDampAll;
        }
        if (ch.nodeName === "coda") {
            var dataCodas = xmlToCoda(ch);
            ret.codas = (ret.codas || []).concat(dataCodas);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDirectionType = xmlToDirectionType;
function xmlToRehearsal(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundLineHeight = false;
    var foundDir = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToRehearsal = xmlToRehearsal;
function xmlToWords(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundLineHeight = false;
    var foundDir = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToWords = xmlToWords;
(function (WedgeType) {
    WedgeType[WedgeType["Diminuendo"] = 1] = "Diminuendo";
    WedgeType[WedgeType["Crescendo"] = 0] = "Crescendo";
    WedgeType[WedgeType["Stop"] = 2] = "Stop";
    WedgeType[WedgeType["Continue"] = 3] = "Continue";
})(exports.WedgeType || (exports.WedgeType = {}));
var WedgeType = exports.WedgeType;
function getWedgeType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "diminuendo") {
        return 1 /* Diminuendo */;
    }
    if (s == "crescendo") {
        return 0 /* Crescendo */;
    }
    if (s == "stop") {
        return 2 /* Stop */;
    }
    if (s == "continue") {
        return 3 /* Continue */;
    }
    assert(false, "Not reached");
}
exports.getWedgeType = getWedgeType;
function xmlToWedge(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundNeinte = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "neinte") {
            var dataNeinte = xmlToYesNo(ch2);
            ret.neinte = dataNeinte;
            foundNeinte = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getWedgeType(ch2, null);
            ret.type = dataType;
        }
        if (ch2.name === "spread") {
            var dataSpread = getNumber(ch2, true);
            ret.spread = dataSpread;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundNeinte) {
        ret.neinte = false;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToWedge = xmlToWedge;
function xmlToDashes(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopContinue(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToDashes = xmlToDashes;
(function (LineEndType) {
    LineEndType[LineEndType["None"] = 4] = "None";
    LineEndType[LineEndType["Both"] = 2] = "Both";
    LineEndType[LineEndType["Arrow"] = 3] = "Arrow";
    LineEndType[LineEndType["Down"] = 1] = "Down";
    LineEndType[LineEndType["Up"] = 0] = "Up";
})(exports.LineEndType || (exports.LineEndType = {}));
var LineEndType = exports.LineEndType;
function getLineEndType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 4 /* None */;
    }
    if (s == "both") {
        return 2 /* Both */;
    }
    if (s == "arrow") {
        return 3 /* Arrow */;
    }
    if (s == "down") {
        return 1 /* Down */;
    }
    if (s == "up") {
        return 0 /* Up */;
    }
    assert(false, "Not reached");
}
exports.getLineEndType = getLineEndType;
function xmlToBracket(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    var foundLineType = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "end-length") {
            var dataEndLength = getNumber(ch2, true);
            ret.endLength = dataEndLength;
        }
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "line-type") {
            var dataLineType = getSolidDashedDottedWavy(ch2, 0 /* Solid */);
            ret.lineType = dataLineType;
            foundLineType = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStopContinue(ch2, null);
            ret.type = dataType;
        }
        if (ch2.name === "line-end") {
            var dataLineEnd = getLineEndType(ch2, null);
            ret.lineEnd = dataLineEnd;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    if (!foundLineType) {
        ret.lineType = 0 /* Solid */;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToBracket = xmlToBracket;
(function (PedalType) {
    PedalType[PedalType["Change"] = 3] = "Change";
    PedalType[PedalType["Start"] = 0] = "Start";
    PedalType[PedalType["Stop"] = 1] = "Stop";
    PedalType[PedalType["Continue"] = 2] = "Continue";
})(exports.PedalType || (exports.PedalType = {}));
var PedalType = exports.PedalType;
function getPedalType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "change") {
        return 3 /* Change */;
    }
    if (s == "start") {
        return 0 /* Start */;
    }
    if (s == "stop") {
        return 1 /* Stop */;
    }
    if (s == "continue") {
        return 2 /* Continue */;
    }
    assert(false, "Not reached");
}
exports.getPedalType = getPedalType;
function xmlToPedal(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "line") {
            var dataLine = xmlToYesNo(ch2);
            ret.line = dataLine;
        }
        if (ch2.name === "sign") {
            var dataSign = xmlToYesNo(ch2);
            ret.sign = dataSign;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "type") {
            var dataType = getPedalType(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToPedal = xmlToPedal;
function xmlToMetronome(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundJustify = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "metronome-note") {
            var dataMetronomeNotes = xmlToMetronomeNote(ch);
            ret.metronomeNotes = (ret.metronomeNotes || []).concat(dataMetronomeNotes);
        }
        if (ch.nodeName === "per-minute") {
            var dataPerMinute = xmlToPerMinute(ch);
            ret.perMinute = dataPerMinute;
        }
        if (ch.nodeName === "beat-unit") {
            var dataBeatUnit = getString(ch, true);
            ret.beatUnit = dataBeatUnit;
        }
        if (ch.nodeName === "beat-unit-dot") {
            var dataBeatUnitDots = xmlToBeatUnitDot(ch);
            ret.beatUnitDots = (ret.beatUnitDots || []).concat(dataBeatUnitDots);
        }
        if (ch.nodeName === "metronome-relation") {
            var dataMetronomeRelation = getString(ch, true);
            ret.metronomeRelation = dataMetronomeRelation;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "parentheses") {
            var dataParentheses = xmlToYesNo(ch2);
            ret.parentheses = dataParentheses;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    return ret;
}
exports.xmlToMetronome = xmlToMetronome;
function xmlToBeatUnitDot(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBeatUnitDot = xmlToBeatUnitDot;
function xmlToPerMinute(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    return ret;
}
exports.xmlToPerMinute = xmlToPerMinute;
function xmlToMetronomeNote(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "metronome-dot") {
            var dataMetronomeDots = xmlToMetronomeDot(ch);
            ret.metronomeDots = (ret.metronomeDots || []).concat(dataMetronomeDots);
        }
        if (ch.nodeName === "metronome-beam") {
            var dataMetronomeBeams = xmlToMetronomeBeam(ch);
            ret.metronomeBeams = (ret.metronomeBeams || []).concat(dataMetronomeBeams);
        }
        if (ch.nodeName === "metronome-type") {
            var dataMetronomeType = getString(ch, true);
            ret.metronomeType = dataMetronomeType;
        }
        if (ch.nodeName === "metronome-tuplet") {
            var dataMetronomeTuplet = xmlToMetronomeTuplet(ch);
            ret.metronomeTuplet = dataMetronomeTuplet;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMetronomeNote = xmlToMetronomeNote;
function xmlToMetronomeDot(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToMetronomeDot = xmlToMetronomeDot;
function xmlToMetronomeBeam(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    return ret;
}
exports.xmlToMetronomeBeam = xmlToMetronomeBeam;
function xmlToMetronomeTuplet(node) {
    "use strict";
    var ret = {};
    var foundBracket = false;
    var foundShowNumber = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "actual-notes") {
            var dataActualNotes = xmlToActualNotes(ch);
            ret.actualNotes = dataActualNotes;
        }
        if (ch.nodeName === "normal-type") {
            var dataNormalType = getString(ch, true);
            ret.normalType = dataNormalType;
        }
        if (ch.nodeName === "normal-notes") {
            var dataNormalNotes = xmlToNormalNotes(ch);
            ret.normalNotes = dataNormalNotes;
        }
        if (ch.nodeName === "normal-dot") {
            var dataNormalDots = xmlToNormalDot(ch);
            ret.normalDots = (ret.normalDots || []).concat(dataNormalDots);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "bracket") {
            var dataBracket = xmlToYesNo(ch2);
            ret.bracket = dataBracket;
            foundBracket = true;
        }
        if (ch2.name === "show-number") {
            var dataShowNumber = getActualBothNone(ch2, 1 /* Both */);
            ret.showNumber = dataShowNumber;
            foundShowNumber = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundBracket) {
        ret.bracket = false;
    }
    if (!foundShowNumber) {
        ret.showNumber = 1 /* Both */;
    }
    return ret;
}
exports.xmlToMetronomeTuplet = xmlToMetronomeTuplet;
(function (OctaveShiftType) {
    OctaveShiftType[OctaveShiftType["Down"] = 2] = "Down";
    OctaveShiftType[OctaveShiftType["Stop"] = 3] = "Stop";
    OctaveShiftType[OctaveShiftType["Up"] = 1] = "Up";
    OctaveShiftType[OctaveShiftType["Continue"] = 4] = "Continue";
})(exports.OctaveShiftType || (exports.OctaveShiftType = {}));
var OctaveShiftType = exports.OctaveShiftType;
function getOctaveShiftType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "down") {
        return 2 /* Down */;
    }
    if (s == "stop") {
        return 3 /* Stop */;
    }
    if (s == "up") {
        return 1 /* Up */;
    }
    if (s == "continue") {
        return 4 /* Continue */;
    }
    assert(false, "Not reached");
}
exports.getOctaveShiftType = getOctaveShiftType;
function xmlToOctaveShift(node) {
    "use strict";
    var ret = {};
    var foundSize = false;
    var foundDashLength = false;
    var foundSpaceLength = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
        }
        if (ch2.name === "size") {
            var dataSize = getNumber(ch2, true);
            ret.size = dataSize;
            foundSize = true;
        }
        if (ch2.name === "dash-length") {
            var dataDashLength = getNumber(ch2, true);
            ret.dashLength = dataDashLength;
            foundDashLength = true;
        }
        if (ch2.name === "space-length") {
            var dataSpaceLength = getNumber(ch2, true);
            ret.spaceLength = dataSpaceLength;
            foundSpaceLength = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getOctaveShiftType(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundSize) {
        ret.size = 8;
    }
    if (!foundDashLength) {
        ret.dashLength = 1;
    }
    if (!foundSpaceLength) {
        ret.spaceLength = 1;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToOctaveShift = xmlToOctaveShift;
function xmlToHarpPedals(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "pedal-tuning") {
            var dataPedalTunings = xmlToPedalTuning(ch);
            ret.pedalTunings = (ret.pedalTunings || []).concat(dataPedalTunings);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToHarpPedals = xmlToHarpPedals;
function xmlToPedalTuning(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "pedal-step") {
            var dataPedalStep = getString(ch, true);
            ret.pedalStep = dataPedalStep;
        }
        if (ch.nodeName === "pedal-alter") {
            var dataPedalAlter = getString(ch, true);
            ret.pedalAlter = dataPedalAlter;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPedalTuning = xmlToPedalTuning;
function xmlToDamp(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToDamp = xmlToDamp;
function xmlToDampAll(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToDampAll = xmlToDampAll;
function xmlToEyeglasses(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToEyeglasses = xmlToEyeglasses;
function xmlToStringMute(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToStringMute = xmlToStringMute;
function xmlToScordatura(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "accord") {
            var dataAccords = xmlToAccord(ch);
            ret.accords = (ret.accords || []).concat(dataAccords);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToScordatura = xmlToScordatura;
function xmlToAccord(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "tuning-alter") {
            var dataTuningAlter = xmlToTuningAlter(ch);
            ret.tuningAlter = dataTuningAlter;
        }
        if (ch.nodeName === "tuning-step") {
            var dataTuningStep = getString(ch, true);
            ret.tuningStep = dataTuningStep;
        }
        if (ch.nodeName === "tuning-octave") {
            var dataTuningOctave = xmlToTuningOctave(ch);
            ret.tuningOctave = dataTuningOctave;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "string") {
            var dataString_ = getString(ch2, true);
            ret.string_ = dataString_;
        }
    }
    return ret;
}
exports.xmlToAccord = xmlToAccord;
function xmlToImage(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundHalign = false;
    var foundValignImage = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign-image") {
            var dataValignImage = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valignImage = dataValignImage;
            foundValignImage = true;
        }
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
        if (ch2.name === "source") {
            var dataSource = getString(ch2, true);
            ret.source = dataSource;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValignImage) {
        ret.valignImage = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToImage = xmlToImage;
(function (VoiceSymbol) {
    VoiceSymbol[VoiceSymbol["None"] = 4] = "None";
    VoiceSymbol[VoiceSymbol["Hauptstimme"] = 1] = "Hauptstimme";
    VoiceSymbol[VoiceSymbol["Nebenstimme"] = 2] = "Nebenstimme";
    VoiceSymbol[VoiceSymbol["Plain"] = 3] = "Plain";
})(exports.VoiceSymbol || (exports.VoiceSymbol = {}));
var VoiceSymbol = exports.VoiceSymbol;
function getVoiceSymbol(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "none") {
        return 4 /* None */;
    }
    if (s == "Hauptstimme") {
        return 1 /* Hauptstimme */;
    }
    if (s == "Nebenstimme") {
        return 2 /* Nebenstimme */;
    }
    if (s == "plain") {
        return 3 /* Plain */;
    }
    assert(false, "Not reached");
}
exports.getVoiceSymbol = getVoiceSymbol;
function xmlToPrincipalVoice(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "symbol") {
            var dataSymbol = getVoiceSymbol(ch2, null);
            ret.symbol = dataSymbol;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, false);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToPrincipalVoice = xmlToPrincipalVoice;
function xmlToAccordionRegistration(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "accordion-middle") {
            var dataAccordionMiddle = getString(ch, true);
            ret.accordionMiddle = dataAccordionMiddle;
        }
        if (ch.nodeName === "accordion-high") {
            var dataAccordionHigh = true;
            ret.accordionHigh = dataAccordionHigh;
        }
        if (ch.nodeName === "accordion-low") {
            var dataAccordionLow = true;
            ret.accordionLow = dataAccordionLow;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToAccordionRegistration = xmlToAccordionRegistration;
function xmlToPercussion(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "stick-location") {
            var dataStickLocation = getString(ch, true);
            ret.stickLocation = dataStickLocation;
        }
        if (ch.nodeName === "other-percussion") {
            var dataOtherPercussion = getString(ch, true);
            ret.otherPercussion = dataOtherPercussion;
        }
        if (ch.nodeName === "wood") {
            var dataWood = getString(ch, true);
            ret.wood = dataWood;
        }
        if (ch.nodeName === "effect") {
            var dataEffect = getString(ch, true);
            ret.effect = dataEffect;
        }
        if (ch.nodeName === "glass") {
            var dataGlass = getString(ch, true);
            ret.glass = dataGlass;
        }
        if (ch.nodeName === "timpani") {
            var dataTimpani = xmlToTimpani(ch);
            ret.timpani = dataTimpani;
        }
        if (ch.nodeName === "stick") {
            var dataStick = xmlToStick(ch);
            ret.stick = dataStick;
        }
        if (ch.nodeName === "metal") {
            var dataMetal = getString(ch, true);
            ret.metal = dataMetal;
        }
        if (ch.nodeName === "pitched") {
            var dataPitched = getString(ch, true);
            ret.pitched = dataPitched;
        }
        if (ch.nodeName === "membrane") {
            var dataMembrane = getString(ch, true);
            ret.membrane = dataMembrane;
        }
        if (ch.nodeName === "beater") {
            var dataBeater = xmlToBeater(ch);
            ret.beater = dataBeater;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToPercussion = xmlToPercussion;
function xmlToTimpani(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToTimpani = xmlToTimpani;
function xmlToBeater(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "tip") {
            var dataTip = getTipDirection(ch2, null);
            ret.tip = dataTip;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    return ret;
}
exports.xmlToBeater = xmlToBeater;
function xmlToStick(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "stick-material") {
            var dataStickMaterial = getString(ch, true);
            ret.stickMaterial = dataStickMaterial;
        }
        if (ch.nodeName === "stick-type") {
            var dataStickType = getString(ch, true);
            ret.stickType = dataStickType;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "tip") {
            var dataTip = getTipDirection(ch2, null);
            ret.tip = dataTip;
        }
    }
    return ret;
}
exports.xmlToStick = xmlToStick;
function xmlToOffset(node) {
    "use strict";
    var ret = {};
    var foundSound = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "sound") {
            var dataSound = xmlToYesNo(ch2);
            ret.sound = dataSound;
            foundSound = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundSound) {
        ret.sound = false;
    }
    return ret;
}
exports.xmlToOffset = xmlToOffset;
function xmlToHarmonyChord(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "root") {
            var dataRoot = xmlToRoot(ch);
            ret.root = dataRoot;
        }
        if (ch.nodeName === "function") {
            var dataFunction_ = xmlToFunction(ch);
            ret.function_ = dataFunction_;
        }
        if (ch.nodeName === "kind") {
            var dataKind = xmlToKind(ch);
            ret.kind = dataKind;
        }
        if (ch.nodeName === "degree") {
            var dataDegree = xmlToDegree(ch);
            ret.degree = dataDegree;
        }
        if (ch.nodeName === "inversion") {
            var dataInversion = xmlToInversion(ch);
            ret.inversion = dataInversion;
        }
        if (ch.nodeName === "bass") {
            var dataBass = xmlToBass(ch);
            ret.bass = dataBass;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToHarmonyChord = xmlToHarmonyChord;
(function (ExplicitImpliedAlternate) {
    ExplicitImpliedAlternate[ExplicitImpliedAlternate["Explicit"] = 1] = "Explicit";
    ExplicitImpliedAlternate[ExplicitImpliedAlternate["Implied"] = 2] = "Implied";
    ExplicitImpliedAlternate[ExplicitImpliedAlternate["Alternate"] = 3] = "Alternate";
})(exports.ExplicitImpliedAlternate || (exports.ExplicitImpliedAlternate = {}));
var ExplicitImpliedAlternate = exports.ExplicitImpliedAlternate;
function getExplicitImpliedAlternate(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "explicit") {
        return 1 /* Explicit */;
    }
    if (s == "implied") {
        return 2 /* Implied */;
    }
    if (s == "alternate") {
        return 3 /* Alternate */;
    }
    assert(false, "Not reached");
}
exports.getExplicitImpliedAlternate = getExplicitImpliedAlternate;
function xmlToHarmony(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPlacement = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "frame") {
            var dataFrame = xmlToFrame(ch);
            ret.frame = dataFrame;
        }
        if (ch.nodeName === "root") {
            var dataRoot = xmlToRoot(ch);
            ret.root = dataRoot;
        }
        if (ch.nodeName === "function") {
            var dataFunction_ = xmlToFunction(ch);
            ret.function_ = dataFunction_;
        }
        if (ch.nodeName === "kind") {
            var dataKind = xmlToKind(ch);
            ret.kind = dataKind;
        }
        if (ch.nodeName === "degree") {
            var dataDegree = xmlToDegree(ch);
            ret.degree = dataDegree;
        }
        if (ch.nodeName === "inversion") {
            var dataInversion = xmlToInversion(ch);
            ret.inversion = dataInversion;
        }
        if (ch.nodeName === "bass") {
            var dataBass = xmlToBass(ch);
            ret.bass = dataBass;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "staff") {
            var dataStaff = xmlToStaff(ch);
            ret.staff = dataStaff;
        }
        if (ch.nodeName === "offset") {
            var dataOffset = xmlToOffset(ch);
            ret.offset = dataOffset;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-frame") {
            var dataPrintFrame = xmlToYesNo(ch2);
            ret.printFrame = dataPrintFrame;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "placement") {
            var dataPlacement = getAboveBelow(ch2, 0 /* Unspecified */);
            ret.placement = dataPlacement;
            foundPlacement = true;
        }
        if (ch2.name === "type") {
            var dataHarmonyType = getExplicitImpliedAlternate(ch2, null);
            ret.harmonyType = dataHarmonyType;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPlacement) {
        ret.placement = 0 /* Unspecified */;
    }
    return ret;
}
exports.xmlToHarmony = xmlToHarmony;
function xmlToRoot(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "root-step") {
            var dataRootStep = xmlToRootStep(ch);
            ret.rootStep = dataRootStep;
        }
        if (ch.nodeName === "root-alter") {
            var dataRootAlter = xmlToRootAlter(ch);
            ret.rootAlter = dataRootAlter;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToRoot = xmlToRoot;
function xmlToRootStep(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "text") {
            var dataText = getString(ch2, true);
            ret.text = dataText;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToRootStep = xmlToRootStep;
function xmlToRootAlter(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "location") {
            var dataLocation = getLeftRight(ch2, null);
            ret.location = dataLocation;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToRootAlter = xmlToRootAlter;
function xmlToFunction(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToFunction = xmlToFunction;
function xmlToKind(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "parentheses-degrees") {
            var dataParenthesesDegrees = xmlToYesNo(ch2);
            ret.parenthesesDegrees = dataParenthesesDegrees;
        }
        if (ch2.name === "use-symbols") {
            var dataUseSymbols = xmlToYesNo(ch2);
            ret.useSymbols = dataUseSymbols;
        }
        if (ch2.name === "text") {
            var dataText = getString(ch2, true);
            ret.text = dataText;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "stack-degrees") {
            var dataStackDegrees = xmlToYesNo(ch2);
            ret.stackDegrees = dataStackDegrees;
        }
        if (ch2.name === "bracket-degrees") {
            var dataBracketDegrees = xmlToYesNo(ch2);
            ret.bracketDegrees = dataBracketDegrees;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToKind = xmlToKind;
function xmlToInversion(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToInversion = xmlToInversion;
function xmlToBass(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "bass-step") {
            var dataBassStep = xmlToBassStep(ch);
            ret.bassStep = dataBassStep;
        }
        if (ch.nodeName === "bass-alter") {
            var dataBassAlter = xmlToBassAlter(ch);
            ret.bassAlter = dataBassAlter;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToBass = xmlToBass;
function xmlToBassStep(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "text") {
            var dataText = getString(ch2, true);
            ret.text = dataText;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToBassStep = xmlToBassStep;
function xmlToBassAlter(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "location") {
            var dataLocation = getLeftRight(ch2, null);
            ret.location = dataLocation;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToBassAlter = xmlToBassAlter;
function xmlToDegree(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "degree-alter") {
            var dataDegreeAlter = xmlToDegreeAlter(ch);
            ret.degreeAlter = dataDegreeAlter;
        }
        if (ch.nodeName === "degree-value") {
            var dataDegreeValue = xmlToDegreeValue(ch);
            ret.degreeValue = dataDegreeValue;
        }
        if (ch.nodeName === "degree-type") {
            var dataDegreeType = xmlToDegreeType(ch);
            ret.degreeType = dataDegreeType;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    return ret;
}
exports.xmlToDegree = xmlToDegree;
(function (ChordType) {
    ChordType[ChordType["Augmented"] = 3] = "Augmented";
    ChordType[ChordType["Diminished"] = 4] = "Diminished";
    ChordType[ChordType["Major"] = 1] = "Major";
    ChordType[ChordType["Minor"] = 2] = "Minor";
    ChordType[ChordType["HalfDiminished"] = 5] = "HalfDiminished";
})(exports.ChordType || (exports.ChordType = {}));
var ChordType = exports.ChordType;
function getChordType(node, fallbackVal) {
    "use strict";
    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();
    if (s === "" && fallbackVal !== null && fallbackVal !== undefined) {
        return fallbackVal;
    }
    if (s == "augmented") {
        return 3 /* Augmented */;
    }
    if (s == "diminished") {
        return 4 /* Diminished */;
    }
    if (s == "major") {
        return 1 /* Major */;
    }
    if (s == "minor") {
        return 2 /* Minor */;
    }
    if (s == "half-diminished") {
        return 5 /* HalfDiminished */;
    }
    assert(false, "Not reached");
}
exports.getChordType = getChordType;
function xmlToDegreeValue(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "symbol") {
            var dataSymbol = getChordType(ch2, null);
            ret.symbol = dataSymbol;
        }
        if (ch2.name === "text") {
            var dataText = getString(ch2, true);
            ret.text = dataText;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToDegreeValue = xmlToDegreeValue;
function xmlToDegreeAlter(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "plus-minus") {
            var dataPlusMinus = xmlToYesNo(ch2);
            ret.plusMinus = dataPlusMinus;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToDegreeAlter = xmlToDegreeAlter;
function xmlToDegreeType(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "text") {
            var dataText = getString(ch2, true);
            ret.text = dataText;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToDegreeType = xmlToDegreeType;
function xmlToFrame(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValignImage = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "frame-strings") {
            var dataFrameStrings = getString(ch, true);
            ret.frameStrings = dataFrameStrings;
        }
        if (ch.nodeName === "frame-note") {
            var dataFrameNotes = xmlToFrameNote(ch);
            ret.frameNotes = (ret.frameNotes || []).concat(dataFrameNotes);
        }
        if (ch.nodeName === "frame-frets") {
            var dataFrameFrets = getString(ch, true);
            ret.frameFrets = dataFrameFrets;
        }
        if (ch.nodeName === "first-fret") {
            var dataFirstFret = xmlToFirstFret(ch);
            ret.firstFret = dataFirstFret;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "unplayed") {
            var dataUnplayed = getString(ch2, true);
            ret.unplayed = dataUnplayed;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign-image") {
            var dataValignImage = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valignImage = dataValignImage;
            foundValignImage = true;
        }
        if (ch2.name === "width") {
            var dataWidth = getNumber(ch2, true);
            ret.width = dataWidth;
        }
        if (ch2.name === "height") {
            var dataHeight = getNumber(ch2, true);
            ret.height = dataHeight;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValignImage) {
        ret.valignImage = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToFrame = xmlToFrame;
function xmlToFirstFret(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "text") {
            var dataText = getString(ch2, true);
            ret.text = dataText;
        }
        if (ch2.name === "location") {
            var dataLocation = getLeftRight(ch2, null);
            ret.location = dataLocation;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    return ret;
}
exports.xmlToFirstFret = xmlToFirstFret;
function xmlToFrameNote(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "barre") {
            var dataBarre = xmlToBarre(ch);
            ret.barre = dataBarre;
        }
        if (ch.nodeName === "string") {
            var dataString_ = xmlToString(ch);
            ret.string_ = dataString_;
        }
        if (ch.nodeName === "fingering") {
            var dataFingering = xmlToFingering(ch);
            ret.fingering = dataFingering;
        }
        if (ch.nodeName === "fret") {
            var dataFret = xmlToFret(ch);
            ret.fret = dataFret;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToFrameNote = xmlToFrameNote;
function xmlToBarre(node) {
    "use strict";
    var ret = {};
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToBarre = xmlToBarre;
function xmlToGrouping(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "feature") {
            var dataFeatures = xmlToFeature(ch);
            ret.features = (ret.features || []).concat(dataFeatures);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "type") {
            var dataGroupingType = getStartStopSingle(ch2, null);
            ret.groupingType = dataGroupingType;
        }
        if (ch2.name === "member-of") {
            var dataMemberOf = getString(ch2, true);
            ret.memberOf = dataMemberOf;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    return ret;
}
exports.xmlToGrouping = xmlToGrouping;
function xmlToFeature(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    return ret;
}
exports.xmlToFeature = xmlToFeature;
function xmlToPrint(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "measure-numbering") {
            var dataMeasureNumbering = xmlToMeasureNumbering(ch);
            ret.measureNumbering = dataMeasureNumbering;
        }
        if (ch.nodeName === "part-name-display") {
            var dataPartNameDisplay = xmlToPartNameDisplay(ch);
            ret.partNameDisplay = dataPartNameDisplay;
        }
        if (ch.nodeName === "measure-layout") {
            var dataMeasureLayout = xmlToMeasureLayout(ch);
            ret.measureLayout = dataMeasureLayout;
        }
        if (ch.nodeName === "part-abbreviation-display") {
            var dataPartAbbreviationDisplay = xmlToPartAbbreviationDisplay(ch);
            ret.partAbbreviationDisplay = dataPartAbbreviationDisplay;
        }
        if (ch.nodeName === "page-layout") {
            var dataPageLayout = xmlToPageLayout(ch);
            ret.pageLayout = dataPageLayout;
        }
        if (ch.nodeName === "system-layout") {
            var dataSystemLayout = xmlToSystemLayout(ch);
            ret.systemLayout = dataSystemLayout;
        }
        if (ch.nodeName === "staff-layout") {
            var dataStaffLayouts = xmlToStaffLayout(ch);
            ret.staffLayouts = (ret.staffLayouts || []).concat(dataStaffLayouts);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "new-system") {
            var dataNewSystem = xmlToYesNo(ch2);
            ret.newSystem = dataNewSystem;
        }
        if (ch2.name === "new-page") {
            var dataNewPage = xmlToYesNo(ch2);
            ret.newPage = dataNewPage;
        }
        if (ch2.name === "blank-page") {
            var dataBlankPage = getString(ch2, true);
            ret.blankPage = dataBlankPage;
        }
        if (ch2.name === "staff-spacing") {
            var dataStaffSpacing = getNumber(ch2, true);
            ret.staffSpacing = dataStaffSpacing;
        }
        if (ch2.name === "page-number") {
            var dataPageNumber = getString(ch2, true);
            ret.pageNumber = dataPageNumber;
        }
    }
    return ret;
}
exports.xmlToPrint = xmlToPrint;
function xmlToMeasureNumbering(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToMeasureNumbering = xmlToMeasureNumbering;
function xmlToSound(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "midi-instrument") {
            var dataMidiInstrument = xmlToMidiInstrument(ch);
            ret.midiInstrument = dataMidiInstrument;
        }
        if (ch.nodeName === "play") {
            var dataPlays = xmlToPlay(ch);
            ret.plays = (ret.plays || []).concat(dataPlays);
        }
        if (ch.nodeName === "offset") {
            var dataOffset = xmlToOffset(ch);
            ret.offset = dataOffset;
        }
        if (ch.nodeName === "midi-device") {
            var dataMidiDevice = xmlToMidiDevice(ch);
            ret.midiDevice = dataMidiDevice;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "soft-pedal") {
            var dataSoftPedal = xmlToYesNo(ch2);
            ret.softPedal = dataSoftPedal;
        }
        if (ch2.name === "pan") {
            var dataPan = getString(ch2, true);
            ret.pan = dataPan;
        }
        if (ch2.name === "tocoda") {
            var dataTocoda = getString(ch2, true);
            ret.tocoda = dataTocoda;
        }
        if (ch2.name === "decapo") {
            var dataDecapo = xmlToYesNo(ch2);
            ret.decapo = dataDecapo;
        }
        if (ch2.name === "divisions") {
            var dataDivisions = getString(ch2, true);
            ret.divisions = dataDivisions;
        }
        if (ch2.name === "pizzicato") {
            var dataPizzicato = xmlToYesNo(ch2);
            ret.pizzicato = dataPizzicato;
        }
        if (ch2.name === "coda") {
            var dataCoda = getString(ch2, true);
            ret.coda = dataCoda;
        }
        if (ch2.name === "segno") {
            var dataSegno = getString(ch2, true);
            ret.segno = dataSegno;
        }
        if (ch2.name === "elevation") {
            var dataElevation = getString(ch2, true);
            ret.elevation = dataElevation;
        }
        if (ch2.name === "fine") {
            var dataFine = getString(ch2, true);
            ret.fine = dataFine;
        }
        if (ch2.name === "damper-pedal") {
            var dataDamperPedal = xmlToYesNo(ch2);
            ret.damperPedal = dataDamperPedal;
        }
        if (ch2.name === "dynamics") {
            var dataDynamics = getString(ch2, true);
            ret.dynamics = dataDynamics;
        }
        if (ch2.name === "time-only") {
            var dataTimeOnly = getString(ch2, true);
            ret.timeOnly = dataTimeOnly;
        }
        if (ch2.name === "sostenuto-pedal") {
            var dataSostenutoPedal = xmlToYesNo(ch2);
            ret.sostenutoPedal = dataSostenutoPedal;
        }
        if (ch2.name === "dalsegno") {
            var dataDalsegno = getString(ch2, true);
            ret.dalsegno = dataDalsegno;
        }
        if (ch2.name === "tempo") {
            var dataTempo = getString(ch2, true);
            ret.tempo = dataTempo;
        }
        if (ch2.name === "forward-repeat") {
            var dataForwardRepeat = xmlToYesNo(ch2);
            ret.forwardRepeat = dataForwardRepeat;
        }
    }
    return ret;
}
exports.xmlToSound = xmlToSound;
function xmlToWork(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "work-number") {
            var dataWorkNumber = getString(ch, true);
            ret.workNumber = dataWorkNumber;
        }
        if (ch.nodeName === "work-title") {
            var dataWorkTitle = getString(ch, true);
            ret.workTitle = dataWorkTitle;
        }
        if (ch.nodeName === "opus") {
            var dataOpus = xmlToOpus(ch);
            ret.opus = dataOpus;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToWork = xmlToWork;
function xmlToOpus(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToOpus = xmlToOpus;
function xmlToDefaults(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "word-font") {
            var dataWordFont = xmlToWordFont(ch);
            ret.wordFont = dataWordFont;
        }
        if (ch.nodeName === "lyric-language") {
            var dataLyricLanguages = xmlToLyricLanguage(ch);
            ret.lyricLanguages = (ret.lyricLanguages || []).concat(dataLyricLanguages);
        }
        if (ch.nodeName === "lyric-font") {
            var dataLyricFonts = xmlToLyricFont(ch);
            ret.lyricFonts = (ret.lyricFonts || []).concat(dataLyricFonts);
        }
        if (ch.nodeName === "page-layout") {
            var dataPageLayout = xmlToPageLayout(ch);
            ret.pageLayout = dataPageLayout;
        }
        if (ch.nodeName === "system-layout") {
            var dataSystemLayout = xmlToSystemLayout(ch);
            ret.systemLayout = dataSystemLayout;
        }
        if (ch.nodeName === "appearance") {
            var dataAppearance = xmlToAppearance(ch);
            ret.appearance = dataAppearance;
        }
        if (ch.nodeName === "scaling") {
            var dataScaling = xmlToScaling(ch);
            ret.scaling = dataScaling;
        }
        if (ch.nodeName === "staff-layout") {
            var dataStaffLayouts = xmlToStaffLayout(ch);
            ret.staffLayouts = (ret.staffLayouts || []).concat(dataStaffLayouts);
        }
        if (ch.nodeName === "music-font") {
            var dataMusicFont = xmlToMusicFont(ch);
            ret.musicFont = dataMusicFont;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToDefaults = xmlToDefaults;
function xmlToMusicFont(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    return ret;
}
exports.xmlToMusicFont = xmlToMusicFont;
function xmlToWordFont(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    return ret;
}
exports.xmlToWordFont = xmlToWordFont;
function xmlToLyricFont(node) {
    "use strict";
    var ret = {};
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "name") {
            var dataName = getString(ch2, true);
            ret.name = dataName;
        }
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    return ret;
}
exports.xmlToLyricFont = xmlToLyricFont;
function xmlToLyricLanguage(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
        }
        if (ch2.name === "name") {
            var dataName = getString(ch2, true);
            ret.name = dataName;
        }
    }
    return ret;
}
exports.xmlToLyricLanguage = xmlToLyricLanguage;
function xmlToCredit(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "credit-type") {
            var dataCreditTypes = getString(ch, true);
            ret.creditTypes = (ret.creditTypes || []).concat(dataCreditTypes);
        }
        if (ch.nodeName === "credit-words") {
            var dataCreditWords = xmlToCreditWords(ch);
            ret.creditWords = (ret.creditWords || []).concat(dataCreditWords);
        }
        if (ch.nodeName === "credit-image") {
            var dataCreditImage = xmlToCreditImage(ch);
            ret.creditImage = dataCreditImage;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "page") {
            var dataPage = getNumber(ch2, true);
            ret.page = dataPage;
        }
    }
    return ret;
}
exports.xmlToCredit = xmlToCredit;
function xmlToCreditWords(node) {
    "use strict";
    var ret = {};
    var foundJustify = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundHalign = false;
    var foundValign = false;
    var foundUnderline = false;
    var foundOverline = false;
    var foundLineThrough = false;
    var foundRotation = false;
    var foundLetterSpacing = false;
    var foundLineHeight = false;
    var foundDir = false;
    var foundEnclosure = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign") {
            var dataValign = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valign = dataValign;
            foundValign = true;
        }
        if (ch2.name === "underline") {
            var dataUnderline = getNumber(ch2, true);
            ret.underline = dataUnderline;
            foundUnderline = true;
        }
        if (ch2.name === "overline") {
            var dataOverline = getNumber(ch2, true);
            ret.overline = dataOverline;
            foundOverline = true;
        }
        if (ch2.name === "line-through") {
            var dataLineThrough = getNumber(ch2, true);
            ret.lineThrough = dataLineThrough;
            foundLineThrough = true;
        }
        if (ch2.name === "rotation") {
            var dataRotation = getNumber(ch2, true);
            ret.rotation = dataRotation;
            foundRotation = true;
        }
        if (ch2.name === "letter-spacing") {
            var dataLetterSpacing = getString(ch2, true);
            ret.letterSpacing = dataLetterSpacing;
            foundLetterSpacing = true;
        }
        if (ch2.name === "line-height") {
            var dataLineHeight = getString(ch2, true);
            ret.lineHeight = dataLineHeight;
            foundLineHeight = true;
        }
        if (ch2.name === "dir") {
            var dataDir = getDirectionMode(ch2, 0 /* Ltr */);
            ret.dir = dataDir;
            foundDir = true;
        }
        if (ch2.name === "enclosure") {
            var dataEnclosure = getEnclosureShape(ch2, 7 /* None */);
            ret.enclosure = dataEnclosure;
            foundEnclosure = true;
        }
    }
    var ch3 = node;
    var dataWords = getString(ch3, true);
    ret.words = dataWords;
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValign) {
        ret.valign = 2 /* Bottom */;
    }
    if (!foundUnderline) {
        ret.underline = 0;
    }
    if (!foundOverline) {
        ret.overline = 0;
    }
    if (!foundLineThrough) {
        ret.lineThrough = 0;
    }
    if (!foundRotation) {
        ret.rotation = 0;
    }
    if (!foundLetterSpacing) {
        ret.letterSpacing = "normal";
    }
    if (!foundLineHeight) {
        ret.lineHeight = "normal";
    }
    if (!foundDir) {
        ret.dir = 0 /* Ltr */;
    }
    if (!foundEnclosure) {
        ret.enclosure = 7 /* None */;
    }
    return ret;
}
exports.xmlToCreditWords = xmlToCreditWords;
function xmlToCreditImage(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundHalign = false;
    var foundValignImage = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "halign") {
            var dataHalign = getLeftCenterRight(ch2, (ret.justify || 0 /* Left */));
            ret.halign = dataHalign;
            foundHalign = true;
        }
        if (ch2.name === "valign-image") {
            var dataValignImage = getTopMiddleBottomBaseline(ch2, 2 /* Bottom */);
            ret.valignImage = dataValignImage;
            foundValignImage = true;
        }
        if (ch2.name === "type") {
            var dataType = getString(ch2, true);
            ret.type = dataType;
        }
        if (ch2.name === "source") {
            var dataSource = getString(ch2, true);
            ret.source = dataSource;
        }
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundHalign) {
        ret.halign = (ret.justify || 0 /* Left */);
    }
    if (!foundValignImage) {
        ret.valignImage = 2 /* Bottom */;
    }
    return ret;
}
exports.xmlToCreditImage = xmlToCreditImage;
function xmlToPartList(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "score-part") {
            var dataScoreParts = xmlToScorePart(ch);
            ret.scoreParts = (ret.scoreParts || []).concat(dataScoreParts);
        }
        if (ch.nodeName === "part-group") {
            var dataPartGroups = xmlToPartGroup(ch);
            ret.partGroups = (ret.partGroups || []).concat(dataPartGroups);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToPartList = xmlToPartList;
function xmlToScorePart(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "identification") {
            var dataIdentification = xmlToIdentification(ch);
            ret.identification = dataIdentification;
        }
        if (ch.nodeName === "part-name-display") {
            var dataPartNameDisplay = xmlToPartNameDisplay(ch);
            ret.partNameDisplay = dataPartNameDisplay;
        }
        if (ch.nodeName === "score-instrument") {
            var dataScoreInstruments = xmlToScoreInstrument(ch);
            ret.scoreInstruments = (ret.scoreInstruments || []).concat(dataScoreInstruments);
        }
        if (ch.nodeName === "midi-device") {
            var dataMidiDevices = xmlToMidiDevice(ch);
            ret.midiDevices = (ret.midiDevices || []).concat(dataMidiDevices);
        }
        if (ch.nodeName === "part-name") {
            var dataPartName = xmlToPartName(ch);
            ret.partName = dataPartName;
        }
        if (ch.nodeName === "part-abbreviation-display") {
            var dataPartAbbreviationDisplay = xmlToPartAbbreviationDisplay(ch);
            ret.partAbbreviationDisplay = dataPartAbbreviationDisplay;
        }
        if (ch.nodeName === "part-abbreviation") {
            var dataPartAbbreviation = xmlToPartAbbreviation(ch);
            ret.partAbbreviation = dataPartAbbreviation;
        }
        if (ch.nodeName === "group") {
            var dataGroups = getString(ch, true);
            ret.groups = (ret.groups || []).concat(dataGroups);
        }
        if (ch.nodeName === "midi-instrument") {
            var dataMidiInstruments = xmlToMidiInstrument(ch);
            ret.midiInstruments = (ret.midiInstruments || []).concat(dataMidiInstruments);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "id") {
            var dataId = getString(ch2, true);
            ret.id = dataId;
        }
    }
    return ret;
}
exports.xmlToScorePart = xmlToScorePart;
function xmlToPartName(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPrintObject = false;
    var foundJustify = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
    }
    var ch3 = node;
    var dataPartName = getString(ch3, true);
    ret.partName = dataPartName;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    return ret;
}
exports.xmlToPartName = xmlToPartName;
function xmlToPartAbbreviation(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundPrintObject = false;
    var foundJustify = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
    }
    var ch3 = node;
    var dataAbbreviation = getString(ch3, true);
    ret.abbreviation = dataAbbreviation;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    return ret;
}
exports.xmlToPartAbbreviation = xmlToPartAbbreviation;
function xmlToPartGroup(node) {
    "use strict";
    var ret = {};
    var foundNumber_ = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "group-name-display") {
            var dataGroupNameDisplay = xmlToGroupNameDisplay(ch);
            ret.groupNameDisplay = dataGroupNameDisplay;
        }
        if (ch.nodeName === "group-symbol") {
            var dataGroupSymbol = xmlToGroupSymbol(ch);
            ret.groupSymbol = dataGroupSymbol;
        }
        if (ch.nodeName === "group-name") {
            var dataGroupName = xmlToGroupName(ch);
            ret.groupName = dataGroupName;
        }
        if (ch.nodeName === "group-abbreviation-display") {
            var dataGroupAbbreviationDisplay = xmlToGroupAbbreviationDisplay(ch);
            ret.groupAbbreviationDisplay = dataGroupAbbreviationDisplay;
        }
        if (ch.nodeName === "group-barline") {
            var dataGroupBarline = xmlToGroupBarline(ch);
            ret.groupBarline = dataGroupBarline;
        }
        if (ch.nodeName === "footnote") {
            var dataFootnote = xmlToFootnote(ch);
            ret.footnote = dataFootnote;
        }
        if (ch.nodeName === "level") {
            var dataLevel = xmlToLevel(ch);
            ret.level = dataLevel;
        }
        if (ch.nodeName === "group-abbreviation") {
            var dataGroupAbbreviation = xmlToGroupAbbreviation(ch);
            ret.groupAbbreviation = dataGroupAbbreviation;
        }
        if (ch.nodeName === "group-time") {
            var dataGroupTime = xmlToGroupTime(ch);
            ret.groupTime = dataGroupTime;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "number") {
            var dataNumber_ = getNumber(ch2, true);
            ret.number_ = dataNumber_;
            foundNumber_ = true;
        }
        if (ch2.name === "type") {
            var dataType = getStartStop(ch2, null);
            ret.type = dataType;
        }
    }
    if (!foundNumber_) {
        ret.number_ = 1;
    }
    return ret;
}
exports.xmlToPartGroup = xmlToPartGroup;
function xmlToGroupName(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundJustify = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
    }
    var ch3 = node;
    var dataName = getString(ch3, true);
    ret.name = dataName;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    return ret;
}
exports.xmlToGroupName = xmlToGroupName;
function xmlToGroupNameDisplay(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "display-text") {
            var dataDisplayTexts = xmlToDisplayText(ch);
            ret.displayTexts = (ret.displayTexts || []).concat(dataDisplayTexts);
        }
        if (ch.nodeName === "accidental-text") {
            var dataAccidentalTexts = xmlToAccidentalText(ch);
            ret.accidentalTexts = (ret.accidentalTexts || []).concat(dataAccidentalTexts);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    return ret;
}
exports.xmlToGroupNameDisplay = xmlToGroupNameDisplay;
function xmlToGroupAbbreviation(node) {
    "use strict";
    var ret = {};
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundFontFamily = false;
    var foundFontWeight = false;
    var foundFontStyle = false;
    var foundFontSize = false;
    var foundColor = false;
    var foundJustify = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "font-family") {
            var dataFontFamily = getString(ch2, true);
            ret.fontFamily = dataFontFamily;
            foundFontFamily = true;
        }
        if (ch2.name === "font-weight") {
            var dataFontWeight = getNormalBold(ch2, 0 /* Normal */);
            ret.fontWeight = dataFontWeight;
            foundFontWeight = true;
        }
        if (ch2.name === "font-style") {
            var dataFontStyle = getNormalItalic(ch2, 0 /* Normal */);
            ret.fontStyle = dataFontStyle;
            foundFontStyle = true;
        }
        if (ch2.name === "font-size") {
            var dataFontSize = getString(ch2, true);
            ret.fontSize = dataFontSize;
            foundFontSize = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
        if (ch2.name === "justify") {
            var dataJustify = getLeftCenterRight(ch2, 0 /* Left */);
            ret.justify = dataJustify;
            foundJustify = true;
        }
    }
    var ch3 = node;
    var dataText = getString(ch3, true);
    ret.text = dataText;
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundFontFamily) {
        ret.fontFamily = "Alegreya, serif";
    }
    if (!foundFontWeight) {
        ret.fontWeight = 0 /* Normal */;
    }
    if (!foundFontStyle) {
        ret.fontStyle = 0 /* Normal */;
    }
    if (!foundFontSize) {
        ret.fontSize = "small";
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    if (!foundJustify) {
        ret.justify = 0 /* Left */;
    }
    return ret;
}
exports.xmlToGroupAbbreviation = xmlToGroupAbbreviation;
function xmlToGroupAbbreviationDisplay(node) {
    "use strict";
    var ret = {};
    var foundPrintObject = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "display-text") {
            var dataDisplayTexts = xmlToDisplayText(ch);
            ret.displayTexts = (ret.displayTexts || []).concat(dataDisplayTexts);
        }
        if (ch.nodeName === "accidental-text") {
            var dataAccidentalTexts = xmlToAccidentalText(ch);
            ret.accidentalTexts = (ret.accidentalTexts || []).concat(dataAccidentalTexts);
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "print-object") {
            var dataPrintObject = xmlToYesNo(ch2);
            ret.printObject = dataPrintObject;
            foundPrintObject = true;
        }
    }
    if (!foundPrintObject) {
        ret.printObject = true;
    }
    return ret;
}
exports.xmlToGroupAbbreviationDisplay = xmlToGroupAbbreviationDisplay;
function xmlToGroupSymbol(node) {
    "use strict";
    var ret = {};
    var foundData = false;
    var foundDefaultX = false;
    var foundRelativeY = false;
    var foundDefaultY = false;
    var foundRelativeX = false;
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "default-x") {
            var dataDefaultX = getNumber(ch2, true);
            ret.defaultX = dataDefaultX;
            foundDefaultX = true;
        }
        if (ch2.name === "relative-y") {
            var dataRelativeY = getNumber(ch2, true);
            ret.relativeY = dataRelativeY;
            foundRelativeY = true;
        }
        if (ch2.name === "default-y") {
            var dataDefaultY = getNumber(ch2, true);
            ret.defaultY = dataDefaultY;
            foundDefaultY = true;
        }
        if (ch2.name === "relative-x") {
            var dataRelativeX = getNumber(ch2, true);
            ret.relativeX = dataRelativeX;
            foundRelativeX = true;
        }
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getPartSymbolType(ch3, 0 /* None */);
    ret.data = dataData;
    if (!foundData) {
        ret.data = 0 /* None */;
    }
    if (!foundDefaultX) {
        ret.defaultX = NaN;
    }
    if (!foundRelativeY) {
        ret.relativeY = 0;
    }
    if (!foundDefaultY) {
        ret.defaultY = NaN;
    }
    if (!foundRelativeX) {
        ret.relativeX = 0;
    }
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToGroupSymbol = xmlToGroupSymbol;
function xmlToGroupBarline(node) {
    "use strict";
    var ret = {};
    var foundColor = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "color") {
            var dataColor = getString(ch2, true);
            ret.color = dataColor;
            foundColor = true;
        }
    }
    var ch3 = node;
    var dataData = getString(ch3, true);
    ret.data = dataData;
    if (!foundColor) {
        ret.color = "#000000";
    }
    return ret;
}
exports.xmlToGroupBarline = xmlToGroupBarline;
function xmlToGroupTime(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToGroupTime = xmlToGroupTime;
function xmlToScoreInstrument(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "instrument-name") {
            var dataInstrumentName = getString(ch, true);
            ret.instrumentName = dataInstrumentName;
        }
        if (ch.nodeName === "instrument-sound") {
            var dataInstrumentSound = getString(ch, true);
            ret.instrumentSound = dataInstrumentSound;
        }
        if (ch.nodeName === "ensemble") {
            var dataEnsemble = getString(ch, true);
            ret.ensemble = dataEnsemble;
        }
        if (ch.nodeName === "virtual-instrument") {
            var dataVirtualInstrument = xmlToVirtualInstrument(ch);
            ret.virtualInstrument = dataVirtualInstrument;
        }
        if (ch.nodeName === "instrument-abbreviation") {
            var dataInstrumentAbbreviation = getString(ch, true);
            ret.instrumentAbbreviation = dataInstrumentAbbreviation;
        }
        if (ch.nodeName === "solo") {
            var dataSolo = xmlToSolo(ch);
            ret.solo = dataSolo;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "id") {
            var dataId = getString(ch2, true);
            ret.id = dataId;
        }
    }
    return ret;
}
exports.xmlToScoreInstrument = xmlToScoreInstrument;
function xmlToSolo(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToSolo = xmlToSolo;
function xmlToVirtualInstrument(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "virtual-library") {
            var dataVirtualLibrary = getString(ch, true);
            ret.virtualLibrary = dataVirtualLibrary;
        }
        if (ch.nodeName === "virtual-name") {
            var dataVirtualName = getString(ch, true);
            ret.virtualName = dataVirtualName;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToVirtualInstrument = xmlToVirtualInstrument;
function xmlToScoreHeader(node) {
    "use strict";
    var ret = {};
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "movement-title") {
            var dataMovementTitle = getString(ch, true);
            ret.movementTitle = dataMovementTitle;
        }
        if (ch.nodeName === "identification") {
            var dataIdentification = xmlToIdentification(ch);
            ret.identification = dataIdentification;
        }
        if (ch.nodeName === "defaults") {
            var dataDefaults = xmlToDefaults(ch);
            ret.defaults = dataDefaults;
        }
        if (ch.nodeName === "work") {
            var dataWork = xmlToWork(ch);
            ret.work = dataWork;
        }
        if (ch.nodeName === "credit") {
            var dataCredits = xmlToCredit(ch);
            ret.credits = (ret.credits || []).concat(dataCredits);
        }
        if (ch.nodeName === "part-list") {
            var dataPartList = xmlToPartList(ch);
            ret.partList = dataPartList;
        }
        if (ch.nodeName === "movement-number") {
            var dataMovementNumber = getString(ch, true);
            ret.movementNumber = dataMovementNumber;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
    }
    return ret;
}
exports.xmlToScoreHeader = xmlToScoreHeader;
function xmlToScoreTimewise(node) {
    "use strict";
    var ret = {};
    var foundVersion_ = false;
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "measure") {
            var dataMeasures = xmlToMeasure(ch);
            ret.measures = (ret.measures || []).concat(dataMeasures);
        }
        if (ch.nodeName === "movement-title") {
            var dataMovementTitle = getString(ch, true);
            ret.movementTitle = dataMovementTitle;
        }
        if (ch.nodeName === "identification") {
            var dataIdentification = xmlToIdentification(ch);
            ret.identification = dataIdentification;
        }
        if (ch.nodeName === "defaults") {
            var dataDefaults = xmlToDefaults(ch);
            ret.defaults = dataDefaults;
        }
        if (ch.nodeName === "work") {
            var dataWork = xmlToWork(ch);
            ret.work = dataWork;
        }
        if (ch.nodeName === "credit") {
            var dataCredits = xmlToCredit(ch);
            ret.credits = (ret.credits || []).concat(dataCredits);
        }
        if (ch.nodeName === "part-list") {
            var dataPartList = xmlToPartList(ch);
            ret.partList = dataPartList;
        }
        if (ch.nodeName === "movement-number") {
            var dataMovementNumber = getString(ch, true);
            ret.movementNumber = dataMovementNumber;
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "version") {
            var dataVersion_ = getString(ch2, true);
            ret.version_ = dataVersion_;
            foundVersion_ = true;
        }
    }
    if (!foundVersion_) {
        ret.version_ = "1.0";
    }
    return ret;
}
exports.xmlToScoreTimewise = xmlToScoreTimewise;
function xmlToPart(node) {
    "use strict";
    var rarr = [];
    for (var i = 0; i < node.childNodes.length; ++i) {
        var ch = node.childNodes[i];
        if (ch.nodeName === "note") {
            var data = xmlToNote(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Note";
        }
        if (ch.nodeName === "backup") {
            var data = xmlToBackup(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Backup";
        }
        if (ch.nodeName === "harmony") {
            var data = xmlToHarmony(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Harmony";
        }
        if (ch.nodeName === "forward") {
            var data = xmlToForward(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Forward";
        }
        if (ch.nodeName === "print") {
            var data = xmlToPrint(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Print";
        }
        if (ch.nodeName === "figured-bass") {
            var data = xmlToFiguredBass(ch);
            rarr = (rarr || []).concat(data);
            data._class = "FiguredBass";
        }
        if (ch.nodeName === "direction") {
            var data = xmlToDirection(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Direction";
        }
        if (ch.nodeName === "attributes") {
            var data = xmlToAttributes(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Attributes";
        }
        if (ch.nodeName === "sound") {
            var data = xmlToSound(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Sound";
        }
        if (ch.nodeName === "barline") {
            var data = xmlToBarline(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Barline";
        }
        if (ch.nodeName === "grouping") {
            var data = xmlToGrouping(ch);
            rarr = (rarr || []).concat(data);
            data._class = "Grouping";
        }
    }
    for (var i = 0; i < node.attributes.length; ++i) {
        var ch2 = node.attributes[i];
        if (ch2.name === "id") {
            var data = getString(ch2, true);
            rarr = (rarr || []).concat(data);
        }
    }
    return rarr;
}
exports.xmlToPart = xmlToPart;

},{"assert":"/Users/joshua/miniproj/satie/website/node_modules/browserify/node_modules/assert/assert.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/AutoFocusMixin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/AutoFocusMixin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/BeforeInputEventPlugin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/BeforeInputEventPlugin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/BeforeInputEventPlugin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/BeforeInputEventPlugin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/CSSProperty.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSProperty.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSProperty.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSProperty.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/CSSPropertyOperations.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSPropertyOperations.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSPropertyOperations.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CSSPropertyOperations.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/CallbackQueue.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/CallbackQueue.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CallbackQueue.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CallbackQueue.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ChangeEventPlugin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ChangeEventPlugin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ChangeEventPlugin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ChangeEventPlugin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ClientReactRootIndex.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ClientReactRootIndex.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ClientReactRootIndex.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ClientReactRootIndex.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/CompositionEventPlugin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/CompositionEventPlugin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CompositionEventPlugin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/CompositionEventPlugin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/DOMChildrenOperations.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMChildrenOperations.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMChildrenOperations.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMChildrenOperations.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/DOMProperty.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMProperty.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/DOMPropertyOperations.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DOMPropertyOperations.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/Danger.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/Danger.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Danger.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Danger.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/DefaultEventPluginOrder.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/DefaultEventPluginOrder.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DefaultEventPluginOrder.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/DefaultEventPluginOrder.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/EnterLeaveEventPlugin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EnterLeaveEventPlugin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EnterLeaveEventPlugin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/EventConstants.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventConstants.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/EventListener.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventListener.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventListener.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventListener.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/EventPluginHub.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginHub.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/EventPluginRegistry.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginRegistry.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginRegistry.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginRegistry.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/EventPluginUtils.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginUtils.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginUtils.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPluginUtils.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/EventPropagators.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/EventPropagators.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ExecutionEnvironment.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/HTMLDOMPropertyConfig.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/HTMLDOMPropertyConfig.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/HTMLDOMPropertyConfig.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/LinkedValueUtils.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/LinkedValueUtils.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LinkedValueUtils.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LinkedValueUtils.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/LocalEventTrapMixin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/LocalEventTrapMixin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LocalEventTrapMixin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/LocalEventTrapMixin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/MobileSafariClickEventPlugin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/MobileSafariClickEventPlugin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/MobileSafariClickEventPlugin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/MobileSafariClickEventPlugin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/Object.assign.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Object.assign.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/PooledClass.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/PooledClass.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/React.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/React.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/React.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/React.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserComponentMixin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactBrowserEventEmitter.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactChildren.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactChildren.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactChildren.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactChildren.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponentBrowserEnvironment.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponentBrowserEnvironment.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactComponentBrowserEnvironment.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactComponentWithPureRenderMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactComponentWithPureRenderMixin
*/

"use strict";

var shallowEqual = require("./shallowEqual");

/**
 * If your React component's render function is "pure", e.g. it will render the
 * same result given the same props and state, provide this Mixin for a
 * considerable performance boost.
 *
 * Most React components have pure render functions.
 *
 * Example:
 *
 *   var ReactComponentWithPureRenderMixin =
 *     require('ReactComponentWithPureRenderMixin');
 *   React.createClass({
 *     mixins: [ReactComponentWithPureRenderMixin],
 *
 *     render: function() {
 *       return <div className={this.props.className}>foo</div>;
 *     }
 *   });
 *
 * Note: This only checks shallow equality for props and state. If these contain
 * complex data structures this mixin may have false-negatives for deeper
 * differences. Only mixin to components which have simple props and state, or
 * use `forceUpdate()` when you know deep data structures have changed.
 */
var ReactComponentWithPureRenderMixin = {
  shouldComponentUpdate: function(nextProps, nextState) {
    return !shallowEqual(this.props, nextProps) ||
           !shallowEqual(this.state, nextState);
  }
};

module.exports = ReactComponentWithPureRenderMixin;

},{"./shallowEqual":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/shallowEqual.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactCompositeComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCompositeComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactContext.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactContext.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactContext.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactContext.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactCurrentOwner.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactCurrentOwner.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOM.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOM.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMButton.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMButton.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMButton.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMButton.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMForm.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMForm.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMForm.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMForm.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMIDOperations.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMIDOperations.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMIDOperations.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMIDOperations.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMImg.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMImg.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMImg.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMImg.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMInput.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMInput.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMInput.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMInput.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMOption.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMOption.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMOption.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMOption.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMSelect.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelect.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelect.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelect.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMSelection.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelection.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelection.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMSelection.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDOMTextarea.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMTextarea.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMTextarea.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDOMTextarea.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultBatchingStrategy.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultBatchingStrategy.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultBatchingStrategy.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDefaultInjection.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultInjection.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultInjection.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultInjection.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDefaultPerf.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerf.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerf.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactDefaultPerfAnalysis.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerfAnalysis.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerfAnalysis.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactDefaultPerfAnalysis.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactElement.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElement.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactElementValidator.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElementValidator.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElementValidator.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactElementValidator.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactEmptyComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEmptyComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactErrorUtils.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactErrorUtils.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactErrorUtils.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactErrorUtils.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactEventEmitterMixin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventEmitterMixin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventEmitterMixin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventEmitterMixin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactEventListener.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventListener.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventListener.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactEventListener.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactInjection.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInjection.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInjection.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInjection.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactInputSelection.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInputSelection.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInputSelection.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInputSelection.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactInstanceHandles.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactInstanceHandles.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactLegacyElement.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactLegacyElement.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactMarkupChecksum.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMarkupChecksum.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMarkupChecksum.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMarkupChecksum.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactMount.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMount.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactMultiChild.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChild.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChild.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChild.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChildUpdateTypes.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChildUpdateTypes.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactMultiChildUpdateTypes.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactNativeComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactNativeComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactNativeComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactNativeComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactOwner.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactOwner.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactOwner.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactOwner.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactPerf.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPerf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactPropTransferer.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTransferer.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTransferer.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTransferer.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocationNames.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocationNames.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocationNames.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactPropTypeLocations.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocations.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocations.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypeLocations.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactPropTypes.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypes.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypes.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPropTypes.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactPutListenerQueue.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPutListenerQueue.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPutListenerQueue.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactPutListenerQueue.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactReconcileTransaction.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactReconcileTransaction.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactReconcileTransaction.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactReconcileTransaction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactRootIndex.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactRootIndex.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactRootIndex.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactRootIndex.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactServerRendering.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRendering.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRendering.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRendering.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRenderingTransaction.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRenderingTransaction.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactServerRenderingTransaction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactTextComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactTextComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactTextComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactTextComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ReactUpdates.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ReactUpdates.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SVGDOMPropertyConfig.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SVGDOMPropertyConfig.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SVGDOMPropertyConfig.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SelectEventPlugin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SelectEventPlugin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SelectEventPlugin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SelectEventPlugin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ServerReactRootIndex.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ServerReactRootIndex.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ServerReactRootIndex.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ServerReactRootIndex.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SimpleEventPlugin.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SimpleEventPlugin.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SimpleEventPlugin.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SimpleEventPlugin.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticClipboardEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticClipboardEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticClipboardEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticClipboardEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticCompositionEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticCompositionEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticCompositionEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticCompositionEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticDragEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticDragEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticDragEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticDragEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticFocusEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticFocusEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticFocusEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticFocusEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticInputEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticInputEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticInputEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticInputEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticKeyboardEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticKeyboardEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticKeyboardEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticMouseEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticTouchEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticTouchEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticTouchEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticTouchEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticUIEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticUIEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/SyntheticWheelEvent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticWheelEvent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticWheelEvent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/SyntheticWheelEvent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/Transaction.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/Transaction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/ViewportMetrics.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/ViewportMetrics.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ViewportMetrics.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/ViewportMetrics.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/accumulateInto.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/accumulateInto.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/accumulateInto.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/accumulateInto.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/adler32.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/adler32.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/adler32.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/adler32.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/camelize.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelize.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelize.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelize.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/camelizeStyleName.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelizeStyleName.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelizeStyleName.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/camelizeStyleName.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/containsNode.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/containsNode.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/containsNode.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/containsNode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/createArrayFrom.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/createArrayFrom.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createArrayFrom.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createArrayFrom.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/createFullPageComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/createFullPageComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createFullPageComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createFullPageComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/createNodesFromMarkup.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/createNodesFromMarkup.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createNodesFromMarkup.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/createNodesFromMarkup.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/dangerousStyleValue.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/dangerousStyleValue.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/dangerousStyleValue.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/dangerousStyleValue.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/deprecated.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/deprecated.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/deprecated.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/deprecated.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/emptyFunction.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyFunction.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/emptyObject.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyObject.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyObject.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/emptyObject.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/escapeTextForBrowser.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/escapeTextForBrowser.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/escapeTextForBrowser.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/escapeTextForBrowser.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/flattenChildren.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/flattenChildren.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/flattenChildren.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/flattenChildren.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/focusNode.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/focusNode.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/focusNode.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/focusNode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/forEachAccumulated.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/forEachAccumulated.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/forEachAccumulated.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/forEachAccumulated.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getActiveElement.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getActiveElement.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getActiveElement.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getActiveElement.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getEventCharCode.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventCharCode.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventCharCode.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventCharCode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getEventKey.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventKey.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventKey.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventKey.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getEventModifierState.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventModifierState.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventModifierState.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventModifierState.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getEventTarget.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventTarget.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventTarget.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getEventTarget.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getMarkupWrap.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getMarkupWrap.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getMarkupWrap.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getMarkupWrap.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getNodeForCharacterOffset.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getNodeForCharacterOffset.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getNodeForCharacterOffset.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getNodeForCharacterOffset.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getReactRootElementInContainer.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getReactRootElementInContainer.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getReactRootElementInContainer.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getReactRootElementInContainer.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getTextContentAccessor.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getTextContentAccessor.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getTextContentAccessor.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/getUnboundedScrollPosition.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/getUnboundedScrollPosition.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getUnboundedScrollPosition.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/getUnboundedScrollPosition.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/hyphenate.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenate.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenate.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenate.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/hyphenateStyleName.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenateStyleName.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenateStyleName.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/hyphenateStyleName.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/instantiateReactComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/instantiateReactComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/invariant.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/invariant.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/isEventSupported.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/isEventSupported.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isEventSupported.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isEventSupported.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/isNode.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/isNode.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isNode.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isNode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/isTextInputElement.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextInputElement.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextInputElement.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextInputElement.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/isTextNode.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextNode.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextNode.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/isTextNode.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/joinClasses.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/joinClasses.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/joinClasses.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/joinClasses.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/keyMirror.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyMirror.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/keyOf.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/keyOf.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/mapObject.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/mapObject.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/mapObject.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/mapObject.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/memoizeStringOnly.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/memoizeStringOnly.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/memoizeStringOnly.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/memoizeStringOnly.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/monitorCodeUse.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/monitorCodeUse.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/onlyChild.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/onlyChild.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/onlyChild.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/onlyChild.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/performance.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/performance.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performance.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performance.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/performanceNow.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/performanceNow.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performanceNow.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/performanceNow.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/setInnerHTML.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/setInnerHTML.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/setInnerHTML.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/setInnerHTML.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/shallowEqual.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/shallowEqual.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shallowEqual.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shallowEqual.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/shouldUpdateReactComponent.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/shouldUpdateReactComponent.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shouldUpdateReactComponent.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/shouldUpdateReactComponent.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/toArray.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/toArray.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/toArray.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/toArray.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/traverseAllChildren.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/traverseAllChildren.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/traverseAllChildren.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/traverseAllChildren.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/lib/warning.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js":"/Users/joshua/miniproj/satie/website/node_modules/react/lib/warning.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/react/react.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/react/react.js":"/Users/joshua/miniproj/satie/website/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js":[function(require,module,exports){
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../typings/react/react.d.ts" />
var React = require("react");
var NotImplementedError = (function () {
    function NotImplementedError(methodName) {
        this.name = "NotImplementedError";
        this.message = methodName + " should be implemented by React";
    }
    return NotImplementedError;
})();
exports.NotImplementedError = NotImplementedError;
var Mixin = (function () {
    function Mixin() {
    }
    Mixin.prototype.getDOMNode = function () {
        throw new NotImplementedError("getDomNode");
    };
    Mixin.prototype.setState = function (nextState, callback) {
        throw new NotImplementedError("setState");
    };
    Mixin.prototype.replaceState = function (nextState, callback) {
        throw new NotImplementedError("replaceState");
    };
    Mixin.prototype.forceUpdate = function (callback) {
        throw new NotImplementedError("forceUpdate");
    };
    Mixin.prototype.isMounted = function () {
        throw new NotImplementedError("isMounted");
    };
    Mixin.prototype.setProps = function (nextProps, callback) {
        throw new NotImplementedError("setProps");
    };
    Mixin.prototype.replaceProps = function (nextProps, callback) {
        throw new NotImplementedError("replaceProps");
    };
    return Mixin;
})();
exports.Mixin = Mixin;
var Component = (function (_super) {
    __extends(Component, _super);
    function Component() {
        _super.apply(this, arguments);
    }
    Component.prototype.render = function () {
        return null;
    };
    return Component;
})(Mixin);
exports.Component = Component;
var ILLEGAL_KEYS = {
    constructor: true,
    refs: true,
    props: true,
    state: true,
    getDOMNode: true,
    setState: true,
    replaceState: true,
    forceUpdate: true,
    isMounted: true,
    setProps: true,
    replaceProps: true
};
function extractPrototype(clazz) {
    var proto = {};
    for (var key in clazz.prototype) {
        if (ILLEGAL_KEYS[key] === undefined) {
            proto[key] = clazz.prototype[key];
        }
    }
    return proto;
}
function createMixin(clazz) {
    return extractPrototype(clazz);
}
exports.createMixin = createMixin;
function createClass(clazz, mixins) {
    var spec = extractPrototype(clazz);
    spec.displayName = clazz.prototype.constructor.name;
    if (spec.componentWillMount !== undefined) {
        var componentWillMount = spec.componentWillMount;
        spec.componentWillMount = function () {
            clazz.apply(this);
            componentWillMount.apply(this);
        };
    }
    else {
        spec.componentWillMount = function () {
            clazz.apply(this);
        };
    }
    if (mixins !== undefined && mixins !== null) {
        spec.mixins = mixins;
    }
    return React.createClass(spec);
}
exports.createClass = createClass;

},{"react":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/react/react.js"}],"/Users/joshua/miniproj/satie/website/node_modules/typed-react/dist/index.js":[function(require,module,exports){
module.exports=require("/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js")
},{"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js":"/Users/joshua/miniproj/satie/website/node_modules/satie/node_modules/typed-react/dist/index.js"}]},{},["./.partialBuild/main.js"]);
